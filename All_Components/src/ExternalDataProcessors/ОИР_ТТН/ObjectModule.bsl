Перем ДокОсн;
Перем ДанныеПечати;    
Перем КодЯзыка;
Перем Тонна;
Перем Тееек;    
Перем ТекСтрока;
Перем ТекСтрока1;
Перем ТТНМного;
Функция СведенияОВнешнейОбработке()Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.ТранспортнаяНакладная");
	МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "ОИР ТТН"); 
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Версия", "17.0"); 
	ПараметрыРегистрации.Вставить("Информация", "ОИР ТТН"); 
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ОИР ТТН", "ОИР ТТН", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция Печать1(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипДокументов = ТипЗнч(МассивОбъектов[0]);
	
	Если ТипДокументов <> Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 
		СтруктураВозврата = ПолучитьТранспортныеНакладныеНаПечать(МассивОбъектов);
		МассивНакладныхНаПечать = СтруктураВозврата.ТранспортныеНакладныеНаПечать;
		
		Для Каждого Документ Из СтруктураВозврата.МассивДокументовБезНакладных Цикл
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не создана ""Транспортная накладная"". Печать документа ""Товарно-транспортная накладная"" невозможна.'"),
			Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Документ)
			
		КонецЦикла
		
	Иначе
		МассивНакладныхНаПечать = МассивОбъектов;	
	КонецЕсли;
	
	ТаблицаНакладныхНаПечать = Новый ТаблицаЗначений;
	ОписаниеТипаТранспортнаяНакладная = Новый ОписаниеТипов("ДокументСсылка.ТранспортнаяНакладная");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ТранспортнаяНакладная", ОписаниеТипаТранспортнаяНакладная);
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ПорядковыйНомер", ОписаниеТипаЧисло);
	
	ПорядковыйНомер = 0;
	Для Каждого Накладная Из МассивНакладныхНаПечать Цикл 
		СтрокаТаблицы = ТаблицаНакладныхНаПечать.Добавить();	
		СтрокаТаблицы.ТранспортнаяНакладная = Накладная;
		СтрокаТаблицы.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер  + 1;
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДанныеДляПечати = ПодготовитьПечатьТТНиТН(МенеджерВременныхТаблиц,МассивНакладныхНаПечать);
	
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда 
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабличныйДокумент;
	КонецЕсли;
	
	ЗаполнитьТабличныйДокументТТН(
	ТабличныйДокумент,
	ДанныеДляПечати,
	ОбъектыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//{{MRG[ <-> ]
Функция  Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТипДокументов = ТипЗнч(МассивОбъектов[0]);
	Если ТипДокументов <> Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 
		СтруктураВозврата = ПолучитьТранспортныеНакладныеНаПечать(МассивОбъектов);
		МассивНакладныхНаПечать = СтруктураВозврата.ТранспортныеНакладныеНаПечать;
		
		Для Каждого Документ Из СтруктураВозврата.МассивДокументовБезНакладных Цикл
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не создана ""Транспортная накладная"". Печать документа ""Товарно-транспортная накладная"" невозможна.'"),
			Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Документ)
			
		КонецЦикла
		
	Иначе
		МассивНакладныхНаПечать = МассивОбъектов;	
	КонецЕсли;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	ТабличныйДокумент = СформироватьПечатнуюФормуТТН( МассивОбъектов, ОбъектыПечати, Неопределено );
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда 
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабличныйДокумент;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуТранспортнойНакладной(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТРАНСПОРТНАЯ_НАКЛАДНАЯ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТипыОбъектов = ПодготовитьПечатьТТНиТН(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Если ТипыОбъектов.Количество() = 0 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	#Область ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладная
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстыЗапросаВыборкиИзДокументовОснований = Новый Массив;
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта        = КлючЗначение.Ключ; 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		ПолноеИмяОснования = МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		ПараметрыФормированияТранспортныхНакладных = МодульЛокализации.ПараметрыФормированияТранспортныхНакладных();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыОснования.ТранспортнаяНакладная КАК Ссылка,
		|	ДокументыОснования.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ВЫБОР
		|		КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
		|			ТОГДА ЕСТЬNULL(ДокументТовары.Номенклатура.ВидНоменклатуры.НаименованиеДляПечати, """")
		|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
		|	КОНЕЦ КАК НаименованиеВидаНоменклатуры
		|ИЗ
		|	ПолноеИмяТаблицы_ КАК ДокументТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТранспортныхНакладных КАК ДокументыОснования
		|		ПО (ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка)
		|ГДЕ
		|	ДокументТовары.Ссылка В (&ДокументыОснованияИмяТаблицы_)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолноеИмяТаблицы_", ПолноеИмяОснования + ".Товары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы_", Метаданные.Имя);
		Запрос.УстановитьПараметр("ДокументыОснования" + Метаданные.Имя, КлючЗначение.Значение);
		
		ТекстыЗапросаВыборкиИзДокументовОснований.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК Ссылка,
	|	ВЫБОР КОГДА РеестрДокументов.ИсправляемыйДокумент ЕСТЬ NULL ТОГДА
	|		ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Номер
	|	ИНАЧЕ
	|		РеестрДокументов.ИсправляемыйДокумент.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА РеестрДокументов.ИсправляемыйДокумент ЕСТЬ NULL ТОГДА
	|		ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Дата
	|	ИНАЧЕ
	|		РеестрДокументов.ИсправляемыйДокумент.Дата
	|	КОНЕЦ КАК Дата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация КАК Организация,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузоотправитель КАК Грузоотправитель,	
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаказчикПеревозки КАК ЗаказчикПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетЗаказчикаПеревозки КАК БанковскийСчетЗаказчикаПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Отпустил КАК Кладовщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Плательщик КАК Плательщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетПлательщика КАК БанковскийСчетПлательщика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Перевозчик КАК Перевозчик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Водитель КАК Водитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильМарка КАК МаркаАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК ГосНомерАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресПогрузки КАК ПунктПогрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресДоставки КАК ПунктРазгрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.СрокДоставки КАК СрокДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК ГрузоподъемностьВТоннахАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК ВместимостьВКубическихМетрахАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильТип КАК ТипАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаБрутто КАК МассаБрутто,
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ТаблицаТранспортныхНакладных.ТранспортнаяНакладная = РеестрДокументов.Ссылка
	|			И РеестрДокументов.СторноИсправление
	|			И НЕ РеестрДокументов.ДополнительнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВнутреннийЗапрос.Ссылка,
	|	ВнутреннийЗапрос.ПорядковыйНомер,
	|	ВнутреннийЗапрос.НаименованиеВидаНоменклатуры
	|ИЗ
	|	(&ТекстЗапросаВыборкиИзДокументовОснований) КАК ВнутреннийЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннийЗапрос.ПорядковыйНомер,
	|	ВнутреннийЗапрос.НаименованиеВидаНоменклатуры";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВыборкиИзДокументовОснований",
	СтрСоединить(ТекстыЗапросаВыборкиИзДокументовОснований, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НаименованиеДляПечатиВидовНоменклатуры", Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ТаблицаРезультата", РезультатЗапроса[0].Выгрузить());
	ДанныеДляПечати.Вставить("РезультатИменаТоваров", РезультатЗапроса[1]);
	
	#КонецОбласти		
	
	ЗаполнитьТабличныйДокументТН(
	ТабличныйДокумент,
	ДанныеДляПечати,
	ОбъектыПечати,
	КомплектыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументТН(ТабличныйДокумент, СтруктураДанных, ОбъектыПечати, КомплектыПечати)
	
	Макет = ПолучитьМакет("ПФ_MXL_ТТН_ru2");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка; 
	Макет = ПолучитьМакет("ПФ_MXL_ТТН_en");
	Макет = ПолучитьМакет("ПФ_MXL_ТТН_ar");
	Макет = ПолучитьМакет("ПФ_MXL_ТТН_tur");
	
	ТаблицаДанныхДляПечати = СтруктураДанных.ТаблицаРезультата;
	ДанныеСсылкиДокументов = СтруктураДанных.РезультатИменаТоваров.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ТаблицаДанныхДляПечати Цикл
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
		
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
		СведенияОПеревозчике      = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата);
		СведенияОВодителе         = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		
		ПредставлениеГрузоотправителя = "";
		ПредставлениеПеревозчика      = "";
		ПредставлениеПеревозчика16_7  = "";
		Перевозчик                    = "";
		Грузоотправитель              = "";
		
		РеквизитыМакета = Новый Структура; 
		Если КодЯзыка = "ru" Тогда
			РеквизитыМакета.Вставить("Пункт0_4", ДанныеПечати.Дата);    
		Иначе
			РеквизитыМакета.Вставить("Пункт0_4", Формат(ДанныеПечати.Дата, "Л=en; ДЛФ=ДД"));
		КонецЕсли;
		РеквизитыМакета.Вставить("Пункт0_5", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда 
			Если СведенияОГрузополучателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				Или СведенияОГрузополучателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				РеквизитыМакета.Вставить("Пункт2_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
				"ПолноеНаименование,ИНН,ЮридическийАдрес"));
			Иначе
				РеквизитыМакета.Вставить("Пункт2_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
				"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда 
			Если СведенияОГрузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				Или СведенияОГрузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
				"ПолноеНаименование,ИНН,ЮридическийАдрес");
				РеквизитыМакета.Вставить("Пункт1_1", ПредставлениеГрузоотправителя);
				Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
			Иначе
				ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
				"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
				РеквизитыМакета.Вставить("Пункт1_2", ПредставлениеГрузоотправителя);
				Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
			КонецЕсли;
		КонецЕсли;
		
		
		СтруктураПоиска = Новый Структура("ПорядковыйНомер", ДанныеПечати.ПорядковыйНомер);
		
		ИменаТоваров = "";
		Пока ДанныеСсылкиДокументов.НайтиСледующий(СтруктураПоиска) Цикл								
			ИменаТоваров = ИменаТоваров + ДанныеСсылкиДокументов.НаименованиеВидаНоменклатуры + ", ";
		КонецЦикла;			
		
		Если СтрДлина(ИменаТоваров) >= 2 Тогда
			ИменаТоваров = Лев(ИменаТоваров, СтрДлина(ИменаТоваров) - 2);
		КонецЕсли;
		ТвойАдрис = "";
		Для Каждого Стр Из ДокОсн.Организация.КонтактнаяИнформация Цикл
			Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
				ТвойАдрис = Стр.Представление;
			КонецЕсли;
		КонецЦикла;
		РеквизитыМакета.Вставить("Пункт3_1", ИменаТоваров);
		РеквизитыМакета.Вставить("Пункт6_1", ДанныеПечати.ПунктПогрузки);
		РеквизитыМакета.Вставить("Пункт7_1", ДанныеПечати.ПунктРазгрузки);		
		МассаБруттоСтрока = НСтр("ru = '%МассаБрутто% кг'; en = '%МассаБрутто% kg'", КодЯзыка);
		МассаБруттоСтрока = СтрЗаменить(МассаБруттоСтрока, "%МассаБрутто%", ДанныеПечати.МассаБрутто);
		
		РеквизитыМакета.Вставить("Пункт6_5", МассаБруттоСтрока);
		
		ОбластьМакета.Параметры.Заполнить(РеквизитыМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		РеквизитыМакета.Очистить();
		Если ЗначениеЗаполнено(ДанныеПечати.Перевозчик) Тогда 
			Если СведенияОПеревозчике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				Или СведенияОПеревозчике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				ПредставлениеПеревозчика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, %3, %4'; ar = '%2, %3, %4'; Tur = '%2, %3, %4'", КодЯзыка),                                                     
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
				"ПолноеНаименование,ФактическийАдрес,Телефоны"),
				ДанныеПечати.Организация.НаименованиеМеждународное, ТвойАдрис, СведенияОГрузоотправитель.Телефоны );                     
				РеквизитыМакета.Вставить("Пункт10_1", ПредставлениеПеревозчика);
			Иначе
				ПредставлениеПеревозчика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, INN %3, %4'; ar = '%2, INN %3, %4'; Tur = '%2, INN %3, %4'", КодЯзыка), 
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
				"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны"),
				ДанныеПечати.Организация.НаименованиеМеждународное, СведенияОГрузоотправитель.ИНН , ТвойАдрис, СведенияОГрузоотправитель.Телефоны);
				
				РеквизитыМакета.Вставить("Пункт10_2", ПредставлениеПеревозчика);
			КонецЕсли;
			Перевозчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование");
			ПредставлениеПеревозчика16_7 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование,ИНН,ЮридическийАдрес");
		КонецЕсли;
		
		ПредставлениеВодителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		
		РеквизитыМакета.Вставить("Пункт10_3", ПредставлениеВодителя);
		
		ГрузоподъемностьВТоннахАвтомобиля      = Формат(ДанныеПечати.ГрузоподъемностьВТоннахАвтомобиля,"");
		ВместимостьВКубическихМетрахАвтомобиля = Формат(ДанныеПечати.ВместимостьВКубическихМетрахАвтомобиля,"");
		
		ИнформацияОбАвтомобиле = ""
		+ ?(ПустаяСтрока(ДанныеПечати.ТипАвтомобиля),"",Строка(ДанныеПечати.ТипАвтомобиля) + ", ")
		+ ?(ПустаяСтрока(ДанныеПечати.МаркаАвтомобиля),"",ДанныеПечати.МаркаАвтомобиля  + ", ")
		+ ?(ПустаяСтрока(ГрузоподъемностьВТоннахАвтомобиля),"",ГрузоподъемностьВТоннахАвтомобиля + " " + НСтр("ru = 'т'")  + ", ")
		+ ?(ПустаяСтрока(ВместимостьВКубическихМетрахАвтомобиля),"",ВместимостьВКубическихМетрахАвтомобиля + " " + НСтр("ru = 'куб. м'"));
		
		ИнформацияОбАвтомобиле = СокрЛП(ИнформацияОбАвтомобиле);
		
		Пока Прав(ИнформацияОбАвтомобиле,1) = "," Цикл
			ИнформацияОбАвтомобиле = Лев(ИнформацияОбАвтомобиле, СтрДлина(ИнформацияОбАвтомобиле)-1)
		КонецЦикла;
		
		ОтветственноеЛицо = СтрШаблон(НСтр("ru = '%1 %2'"), ДанныеПечати.ДолжностьКладовщика, ДанныеПечати.Кладовщик);
		
		РеквизитыМакета.Вставить("Пункт11_1", ИнформацияОбАвтомобиле);
		РеквизитыМакета.Вставить("Пункт11_2", ДанныеПечати.ГосНомерАвтомобиля);
		
		СведенияОПлательщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Плательщик, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетПлательщика);
		
		РеквизитыМакета.Вставить("Пункт15_6", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		
		РеквизитыМакета.Вставить("Пункт16_1", Грузоотправитель);
		РеквизитыМакета.Вставить("Пункт16_2", Перевозчик);
		РеквизитыМакета.Вставить("Пункт16_7", ПредставлениеПеревозчика16_7);
		РеквизитыМакета.Вставить("Пункт16_3", ОтветственноеЛицо);
		
		РеквизитыМакета.Вставить("Пункт16_11", ДанныеПечати.Дата);
		РеквизитыМакета.Вставить("Пункт16_21", ДанныеПечати.Дата);
		
		ОбластьМакетаОборотная.Параметры.Заполнить(РеквизитыМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры


Функция СформироватьПечатнуюФормуТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТипыОбъектов = ПодготовитьПечатьТТНиТН(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Если ТипыОбъектов.Количество() = 0 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	#Область ПолучитьДанныеДляПечатнойФормыТТН
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта        = КлючЗначение.Ключ; 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		ПолноеИмяОснования = МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		ПараметрыФормированияТранспортныхНакладных = МодульЛокализации.ПараметрыФормированияТранспортныхНакладных();
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Проведен КАК Проведен,"
		+	ТекстВыборкиРеквизитов("ДанныеДокументов", ПараметрыФормированияТранспортныхНакладных.РеквизитыШапкиДляПечати, Истина) + " 
		|ПОМЕСТИТЬ ТаблицаДанныхДокументов
		|ИЗ
		|	&ПолноеИмяДокумента КАК ДанныеДокументов
		|ГДЕ
		|	ДанныеДокументов.Ссылка В (&ДокументыОснования)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяДокумента", ПолноеИмяОснования);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДокументыОснования", КлючЗначение.Значение);
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
		ПараметрыЗаполнения.ПересчитыватьВВалютуРегл         = Истина;
		ПараметрыЗаполнения.ОбработатьНастройкиПечатиНаборов = Истина;
		
		МодульЛокализации.ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
		
		Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаДанныхДокументов";
		Запрос.Выполнить();
		
	КонецЦикла;
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);	
	ПродажиСервер.ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаТоваров.Номенклатура) КАК Количество,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|ПОМЕСТИТЬ КоличествоТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|		ПО (ТаблицаТранспортныхНакладных.ДокументОснование = ТаблицаТоваров.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК Ссылка,
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Номер КАК Номер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Дата КАК Дата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация КАК Организация,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузоотправитель КАК Грузоотправитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Плательщик КАК Плательщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаказчикПеревозки КАК ЗаказчикПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация.Префикс КАК Префикс,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Отпустил КАК Кладовщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительНаименование, """") КАК СТРОКА(500)) КАК Руководитель,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительДолжность, """") КАК СТРОКА(500)) КАК ДолжностьРуководителя,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование, """") КАК СТРОКА(500)) КАК ГлавныйБухгалтер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетПлательщика КАК БанковскийСчетПлательщика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетЗаказчикаПеревозки КАК БанковскийСчетЗаказчикаПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетПеревозчика КАК БанковскийСчетПеревозчика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Перевозчик КАК Перевозчик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Водитель КАК Водитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильМарка КАК МаркаАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК ГосНомерАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Прицеп КАК Прицеп,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ГосударственныйНомерПрицепа КАК ГосНомерПрицепа,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ВЫБОР
	|		КОГДА ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав)
	|			ТОГДА ЕСТЬNULL(ТаблицаТранспортныхНакладных.ДокументОснование.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК Валюта,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресПогрузки КАК ПунктПогрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресДоставки КАК ПунктРазгрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.СрокДоставки КАК СрокДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаБрутто КАК МассаБрутто,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаНетто КАК МассаНетто,
	|	ВЫБОР
	|		КОГДА ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав)
	|			ТОГДА ЕСТЬNULL(КоличествоТоваров.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоНаименований,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе КАК ВыводДанныхОТоварномСоставе,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.УдостоверениеНомер КАК УдостоверениеНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.УдостоверениеСерия КАК УдостоверениеСерия
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоТоваров КАК КоличествоТоваров
	|		ПО ТаблицаТранспортныхНакладных.ТранспортнаяНакладная = КоличествоТоваров.ТранспортнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ТаблицаТранспортныхНакладных.ТранспортнаяНакладная = ТаблицаОтветственныеЛица.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная,
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Номер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Дата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузополучатель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузоотправитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Плательщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаказчикПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация.Префикс,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Отпустил,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ОтпустилДолжность,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительНаименование, """") КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительДолжность, """") КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование, """") КАК СТРОКА(500)),
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетПлательщика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетЗаказчикаПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.БанковскийСчетПеревозчика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Перевозчик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Водитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВидПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЛицензионнаяКарточкаВид,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильМарка,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГосударственныйНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Прицеп,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ГосударственныйНомерПрицепа,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьДата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьВыдана,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ДоверенностьЛицо,
	|	ВЫБОР
	|		КОГДА ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав)
	|			ТОГДА ЕСТЬNULL(ТаблицаТранспортныхНакладных.ДокументОснование.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресПогрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.СрокДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаБрутто,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаНетто,
	|	ВЫБОР
	|		КОГДА ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав)
	|			ТОГДА ЕСТЬNULL(КоличествоТоваров.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаданиеНаПеревозку,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.УдостоверениеНомер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.УдостоверениеСерия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТаблицаТранспортныхНакладных.НомерСтрокиВТранспортнойНакладной КАК НомерСтрокиВТранспортнойНакладной,
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТоваров.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТоваров.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА &ТекстЗапросаНаименованиеЕдиницыИзмерения1
	|		ИНАЧЕ &ТекстЗапросаНаименованиеЕдиницыИзмерения2
	|	КОНЕЦ КАК ВидУпаковки,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ &ТекстЗапросаНаименованиеЕдиницыИзмерения1
	|	КОНЕЦ КАК БазоваяЕдиницаНаименование,
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ТаблицаТоваров.КоличествоУпаковок = 0
	|						ТОГДА ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.КоличествоУпаковок
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ТаблицаТоваров.Количество = 0
	|					ТОГДА ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Упаковка.Вес ЕСТЬ NULL
	|			ТОГДА ТаблицаТоваров.Количество
	|		ИНАЧЕ ТаблицаТоваров.КоличествоУпаковок
	|	КОНЕЦ * &ТекстЗапросаВесУпаковки КАК МассаБрутто,
	|	ТаблицаТоваров.Количество * &ТекстЗапросаВесНоменклатуры1 КАК МассаНетто,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТоваров.Количество / КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|	КОНЕЦ КАК КоличествоМест,
	|	ТаблицаТоваров.СуммаБезНДС КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	&ТекстЗапросаВесНоменклатуры2 / 1000 КАК КоэффициентПересчетаВТонны,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				ИЛИ ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					И ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой,
	|	ТаблицаТоваров.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара,
	|	ТаблицаТоваров.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ТаблицаТоваров.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ТаблицаТоваров.ЭтоКомплектующие КАК ЭтоКомплектующие,
	|	ТаблицаТоваров.НомерСтрокиНаборы КАК НомерСтрокиНаборы,
	|	ТаблицаТоваров.ПолныйНабор КАК ПолныйНабор,
	|	ТаблицаТоваров.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаТоваров.Упаковка КАК УпаковкаНовая
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|		ПО (ТаблицаТранспортныхНакладных.ДокументОснование = ТаблицаТоваров.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыУпаковок КАК КоэффициентыУпаковок
	|		ПО ТаблицаТоваров.Номенклатура = КоэффициентыУпаковок.Номенклатура
	|			И ТаблицаТоваров.Упаковка = КоэффициентыУпаковок.Упаковка
	|			И ТаблицаТоваров.Ссылка = КоэффициентыУпаковок.Ссылка
	|			И ТаблицаТоваров.НомерСтроки = КоэффициентыУпаковок.НомерСтроки
	|			И ТаблицаТоваров.КоличествоУпаковок = КоэффициентыУпаковок.КоличествоУпаковок
	|			И (НЕ &ВыводитьБазовыеЕдиницыИзмерения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтрокиНаборы,
	|	ЭтоНабор УБЫВ,
	|	ПорядковыйНомер,
	|	ТранспортнаяНакладная,
	|	НомерСтрокиВТранспортнойНакладной,
	|	НомерСтроки
	|ИТОГИ ПО
	|	ПорядковыйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаТранспортныхНакладных.ДокументОснование КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.ИсправляемыйДокумент ЕСТЬ NULL
	|			ТОГДА ТаблицаТранспортныхНакладных.ДокументОснование.Номер
	|		ИНАЧЕ РеестрДокументов.ИсправляемыйДокумент.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.ИсправляемыйДокумент ЕСТЬ NULL
	|			ТОГДА ТаблицаТранспортныхНакладных.ДокументОснование.Дата
	|		ИНАЧЕ РеестрДокументов.ИсправляемыйДокумент.Дата
	|	КОНЕЦ КАК Дата
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ТаблицаТранспортныхНакладных.ДокументОснование = РеестрДокументов.Ссылка
	|			И (РеестрДокументов.СторноИсправление)
	|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
	|ГДЕ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВыводДанныхОТоварномСоставе = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаДанныхОТоварномСоставе.НомераНакладных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер,
	|	ТранспортнаяНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоТоваров";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ТаблицаТоваров.Упаковка",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесУпаковки",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
	"ТаблицаТоваров.Упаковка",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесНоменклатуры1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
	"ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесНоменклатуры2",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
	"ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(
	Запрос.Текст,
	"&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	"Наименование",
	"ТаблицаТоваров.Упаковка",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(
	Запрос.Текст,
	"&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	"Наименование",
	"КоэффициентыУпаковок.ВидУпаковки",
	"ТаблицаТоваров.Номенклатура"));
	
	Запрос.УстановитьПараметр("ЗаполненаЕдиницаИзмеренияВеса",   ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()));
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов         	   = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	РезультатПоШапке          	   = МассивРезультатов[1];
	РезультатПоТабличнойЧасти	   = МассивРезультатов[2];
	РезультатПоНомерамНакладных    = МассивРезультатов[3];
	
	
	ДанныеДляПечати = Новый Структура(
	"РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоНомерамНакладных",
	РезультатПоШапке,
	РезультатПоТабличнойЧасти,
	РезультатПоНомерамНакладных);
	
	#КонецОбласти
	
	ЗаполнитьТабличныйДокументТТН(
	ТабличныйДокумент,
	ДанныеДляПечати,
	ОбъектыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Функция ОписаниеВодительскогоУдостоверения(Серия, Номер)
	
	ПредставлениеУдостоверения = "";
	Если Не ПустаяСтрока(Серия) Тогда
		ПредставлениеУдостоверения = СокрЛП(Серия) + ", ";
	КонецЕсли;
	
	ПредставлениеУдостоверения = ПредставлениеУдостоверения + Номер;
	
	Возврат ПредставлениеУдостоверения;
	
КонецФункции

Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

Функция СтруктураДанныеСтрокиТТН()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()



Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки, ТЗТТН = Неопределено, Номенклатура = Неопределено, СтрокаТовары = Неопределено, ДанныеПечати)
	Если Тееек.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%") ИЛИ Тееек.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС") Тогда
		НДСка = 1;
	Иначе
		НДСка = (1+(СтрЗаменить(Тееек.СтавкаНДС,"%","")/100));
	КонецЕсли;
	ЧислоКоличество = ?(Тонна, ТекСтрока.КОличество, ТекСтрока.Количество / 1000);
	ПАРАМ = Новый Структура;
	ПАРАМ.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	ПАРАМ.Вставить("Сумма", СтрокаТовары.Сумма);
	ПАРАМ.Вставить("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
	ТекСтрока1 = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары.НайтиСтроки(ПАРАМ); 
	Если Не ТТНМного И Строка(СтрокаТовары.Номенклатура.ЕдиницаИзмерения) = "шт" ИЛИ Строка(СтрокаТовары.Номенклатура.ЕдиницаИзмерения) = "м" Тогда
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ОкрВверх(СтрокаТовары.Количество); 
	Иначе
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ОкрВверх(ДанныеСтроки.Количество); 
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СтрокаТовары.КоличествоФакт) Тогда                                                   
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + СтрокаТовары.Количество;	
	Иначе	
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	КонецЕсли;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ?(Тонна, ДанныеСтроки.Количество, ДанныеСтроки.Количество / 1000);
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ?(Тонна, ДанныеСтроки.Количество, ДанныеСтроки.Количество / 1000);
	Если  ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.ЦенаВключаетНДС Тогда
		СНДСЦена = Окр((ТекСтрока1[0].Цена),2,1);
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		СНДССумма	= Окр((СНДСЦена * ТекСтрока1[0].Количество),2,1);	        													
		Иначе
		СНДССумма	= Окр((СНДСЦена * ДанныеСтроки.Количество),2,1);	        													
		КонецЕсли;
		ИтоговыеСуммы.ИтогоСуммаНаСтранице = ИтоговыеСуммы.ИтогоСуммаНаСтранице +  СНДССумма;
	Иначе 	
		БезНДСЦена = Окр((ТекСтрока1[0].Цена),2,1); 
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		БезНДССумма	= Окр((БезНДСЦена * ТекСтрока1[0].Количество),2,1);
		Иначе
		БезНДССумма	= Окр((БезНДСЦена * ДанныеСтроки.Количество),2,1);
		КонецЕсли;		
		ИтоговыеСуммы.ИтогоСуммаНаСтранице = ИтоговыеСуммы.ИтогоСуммаНаСтранице +  Окр((БезНДССумма * НДСка),2,1);	                                                        
	КонецЕсли;
	//РасчетUSD
	Если ДокОсн.Договор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("USD") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СуммыДокументовВВалютахУчета.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
		|	СуммыДокументовВВалютахУчета.СуммаНДСРегл КАК СуммаНДСРегл
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
		|ГДЕ
		|	СуммыДокументовВВалютахУчета.Регистратор = &Регистратор
		|	И СуммыДокументовВВалютахУчета.НомерСтроки = &НомерСтроки";
		Запрос.УстановитьПараметр("Регистратор", ДокОсн);
		Запрос.УстановитьПараметр("НомерСтроки", ТекСтрока.НомерСтроки);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл      
			СНДССумма   = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл + ВыборкаДетальныеЗаписи.СуммаНДСРегл;
			СНДСЦена = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл/ТекСтрока.Количество; 
		КонецЦикла; 
		ИтоговыеСуммы.ИтогоСуммаНаСтранице = ИтоговыеСуммы.ИтогоСуммаНаСтранице + СНДССумма;
	КонецЕсли;
   //КонецРасчетаUSD	
   
   
   //Документ
	Если Не ТТНМного И Строка(СтрокаТовары.Номенклатура.ЕдиницаИзмерения) = "шт" ИЛИ Строка(СтрокаТовары.Номенклатура.ЕдиницаИзмерения) = "м" Тогда
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ОкрВверх(СтрокаТовары.Количество);
	Иначе
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ОкрВверх(ДанныеСтроки.Количество);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТовары.КоличествоФакт) Тогда
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + СтрокаТовары.Количество;
	Иначе
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	КонецЕсли;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ?(Тонна, ДанныеСтроки.Количество, ДанныеСтроки.Количество / 1000);
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ?(Тонна, ДанныеСтроки.Количество, ДанныеСтроки.Количество / 1000);
	Если ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.ЦенаВключаетНДС Тогда
		СНДСЦена = Окр((ТекСтрока1[0].Цена),2,1);
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		СНДССумма	= Окр((СНДСЦена * ТекСтрока1[0].Количество),2,1);
		Иначе    
		СНДССумма	= Окр((СНДСЦена * ДанныеСтроки.Количество),2,1);
		КонецЕсли;	
		ИтоговыеСуммы.ИтогоСумма = ИтоговыеСуммы.ИтогоСумма + СНДССумма;
	Иначе
		БезНДСЦена = Окр((ТекСтрока1[0].Цена),2,1);
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		БезНДССумма	= Окр((БезНДСЦена * ТекСтрока1[0].Количество),2,1);
		Иначе
		БезНДССумма	= Окр((БезНДСЦена * ДанныеСтроки.Количество),2,1);	
		КонецЕсли;	
		ИтоговыеСуммы.ИтогоСумма = ИтоговыеСуммы.ИтогоСумма +  Окр((БезНДССумма * НДСка),2,1);	                                                        					
	КонецЕсли;
	//РасчетUSD
	Если ДокОсн.Договор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("USD") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СуммыДокументовВВалютахУчета.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
		|	СуммыДокументовВВалютахУчета.СуммаНДСРегл КАК СуммаНДСРегл
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
		|ГДЕ
		|	СуммыДокументовВВалютахУчета.Регистратор = &Регистратор
		|	И СуммыДокументовВВалютахУчета.НомерСтроки = &НомерСтроки";
		Запрос.УстановитьПараметр("Регистратор", ДокОсн);
		Запрос.УстановитьПараметр("НомерСтроки", ТекСтрока.НомерСтроки);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл      
			СНДССумма   = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл + ВыборкаДетальныеЗаписи.СуммаНДСРегл;
			СНДСЦена = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл/ТекСтрока.Количество; 
		КонецЦикла; 
		ИтоговыеСуммы.ИтогоСумма = ИтоговыеСуммы.ИтогоСуммаНаСтранице + СНДССумма;
	КонецЕсли;
   //КонецРасчетаUSD	
	
КонецПроцедуры 

Процедура Округление (ИтоговыеСуммы)
	Округление = ИтоговыеСуммы.ТекущиеДанные;
	Округление.ИтогоСумма = Окр(Округление.ИтоговыеСуммы,6,6);
	Округление.ИтогоСуммаНаСтранице = Окр(Округление.ИтоговыеСуммы,6,6);
КонецПроцедуры

Процедура ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	Если КодЯзыка = "ru" Тогда
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма, ВалютаРегламентированногоУчета));
	Иначе
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, "Л=en; ЧЦ=1; ЧН=Пусто" ));
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма, ВалютаРегламентированногоУчета,,КодЯзыка));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвалаТТНДляНесколькихНакладных(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	Если КодЯзыка = "ru" Тогда
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма, ВалютаРегламентированногоУчета));
	Иначе
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров,"Л=en",));
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма, ВалютаРегламентированногоУчета,,КодЯзыка));
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0, ТЗТТН = Неопределено,
	НомирСтроки)
	
	ДанныеДляРасчетаПостфикса = Новый Структура("ЭтоКомплектующие, ЭтоНабор, ПолныйНабор, 
	|ВариантПредставленияНабораВПечатныхФормах, ВариантРасчетаЦеныНабора, Количество");
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаПостфикса, СтрокаТовары);
	
	ДанныеДляРасчетаПостфикса.Вставить("ЕдиницаИзмерения", СтрокаТовары.Номенклатура.ЕдиницаИзмерения);
	ПАРАМ = Новый Структура;
	ПАРАМ.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	ПАРАМ.Вставить("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
	
	ТекСтрока1 = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары.НайтиСтроки(ПАРАМ);
	Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		Тонна = ТекСтрока1[0].ЕдИзмФакт = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("т", Истина);
	Иначе
	Если ЗначениеЗаполнено(ТекСтрока1[0].Упаковка) Тогда
		Тонна = ТекСтрока1[0].Упаковка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("т", Истина);
	Иначе
		Тонна = ТекСтрока1[0].Номенклатура.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("т", Истина);
	КонецЕсли;	
	КонецЕсли;	
	Если ТекСтрока1.Количество() Тогда
		СтрокаТовары = ТекСтрока1[0];     
	КонецЕсли;
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();	
	
	ОбластьМакета.Параметры.ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
	СтрокаТовары.Номенклатура.Наименование,
	СтрокаТовары.Характеристика,
	,
	,
	ДополнительныеПараметрыПолученияНаименованияДляПечати);
	
	ИспользоватьНаборы = Ложь;
	
	
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(ДанныеДляРасчетаПостфикса, ИспользоватьНаборы);
	
	ВыводитьЦены = Ложь;
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	Иначе
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ВыводитьЦены = Истина;
	КонецЕсли;   
	ТекСтрока = ДанныеПечати.Ссылка.НоменклатураРеализаций[НомирСтроки];    
	Если КодЯзыка = "ru" Тогда
		ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(ТекСтрока.Номенклатура.Наименование),
		СтрокаТовары.Характеристика,
		,
		,
		ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс; 
	КонецЕсли;
	Если КодЯзыка = "en" Тогда
		ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(ТекСтрока.Номенклатура.НаименованиеЯзык1),
		СтрокаТовары.Характеристика,
		,
		,
		ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс; 
	КонецЕсли;
	Если КодЯзыка = "ar" Тогда
		ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(ТекСтрока.Номенклатура.НаименованиеЯзык2),
		СтрокаТовары.Характеристика,
		,
		,
		ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс; 
	КонецЕсли;
	Если КодЯзыка = "tur" Тогда 
	Для Каждого Стр Из ТекСтрока.Номенклатура.Представления Цикл
		Если Стр.КодЯзыка = "tr" Тогда
			ББ = Стр.Наименование;
		КонецЕсли;
	КонецЦикла;
		ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(ББ),
		СтрокаТовары.Характеристика,
		,
		,
		ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс; 
	КонецЕсли;

	
	ОбластьМакета.Параметры.ТоварНаименование = ПредставлениеНоменклатуры;
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.МассаБрутто = 0;
			ДанныеСтроки.МассаНетто = 0;
		Иначе
			ДанныеСтроки.МассаБрутто = ДанныеПечати.Ссылка.МассаБрутто;
			ДанныеСтроки.МассаНетто = ДанныеПечати.Ссылка.МассаНетто;
		КонецЕсли;
	КонецЕсли;    
	
	Если Тееек.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("0%") ИЛИ Тееек.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС") Тогда
		НДСка = 1;
	Иначе
		НДСка = (1+(СтрЗаменить(Тееек.СтавкаНДС,"%","")/100));
	КонецЕсли;
	ТекСтрока1 = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
	Если ТекСтрока1.Количество() Тогда
		Если ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.ЦенаВключаетНДС Тогда                                   
			ОбластьМакета.Параметры.Цена = ТекСтрока1[0].Цена 
		Иначе   
			ОбластьМакета.Параметры.Цена = Окр((ТекСтрока1[0].Цена * НДСка),2,1)                                         
		КонецЕсли; 
	КонецЕсли;
	
	ДанныеСтроки.Количество = ТекСтрока.Количество;
	
	Если ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.ЦенаВключаетНДС Тогда
		СНДСЦена = Окр((ТекСтрока1[0].Цена),2,1);
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		СНДССумма	= Окр((СНДСЦена * ТекСтрока1[0].Количество),2,1);
		Иначе
		СНДССумма	= Окр((СНДСЦена * ТекСтрока.Количество),2,1);
		КонецЕсли;
		ОбластьМакета.Параметры.Сумма = СНДССумма;                                               					
	Иначе 	                                                                                                   
		БезНДСЦена = Окр(ТекСтрока1[0].Цена,2,1);
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		БезНДССумма	= Окр((БезНДСЦена * ТекСтрока1[0].Количество),2,1);
		Иначе
		БезНДССумма	= Окр((БезНДСЦена * ТекСтрока.Количество),2,1);
		КонецЕсли;
		ОбластьМакета.Параметры.Сумма = Окр((БезНДССумма * НДСка),2,1);                                               
	КонецЕсли;
	
	ПОпытка                                                    
		Если ЗначениеЗаполнено(ТекСтрока1[0].КоличествоФакт) Тогда
		ОбластьМакета.Параметры.Количество = ТекСтрока1[0].Количество;
		Иначе
		ОбластьМакета.Параметры.Количество = ТекСтрока.Количество;			
		КонецЕсли;
		Если Не ТТНМного И Строка(ТекСтрока1[0].Номенклатура.ЕдиницаИзмерения) = "шт" ИЛИ Строка(ТекСтрока1[0].Номенклатура.ЕдиницаИзмерения) = "м" Тогда
		ОбластьМакета.Параметры.КоличествоМест = ОкрВверх(ТекСтрока1[0].Количество); 
		Иначе
		ОбластьМакета.Параметры.КоличествоМест = ОкрВверх(ТекСтрока.Количество);
		КонецЕсли;
		Если КодЯзыка = "ru" Тогда	
			ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка), ТекСтрока1[0].Упаковка, ТекСтрока.Номенклатура.ЕдиницаИзмерения.Наименование); 
			ОбластьМакета.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка), ТекСтрока1[0].Упаковка, ТекСтрока.Номенклатура.ЕдиницаИзмерения.Наименование); 
		КонецЕсли;	
		Если КодЯзыка = "en" Или КодЯзыка = "tur" Тогда
			ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка.НаименованиеЯзык1), ТекСтрока1[0].Упаковка.НаименованиеЯзык1, ТекСтрока.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1); 
			ОбластьМакета.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка.НаименованиеЯзык1), ТекСтрока1[0].Упаковка.НаименованиеЯзык1, ТекСтрока.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1); 
		КонецЕсли; 
		Если КодЯзыка = "ar" Тогда
			ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка.НаименованиеЯзык2), ТекСтрока1[0].Упаковка.НаименованиеЯзык2, ТекСтрока.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык2); 
			ОбластьМакета.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(ТекСтрока1[0].Упаковка.НаименованиеЯзык2), ТекСтрока1[0].Упаковка.НаименованиеЯзык2, ТекСтрока.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык2); 
		КонецЕсли;  
		ОбластьМакета.Параметры.МассаНетто = ?(Тонна, ТекСтрока.КОличество, ТекСтрока.Количество / 1000); 
		ОбластьМакета.Параметры.МассаБрутто = ?(Тонна, ТекСтрока.КОличество, ТекСтрока.Количество / 1000);
	Исключение  
	КонецПопытки;
		ОбластьМакета.Параметры.ТоварКод = ТекСтрока.Номенклатура.Код;
	//Расчет USD
	Если ДокОсн.Договор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("USD") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СуммыДокументовВВалютахУчета.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
		|	СуммыДокументовВВалютахУчета.СуммаНДСРегл КАК СуммаНДСРегл
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
		|ГДЕ
		|	СуммыДокументовВВалютахУчета.Регистратор = &Регистратор
		|	И СуммыДокументовВВалютахУчета.НомерСтроки = &НомерСтроки";
		Запрос.УстановитьПараметр("Регистратор", ДокОсн);
		Запрос.УстановитьПараметр("НомерСтроки", ТекСтрока.НомерСтроки);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл      
			ОбластьМакета.Параметры.Сумма   = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл + ВыборкаДетальныеЗаписи.СуммаНДСРегл;
			ОбластьМакета.Параметры.Цена = ВыборкаДетальныеЗаписи.СуммаБезНДСРегл/ТекСтрока.Количество; 
		КонецЦикла;
	КонецЕсли;
   //КонецРасчетаUSD
КонецПроцедуры 

Процедура ЗаполнитьНомераНакладныхВСтрокеТовараТТН(ДанныеПечати, ВыборкаНомеровТН, ДанныеСтроки, ОбластьМакета)
	
	СтрокаНомеровНакладных = НСтр("ru = 'Товары по накладным: %НомерНакладной%'; en = 'Goods on invoices: %НомерНакладной%'", КодЯзыка);
	СтруктураПоиска = Новый Структура("ТранспортнаяНакладная", ДанныеПечати.Ссылка);
	
	ПредставленияНакладных = Новый Массив;
	
	Пока ВыборкаНомеровТН.НайтиСледующий(СтруктураПоиска) Цикл
		СтруктураШапки = Новый Структура("Дата, Номер");
		ЗаполнитьЗначенияСвойств(СтруктураШапки, ВыборкаНомеровТН);
		ПредставленияНакладных.Добавить(ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(СтруктураШапки));
	КонецЦикла;
	СтрокаНомеровНакладных = СтрЗаменить(СтрокаНомеровНакладных, "%НомерНакладной%", СтрСоединить(ПредставленияНакладных, ", "));
	
	ОбластьМакета.Параметры.ТоварНаименование = СтрокаНомеровНакладных;
	
	ОбластьМакета.Параметры.ТоварКод = "";
	
	ДанныеСтроки.МассаБрутто = 0;
	ДанныеСтроки.МассаНетто = 0;
	ДанныеСтроки.Сумма = 0;	
	ДанныеСтроки.Цена = 0;	
	ДанныеСтроки.Мест = 0;
	ДанныеСтроки.Количество  = 0;
	
	ОбластьМакета.Параметры.Цена = "";
	ОбластьМакета.Параметры.Сумма = "";
	ОбластьМакета.Параметры.Количество = ""; 
	ОбластьМакета.Параметры.КоличествоМест = "";
	ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = "";
	ОбластьМакета.Параметры.ВидУпаковки = "";
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент)
	
	РеквизитыШапки = Новый Структура;
	
	// Выводим общие реквизиты шапки
	ТвойАдрис = "";
	Для Каждого Стр Из ДокОсн.Организация.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрис = Стр.Представление;
		КонецЕсли;
	КонецЦИкла;
	ТвойНомир = "";
	Для Каждого Стр Из ДокОсн.Организация.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Телефон" Тогда
			ТвойНомир = Стр.Представление;
		КонецЕсли;
	КонецЦИкла;
	
	//ССылкаНаРТУ = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование;
	//Если не ТипЗнч(ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	//	Если Не ТипЗнч(ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	//		Если СсылкаНаРТУ.ЗаказКлиента = Неопределено Тогда
	//		АдресГруз = СсылкаНаРТУ.АдресДоставки;
	//		Иначе
	//		АдресГруз = ССылкаНаРТУ.ЗаказКлиента.АдресДоставки;
	//		КонецЕсли;
	//	Иначе
	//	АдресГруз = ССылкаНаРТУ.ЗаказКлиента.АдресГрузополучателя;
	//	КонецЕсли;
	//Иначе
	//	АдресГруз = ССылкаНаРТУ.АдресДоставки;
	//КонецЕсли; 
	
	
	Для каждого Стр Из ДанныеПечати.Грузополучатель.КонтактнаяИнформация Цикл 
		  Если Стр.Вид.Наименование = "Юридический адрес" Тогда 
			 АдресГруз = Стр.Представление; 
          КонецЕсли; 
	КонецЦикла;  
	   
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Плательщик,ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетПлательщика);      
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);  
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	РеквизитыШапки.Вставить("НомерДокумента", ДанныеПечати.Номер);
	Если КодЯзыка = "ar" Тогда
		РеквизитыШапки.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата,"Л=ar_EG; ДФ=dd.MM.yyyy"));
	Иначе
		РеквизитыШапки.Вставить("ДатаДокумента", ДанныеПечати.Дата);
	КонецЕсли;
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	
	
	ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1,%5'; en = '%2, INN %3, %4, %5'; ar = '%2, INN %3, %4, %5'; Tur = '%2, INN %3, %4, %5'", КодЯзыка),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель,
	"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны"), 
	ДанныеПечати.Организация.НаименованиеМеждународное, СведенияОГрузоотправитель.ИНН , ТвойАдрис, ТвойНомир) ;
	
	ТвойАдрисГрузополучателя = "";
	Для Каждого Стр Из ДокОсн.Грузополучатель.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрисГрузополучателя = Стр.Представление;
		КонецЕсли;
	КонецЦикла;
	
	
	ГрузополучательМеждународный = ДанныеПечати.Грузополучатель.НаименованиеМеждународное;
	
	
	Если ЗначениеЗаполнено(АдресГруз) Тогда
		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, INN %3, %4, %5'; ar = '%2, INN %3, %4, %5'; Tur = '%2, INN %3, %4, %5'", КодЯзыка),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН") + ", " + АдресГруз + ", " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"Телефоны"),
		ГрузополучательМеждународный, СведенияОГрузополучателе.ИНН, ТвойАдрисГрузополучателя, СведенияОГрузополучателе.Телефоны);
		
	Иначе
		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, INN %3, %4, %5'; ar = '%2, INN %3, %4, %5'; Tur = '%2, INN %3, %4, %5'", КодЯзыка),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны"),
		ГрузополучательМеждународный, СведенияОГрузополучателе.ИНН, ТвойАдрисГрузополучателя, СведенияОГрузополучателе.Телефоны);
	КонецЕсли;
	
	ТвойАдрисПокупателя = "";
	Для Каждого Стр Из ДокОсн.Контрагент.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрисПокупателя = Стр.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ТвойНомирПокупателя = "";
	Для Каждого Стр Из ДокОсн.Контрагент.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Телефон" Тогда
			ТвойНомирПокупателя = Стр.Представление;
		КонецЕсли;
	КонецЦикла;
	
	
	ПокупательМеждународный = ДокОсн.Контрагент.НаименованиеМеждународное;
	ТвоеБанкНаим = ДокОсн.БанковскийСчетКонтрагента.Банк.КороткоеИностранноеНаименование;
	ПредставлениеПлательщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1,%7'; en = '%2, %3, %4, %5, %6, %7'; ar = '%2, %3, %4, %5, %6, %7'; Tur = '%2, %3, %4, %5, %6, %7'", КодЯзыка),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,
	"ПолноеНаименование,ЮридическийАдрес,НомерСчета,Банк,БИК,КоррСчет"),
	ПокупательМеждународный, ТвойАдрисПокупателя, СведенияОПокупателе.НомерСчета + " with bank " + ТвоеБанкНаим, СведенияОПокупателе.БИК, СведенияОПокупателе.КоррСчет, ТвойНомирПокупателя);
	
	РеквизитыШапки.Вставить("ПредставлениеОрганизации", 		ПредставлениеОрганизации);
	РеквизитыШапки.Вставить("ПредставлениеГрузополучателя", 	ПредставлениеГрузополучателя);
	РеквизитыШапки.Вставить("ПредставлениеПлательщика", 		ПредставлениеПлательщика);
	
	РеквизитыШапки.Вставить("ОрганизацияПоОКПО", 		СведенияОГрузоотправитель.КодПоОКПО);
	РеквизитыШапки.Вставить("ГрузополучательПоОКПО", 	СведенияОГрузополучателе.КодПоОКПО);
	РеквизитыШапки.Вставить("ПлательщикПоОКПО", 		СведенияОПокупателе.КодПоОКПО);
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, РеквизитыШапки);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры 


Процедура ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	рр = данныеПечати;
	Если КодЯзыка = "ru" Тогда
		ОбластьМакета.Параметры.ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДЛФ=DD");
	КонецЕсли;
	Если КодЯзыка = "en" Тогда
		ОбластьМакета.Параметры.ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "Л=en; ДЛФ=DD");
	КонецЕсли;
	Если КодЯзыка = "ar" Тогда
		ОбластьМакета.Параметры.ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "Л=ar_EG; ДЛФ=DD");
	КонецЕсли;
	Если КодЯзыка = "tur" Тогда
		ОбластьМакета.Параметры.ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "Л=tr_TR; ДЛФ=DD");
	КонецЕсли;

	// Главный бухгалтер 
	Если КодЯзыка = "ru" Тогда
		ОбластьМакета.Параметры.ФИОГлавБухгалтера 	  = ДанныеПечати.ГлавныйБухгалтер;
		ОбластьМакета.Параметры.ФИОРуководителя 	  = ДанныеПечати.Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = ДанныеПечати.ДолжностьРуководителя;
		ОбластьМакета.Параметры.ФИОКладовщика 		  = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата);
		ОбластьМакета.Параметры.ДолжностьКладовщика   = ДанныеПечати.ДолжностьКладовщика;
		ОбластьМакета.Параметры.ФИОГрузПринял 		  = ДанныеПечати.Водитель;
	Иначе
		ОбластьМакета.Параметры.ФИОГлавБухгалтера 	  = ДанныеПечати.Ссылка.ГлавныйБухгалтер.РабочееНаименованиеИнглиш;
		ОбластьМакета.Параметры.ФИОРуководителя 	  = ДанныеПечати.Ссылка.Руководитель.РабочееНаименованиеИнглиш;
		ОбластьМакета.Параметры.ДолжностьРуководителя = ДанныеПечати.Ссылка.Руководитель.ДолжностьИнглиш;
		ОбластьМакета.Параметры.ФИОКладовщика 		  = ПолучитьСтрокуНаЛатинском(ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
		ОбластьМакета.Параметры.ДолжностьКладовщика   = ДанныеПечати.Ссылка.Руководитель.ДолжностьИнглиш;
		ОбластьМакета.Параметры.ФИОГрузПринял 		  = ПолучитьСтрокуНаЛатинском(Строка(ДанныеПечати.Водитель));
	КонецЕсли;
		
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = ДанныеПечати.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = ДанныеПечати.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = ДанныеПечати.ДоверенностьЛицо;
	
	Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
		Если не КодЯзыка = "ru" Тогда
			ОбластьМакета.Параметры.ВсегоМестПрописью = СтрЗаменить(ЧислоПрописью(ИтоговыеСуммы.ИтогоМест,"Л=en",",,,,,,,,0"),"00","");	
		Иначе
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
		КонецЕсли;
	КонецЕсли;
	Попытка
	Числитель = ТекСтрока.Номенклатура.ЕдиницаИзмерения.Числитель;
	Исключение
	КонецПопытки;
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ДанныеПечати.МассаНетто > 0 Тогда   
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ДанныеПечати.МассаНетто/1000, 1);
		Если КодЯзыка = "ru" Тогда 
			ОбластьМакета.Параметры.МассаГрузаБуттоПрописью = ЧислоПрописью(ДанныеПечати.МассаБрутто/1000*ПараметрыМассыПрописью.Коэффициент, "ДП=Истина",ПараметрыМассыПрописью.Формат);
		Иначе
			ФормСтрока = "Л = en; ДП = Истина";                                                
			ПарПредмета="t, t, kg, kg, 3";            
			ОбластьМакета.Параметры.МассаГрузаБуттоПрописью = ЧислоПрописью(Окр(ДанныеПечати.МассаНетто/1000,3,1),ФормСтрока,ПарПредмета);
		КонецЕсли;
		Если КоэффициентПересчетаВТонны <> 0 Тогда
			ОбластьМакета.Параметры.МассаГрузаБрутто = ДанныеПечати.МассаБрутто / 1000;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ДанныеПечати.МассаНетто > 0 Тогда   
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ДанныеПечати.МассаНетто/1000, 1);
		Если КодЯзыка = "ru" Тогда 
			ОбластьМакета.Параметры.МассаГрузаНеттоПрописью = ЧислоПрописью(ДанныеПечати.МассаНетто/1000*ПараметрыМассыПрописью.Коэффициент, "ДП=Истина",ПараметрыМассыПрописью.Формат);
		Иначе
			ФормСтрока = "Л = en; ДП = Истина";                                                
			ПарПредмета="t, t, kg, kg, 3";  
			ОбластьМакета.Параметры.МассаГрузаНеттоПрописью = ЧислоПрописью(Окр(ДанныеПечати.МассаНетто/1000,3,1),ФормСтрока,ПарПредмета);
		КонецЕсли;
		ОбластьМакета.Параметры.МассаГрузаНетто = ДанныеПечати.МассаНетто / 1000;                 
	КонецЕсли;
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = СтрЗаменить(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью, "00", "");
	ОбластьМакета.Параметры.ВсегоНаименованийПрописью = СтрЗаменить(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью, "00", ""); 
	ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	
КонецПроцедуры 

Процедура ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеПечати, Макет, ОбластьМакета)
	
	СведенияОПеревозчике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетПеревозчика);
	СведенияОЗаказчикеПеревозок = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ЗаказчикПеревозки, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетЗаказчикаПеревозки);
	
	ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер);
	
	ТвойАдрис = "";
	Для Каждого Стр Из ДокОсн.Организация.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрис = Стр.Представление;
		КонецЕсли;
	КонецЦИкла;
	Банка = ДокОсн.БанковскийСчетОрганизации.Банк.КороткоеИностранноеНаименование;
	
	ОбластьМакета.Параметры.ПредставлениеПеревозчика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, %3, %4, %5, %6, %7, %8'; ar = '%2, %3, %4, %5, %6, %7, %8'; Tur = '%2, %3, %4, %5, %6, %7, %8'",КодЯзыка),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике,                            
	"ПолноеНаименование,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"),
	ДанныеПечати.Организация.НаименованиеМеждународное, ТвойАдрис, СведенияОПеревозчике.Телефоны, СведенияОПеревозчике.НомерСчета," with bank " + Банка, СведенияОПеревозчике.БИК, СведенияОПеревозчике.КоррСчет);
	
	ОбластьМакета.Параметры.ПредставлениеЗаказчикаПеревозок	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'; en = '%2, %3, %4, %5, %6, %7, %8'; ar = '%2, %3, %4, %5, %6, %7, %8'; Tur = '%2, %3, %4, %5, %6, %7, %8'",КодЯзыка),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике,                            
	"ПолноеНаименование,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"),
	ДанныеПечати.Организация.НаименованиеМеждународное, ТвойАдрис, СведенияОПеревозчике.Телефоны, СведенияОПеревозчике.НомерСчета, " with bank " + Банка, СведенияОПеревозчике.БИК, СведенияОПеревозчике.КоррСчет);
	
	
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ОписаниеВодительскогоУдостоверения(
	ДанныеПечати.УдостоверениеСерия, 
	ДанныеПечати.УдостоверениеНомер);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	Если КодЯзыка = "ru" Тогда
		ОбластьМакета.Параметры.ПредставлениеВодителя     = ДанныеПечати.Водитель;   
		ОбластьМакета.Параметры.МаркаАвтомобиля = ДанныеПечати.МаркаАвтомобиля;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеВодителя     = ПолучитьСтрокуНаЛатинском(Строка(ДанныеПечати.Водитель)); 
		ОбластьМакета.Параметры.МаркаАвтомобиля = ПолучитьСтрокуНаЛатинском(Строка(ДанныеПечати.МаркаАвтомобиля));
	КонецЕсли;	
	СтандартнаяКарточка  = ДанныеПечати.ЛицензионнаяКарточкаВид = "Стандартная";
	ОграниченнаяКарточка = ДанныеПечати.ЛицензионнаяКарточкаВид = "Ограниченная";
	
	Если СтандартнаяКарточка
		Или ОграниченнаяКарточка Тогда
		ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не СтандартнаяКарточка);
		ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не ОграниченнаяКарточка);
	КонецЕсли;
	Если НЕ КодЯзыка = "ru" Тогда
		ОбластьМакета.Параметры.ПунктПогрузки = ТвойАдрис;
		ОбластьМакета.Параметры.ПунктРазгрузки = ДокОсн.ЗаказКлиента.АдресДоставкиИнглиш;
	КонецЕсли;
	
	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ЕдиницаИзмеренияВеса           = Константы.ЕдиницаИзмеренияВеса.Получить(); 
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ДанныеПечати      					  = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоТоварам    = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	ВыборкаПоТоварамНовая = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	ВыборкаПоТоварамНовая.Очистить();
	
	ВыборкаПоДокументам					  = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоНомерамТранспортныхНакладных = ДанныеДляПечати.РезультатПоНомерамНакладных.Выбрать();	
	ПервыйДокумент = Истина;
	
	СчетчикТТН = 0;
	ТТНМного = ДанныеДляПечати.РезультатПоШапке.Выгрузить().Количество() > 1;
	
	Пока ДанныеПечати.Следующий() Цикл   
		ОбъектДанныхПечати = ДанныеПечати.Ссылка.ПолучитьОбъект();  
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокОсн = ДанныеПечати.Ссылка.ДокументОснование;
		Иначе
			ДокОсн = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование;; 
		КонецЕсли;
		
		ДокЯз = РегистрыСведений.ЯзыкДляПечатиОИР.СоздатьНаборЗаписей();
		ДокЯз.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
		ДокЯз.Прочитать();
		Язычник = ДокЯз[0].Язык;
		Если Язычник = Перечисления.Языки.Русский Тогда
			Макет = ПолучитьМакет("ПФ_MXL_ТТН_ru2"); 
			КодЯзыка = "ru";
		ИначеЕсли Язычник = Перечисления.Языки.Английский Тогда  
			Макет = ПолучитьМакет("ПФ_MXL_ТТН_en");
			КодЯзыка = "en";
		ИначеЕсли Язычник = Перечисления.Языки.Арабский Тогда  
			Макет = ПолучитьМакет("ПФ_MXL_ТТН_ar");
			КодЯзыка = "ar";
		ИначеЕсли Язычник = Перечисления.Языки.Турецкий Тогда  
			Макет = ПолучитьМакет("ПФ_MXL_ТТН_tur");
			КодЯзыка = "tur";
		КонецЕсли;  
		// Если ТТН с доставкой и нашли связанные с доставкой ошибки - перейдем к следующему документу.
		СтруктураЗаданиеНаПеревозку = Новый Структура("НеНайденоЗаданиеНаПеревозку,
		|БолееОдногоВхожденияВЗаданияНаПеревозку,
		|РаспоряжениеНеПроведено",
		Ложь,Ложь,Ложь);
		ЕстьОшибкиДоставки = Ложь;
		ЗаполнитьЗначенияСвойств(СтруктураЗаданиеНаПеревозку,ДанныеПечати);
		Если СтруктураЗаданиеНаПеревозку.НеНайденоЗаданиеНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не найдено задание на перевозку. Печать формы 1-Т для документов с доставкой возможна после включения документа в задание на перевозку.'"),
			ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		Если СтруктураЗаданиеНаПеревозку.БолееОдногоВхожденияВЗаданияНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно напечатать форму 1-Т для %1, т.к. найдено более одного задания на перевозку, в которые включен этот документ.'"),
			ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		Если СтруктураЗаданиеНаПеревозку.РаспоряжениеНеПроведено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 не проведен. Печать товарно - транспортной накладной не будет выполнена.'"),
			ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		Если ЕстьОшибкиДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("ПорядковыйНомер", ДанныеПечати.ПорядковыйНомер);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		ТЗТТН = Новый ТаблицаЗначений;
		ТЗТТН.Колонки.Добавить("Номенклатура");
		ТЗТТН.Колонки.Добавить("Количество");
		ТЗТТН.Колонки.Добавить("ЕдиницаИзмерения");  
		ТЗТТН.Колонки.Добавить("СуммаСНДС"); 
		ТЗТТН.Колонки.Добавить("Сумма");
		Для каждого ТоварыИзДокумента из ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары Цикл
			
			СтрокаТТННовая = ОбъектДанныхПечати.НоменклатураРеализаций.НайтиСтроки(Новый Структура("Номенклатура", ТоварыИзДокумента.Номенклатура));
			Если НЕ СтрокаТТННовая.Количество() Тогда
				Продолжить;
			Иначе
				СтрокаТТН = СтрокаТТННовая[0];
				НовСтр = ТЗТТН.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТТН);
			КонецЕсли;
			СтрокаТЧ =	выборкаПоТоварамНовая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,ТоварыИзДокумента);
			
			СтрокаТЧ.КоличествоМест = СтрокаТТН.Количество;
			
			Если ТоварыИзДокумента.КоличествоУпаковок >0 тогда
				СтрокаТЧ.Количество = ТоварыИзДокумента.КоличествоУпаковок;
			КонецЕсли;
			
			СтрокаТЧ.НомерСтрокиВТранспортнойНакладной  = СтрокаТЧ.НомерСтроки;
			СтрокаТЧ.ПорядковыйНомер  = СтрокаТЧ.НомерСтроки;
			СтрокаТЧ.НомерСтрокиНаборы  = СтрокаТЧ.НомерСтроки;
			
			
			Отбор = Новый Структура("Номенклатура",ТоварыИзДокумента.Номенклатура);
			НашлиСтроки = выборкаПоТоварам.НайтиСтроки(Отбор);
			
			Если НашлиСтроки.Количество()>0 Тогда 
				НайденнаяСтрока = НашлиСтроки[0];
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,НайденнаяСтрока,"БазоваяЕдиницаНаименование,ВидУпаковки,ЭтоВозвратнаяТара,Весовой,КоэффициентПересчетаВТонны,	ПолныйНабор,ТранспортнаяНакладная,ТоварКод, ТоварНаименование,Упаковка,ТоварНаименование,		Ссылка,ВариантПредставленияНабораВПечатныхФормах,ВариантРасчетаЦеныНабора,ЭтоКомплектующие,ЭтоНабор,ПолныйНабор, Характеристика, ТоварАртикул");
				
				СтруктураПоиска = Новый Структура("Номенклатура", ТоварыИзДокумента.Номенклатура);
				Найдены = выборкаПоТоварам.НайтиСтроки(СтруктураПоиска);
				КоэффициентПересчетаВТонны = Найдены[0].КоэффициентПересчетаВТонны*1000;
				МассаНетто = СтрокаТЧ.Количество * КоэффициентПересчетаВТонны;						
				СтрокаТЧ.МассаНетто =  МассаНетто;
				МассаБрутто =МассаНетто;
				СтрокаТЧ.МассаБрутто =  МассаБрутто;
			КонецЕсли;	
			
		КонецЦикла;	
		
		КоличествоСтрок = выборкаПоТоварамНовая.Количество();
		
		// Если в ТТН только услуги - перейдем к следующему документу
		Если КоличествоСтрок = 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По документу %1 отсутствуют Товары. Печать товарно - транспортной накладной не требуется.'"),
			ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент);
		
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммыТТН();
		
		ДанныеСтроки = СтруктураДанныеСтрокиТТН();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаСтандарт        = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьГруза                 = Макет.ПолучитьОбласть("СтрокаГруза");
		ОбластьБезГруза              = Макет.ПолучитьОбласть("СтрокиБезГруза");
		
		Если КодЯзыка = "ru" Тогда
			ОбластьПодвалаСведенийОГрузе.Параметры.ФИОРуководителя       = ДанныеПечати.Руководитель;
			ОбластьПодвалаСведенийОГрузе.Параметры.ДолжностьРуководителя = ДанныеПечати.ДолжностьРуководителя; 
			ОбластьПодвалаСведенийОГрузе.Параметры.ФИОГрузПринял         = ДанныеПечати.Водитель;
			ОбластьПодвалаСведенийОГрузе.Параметры.ДолжностьГрузПринял   = "Водитель";
		Иначе
			ОбластьПодвалаСведенийОГрузе.Параметры.ДолжностьРуководителя = ДанныеПечати.Ссылка.Руководитель.ДолжностьИнглиш;
			ОбластьПодвалаСведенийОГрузе.Параметры.ДолжностьГрузПринял = "Driver";
			ОбластьПодвалаСведенийОГрузе.Параметры.ФИОРуководителя  = ДанныеПечати.Ссылка.Руководитель.РабочееНаименованиеИнглиш;  
			ОбластьПодвалаСведенийОГрузе.Параметры.ФИОГрузПринял    =  ПолучитьСтрокуНаЛатинском(Строка(ДанныеПечати.Водитель));
		КонецЕсли;
		
		
		ОбластьПогрузочныхОпераций   = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		ВыводШапки = 0;		
		Если ДанныеПечати.ВыводДанныхОТоварномСоставе = Перечисления.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав Тогда
			
			НомерСтроки = 0;
			Для каждого СтрокаТовары из ДанныеПечати.Ссылка.НоменклатураРеализаций Цикл
				ПАРАМ = Новый Структура;
				ПАРАМ.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
				Если СтрокаТовары.ИдентификаторСтроки <> "" Тогда 
				ПАРАМ.Вставить("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
				КонецЕсли;
				ТекСтрокаРеал = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары.НайтиСтроки(Парам);
				Тееек = ТекСтрокаРеал[0];
				ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
				
				ОбластьМакета = ОбластьМакетаСтандарт;
				ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, Тееек, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны, ТЗТТН, ДанныеСтроки.Номер - 1);
				
				Если ДанныеСтроки.Номер = 1 Тогда // первая строка						
					Если КодЯзыка = "ru" Тогда
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					КонецЕсли;
					Если КодЯзыка = "en" Тогда
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sheet " + НомерСтраницы;
					КонецЕсли;
					Если КодЯзыка = "ar" Тогда
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "الصفحة " + Формат(НомерСтраницы,"Л=ar_EG");
					КонецЕсли; 
					Если КодЯзыка = "tur" Тогда
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sayfa " + Формат(НомерСтраницы,"Л=tr_TR");
					КонецЕсли;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				Иначе
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
					
					Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
						
						МассивВыводимыхОбластей.Добавить(ОбластьВсего);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
					КонецЕсли;
					
					Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
						
						// Очистим итоги по странице.
						ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы);
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если КодЯзыка = "ru" Тогда
							ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						КонецЕсли;
						Если КодЯзыка = "en" Тогда
							ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sheet " + НомерСтраницы;
						КонецЕсли;
						Если КодЯзыка = "ar" Тогда
							ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "الصفحة " + Формат(НомерСтраницы,"Л=ar_EG");
						КонецЕсли;  
						Если КодЯзыка = "tur" Тогда
							ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sayfa " + Формат(НомерСтраницы,"Л=tr_TR");
						КонецЕсли;
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки, ТЗТТН, Тееек.Номенклатура, Тееек, ДанныеПечати);
				
			КонецЦикла;
			КоличествоПорядковыхНомеровЗаписей = ДанныеСтроки.Номер;
			
		Иначе
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ЗаполнитьНомераНакладныхВСтрокеТовараТТН(
			ДанныеПечати, 
			ВыборкаПоНомерамТранспортныхНакладных,
			ДанныеСтроки, 
			ОбластьМакета);
			
			
			Если КодЯзыка = "ru" Тогда
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			КонецЕсли;
			Если КодЯзыка = "en" Тогда
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sheet " + НомерСтраницы;
			КонецЕсли;
			Если КодЯзыка = "ar" Тогда
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "الصفحة " + Формат(НомерСтраницы,"Л=ar_EG");
			КонецЕсли;  
			Если КодЯзыка = "tur" Тогда
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Sayfa " + Формат(НомерСтраницы,"Л=tr_TR");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоПорядковыхНомеровЗаписей = 0;
			
		КонецЕсли;
		
		
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		
		Если ДанныеПечати.ВыводДанныхОТоварномСоставе = Перечисления.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав Тогда
			ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, КоличествоПорядковыхНомеровЗаписей, ВалютаРегламентированногоУчета);
		Иначе
			ДобавитьИтоговыеДанныеПодвалаТТНДляНесколькихНакладных(ИтоговыеСуммы, КоличествоПорядковыхНомеровЗаписей, ВалютаРегламентированногоУчета);
		КонецЕсли;
		ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны);
		
		ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеПечати, Макет, ОбластьТранспортногоРаздела);
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПогрузочныхОпераций);
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		Если ДанныеПечати.ВыводДанныхОТоварномСоставе = Перечисления.ВариантыВыводаДанныхОТоварномСоставе.ТоварныйСостав Тогда
			НомерГ = 1;
			Для каждого СтрокаТовары из ДанныеПечати.Ссылка.НоменклатураРеализаций Цикл
				ТекСтрокаРеал = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));
				Тееек = ТекСтрокаРеал[0];
				ДанныеДляРасчетаПостфикса = Новый Структура("ЭтоКомплектующие, ЭтоНабор, ПолныйНабор, 
				|ВариантПредставленияНабораВПечатныхФормах, ВариантРасчетаЦеныНабора, Количество");
				ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаПостфикса, Тееек);
				ДанныеДляРасчетаПостфикса.Вставить("ЕдиницаИзмерения", ?(ЗначениеЗаполнено(Тееек.Упаковка), Тееек.Упаковка, Тееек.Номенклатура.ЕдиницаИзмерения.Наименование));
				
				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(ДанныеДляРасчетаПостфикса, Ложь);
				
				ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
				+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Строка(Тееек.Номенклатура.Наименование),
				Тееек.Характеристика,
				,
				,
				ДополнительныеПараметрыПолученияНаименованияДляПечати)
				+ ПрефиксИПостфикс.Постфикс;   
				Попытка
					СтрокаВТЧ = ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование.Товары[НомерГ - 1];  
				Исключение
					Продолжить;
				КонецПопытки;
				Числитель = Тееек.Номенклатура.ЕдиницаИзмерения.Числитель;
				Если КодЯзыка = "ru" Тогда
					ОбластьГруза.Параметры.ТоварНаименование = Строка(НомерГ)+" "+ПредставлениеНоменклатуры;    
					ОбластьГруза.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(Тееек.Упаковка), Тееек.Упаковка, Тееек.Номенклатура.ЕдиницаИзмерения.Наименование);
				КонецЕсли;
				Если КодЯзыка = "en" Тогда
					ОбластьГруза.Параметры.ТоварНаименование = Строка(НомерГ)+" "+Тееек.Номенклатура.НаименованиеЯзык1;    
					ОбластьГруза.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(Тееек.Упаковка.НаименованиеЯзык1), Тееек.Упаковка.НаименованиеЯзык1, Тееек.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1);
				КонецЕсли;
				Если КодЯзыка = "ar" Тогда
					ОбластьГруза.Параметры.ТоварНаименование = Строка(НомерГ)+" "+Тееек.Номенклатура.НаименованиеЯзык2;    
					ОбластьГруза.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(Тееек.Упаковка.НаименованиеЯзык2), Тееек.Упаковка.НаименованиеЯзык2, Тееек.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык2);
				КонецЕсли; 
				Если КодЯзыка = "tur" Тогда
					Для Каждого Стр Из Тееек.Номенклатура.Представления Цикл
						Если Стр.КодЯзыка = "tr" Тогда
							ББ = Стр.Наименование;
						КонецЕсли;
					КонецЦикла;
					ОбластьГруза.Параметры.ТоварНаименование = Строка(НомерГ)+" "+ ББ;    
					ОбластьГруза.Параметры.ВидУпаковки = ?(ЗначениеЗаполнено(Тееек.Упаковка.НаименованиеЯзык1), Тееек.Упаковка.НаименованиеЯзык1, Тееек.Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1);
				КонецЕсли;
				ОбластьГруза.Параметры.МассаГрузаБрутто = ?(Тонна, СтрокаТовары.КОличество, СтрокаТовары.Количество / 1000); 
				Если Не ТТНМного И Строка(Тееек.Номенклатура.ЕдиницаИзмерения) = "шт" ИЛИ Строка(Тееек.Номенклатура.ЕдиницаИзмерения) = "м" Тогда
				ОбластьГруза.Параметры.КоличествоМест = ОкрВверх(Тееек.Количество);
				Иначе     
				ОбластьГруза.Параметры.КоличествоМест = ОкрВверх(СтрокаТовары.Количество);
				КонецЕсли;
				НомерГ = НомерГ+1;
				
				Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 				
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Ссылка КАК Ссылка,
					|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
					|	СчетФактураВыданный.Представление КАК Представление
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|ГДЕ
					|	СчетФактураВыданный.ДокументОснование = &Ссылка";
					
					Запрос.УстановитьПараметр("Ссылка",  ДанныеПечати.Ссылка.ДокументыОснования[0].ДокументОснование);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка )Тогда
							ТекстДляПечати = СтрЗаменить(ВыборкаДетальныеЗаписи.Представление,"Счет-фактура выданный", "УПД");
							ОбластьГруза.Параметры.ДокументОснование    = ТекстДляПечати;
						КонецЕсли	
					КонецЦикла;
				Иначе	
					ОбластьГруза.Параметры.ДокументОснование = ДанныеПечати.Ссылка;
				КонецЕсли;
				Если КодЯзыка = "ru" Тогда
					ОбластьГруза.Параметры.ДокументОснование = СтрЗаменить(ОбластьГруза.Параметры.ДокументОснование, "УПД", "Документ реализации");
				Иначе
					ОбластьГруза.Параметры.ДокументОснование = СтрЗаменить(ОбластьГруза.Параметры.ДокументОснование, "УПД", "Document");
					ОбластьГруза.Параметры.ДокументОснование = СтрЗаменить(ОбластьГруза.Параметры.ДокументОснование, "от", "of");
					ОбластьГруза.Параметры.ДокументОснование = СтрЗаменить(ОбластьГруза.Параметры.ДокументОснование, "0:00:00", "");
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьГруза);
			КонецЦикла;	
			
		Иначе
			ТабличныйДокумент.Вывести(ОбластьБезГруза);			
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПогрузочныхОпераций);
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		//Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьТранспортныеНакладныеНаПечать(ОбъектыПечати) Экспорт
	
	ТипДокументов = ТипЗнч(ОбъектыПечати[0]);
	МассивДокументовБезНакладных = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ТипДокументов = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку",        ОбъектыПечати);
		Запрос.УстановитьПараметр("НетВыделенныхСтрокАдресов", Истина);
		Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",   Новый Массив);
		Запрос.УстановитьПараметр("ВсеРаспоряжения",           Истина);
		Запрос.УстановитьПараметр("Распоряжения",              Новый Массив);
		
		Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку() + 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТранспортнаяНакладная,
		|	НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку КАК ДокументОснование,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Дата КАК Дата,
		|	НакладныеПоЗаданиямНаПеревозку.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТранспортныеНакладныеИОснования
		|ИЗ
		|	НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|		ПО НакладныеПоЗаданиямНаПеревозку.Накладная = ТранспортнаяНакладнаяДокументыОснования.ДокументОснование
		|			И НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку = ТранспортнаяНакладнаяДокументыОснования.Ссылка.ЗаданиеНаПеревозку
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТранспортныеНакладныеИОснования.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
		|	ТранспортныеНакладныеИОснования.НомерСтроки КАК НомерСтроки,
		|	ТранспортныеНакладныеИОснования.ДокументОснование КАК ДокументОснование,
		|	ТранспортныеНакладныеИОснования.Дата
		|ИЗ
		|	ТранспортныеНакладныеИОснования КАК ТранспортныеНакладныеИОснования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТранспортныеНакладныеИОснования.ДокументОснование,
		|	ТранспортныеНакладныеИОснования.НомерСтроки,
		|	ТранспортныеНакладныеИОснования.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТранспортныеНакладныеИОснования.ДокументОснование
		|ИЗ
		|	ТранспортныеНакладныеИОснования КАК ТранспортныеНакладныеИОснования";
		
		НомерТаблицыДокументыОснования = 4;
		НомерТаблицыТранспортныеНакладныеНаПечать = 3;
		
	Иначе
		
		Запрос.УстановитьПараметр("ОбъектыПечати", ОбъектыПечати);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТранспортнаяНакладная,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Дата КАК Дата,
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование
		|ПОМЕСТИТЬ ТранспортныеНакладныеИОснования
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование В(&ОбъектыПечати)
		|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления
		|	И ТранспортнаяНакладнаяДокументыОснования.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТранспортныеНакладныеИОснования.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
		|	ТранспортныеНакладныеИОснования.Дата
		|ИЗ
		|	ТранспортныеНакладныеИОснования КАК ТранспортныеНакладныеИОснования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТранспортныеНакладныеИОснования.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТранспортныеНакладныеИОснования.ДокументОснование
		|ИЗ
		|	ТранспортныеНакладныеИОснования КАК ТранспортныеНакладныеИОснования";
		
		НомерТаблицыДокументыОснования = 2;
		НомерТаблицыТранспортныеНакладныеНаПечать = 1;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ДокументыОснования = РезультатЗапроса[НомерТаблицыДокументыОснования].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	ТаблицаТранспортныеНакладныеНаПечать = РезультатЗапроса[НомерТаблицыТранспортныеНакладныеНаПечать].Выгрузить();
	ТаблицаТранспортныеНакладныеНаПечать.Свернуть("ТранспортнаяНакладная");
	ТранспортныеНакладныеНаПечать = ТаблицаТранспортныеНакладныеНаПечать.ВыгрузитьКолонку("ТранспортнаяНакладная");
	
	Для	Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		Если ДокументыОснования.Найти(ОбъектПечати) = Неопределено Тогда
			МассивДокументовБезНакладных.Добавить(ОбъектПечати);	
		КонецЕсли;
		
	КонецЦикла;	 
	
	Структура = Новый Структура;
	Структура.Вставить("МассивДокументовБезНакладных", МассивДокументовБезНакладных);
	Структура.Вставить("ТранспортныеНакладныеНаПечать", ТранспортныеНакладныеНаПечать);
	
	Возврат Структура;	
	
КонецФункции

Функция ПодготовитьПечатьТТНиТН(МенеджерВременныхТаблиц, МассивОбъектов)
	
	ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	ОснованияДляВычисленияТранспортныхНакладных = Новый Массив;
	ТранспортныеНакладныеДляПечати              = Новый Массив;
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипДокументов     = КлючЗначение.Ключ;
		СсылкиНаДокументы = КлючЗначение.Значение;		
		
		Если ТипДокументов = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаданияНаПеревозку", СсылкиНаДокументы);
			Запрос.УстановитьПараметр("ВсеСтрокиАдресов", Истина);
			Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов", Новый Массив);
			
			Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НакладныеПоЗаданиямНаПеревозку.Накладная КАК Накладная
			|ИЗ 
			|	НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку";
			
			РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияДляВычисленияТранспортныхНакладных, 
			РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить().ВыгрузитьКолонку("Накладная"));
			
		ИначеЕсли ТипДокументов = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда	
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТранспортныеНакладныеДляПечати, СсылкиНаДокументы);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияДляВычисленияТранспортныхНакладных, СсылкиНаДокументы); 
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ОснованияДляВычисленияТранспортныхНакладных.Количество() > 0 Тогда
		
		ДокументыОснованияТранспортныеНакладные = ТранспортныеНакладныеДокументовОснований(ОснованияДляВычисленияТранспортныхНакладных); 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТранспортныеНакладныеДляПечати, 
		ДокументыОснованияТранспортныеНакладные.ВыгрузитьКолонку("ТранспортнаяНакладная"), Истина);
		
		ДокументыОснованияТранспортныеНакладные.Индексы.Добавить("ДокументОснование");
		
		Для Каждого СтрМас Из ОснованияДляВычисленияТранспортныхНакладных Цикл
			
			Если ДокументыОснованияТранспортныеНакладные.Найти(СтрМас, "ДокументОснование") = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Для документа %ДокументОснование% не создана транспортная накладная. Печать транспортной накладной невозможна.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", СтрМас);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТранспортныеНакладныеДляПечати.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'Нет транспортных накладных для печати.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТаблицаНакладныхНаПечать = Новый ТаблицаЗначений;
	ОписаниеТипаТранспортнаяНакладная = Новый ОписаниеТипов("ДокументСсылка.ТранспортнаяНакладная");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ТранспортнаяНакладная", ОписаниеТипаТранспортнаяНакладная);
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ПорядковыйНомер", ОписаниеТипаЧисло);
	
	ПорядковыйНомер = 0;
	Для Каждого СтрМас Из ТранспортныеНакладныеДляПечати Цикл 
		СтрокаТаблицы = ТаблицаНакладныхНаПечать.Добавить();	
		СтрокаТаблицы.ТранспортнаяНакладная = СтрМас;
		СтрокаТаблицы.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер  + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладныхБезОснований
	|ИЗ
	|	&ТаблицаНакладных КАК ТаблицаНакладных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТранспортнаяНакладнаяДокументыОснования.НомерСтроки КАК НомерСтрокиВТранспортнойНакладной,
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладных
	|ИЗ
	|	ТаблицаТранспортныхНакладныхБезОснований КАК ТаблицаНакладных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|		ПО ТаблицаНакладных.ТранспортнаяНакладная = ТранспортнаяНакладнаяДокументыОснования.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаНакладных", ТаблицаНакладныхНаПечать);  
	
	УстановитьПривилегированныйРежим(Истина);
	ОснованияТранспортныхНакладных = Запрос.ВыполнитьПакетСПромежуточнымиДанными()[1].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(ТранспортныеНакладныеДляПечати, МенеджерВременныхТаблиц);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(ОснованияТранспортныхНакладных);
	
КонецФункции

Функция ЗаменитьСинонимТаблицы(СинонимТаблицы, ТекстПоля)
	
	ЧастиСтроки = СтрРазделить(ТекстПоля, ".");
	Если ЧастиСтроки.Количество() = 2 Тогда
		ЧастиСтроки[0] = СинонимТаблицы;
		Возврат СтрСоединить(ЧастиСтроки, ".");
	ИначеЕсли ЧастиСтроки.Количество() = 1 Тогда
		Возврат СинонимТаблицы + "." + ТекстПоля;
	Иначе
		Возврат ТекстПоля;
	КонецЕсли;
	
КонецФункции


Функция ПодготовитьПечатьТТНиТН1Удалить(МенеджерВременныхТаблиц, МассивОбъектов)
	
	ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	ОснованияДляВычисленияТранспортныхНакладных = Новый Массив;
	ТранспортныеНакладныеДляПечати              = Новый Массив;
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипДокументов     = КлючЗначение.Ключ;
		СсылкиНаДокументы = КлючЗначение.Значение;		
		
		Если ТипДокументов = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаданияНаПеревозку", СсылкиНаДокументы);
			Запрос.УстановитьПараметр("ВсеСтрокиАдресов", Истина);
			Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов", Новый Массив);
			
			Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НакладныеПоЗаданиямНаПеревозку.Накладная КАК Накладная
			|ИЗ 
			|	НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку";
			
			РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияДляВычисленияТранспортныхНакладных, 
			РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить().ВыгрузитьКолонку("Накладная"));
			
		ИначеЕсли ТипДокументов = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда	
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТранспортныеНакладныеДляПечати, СсылкиНаДокументы);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияДляВычисленияТранспортныхНакладных, СсылкиНаДокументы); 
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ОснованияДляВычисленияТранспортныхНакладных.Количество() > 0 Тогда
		
		ДокументыОснованияТранспортныеНакладные = ТранспортныеНакладныеДокументовОснований(ОснованияДляВычисленияТранспортныхНакладных); 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТранспортныеНакладныеДляПечати, 
		ДокументыОснованияТранспортныеНакладные.ВыгрузитьКолонку("ТранспортнаяНакладная"), Истина);
		
		ДокументыОснованияТранспортныеНакладные.Индексы.Добавить("ДокументОснование");
		
		Для Каждого СтрМас Из ОснованияДляВычисленияТранспортныхНакладных Цикл
			
			Если ДокументыОснованияТранспортныеНакладные.Найти(СтрМас, "ДокументОснование") = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Для документа %ДокументОснование% не создана транспортная накладная. Печать транспортной накладной невозможна.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", СтрМас);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТранспортныеНакладныеДляПечати.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'Нет транспортных накладных для печати.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТаблицаНакладныхНаПечать = Новый ТаблицаЗначений;
	ОписаниеТипаТранспортнаяНакладная = Новый ОписаниеТипов("ДокументСсылка.ТранспортнаяНакладная");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ТранспортнаяНакладная", ОписаниеТипаТранспортнаяНакладная);
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ПорядковыйНомер", ОписаниеТипаЧисло);
	
	ПорядковыйНомер = 0;
	Для Каждого СтрМас Из ТранспортныеНакладныеДляПечати Цикл 
		СтрокаТаблицы = ТаблицаНакладныхНаПечать.Добавить();	
		СтрокаТаблицы.ТранспортнаяНакладная = СтрМас;
		СтрокаТаблицы.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер  + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладныхБезОснований
	|ИЗ
	|	&ТаблицаНакладных КАК ТаблицаНакладных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТранспортнаяНакладнаяДокументыОснования.НомерСтроки КАК НомерСтрокиВТранспортнойНакладной,
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладных
	|ИЗ
	|	ТаблицаТранспортныхНакладныхБезОснований КАК ТаблицаНакладных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|		ПО ТаблицаНакладных.ТранспортнаяНакладная = ТранспортнаяНакладнаяДокументыОснования.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаНакладных", ТаблицаНакладныхНаПечать);  
	
	УстановитьПривилегированныйРежим(Истина);
	ОснованияТранспортныхНакладных = Запрос.ВыполнитьПакетСПромежуточнымиДанными()[1].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(ТранспортныеНакладныеДляПечати, МенеджерВременныхТаблиц);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(ОснованияТранспортныхНакладных);
	
КонецФункции

Функция ТранспортныеНакладныеДокументовОснований(СсылкиНаДокументыОснования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТранспортнаяНакладная,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Номер КАК Номер,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Дата КАК Дата,
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|ГДЕ
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование В (&СсылкиНаДокументыОснования)
	|	И ТранспортнаяНакладнаяДокументыОснования.Ссылка.Проведен";
	
	Если ТипЗнч(СсылкиНаДокументыОснования) <> Тип("Массив") Тогда
		Запрос.УстановитьПараметр("СсылкиНаДокументыОснования", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНаДокументыОснования));
	Иначе
		Запрос.УстановитьПараметр("СсылкиНаДокументыОснования", СсылкиНаДокументыОснования);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстВыборкиРеквизитов(СинонимТаблицы, Реквизиты, ДобавлятьСиноним)
	
	ТекстыОписанияРеквизитов = Новый Массив;
	
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		Для Каждого СтрМас Из Реквизиты Цикл
			
			ТекстРеквизита = ЗаменитьСинонимТаблицы(СинонимТаблицы, СтрМас) + ?(ДобавлятьСиноним, " КАК " + СтрМас, "");
			ТекстыОписанияРеквизитов.Добавить(ТекстРеквизита);
			
		КонецЦикла;
	Иначе
		Для Каждого КлючЗначение Из Реквизиты Цикл
			
			ТекстРеквизита = ?(ЗначениеЗаполнено(КлючЗначение.Значение), 
			ЗаменитьСинонимТаблицы(СинонимТаблицы, КлючЗначение.Значение),
			ЗаменитьСинонимТаблицы(СинонимТаблицы, КлючЗначение.Ключ)) 
			+ ?(ДобавлятьСиноним, " КАК " + КлючЗначение.Ключ, "");
			ТекстыОписанияРеквизитов.Добавить(ТекстРеквизита);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыОписанияРеквизитов, "," + Символы.ПС);
	
КонецФункции

Функция ПолучитьСтрокуНаЛатинском(ИсходныйТекст)
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "Zh");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "Kh");
	СоответствиеСимволов.Вставить("Ц", "Ts");
	СоответствиеСимволов.Вставить("Ч", "Ch");
	СоответствиеСимволов.Вставить("Ш", "Sh");
	СоответствиеСимволов.Вставить("Щ", "Shch");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "Yu");
	СоответствиеСимволов.Вставить("Я", "Ya");
	СоответствиеСимволов.Вставить("а", "a");
	СоответствиеСимволов.Вставить("б", "b");
	СоответствиеСимволов.Вставить("в", "v");
	СоответствиеСимволов.Вставить("г", "g");
	СоответствиеСимволов.Вставить("д", "d");
	СоответствиеСимволов.Вставить("е", "e");
	СоответствиеСимволов.Вставить("ё", "e");
	СоответствиеСимволов.Вставить("ж", "zh");
	СоответствиеСимволов.Вставить("з", "z");
	СоответствиеСимволов.Вставить("и", "i");
	СоответствиеСимволов.Вставить("й", "y");
	СоответствиеСимволов.Вставить("к", "k");
	СоответствиеСимволов.Вставить("л", "l");
	СоответствиеСимволов.Вставить("м", "m");
	СоответствиеСимволов.Вставить("н", "n");
	СоответствиеСимволов.Вставить("о", "o");
	СоответствиеСимволов.Вставить("п", "p");
	СоответствиеСимволов.Вставить("р", "r");
	СоответствиеСимволов.Вставить("с", "s");
	СоответствиеСимволов.Вставить("т", "t");
	СоответствиеСимволов.Вставить("у", "u");
	СоответствиеСимволов.Вставить("ф", "f");
	СоответствиеСимволов.Вставить("х", "kh");
	СоответствиеСимволов.Вставить("ц", "ts");
	СоответствиеСимволов.Вставить("ч", "ch");
	СоответствиеСимволов.Вставить("ш", "sh");
	СоответствиеСимволов.Вставить("щ", "shch");
	СоответствиеСимволов.Вставить("ъ", "");
	СоответствиеСимволов.Вставить("ы", "y");
	СоответствиеСимволов.Вставить("ь", "");
	СоответствиеСимволов.Вставить("э", "e");
	СоответствиеСимволов.Вставить("ю", "yu");
	СоответствиеСимволов.Вставить("я", "ya");
	
	ИсходныйТекст = СокрЛП(ТРег(ИсходныйТекст));
	ГотовоеЗначение = "";
	ТекущийСимвол = "";
	ТекущийГотовыйСимвол = "";
	Для к = 1 по СтрДлина(ИсходныйТекст) Цикл
		ТекущийСимвол = Сред(ИсходныйТекст, к, 1);
		ТекущийГотовыйСимвол = СоответствиеСимволов.Получить(ТекущийСимвол);
		Если ТекущийГотовыйСимвол = Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийСимвол;
		Иначе
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ГотовоеЗначение;
КонецФункции 

Функция ОкрВверх(ИсходноеЧисло)
	
	Если Цел(ИсходноеЧисло) = ИсходноеЧисло Тогда
		Возврат ИсходноеЧисло;
	Иначе
		Возврат Цел(ИсходноеЧисло) + 1;
	КонецЕсли;
	
КонецФункции

Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц)
	
	ШаблонЗапросаКТаблице = 
	"	ВЫБРАТЬ
	|	ИмяТаблицы_.Ссылка КАК Ссылка,
	|	ИмяТаблицы_.Номенклатура КАК Номенклатура,
	|	ИмяТаблицы_.Характеристика КАК Характеристика,
	|	ИмяТаблицы_.Упаковка КАК Упаковка,
	|	ИмяТаблицы_.Количество КАК Количество,
	|	ИмяТаблицы_.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ИмяТаблицы_.СуммаБезНДС КАК СуммаБезНДС,
	|	ИмяТаблицы_.СуммаНДС КАК СуммаНДС,
	|	ИмяТаблицы_.НомерСтроки КАК НомерСтроки,
	|	&ТекстПоляИмяТаблицы_ЭтоВозвратнаяТара_ КАК ЭтоВозвратнаяТара,
	|	&ТекстПоляИмяТаблицы_ВариантПредставленияНабораВПечатныхФормах_ КАК ВариантПредставленияНабораВПечатныхФормах,
	|	&ТекстПоляИмяТаблицы_ВариантРасчетаЦеныНабора_ КАК ВариантРасчетаЦеныНабора,
	|	&ТекстПоляИмяТаблицы_ЭтоКомплектующие_ КАК ЭтоКомплектующие,
	|	&ТекстПоляИмяТаблицы_НомерСтрокиНаборы_ КАК НомерСтрокиНаборы,
	|	&ТекстПоляИмяТаблицы_ПолныйНабор_ КАК ПолныйНабор,
	|	&ТекстПоляИмяТаблицы_ЭтоНабор_ КАК ЭтоНабор
	|ИЗ
	|	ИмяТаблицы_ КАК ИмяТаблицы_
	|ГДЕ
	|	ИмяТаблицы_.ЭтоТовар";
	
	ТекстыОбращенияКТаблицам = Новый Массив;
	
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		
		Если СтрНайти(ВременнаяТаблица.ПолноеИмя, "ТаблицаТоваров") <> 0 Тогда
			
			ПолноеИмяДокумента =  "Документ." + СтрЗаменить(ВременнаяТаблица.ПолноеИмя, "ТаблицаТоваров", "");
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВернутьМногооборотнуюТару", МетаданныеОбъекта) Тогда
				ТекстВыборкиИзТаблицы = СтрЗаменить(ШаблонЗапросаКТаблице,
				"&ТекстПоляИмяТаблицы_ЭтоВозвратнаяТара_",
				"	ВЫБОР
				|		КОГДА ИмяТаблицы_.Ссылка.ВернутьМногооборотнуюТару
				|				И ИмяТаблицы_.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ");
			Иначе
				ТекстВыборкиИзТаблицы = СтрЗаменить(ШаблонЗапросаКТаблице, "&ТекстПоляИмяТаблицы_ЭтоВозвратнаяТара_", "ЛОЖЬ");
			КонецЕсли;
			
			ТекстВыборкиИзТаблицы = СтрЗаменить(ТекстВыборкиИзТаблицы, "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя);
			
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_ВариантПредставленияНабораВПечатныхФормах_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"ВариантПредставленияНабораВПечатныхФормах");
			
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_ВариантРасчетаЦеныНабора_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"ВариантРасчетаЦеныНабора");
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_ЭтоКомплектующие_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"ЭтоКомплектующие",
			,
			"ЛОЖЬ");
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_НомерСтрокиНаборы_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"НомерСтрокиНаборы",
			,
			"0");
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_ПолныйНабор_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"ПолныйНабор",
			,
			"ЛОЖЬ");
			ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц,
			ТекстВыборкиИзТаблицы,
			СтрЗаменить("&ТекстПоляИмяТаблицы_ЭтоНабор_", "ИмяТаблицы_", ВременнаяТаблица.ПолноеИмя),
			ВременнаяТаблица.ПолноеИмя,
			"ЭтоНабор",
			,
			"ЛОЖЬ");
			
			ТекстыОбращенияКТаблицам.Добавить(ТекстВыборкиИзТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВложенныйЗапрос.СуммаБезНДС КАК СуммаБезНДС,
	|	ВложенныйЗапрос.СуммаБезНДС КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВложенныйЗапрос.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ВложенныйЗапрос.ЭтоКомплектующие КАК ЭтоКомплектующие,
	|	ВложенныйЗапрос.НомерСтрокиНаборы КАК НомерСтрокиНаборы,
	|	ВложенныйЗапрос.ПолныйНабор КАК ПолныйНабор,
	|	ВложенныйЗапрос.ЭтоНабор КАК ЭтоНабор,
	|	ВложенныйЗапрос.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	(&ТекстВложенногоЗапроса) КАК ВложенныйЗапрос";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВложенногоЗапроса", СтрСоединить(ТекстыОбращенияКТаблицам, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
