
Перем ОсновнойМодуль Экспорт;
Перем ПоказыватьОтладочнуюИнформацию;
Перем ИспользуетсяПодсистемаДиадок;
Перем Кэш;

//{		СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС 

Функция ОбработатьСобытие(ИмяСобытия, Параметры, НастройкиПлагина = Неопределено) Экспорт

	Если ИмяСобытия = "ВыполнитьРегламентныеДействия" Тогда

		Возврат ВыполнитьРегламентныеДействия(Параметры, НастройкиПлагина);

	ИначеЕсли ИмяСобытия = "Плагин_СохранениеДокументов_ПолучитьСписокОрганизаций" Тогда
		СписокОрганизаций = ЗначениеВСтрокуВнутр(Плагин_СохранениеДокументов_ПолучитьСписокОрганизаций());
		Параметры.Вставить("Результат", СписокОрганизаций);
		Возврат СписокОрганизаций;

	ИначеЕсли ИмяСобытия = "Плагин_СохранениеДокументов_ВыполнитьСохранениеДокументов" Тогда;

		Возврат ВыгрузитьДокументооборотНаСервере(Параметры, НастройкиПлагина);
		
	ИначеЕсли ИмяСобытия = "Плагин_СохранениеДокументов_ПроверитьДоступностьКаталога" Тогда
		
		РезультатОбработки = Плагин_СохранениеДокументов_ПроверитьДоступностьКаталога(Параметры.Каталог);
		Параметры.РезультатОбработки = РезультатОбработки;
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
КонецФункции

Функция Плагин_СохранениеДокументов_ПолучитьСписокОрганизаций() Экспорт
	
	Результат = Новый Массив;
	
	ТаблицаОрганизаций = ОсновнойМодуль.ЭДО_Модуль_ТаблицаОрганизацийПользователя();
	Для Каждого СтрокаТаблицы Из ТаблицаОрганизаций Цикл
		
		СопоставленныеОрганизации1С = СопоставленныеОрганизации1С(СтрокаТаблицы);
		Для Каждого ОрганизацияСсылка Из СопоставленныеОрганизации1С Цикл
			Результат.Добавить(ОрганизацияСсылка);
		КонецЦикла;			
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

Функция Плагин_СохранениеДокументов_ПроверитьДоступностьКаталога(ПутьККаталогу)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	ПроверитьДоступностьКаталога(ПутьККаталогу, Результат.ЕстьОшибки, Результат.ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

//}     СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// { СКАЧИВАНИЕ ФАЙЛОВ. ОСНОВНАЯ ЛОГИКА

// Запускает процесс выгрузки документооборота и печатных форм. Вызывается из формы интерактивно
// Данная часть не выполняет авторизации, т.к. у нас есть контекст основного модуля, где мы авторизованы
//
Функция ВыгрузитьДокументооборотНаСервере(Параметры, СохраненныеНастройки)
	
	ЕстьОшибки = Ложь;
	
	ПлагинОбновлен = ПроверитьИУстановитьОбновление(СохраненныеНастройки, ЕстьОшибки);
	Если ПлагинОбновлен Тогда
		Сообщить("Сохранение ДО не выполнено. Плагин был обновлен. Перезапустите плагин и повторите попытку.", СтатусСообщения.Внимание);
		Возврат Ложь;
	ИначеЕсли ЕстьОшибки Тогда
		Сообщить("Сохранение ДО не выполнено. Подробности см. в журнале регистрации.", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиВыгрузки = ПодготовитьНастройкиДляВыгрузкиДокументов(СохраненныеНастройки);
	ПроверитьНастройкиДляВыгрузкиДокументов(НастройкиВыгрузки, ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Сообщить("Сохранение ДО не выполнено. Подробности см. в журнале регистрации.", СтатусСообщения.Внимание);	
	Иначе
		СкачатьИСохранитьДокументооборотССервера(НастройкиВыгрузки);
		ВывестиИнформационноеСообщениеПользователюПослеОбработки();
	КонецЕсли;
	
	ОчиститьЛогСообщений();
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

// Вызывается из регламентных заданий
//
// Параметры:
//  Параметры		 - Структура - параметры запуска рег. задания
//  НастройкиПлагина - Структура - сохраненные настройки плагина
// 
// Возвращаемое значение:
//  Булево - всегда истина
//
Функция ВыполнитьРегламентныеДействия(Параметры, СохраненныеНастройки)
	
	ЕстьОшибки = Ложь;
	
	Если Не ОбрабатыватьВРегламентномЗадании(СохраненныеНастройки) Тогда
		Возврат ЕстьОшибки
	КонецЕсли;
	
	ПлагинОбновлен = ПроверитьИУстановитьОбновление(СохраненныеНастройки, ЕстьОшибки);
	Если ПлагинОбновлен Или ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиВыгрузки = ПодготовитьНастройкиДляВыгрузкиДокументов(СохраненныеНастройки);
	ПроверитьНастройкиДляВыгрузкиДокументов(НастройкиВыгрузки, ЕстьОшибки);
	
	КонтекстСеанса = ОсновнойМодуль.ЭДО_КонтекстСеансаКлиентСервер();
	Если Не ЗначениеЗаполнено(КонтекстСеанса) Тогда
		КонтекстСеанса = ОсновнойМодуль.ЭДО_ЗаполнитьКонтекстСеансаДляСлужебнойУчетнойЗаписи();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтекстСеанса) Тогда
		СкачатьИСохранитьДокументооборотССервера(НастройкиВыгрузки);	
	Иначе
		ТекстОшибки = "Не удалось выполнить авторизацию (см. подробности в журнале регистрации)";
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, ЕстьОшибки);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Процедура СкачатьИСохранитьДокументооборотССервера(НастройкиВыгрузки)
	
	СписокДокументов = ПодготовитьСписокДокументовДляВыгрузки(НастройкиВыгрузки);
	
	Для Каждого СтрокаТаблицы Из СписокДокументов Цикл
		СкачатьИСохранитьДокументооборотССервераПоДокументу(СтрокаТаблицы, НастройкиВыгрузки);	
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСписокДокументовДляВыгрузки(НастройкиВыгрузки)
	
	Перем Результат;
	
    РежимаСпискаДокументов = Перечисление_РежимыПостроенияСпискаДокументов();
	
	ПараметрыСписка = Новый_ПараметрыОтбораСпискаДокументов(
		РежимаСпискаДокументов.ОтправленныеДокументы,
		НастройкиВыгрузки.Отбор.ДатаНачала);
		
	ИменаКолонок = ИменаКолонокТаблицыДокументов();
	
	Для Каждого СтрокаТаблицыОрганизаций Из ОсновнойМодуль.ЭДО_Модуль_ТаблицаОрганизацийПользователя()Цикл
		
		СопоставленныеОрганизации1С = СопоставленныеОрганизации1С(СтрокаТаблицыОрганизаций);
		
		ОрганизацияДляОтбора = ОтмеченнаяОрганизацияИзНастроекПлагина(СопоставленныеОрганизации1С, НастройкиВыгрузки.Отбор.Организации);
		Если ОрганизацияДляОтбора = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		ПараметрыСписка.Режим = РежимаСпискаДокументов.ОтправленныеДокументы;
		ПараметрыСписка.ОтборПоОрганизации = ОрганизацияДляОтбора;
		
		ОсновнойМодуль.ЭДО_Модуль_ОбновитьСписокДокументов(ПараметрыСписка);
		СписокИсходящих = ОсновнойМодуль.СписокДокументов.Скопировать(, ИменаКолонок);
		
		ПараметрыСписка.Режим = РежимаСпискаДокументов.ПолученныеДокументы;
		ОсновнойМодуль.ЭДО_Модуль_ОбновитьСписокДокументов(ПараметрыСписка);
		ВходящиеДокументы = ОсновнойМодуль.СписокДокументов.Скопировать(, ИменаКолонок);
		
		Если Результат = Неопределено Тогда
			Результат = ОбъединитьТаблицы(СписокИсходящих, ВходящиеДокументы);
		Иначе
			Результат = ОбъединитьТаблицы(Результат, СписокИсходящих);
			Результат = ОбъединитьТаблицы(Результат, ВходящиеДокументы);
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыДляВыгрузкиДО = Новый Массив;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		ДобавитьВЛог_ОбработаноСтрок();

		Если ПроверитьСтрокуТаблицуНаСоответствиеДопОтборамИОшибки(СтрокаТаблицы, НастройкиВыгрузки) Тогда
			ДокументыДляВыгрузкиДО.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Результат.Скопировать(ДокументыДляВыгрузкиДО);
	
	Возврат Результат;
	
КонецФункции

Процедура СкачатьИСохранитьДокументооборотССервераПоДокументу(СтрокаТаблицы, НастройкиВыгрузки)
	
	КаталогАрхива = СформироватьПутьККаталогу(СтрокаТаблицы, НастройкиВыгрузки);
	ИмяФайлаБезРасширения = СформироватьИмяФайлаБезРасширения(СтрокаТаблицы);
	
	ДанныеФайлаZip = Новый_ДанныеФайла(КаталогАрхива, ИмяФайлаБезРасширения, "zip");
	СкачатьZipДокументооборотаССервера(СтрокаТаблицы, ДанныеФайлаZip);
	
	ФайлыПрисоединены = Ложь;
	ФайлыЗаписаны = Ложь;
	ЕстьОшибки = Ложь;
	
	Если ЗаписатьФайлыНаДиск(ДанныеФайлаZip) Тогда
		
		ФайлыЗаписаны = Истина;
		
		ЗаписатьВСвойстваДокументаПутьКАрхиву(СтрокаТаблицы, ДанныеФайлаZip);
		
		Если НастройкиВыгрузки.ПрисоединитьФайлыКДокументу Тогда
			ФайлыПрисоединены = ПрисоединитьФайлКДокументу1С(ДанныеФайлаZip, НастройкиВыгрузки, СтрокаТаблицы);
			ЕстьОшибки = Не ФайлыПрисоединены;
		КонецЕсли;
		
	Иначе
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки
		И НастройкиВыгрузки.ПрисоединитьФайлыКДокументу
		И НастройкиВыгрузки.ПрисоединятьПечатныеФормыОтдельно Тогда
		
		ДанныеФайлаPDF = Новый_ДанныеФайла(КаталогАрхива, ИмяФайлаБезРасширения, "pdf");
		ЗагрузитьПечатнуюФормуДокументаССервера(СтрокаТаблицы, ДанныеФайлаPDF);
		
		Если ЗаписатьФайлыНаДиск(ДанныеФайлаPDF) Тогда
			ФайлыПрисоединены = ПрисоединитьФайлКДокументу1С(ДанныеФайлаPDF, НастройкиВыгрузки, СтрокаТаблицы);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		ЗаписатьВСвойстваДокументаПризнакАрхивЗагружен(СтрокаТаблицы);
	КонецЕсли;
	
	Если ФайлыПрисоединены Тогда
		ДобавитьВЛог_ФайлПрисоединен();
	КонецЕсли;
	
	Если ФайлыЗаписаны Тогда
		ДобавитьВЛог_ФайлыСохранены();
	КонецЕсли;
	
КонецПроцедуры

Процедура СкачатьZipДокументооборотаССервера(СтрокаТаблицы, ДанныеФайла)
	
	Попытка
		ДанныеФайла.ДвоичныеДанные = ОсновнойМодуль.ЭДО_ПолучитьАрхивДокументооборота(
			СтрокаТаблицы.boxId,
			СтрокаТаблицы.letterId,
			СтрокаТаблицы.documentId);
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
		ДобавитьВЛог_ОписаниеОшибки(ТекстОшибки);
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьПечатнуюФормуДокументаССервера(СтрокаТаблицы, ДанныеФайла)

	Попытка
		ДанныеФайла.ДвоичныеДанные = ОсновнойМодуль.ЭДО_ПолучитьПечатнуюФормуДокумента(
			СтрокаТаблицы.BoxId,
			СтрокаТаблицы.LetterId,
			СтрокаТаблицы.DocumentId);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ДобавитьВЛог_ОписаниеОшибки(ТекстОшибки);
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаписатьФайлыНаДиск(ДанныеФайла)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеФайла.ДвоичныеДанные) Тогда
		Попытка
			ДанныеФайла.ДвоичныеДанные.Записать(ДанныеФайла.ПолныйПутьКФайлу);
			Результат = Истина;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ДобавитьВЛог_ОписаниеОшибки(ТекстОшибки);
			ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрисоединитьФайлКДокументу1С(ДанныеФайла, НастройкиВыгрузки, СтрокаТаблицы)
	
	Перем ПараметрыДобавления;

	Результат = Ложь;
	
	ДокументУчета = УчетныйДокумент1С(СтрокаТаблицы);
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанные);
		
		Попытка
			
			Выполнить("ПараметрыДобавления = РаботаСФайлами.ПараметрыДобавленияФайла()");
			ПараметрыДобавления.ВладелецФайлов = ДокументУчета;
			ПараметрыДобавления.ИмяБезРасширения = ДанныеФайла.ИмяБезРасширения;
			ПараметрыДобавления.РасширениеБезТочки = ДанныеФайла.Расширение;
			ПараметрыДобавления.Автор = "";
			
			Выполнить("РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, АдресХранилища)");
			
			Результат = Истина;

		Исключение
			
			ТекстОшибки = СтрокаПоШаблону("Не удалось присоединить файл %1 к документу %2 по причине:"+Символы.ПС+ОписаниеОшибки(),
				ДанныеФайла.ИмяБезРасширения,
				Строка(ДокументУчета)
			);
			
			ДобавитьВЛог_ОписаниеОшибки(ТекстОшибки);
			ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки);
	
			ОтключитьНастройкуПрисоединенияФайлов(НастройкиВыгрузки);
			
		КонецПопытки;
		
		УдалитьИзВременногоХранилища(АдресХранилища);
		
	Иначе
		ТекстОшибки = СтрокаПоШаблону("Файлы по %1 не присоединены, т.к. нет связанного документа 1С", ДанныеФайла.ИмяБезРасширения);
		ДобавитьВЛог_ОписаниеОшибки(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// } // { СКАЧИВАНИЕ ФАЙЛОВ. ОСНОВНАЯ ЛОГИКА

// { Скачивание ДО. Проверки

// Функция накладывает доп. фильтры на документы, которые мы не смогли применить в запросе
//
// Параметры:
//  СтрокаСписка		 - СтрокаТаблицыЗначений - строка таблицы списка документов
//  НастройкиВыгрузки	 - Структура - см. Контракт_НастройкиВыгрузкиДокументов 
// 
// Возвращаемое значение:
//  Булево - Истина, когда документ прошел через доп. фильтр
//
Функция ПроверитьСтрокуТаблицуНаСоответствиеДопОтборамИОшибки(СтрокаТаблицы, НастройкиВыгрузки)
	
	Результат = Истина;
	
	Если НастройкиВыгрузки.Отбор.СтатусыДокументов.Найти(СтрокаТаблицы.Статус) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;

	Если Результат И НастройкиВыгрузки.Отбор.ТипыДокументов.Найти(СтрокаТаблицы.ТипДокумента) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		Результат = Не ФайлыДокументооборотаБылиРанееЗагружены(СтрокаТаблицы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлыДокументооборотаБылиРанееЗагружены(СтрокаТаблицы)
	
	Результат = Ложь;
	
	ОбъектУчета = ОбъектУчетаДопСвойств(СтрокаТаблицы);
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		Результат =	ОсновнойМодуль.ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(
			ОбъектУчета,
			ИмяДопРеквизита_АрхивЗагружен());
	КонецЕсли;
		
	Если Результат = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненоПолеКонтрагентСтрокиТаблицыДокументов(СтрокаТаблицы)
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		
		Результат = Ложь;
		
		ТекстСообщения = СтрокаПоШаблону("Не заполнено поле Контрагент. Файлы по документу %1 не будут загружены",
			СтрокаТаблицы.ПредставлениеДокументаДиадок);
			
		ДобавитьВЛог_ОписаниеОшибки(ТекстСообщения);
		ДобавитьОшибкуВЖурналРегистрации(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// } // { Скачивание ДО. Проверки

// { 	Скачивание ДО. Контракты и конструкторы

Функция Контракт_НастройкиВыгрузкиДокументов()

	Результат = Новый Структура;
	Результат.Вставить("Каталог", "");
	Результат.Вставить("ВыгружатьПечатныеФормы", Ложь);
	Результат.Вставить("ПрисоединитьФайлыКДокументу", Ложь);
	Результат.Вставить("ПрисоединятьПечатныеФормыОтдельно", Ложь);
	Результат.Вставить("Отбор", Контракт_ОтборДокументов());
	Результат.Вставить("Отладка", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция Контракт_ОтборДокументов()
	
	Результат = Новый Структура;
	Результат.Вставить("Организации", Новый Массив);
	Результат.Вставить("ДатаНачала", Дата(1,1,1));
	Результат.Вставить("СтатусыДокументов", Новый Массив);
	Результат.Вставить("ТипыДокументов", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция Контракт_ПараметрыОтбораСпискаДокументов()
	
	Результат = Новый Структура;
	Результат.Вставить("Режим");
	Результат.Вставить("НачалоПериода");
	Результат.Вставить("КонецПериода");
	Результат.Вставить("ПоказыватьЗавершенные");
	Результат.Вставить("РежимОтбораПоПериоду");
	Результат.Вставить("ОтборПоОрганизации");
	
	Возврат Результат;
	
КонецФункции

Функция Контракт_ДанныеФайла()

	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("ИмяБезРасширения", "");
	Результат.Вставить("Расширение", "");
	Результат.Вставить("ПолныйПутьКФайлу", "");
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция Контракт_ЛогСообщений()
	
	Результат = Новый Структура;
	Результат.Вставить("Обработано", 0);
	Результат.Вставить("Загружено", 0);
	Результат.Вставить("Присоединено", 0);
	Результат.Вставить("Ошибки", Новый Массив);
	
	Возврат Результат;

КонецФункции

Функция Новый_Сообщение(Текст, пСтатус)
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("Статус", пСтатус);
	
	Возврат Результат;
	
КонецФункции

Функция Новый_ДанныеФайла(Каталог, ИмяБезРасширения, Расширение)
	
	ИмяСРасширением = СтрокаПоШаблону("%1.%2", ИмяБезРасширения, Расширение);
	
	ЧастиПути = Новый Массив;
	ЧастиПути.Добавить(Каталог);
	ЧастиПути.Добавить(ИмяСРасширением);
	
	ПолныйПуть = СоединитьЧастиПути(ЧастиПути);

	Результат = Контракт_ДанныеФайла();
	Результат.ИмяБезРасширения = ИмяБезРасширения;
	Результат.Имя = ИмяСРасширением;
	Результат.Расширение = Расширение;
	Результат.ПолныйПутьКФайлу = ПолныйПуть;
	
	Возврат Результат;
	
КонецФункции

Функция Новый_ПараметрыОтбораСпискаДокументов(Режим, ДатаНачала)
	
	Результат = Контракт_ПараметрыОтбораСпискаДокументов();
	
	Результат.Режим = Режим;
	Результат.НачалоПериода = НачалоДня(ДатаНачала);
	Результат.КонецПериода = КонецДня(ТекущаяДата());
	Результат.ПоказыватьЗавершенные = Истина;
	Результат.РежимОтбораПоПериоду = РежимыОтбораСпискаДокументов_ПоДатеОтправкиИлиПолучения();
	
	Возврат Результат;	
	
КонецФункции

// } 	Скачивание ДО. Контракты и конструкторы

// { Скачивание ДО. Прочие

Функция ПредставлениеТипаДокумента(Тип)
	
	Если Тип = "XmlTorg12" Тогда
		Типдокумента = "Накладная";	
	ИначеЕсли Тип = "XmlAcceptanceCertificate" Тогда
		Типдокумента = "Акт";
	ИначеЕсли Тип = "Invoice" Тогда
		Типдокумента = "Счет-фактура";
	ИначеЕсли Тип = "InvoiceRevision" Тогда
		Типдокумента = "Исправление СФ";
	ИначеЕсли Тип = "InvoiceCorrection" Тогда
		Типдокумента = "Корректировочный СФ";
	ИначеЕсли Тип = "InvoiceCorrectionRevision" Тогда
		Типдокумента = "Исправление корректировочного СФ";
	ИначеЕсли Тип = "UniversalTransferDocument" Тогда
		Типдокумента = "УПД";
	ИначеЕсли Тип = "UniversalTransferDocumentRevision" Тогда
		Типдокумента = "Исправление УПД";
	ИначеЕсли Тип = "UniversalCorrectionDocumentRevision" Тогда
		Типдокумента = "Исправление УКД";
	ИначеЕсли Тип = "UtdInvoice" Тогда
		Типдокумента = "Счет-фактура";
	ИначеЕсли Тип = "UtdInvoiceRevision" Тогда
		Типдокумента = "Исправление СФ";
	ИначеЕсли Тип = "UtdAcceptanceCertificate" Тогда
		Типдокумента = "Акт";
	ИначеЕсли Тип = "UtdTorg12" Тогда
		Типдокумента = "Накладная";
	ИначеЕсли Тип = "UniversalCorrectionDocument" Тогда
		Типдокумента = "УКД";
	ИначеЕсли Тип = "UcdInvoiceCorrection" Тогда
		Типдокумента = "Корректировочный СФ";
	ИначеЕсли Тип = "UcdInvoiceCorrectionRevision" Тогда
		Типдокумента = "Исправление корректировочного СФ";
	ИначеЕсли Тип = "XmlAcceptanceCertificate552" Тогда
		Типдокумента = "Акт";
	ИначеЕсли Тип = "TovTorg" Тогда
		Типдокумента = "Накладная";
	ИначеЕсли Тип = "StorageInventoryAcceptanceCertificate" Тогда
		Типдокумента = "МХ-1";
	ИначеЕсли Тип = "ReturnInventoryAcceptanceCertificate" Тогда
		Типдокумента = "МХ-3";
	ИначеЕсли Тип = "ProformaInvoice" Тогда
		Типдокумента = "Счет";
	ИначеЕсли Тип = "Nonformalized" Тогда
		Типдокумента = "Неформализованный документ";
	ИначеЕсли Тип = "NonformalizedProforma" Тогда
		Типдокумента = "Счет";
	ИначеЕсли Тип = "TrustConnectionRequest" Тогда
		Типдокумента = "Запрос на обмен документами через Диадок";
	ИначеЕсли Тип = "Torg12" Тогда
		Типдокумента = "Накладная";
	ИначеЕсли Тип = "AcceptanceCertificate" Тогда
		Типдокумента = "Акт";
	ИначеЕсли Тип = "PriceList" Тогда
		Типдокумента = "Ценовой лист";
	ИначеЕсли Тип = "PriceListAgreement" Тогда
		Типдокумента = "Протокол согласования цены";
	ИначеЕсли Тип = "CertificateRegistry" Тогда
		Типдокумента = "Реестр сертификатов";
	ИначеЕсли Тип = "ReconciliationAct" Тогда
		Типдокумента = "Акт сверки";
	ИначеЕсли Тип = "Contract" Тогда
		Типдокумента = "Договор";
	ИначеЕсли Тип = "Torg13" Тогда
		Типдокумента = "Накладная";
	ИначеЕсли Тип = "ServiceDetails" Тогда
		Типдокумента = "Детализация";
	ИначеЕсли Тип = "SupplementaryAgreement" Тогда
		Типдокумента = "Доп. соглашение к договору";
	Иначе
		Типдокумента = "неизвестный тип документа";
	КонецЕсли;
	
	Возврат Типдокумента;
	
КонецФункции

Функция СтатусыДокументовДляВыгрузки()
	
	Перечисление_Статусы = ОсновнойМодуль.ЭДО_Перечисление_СтатусыДокументов();
		
	Результат = Новый Массив;
	Результат.Добавить(Перечисление_Статусы.Подписан);
	Результат.Добавить(Перечисление_Статусы.ДокументооборотЗавершен);
	Результат.Добавить(Перечисление_Статусы.ПодписанКонтрагентом);

	Возврат Результат;
	
КонецФункции	

Функция ТипыДокументовДляВыгрузки(СохраненныеНастройкиПлагина)
	
	СписокТиповДокументов = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "СписокТиповДокументов", Неопределено);
	
	Если СписокТиповДокументов = Неопределено Тогда
		СписокТиповДокументов = ТипыДокументовДляВыгрузкиПоУмолчанию();
	КонецЕсли;
	
	Результат = ПомеченныеЭлементыСпискаВМассив(СписокТиповДокументов);
	
	Возврат Результат;
	
КонецФункции	

Функция ОбъектУчетаДопСвойств(СтрокаТаблицы)

	Перем ОбъектУчета;
	
	Если ИспользуетсяПодсистемаДиадок() Тогда
		ОбъектУчета = СтрокаТаблицы.ДокументЭДО;
	Иначе
		ОбъектУчета = УчетныйДокумент1С(СтрокаТаблицы);
	КонецЕсли;
	
	Возврат ОбъектУчета;

КонецФункции

Функция УчетныйДокумент1С(СтрокаТаблицы)
	
	Перем Результат;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		Результат = СтрокаТаблицы.Документ;
	Иначе
		Результат = СвойствоСтруктурыЛокальная(СтрокаТаблицы.Пакет, "Документ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтмеченнаяОрганизацияИзНастроекПлагина(Сопоставленные1С, ОрганизацииДляВыгрузкиДО)
	
	Результат = Неопределено;
	
	Для Каждого ОрганизацияСсылка Из Сопоставленные1С Цикл
		Если ОрганизацииДляВыгрузкиДО.Найти(ОрганизацияСсылка) <> Неопределено Тогда
			Результат = ОрганизацияСсылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СопоставленныеОрганизации1С(СтрокаТаблицыОрганизаций)
	
	Результат = Новый Массив;
	
	Если ИспользуетсяПодсистемаДиадок() Тогда
		Идентификаторы = ОсновнойМодуль.ЭДО_Новый_ИдентификаторыСправочника(СтрокаТаблицыОрганизаций.Ссылка);
		Результат = ОсновнойМодуль.ЭДО_Организации_СопоставленныеВ1С(Идентификаторы);
		
	Иначе
		Результат.Добавить(СтрокаТаблицыОрганизаций.Ссылка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПутьККаталогу(СтрокаТаблицы, НастройкиВыгрузки)
	
	ДатаАрхива = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокумента) Тогда
		ДатаАрхива = СтрокаТаблицы.ДатаДокумента;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаПолучения) Тогда
		ДатаАрхива = СтрокаТаблицы.ДатаПолучения;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаОтправки) Тогда
		ДатаАрхива = СтрокаТаблицы.ДатаОтправки;
	КонецЕсли;
	
	Направления = ОсновнойМодуль.ЭДО_Перечисление_Направления();
	Если СтрокаТаблицы.Направление = Направления.Исходящее Тогда
		Направление = "Исходящие документы";
	Иначе
		Направление = "Входящие документы";
	КонецЕсли;
	
	ТипДокумента = ПредставлениеТипаДокумента(СтрокаТаблицы.ТипДокумента);
	
	ПредставлениеКонтрагента = ПолучитьПредставлениеКонтрагента(СтрокаТаблицы);
	ПредставлениеОрганизации = ПолучитьПредставлениеОрганизации(СтрокаТаблицы.Организация);
	
	ГодАрхива = Формат(ДатаАрхива, "ДФ=yyyy");
	МесяцАрхива = Формат(ДатаАрхива,"ДФ=ММММ");
	
	ЧастиПути = Новый Массив;
	ЧастиПути.Добавить(НастройкиВыгрузки.Каталог);
	ЧастиПути.Добавить(ПредставлениеОрганизации);
	ЧастиПути.Добавить(Направление);
	ЧастиПути.Добавить(ПредставлениеКонтрагента);
	ЧастиПути.Добавить(ГодАрхива);
	ЧастиПути.Добавить(МесяцАрхива);
	ЧастиПути.Добавить(ТипДокумента);
	
	Результат = СоединитьЧастиПути(ЧастиПути);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПредставлениеОрганизации(Организация)
	
	Результат = ПолучитьИзКэша(Организация);
	Если Результат = Неопределено Тогда
		
		ДанныеОрганизации = ЗначенияРеквизитовОбъекта(Организация, "Наименование");
		Результат = СокрЛП(ЗаменитьНедопустимыеСимволы(ДанныеОрганизации.Наименование));
		
		ДобавитьВКэш(Организация, Результат);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьПредставлениеКонтрагента(СтрокаТаблицы)
	
	Если ИспользуетсяПодсистемаДиадок() Тогда
		
		КонтрагентЭДО = СтрокаТаблицы.Пакет.КонтрагентДиадок;
		
		Результат = ПредставлениеКонтрагентаИзКэша(КонтрагентЭДО);
		
		Если Результат = Неопределено Тогда
			Результат = РеквизитыКонтрагентаСтрокой(КонтрагентЭДО);
			ДобавитьПредставлениеКонтрагентаВКэш(КонтрагентЭДО, Результат);
		КонецЕсли;
		
	Иначе
		
		ИдентификаторЯщика = АдресЯщикаКонтрагентаИзЭлектронногоДокумента(СтрокаТаблицы);
		
		Результат = ПредставлениеКонтрагентаИзКэша(ИдентификаторЯщика);
		Если Результат = Неопределено Тогда
			Результат = РеквизитыКонтрагентаСтрокой(ИдентификаторЯщика);
			ДобавитьПредставлениеКонтрагентаВКэш(ИдентификаторЯщика, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьИмяФайлаБезРасширения(СтрокаТаблицы)
	
	ИмяФайла = СтрокаТаблицы.ИмяФайла;
	
	Если Не ИспользуетсяПодсистемаДиадок() И НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		
		ДанныеДокумента = ДанныеДокументаИзСтроки(СтрокаТаблицы);
		ИмяФайла = СвойствоСтруктурыЛокальная(ДанныеДокумента, "ИмяФайла");
		
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			ИмяФайла = СтрокаТаблицы.DocumentId;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = СтрокаТаблицы.ПредставлениеДокументаДиадок;
	КонецЕсли;
	
	Если СтрокаТаблицы.ТипДокумента = "Nonformalized" И УчетныйДокумент1С(СтрокаТаблицы) = Неопределено Тогда
		ИмяФайла = СтрокаПоШаблону("%1 (%2)", ИмяФайла, СтрокаТаблицы.DocumentId);	
	КонецЕсли;
	
	Результат = ЗаменитьНедопустимыеСимволы(ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДокументаИзСтроки(СтрокаТаблицы)
	
	ДанныеДокументовЭДО = ПолучитьИзКэша("ДанныеДокументовЭДО");
	Если ДанныеДокументовЭДО = Неопределено Тогда
		ДанныеДокументовЭДО = Новый Соответствие;
		ДобавитьВКэш("ДанныеДокументовЭДО", ДанныеДокументовЭДО);
	КонецЕсли;
	
	Результат = ДанныеДокументовЭДО.Получить(СтрокаТаблицы.DocumentId);
	
	Если Результат = Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДанныеДокумента) Тогда
		Результат = ЗначениеИзСтрокиВнутр(СтрокаТаблицы.ДанныеДокумента);
		ДанныеДокументовЭДО.Вставить(СтрокаТаблицы.DocumentId, Результат);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция АдресЯщикаКонтрагентаИзЭлектронногоДокумента(СтрокаТаблицы)

	Результат = Неопределено;
	
	ДанныеДокумента = ДанныеДокументаИзСтроки(СтрокаТаблицы);
	
	Если ДанныеДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПеречислениеНаправления = ОсновнойМодуль.ЭДО_Перечисление_Направления();
	
	Если ДанныеДокумента.Направление = ПеречислениеНаправления.Входящее Тогда
		Результат = ДанныеДокумента.Отправитель.BoxId;
	Иначе
		Результат = ДанныеДокумента.Получатель.BoxId;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаКолонокТаблицыДокументов()
	
	ИменаКолонок = Новый Массив;
	
	ИменаКолонок.Добавить("BoxId");
	ИменаКолонок.Добавить("DocumentId");
	ИменаКолонок.Добавить("LetterId");
	ИменаКолонок.Добавить("ДанныеДокумента");
	ИменаКолонок.Добавить("ДатаДокумента");
	ИменаКолонок.Добавить("ДатаОтправки");
	ИменаКолонок.Добавить("ДатаПолучения");
	ИменаКолонок.Добавить("Документ");
	ИменаКолонок.Добавить("ДокументЭДО");
	ИменаКолонок.Добавить("ИмяФайла");
	ИменаКолонок.Добавить("Контрагент");
	ИменаКолонок.Добавить("Направление");
	ИменаКолонок.Добавить("Организация");
	ИменаКолонок.Добавить("Пакет");
	ИменаКолонок.Добавить("ПредставлениеДокументаДиадок");
	ИменаКолонок.Добавить("Статус");
	ИменаКолонок.Добавить("ТипДокумента");
	
	Результат = СоединитьСтроки(ИменаКолонок);
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыКонтрагентаСтрокой(ИдентификаторИлиСсылка)

	Если ИспользуетсяПодсистемаДиадок() Тогда
		РеквизитыКонтрагента = ЗначенияРеквизитовОбъекта(ИдентификаторИлиСсылка, "Наименование, ИНН");
	Иначе
		РеквизитыКонтрагента = ОсновнойМодуль.Контрагенты_ЗаполненныеРеквизиты(, ИдентификаторИлиСсылка);
	КонецЕсли;

	Результат = СтрокаПоШаблону("%1 %2",
		СокрЛП(РеквизитыКонтрагента.ИНН),
		СокрЛП(ЗаменитьНедопустимыеСимволы(РеквизитыКонтрагента.Наименование)));
		
	Возврат Результат;
	
КонецФункции

// } // { Скачивание ДО. Прочие

// } 	СКАЧИВАНИЕ ДО

//{ 	НАСТРОЙКИ 

Процедура ЗаписатьВСвойстваДокументаПутьКАрхиву(СтрокаТаблицы, ДанныеФайла)
	
	ОбъектУчета = ОбъектУчетаДопСвойств(СтрокаТаблицы);
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		ОсновнойМодуль.ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(
			ОбъектУчета,
			ИмяДопРеквизита_ПутьКАрхиву(),
			ДанныеФайла.ПолныйПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВСвойстваДокументаПризнакАрхивЗагружен(СтрокаТаблицы)
	
	ОбъектУчета = ОбъектУчетаДопСвойств(СтрокаТаблицы);
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		АрхивЗагружен = Истина;
		ОсновнойМодуль.ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(
			ОбъектУчета,
			ИмяДопРеквизита_АрхивЗагружен(),
			АрхивЗагружен);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьНастройкиДляВыгрузкиДокументов(СохраненныеНастройкиПлагина)
	
	ЗначениеПоУмолчанию_ПустаяСтрока = "";
	
	КаталогВыгрузки = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "ПутьКАрхиву", ЗначениеПоУмолчанию_ПустаяСтрока);
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		КаталогВыгрузки = ОсновнойМодуль.ЭДО_Модуль_ОбщиеНастройки().СохранениеДокументовПуть;
	КонецЕсли;		
	
	МассивОрганизаций = ОрганизацииДляСохраненияДокументов(СохраненныеНастройкиПлагина);
	СтатусыВыгружаемыхДокументов = СтатусыДокументовДляВыгрузки();
	ТипыДокументов = ТипыДокументовДляВыгрузки(СохраненныеНастройкиПлагина);
	
	ЗначениеПоУмолчанию_Смещения = 1;
	СмещениеКоличествоМесяцев = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "СмещениеКоличествоМесяцев", ЗначениеПоУмолчанию_Смещения);
	ДатаНачала = ДобавитьМесяц(ТекущаяДата(), -СмещениеКоличествоМесяцев);
	
	ЗначениеПоУмолчанию_Ложь = Ложь;
	ПрисоединятьКДокументу = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "ПрисоединятьКДокументу", ЗначениеПоУмолчанию_Ложь);
	ПрисоединятьПечатныеФормыОтдельно = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "ПрисоединятьПечатныеФормыОтдельно", ЗначениеПоУмолчанию_Ложь);
	
	ПоказыватьОтладочнуюИнформацию = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "ПоказыватьОтладочнуюИнформацию", ЗначениеПоУмолчанию_Ложь);
	
	Результат = Контракт_НастройкиВыгрузкиДокументов();
	Результат.Каталог = КаталогВыгрузки;
	Результат.ПрисоединитьФайлыКДокументу = ПрисоединятьКДокументу;
	Результат.ПрисоединятьПечатныеФормыОтдельно = ПрисоединятьПечатныеФормыОтдельно;
	Результат.Отладка = ПоказыватьОтладочнуюИнформацию;
	Результат.Отбор.Организации = МассивОрганизаций;
	Результат.Отбор.СтатусыДокументов = СтатусыВыгружаемыхДокументов;
	Результат.Отбор.ТипыДокументов = ТипыДокументов;
	Результат.Отбор.ДатаНачала = ДатаНачала;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьНастройкуПрисоединенияФайлов(НастройкиВыгрузки)

	НастройкиВыгрузки.ПрисоединитьФайлыКДокументу = Ложь;
	НастройкиВыгрузки.ПрисоединятьПечатныеФормыОтдельно = Ложь;
	
	Результат = Неопределено;

	Манифест = МанифестПлагина();
	
	ПараметрыСобытия = Новый Структура("Идентификатор, Результат", Манифест.Идентификатор);
	ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагин_ПолучитьНастройки", ПараметрыСобытия);
	
	Если ПараметрыСобытия.Результат.Успешно Тогда
		
		СохраненныеНастройкиПлагина = ПараметрыСобытия.Результат.Данные;
		
		СохраненныеНастройкиПлагина.Вставить("ПрисоединятьКДокументу", Ложь);
		СохраненныеНастройкиПлагина.Вставить("ПрисоединятьПечатныеФормыОтдельно", Ложь);
		
		ЗаписатьНастройки(СохраненныеНастройкиПлагина);
		
		ТекстОшибки = "Настройка присоединения файлов отключена!!!";
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНастройки(Настройки)
	Идентификатор = МанифестПлагина().Идентификатор;

	ПараметрыСобытия = Новый Структура("Идентификатор, Настройки, Результат", Идентификатор, Настройки);
	ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагин_СохранитьНастройки", ПараметрыСобытия);
КонецПроцедуры

Функция ТипыДокументовДляВыгрузкиПоУмолчанию() Экспорт 
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("Torg12", "Накладная");
	СписокДокументов.Добавить("AcceptanceCertificate", "Акт");
	СписокДокументов.Добавить("XmlAcceptanceCertificate", "Акт сдачи-приемки");
	СписокДокументов.Добавить("Invoice", "Счёт-фактура");
	СписокДокументов.Добавить("InvoiceRevision", "Исправление СФ");
	СписокДокументов.Добавить("InvoiceCorrection", "Корректировочный СФ");
	СписокДокументов.Добавить("InvoiceCorrectionRevision", "Исправление корректировочного СФ");
	СписокДокументов.Добавить("UniversalTransferDocument", "УПД");
	СписокДокументов.Добавить("UniversalTransferDocumentRevision", "Исправление УПД");
	СписокДокументов.Добавить("UniversalCorrectionDocument", "УКД");
	СписокДокументов.Добавить("UniversalCorrectionDocumentRevision", "Исправление УКД");
	СписокДокументов.Добавить("XmlTorg12", "Накладная (формализованная)");
	СписокДокументов.Добавить("ProformaInvoice", "Счёт");
	СписокДокументов.Добавить("ReconciliationAct", "Акт сверки");
	СписокДокументов.Добавить("Nonformalized", "Неформализованный документ");
	СписокДокументов.Добавить("PriceList", "Ценовой лист");
	СписокДокументов.Добавить("Contract", "Договор");
	
	СписокДокументов.ЗаполнитьПометки(Истина);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ОрганизацииДляСохраненияДокументов(НастройкиПлагина)
	
	СписокОрганизаций = СвойствоСтруктурыЛокальная(НастройкиПлагина, "СписокОрганизаций", Новый СписокЗначений);
	Результат = ПомеченныеЭлементыСпискаВМассив(СписокОрганизаций);
	
	Возврат Результат;
	
КонецФункции

//} 	НАСТРОЙКИ

//{ 	АВТООБНОВЛЕНИЕ 

Функция ПроверитьИУстановитьОбновление(СохраненныеНастройки, ЕстьОшибки)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СохраненныеНастройки.ТекстОшибки) Тогда
		ТекстОшибки = "Выгрузка архива невозможна по причине ранее возникшей ошибки обновления плагина";
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, ЕстьОшибки);
		
	Иначе
		НоваяВерсия = НоваяВерсияПлагина();
		Если ЗначениеЗаполнено(НоваяВерсия) И НоваяВерсия <> ВерсияОбработки() Тогда
			ВыполнитьОбновлениеПлагина(НоваяВерсия, СохраненныеНастройки, ЕстьОшибки);
			Результат = Не ЕстьОшибки;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
        
КонецФункции

Функция НоваяВерсияПлагина()
	
	Перем Результат;
	
	Идентификатор = МанифестПлагина().Идентификатор;

	ПараметрыСобытия = Новый Структура("Результат");
	ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагины_ПроверитьНаличиеОбновлений", ПараметрыСобытия);
	
	ДанныеОбновления = ПараметрыСобытия.Результат.Данные;
	
	Для Каждого ПлагинВМассиве Из ДанныеОбновления Цикл
		
		Если ПлагинВМассиве.Идентификатор = Идентификатор Тогда
			Результат = ПлагинВМассиве.Версия;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьОбновлениеПлагина(НоваяВерсия, СохраненныеНастройкиПлагина, ЕстьОшибки)

	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("ДвоичныеДанные", Неопределено);
	ПараметрыОбновления.Вставить("Идентификатор", МанифестПлагина().Идентификатор);
	ПараметрыОбновления.Вставить("ВариантЗагрузки",	"Обновление");
	ПараметрыОбновления.Вставить("Представление", МанифестПлагина().Представление);
	ПараметрыОбновления.Вставить("Версия", НоваяВерсия);
	ПараметрыОбновления.Вставить("Результат", Неопределено);
	
	ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагин_Загрузить", ПараметрыОбновления);
	
	ОбновлениеВыполненоУспешно = СвойствоСтруктурыЛокальная(ПараметрыОбновления.Результат, "Успешно", Ложь);
	
	Если ОбновлениеВыполненоУспешно И ЗначениеЗаполнено(СохраненныеНастройкиПлагина.ТекстОшибки) Тогда
		
		СохраненныеНастройкиПлагина.ТекстОшибки = "";
		
		ЗаписатьНастройки(СохраненныеНастройкиПлагина);	
		
	ИначеЕсли Не ОбновлениеВыполненоУспешно Тогда
		
		ТекстОшибки = "Работа плагина отключена. Необходимо установить обновление плагина";
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, ЕстьОшибки);
		
		СохраненныеНастройкиПлагина.ТекстОшибки = ТекстОшибки;
		
		ЗаписатьНастройки(СохраненныеНастройкиПлагина);
		
	КонецЕсли;
	
КонецПроцедуры

//} 	АВТООБНОВЛЕНИЕ


//{ 	СЛУЖЕБНЫЕ МЕТОДЫ

//{ 	СлужебныеМетоды. Проверки

Процедура ПроверитьНастройкиДляВыгрузкиДокументов(НастройкиВыгрузки, ЕстьОшибки)

	ПроверитьДоступностьКаталога(НастройкиВыгрузки.Каталог, ЕстьОшибки);
	ПроверитьНаличиеВыбранныхОрганизаций(НастройкиВыгрузки.Отбор.Организации, ЕстьОшибки);
	ПроверитьНаличиеВыбранныхТиповДокументов(НастройкиВыгрузки.Отбор.ТипыДокументов, ЕстьОшибки);
	
КонецПроцедуры

Функция ОбрабатыватьВРегламентномЗадании(СохраненныеНастройкиПлагина)
	
	Результат = Истина;
	
	ИспользоватьРегЗадания = СвойствоСтруктурыЛокальная(СохраненныеНастройкиПлагина, "ИспользоватьРЗ", Ложь);
	ЭтоНастройкиОтСтаройВерсииПлагина = НЕ СохраненныеНастройкиПлагина.Свойство("ИспользоватьРЗ");
	
	Результат = (ИспользоватьРегЗадания Или ЭтоНастройкиОтСтаройВерсииПлагина);
	Возврат Результат;

КонецФункции

Процедура ПроверитьДоступностьКаталога(ПутьККаталогу, Отказ = Ложь, ТекстОшибки = "") Экспорт
	
	Если Отказ Тогда
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ТекстОшибки = "В настройках плагина не указан каталог для выгрузки архива";
		
	ИначеЕсли Не ФС_КаталогСуществует(ПутьККаталогу) Тогда
		ТекстОшибки = СтрокаПоШаблону("Каталог %1 не существует или к нему нет доступа", ПутьККаталогу);
		
	ИначеЕсли Не ФС_ЭтоКаталог(ПутьККаталогу) Тогда
		ТекстОшибки = СтрокаПоШаблону("%1 не является каталогом", ПутьККаталогу);
		
	ИначеЕсли Не ФС_ЕстьПровоСоздаватьФайлыВКаталоге(ПутьККаталогу) Тогда
		ТекстОшибки = СтрокаПоШаблону("Нет прав на запись файлов в %1", ПутьККаталогу);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	ШаблонТекстаОшибки = 
	"Компьютер: %1
	|Ошибка: %2";	
	
	ТекстОшибки = СтрокаПоШаблону(ШаблонТекстаОшибки, ИмяКомпьютера(), ТекстОшибки);
	
	ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, Отказ);
	
КонецПроцедуры

Функция ФС_ЕстьПровоСоздаватьФайлыВКаталоге(ПутьККаталогу)

	Результат = Истина;
	
	ИмяТестовогоФайла = "diadoc_test_create_file.txt";
	
	ЧастиПути = Новый Массив(2);
	ЧастиПути[0] = ПутьККаталогу;
	ЧастиПути[1] = ИмяТестовогоФайла;
	
	ПутьКФайлу = СоединитьЧастиПути(ЧастиПути);
	
	Попытка
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		УдалитьФайлы(ПутьКФайлу);
	Исключение
		ДобавитьОшибкуВЖурналРегистрации(ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ФС_ЭтоКаталог(ПутьККаталогу)

	Каталог = Новый Файл(ПутьККаталогу);
	Возврат Каталог.ЭтоКаталог();
	
КонецФункции

Функция ФС_КаталогСуществует(ПутьККаталогу)

	Каталог = Новый Файл(ПутьККаталогу);
	Возврат Каталог.Существует();
	
КонецФункции

Процедура ПроверитьНаличиеВыбранныхОрганизаций(ВыбранныеОрганизации, Отказ = Ложь, ТекстОшибки = "")
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не выбрано ни одной организации, для которой необходима выгрузка архива документов'");
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеВыбранныхТиповДокументов(ВыбранныеТипыДокументов, Отказ = Ложь, ТекстОшибки = "")
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеТипыДокументов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Сохранение документов невозможно. Не выбран ни один тип документов.'");
		ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

//}		СлужебныеМетоды. Проверки

//{ 	СлужебныеМетоды. Программные перечисления

Функция ИмяДопРеквизита_АрхивЗагружен()
	
	Возврат "АрхивЗагружен";
	
КонецФункции

Функция ИмяДопРеквизита_ПутьКАрхиву()
	
	Возврат "ПутьКАрхиву";
	
КонецФункции

//{ 	СлужебныеМетоды. Программные перечисления

//{ 	СлужебныеМетоды.Прочие

Процедура ВывестиИнформационноеСообщениеПользователюПослеОбработки()
	
	ЛогСообщений = ЛогСообщений();
	
	ВсегоОбработаноСтрок = ЛогСообщений.Обработано;
	ЗагруженоДокументов = ЛогСообщений.Загружено;
	ПрисоединеноФайлов = ЛогСообщений.Присоединено;
	ОписанияОшибок = ЛогСообщений.Ошибки;
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		Сообщить(ОписаниеОшибки.Текст, ОписаниеОшибки.Статус);
	КонецЦикла;
	
	ШаблонСообщения = НСтр(
		"ru='Обработка документов завершена.
		|Всего электронных документов за период: %1
		|Сохранено электронных документов: %2'"
	);
	
	Если ЕстьПодсистемаРаботаСФайлами() Тогда
		
		ШаблонСообщения = ШаблонСообщения + Символы.ПС + НСтр("ru='Документов 1С с прикрепленными файлами: %3'");
		
	КонецЕсли;
	
	ТекстСообщения = СтрокаПоШаблону(
		ШаблонСообщения,
		ВсегоОбработаноСтрок,
		ЗагруженоДокументов,
		ПрисоединеноФайлов
	);
	
	Сообщить(ТекстСообщения, СтатусСообщения.Информация);
	
КонецПроцедуры

Функция ПомеченныеЭлементыСпискаВМассив(СписокЗначений)

	Результат = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		Если ЭлементСписка.Пометка Тогда
			Результат.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СлужебнаяУчетнаяЗапись()
	
	ОбщиеНастройкиМодуля = ОсновнойМодуль.ЭДО_Модуль_ОбщиеНастройки();
	
	Результат = Новый Структура();
	Результат.Вставить("Логин", ОбщиеНастройкиМодуля.СлужебнаяУчетнаяЗаписьЛогин);
	Результат.Вставить("Пароль", ОбщиеНастройкиМодуля.СлужебнаяУчетнаяЗаписьПароль);
	
	Возврат Результат;
	
КонецФункции

Функция СвойствоСтруктурыЛокальная(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ОсновнойМодуль.ЭДО_Служебные_СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

Функция СоединитьЧастиПути(Строки)

	ТекРазделитель = РазделительПути();
	
	Результат = СоединитьСтроки(Строки, ТекРазделитель);
	
	Возврат Результат;
	
КонецФункции

Функция СоединитьСтроки(Строки, Разделитель = ",")

	Результат = "";
	
	Если ЗначениеЗаполнено(Строки) Тогда
		
		Для Каждого Строка Из Строки Цикл
			Если ПустаяСтрока(Результат) Тогда
				Результат = Строка;
			Иначе
				Результат = Результат + Разделитель + Строка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазделительПути()
	
	Результат = ПолучитьИзКэша("РазделительПути");
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОсновнойМодуль.ЭДО_Служебные_СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.3") = "ПерваяМеньше" Тогда
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			Результат = "\";
		Иначе
			Результат = "/";
		КонецЕсли;
		
	Иначе
		Результат = Вычислить("ПолучитьРазделительПути()");
	КонецЕсли;
	
	ДобавитьВКэш("РазделительПути", Результат);
	
	Возврат Результат
	
КонецФункции

Функция РежимыОтбораСпискаДокументов_ПоДатеОтправкиИлиПолучения()
	
	Возврат "ПоДатеОтправкиИлиПолучения";
	
КонецФункции

Функция Перечисление_РежимыПостроенияСпискаДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправкаПакетов"		, "ОтправкаПакетов");
	Результат.Вставить("ОтправленныеДокументы"	, "ОтправленныеДокументы");
	Результат.Вставить("ПолученныеДокументы"	, "ПолученныеДокументы");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция ОбъединитьТаблицы(Знач Приемник, Знач Источник)
		
	Если Источник.Количество() > Приемник.Количество() Тогда
		Результат = Источник;
		ВремИсточник = Приемник;
	Иначе
		Результат = Приемник;
		ВремИсточник = Источник;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВремИсточник Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов)
	
	Результат = ОсновнойМодуль.Общее_ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	Возврат Результат;
	
КонецФункции 

Функция СтрокаПоШаблону(Шаблон, П1 = "", П2 = "", П3 = "", П4 = "", П5 = "")
	
	Результат = Шаблон;
	Результат = СтрЗаменить(Результат, "%1", П1);
	Результат = СтрЗаменить(Результат, "%2", П2);
	Результат = СтрЗаменить(Результат, "%3", П3);
	Результат = СтрЗаменить(Результат, "%4", П4);
	Результат = СтрЗаменить(Результат, "%5", П5);
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяПодсистемаДиадок() Экспорт
	
	Если ИспользуетсяПодсистемаДиадок = Неопределено Тогда
		ИспользуетсяПодсистемаДиадок = ОсновнойМодуль.ИспользоватьПодсистемуДиадока();
	КонецЕсли;
	
	Возврат ИспользуетсяПодсистемаДиадок
	
КонецФункции

Функция ДобавитьОшибкуВЖурналРегистрации(ТекстОшибки, Отказ = Истина)
	
	Отказ = Истина;
	ЗаписьЖурналаРегистрации("Диадок. Плагин выгрузки архива документов", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволы(Знач ЗначениеСтрокой)
	
	НедопустимыеСимволы = "\/:*?""<>|";
	
	Пока СтрДлина(НедопустимыеСимволы) > 0 Цикл
		
		ТекСимвол = Лев(НедопустимыеСимволы, 1);
		
		Если Найти(ЗначениеСтрокой, ТекСимвол)<>0 Тогда
			ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, ТекСимвол,"_");
		КонецЕсли;
		
		НедопустимыеСимволы = Сред(НедопустимыеСимволы, 2);
		
	КонецЦикла;
	
	Возврат ЗначениеСтрокой;	
	
КонецФункции

Функция ЛогСообщений()
	
	Результат = ПолучитьИзКэша("ЛогСообщений");
	Если Результат = Неопределено Тогда
		Результат = Контракт_ЛогСообщений();
		ДобавитьВКэш("ЛогСообщений", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьЛогСообщений()
	
	Результат = Контракт_ЛогСообщений();
	ДобавитьВКэш("ЛогСообщений", Результат);
	
КонецПроцедуры

Функция ДобавитьВЛог_ОбработаноСтрок()
	
	Лог = ЛогСообщений();
	Лог.Обработано = Лог.Обработано + 1;
	
КонецФункции

Функция ДобавитьВЛог_ФайлыСохранены()

	Лог = ЛогСообщений();
	Лог.Загружено = Лог.Загружено + 1;
	
КонецФункции

Процедура ДобавитьВЛог_ФайлПрисоединен()
	
	Лог = ЛогСообщений();
	Лог.Присоединено = Лог.Присоединено + 1;
	
КонецПроцедуры

Функция ДобавитьВЛог_ОписаниеОшибки(Текст)

	Сообщение = Новый_Сообщение(Текст, СтатусСообщения.ОченьВажное);

	Лог = ЛогСообщений();
	Лог.Ошибки.Добавить(Сообщение);	
	
КонецФункции

//}		СлужебныеМетоды. Прочие

//{ 	СлужебныеМетоды. Кэш

Процедура ИнициализирватьКэш()

	Кэш = Новый Соответствие;
	
КонецПроцедуры

Процедура ДобавитьВКэш(Ключ, Значение)

	Если Кэш = Неопределено Тогда
		ИнициализирватьКэш();
	КонецЕсли;
	
	Кэш.Вставить(Ключ, Значение);
	
КонецПроцедуры

Функция ПолучитьИзКэша(Ключ)
	
	Если Кэш = Неопределено Тогда
		ИнициализирватьКэш();
	КонецЕсли;
	
	Результат = Кэш.Получить(Ключ);
	Возврат Результат;	
	
КонецФункции

Функция ПредставлениеКонтрагентаИзКэша(Ключ)
	
	ДанныеКонтрагентов = ПолучитьИзКэша("ДанныеКонтрагентов");
	Если ДанныеКонтрагентов = Неопределено Тогда
		ДанныеКонтрагентов = Новый Соответствие;
		ДобавитьВКэш("ДанныеКонтрагентов", ДанныеКонтрагентов);
	КонецЕсли;
	
	Результат = ДанныеКонтрагентов.Получить(Ключ);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПредставлениеКонтрагентаВКэш(Ключ, Данные)
	
	ДанныеКонтрагентов = ПолучитьИзКэша("ДанныеКонтрагентов");
	Если ДанныеКонтрагентов = Неопределено Тогда
		ДанныеКонтрагентов = Новый Соответствие;
		ДобавитьВКэш("ДанныеКонтрагентов", ДанныеКонтрагентов);
	КонецЕсли;
	
	ДанныеКонтрагентов.Вставить(Ключ, Данные);
	
КонецПроцедуры

//}		СлужебныеМетоды. Кэш

Функция ЕстьПодсистемаРаботаСФайлами() Экспорт

	МинимальнаяВерсияБСП = "2.4.6";
	ТекущаяВерсияБСП = ВерсияСтандартнойПодсистемыКонфигурации();
	
	Результат = (ОсновнойМодуль.ЭДО_Служебные_СравнитьВерсии(ТекущаяВерсияБСП, МинимальнаяВерсияБСП) <> "ПерваяМеньше");
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияСтандартнойПодсистемыКонфигурации()

	Результат = "";
	
	МодульСтандартныеПодсистемы = ОбщийМодуль("СтандартныеПодсистемыПовтИсп");
	Если МодульСтандартныеПодсистемы <> Неопределено Тогда
		Попытка
			ОписаниеПодсистемКонфигурации = МодульСтандартныеПодсистемы.ОписанияПодсистем().ПоИменам;
			ОписаниеПодсистемыСП = ОписаниеПодсистемКонфигурации.Получить("СтандартныеПодсистемы");
			Результат = ОписаниеПодсистемыСП.Версия;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбщийМодуль(Имя)
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции


//} 	СЛУЖЕБНЫЕ МЕТОДЫ

//{ Программный интерфейс

// Описание плагина
//
// Возвращаемое значение:
//  Структура - содержит поля:
//
//   * ИмяПлагина - Строка - имя обработки;
//   * Наименование - Строка - синоним обработки;
//
//   * Описание - Строка - краткое описание из макета;
//   * АдресСправки - Строка - полное описанием плагина в Контур.Справке;
//
//   * Расположение - Структура - см. Новый_РасположениеПлагина();
//
//   * Версия - Строка - версия плагина;
//   * ДатаПубликации - Дата - дата публикации в сервисе;
//
//   * Ошибки - Массив - содержит структуры, см. Новый_ОшибкаПлагина();
//   * События - Массив - содержит имена событий, которые плагин может обработать;
//
//   * Загружен - Булево - Истина, если файл плагина загружен в базу;
//   * Включен - Булево - Истина, если плагин используется;
//   * Рекомендован - Булево - Истина, если плагин рекомендован к использованию;
//   * Экспериментальный - Булево - Истина, если это бета-версия плагина;
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		Метаданные().Синоним);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			ВерсияОбработки());
	ПараметрыРегистрации.Вставить("Информация", 		"Диадок:" + Метаданные().Синоним);
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

// Возвращает версию плагина
//
// Возвращаемое значение:
//  Строка - версия плагина
//
Функция ВерсияОбработки() Экспорт
	
	Возврат "1.0.2";
	
КонецФункции

// Возвращает минимальную версию основного модуля, с которым умеет работать данный плагин
//
// Возвращаемое значение:
//  Строка - версия основного модуля
//
Функция ВерсияОсновногоМодуля() Экспорт
	
	Возврат "4.8.30";
	
КонецФункции

Функция МанифестПлагина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", 	Метаданные().Имя);
	Результат.Вставить("Представление", 	Метаданные().Синоним);
	Результат.Вставить("Проект",			"Diadoc");
	Результат.Вставить("Версия",			ВерсияОбработки());
	Результат.Вставить("Описание",			ПолучитьМакет("ОписаниеПлагина").ПолучитьТекст());
	Результат.Вставить("СсылкаНаСправку",	Метаданные().Комментарий);
	Результат.Вставить("События",			СобытияПлагина());
	Результат.Вставить("ЕстьНастройки",		Истина);
	Результат.Вставить("ПараметрыПроекта",	Неопределено);

	Результат.Вставить("Автообновление", 	Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает события, которые умеет обрабатывать плагин
//
// Возвращаемое значение:
//  Массив из Строка - элементы названия событий плагина
//
Функция СобытияПлагина() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ВыполнитьРегламентныеДействия");
	Результат.Добавить("Плагин_СохранениеДокументов_ПолучитьСписокОрганизаций");
	Результат.Добавить("Плагин_СохранениеДокументов_ПроверитьДоступностьКаталога");
	Результат.Добавить("Плагин_СохранениеДокументов_ВыполнитьСохранениеДокументов");
	Возврат Результат;
	
КонецФункции

Функция ПротестироватьПлагин() Экспорт
	
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Результат.Вставить("Успешно",				Истина);
	Результат.Вставить("ТребуетсяНастройка",	Ложь);
	Результат.Вставить("ОписаниеОшибки",		ОписаниеОшибки);
	
	Возврат Результат;	
	
КонецФункции

Функция ЭДО_ВерсияAPIПодключаемогоМодуля() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ОткрытьФормуНастроек(ВызывающийМодуль) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФормаНастроек = ПолучитьФорму("Настройки_Обычная");
		ФормаНастроек.Инициализировать(ВызывающийМодуль);
		ФормаНастроек.ОткрытьМодально();
	
	#КонецЕсли
    Возврат Истина;
КонецФункции

//} Программный интерфейс
