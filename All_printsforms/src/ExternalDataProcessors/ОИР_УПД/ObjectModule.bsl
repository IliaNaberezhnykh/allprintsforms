Перем КодЯзыка;   
Перем Макет;
Перем СправочникТабличнаяЧасть;
Перем ДокОснование;   
Перем ЭтоАктРабот;  
Перем НаОснованииАкта;
#Область РегистрацияОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг");
	ПараметрыРегистрации.Назначение.Добавить("Документ.СчетФактураВыданный");
	
	ПараметрыРегистрации.Версия = "2.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Наименование = ЭтотОбъект.Метаданные().Представление();
	ПараметрыРегистрации.Информация = ЭтотОбъект.Метаданные().Комментарий;	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'ОИР УПД'");
	НоваяКоманда.Идентификатор = "УПД";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти


Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	ПараметрыПечати = ПараметрыВывода;			
	ПараметрыПечати.Вставить("ПечатьВВалюте", Ложь );
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм,
	"УПД",
	НСтр("ru='Универсальный передаточный документ (УПД)'"),
	СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры


#Область Печать_УПД

Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	СтруктураТиповНаПечать              = Новый Структура;
	МассивСчетФактураВыданный           = Новый Массив;
	МассивСчетФактураКомиссионеру  = Новый Массив;
	МассивСчетФактураПолученный         = Новый Массив;
	ОснованияНаРеализацию               = Новый Массив;
	ОснованияКомиссионеру          = Новый Массив;
	ОснованияСчетФактураПолученный      = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры   = Новый Массив;
	ДокументыБезСчетаФактурыКомиссионеру = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры = Новый Массив;
	
	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
			И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(ОснованияКомиссионеру);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, ДанныеКонтрагентов, Макет, ТабличныйДокумент, ОпцииПечати) 
	ЭтоАктРабот = Ложь; 
	НаОснованииАкта = Ложь;
	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ТипЗнч(ДанныеПечати.Ссылка.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			НаОснованииАкта = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДокОснование = ДанныеПечати.Ссылка;  
		ЭтоАктРабот = Истина;
	Иначе
		ДокОснование = ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		ДанныеПечати.Ссылка, ДанныеПечати.Ссылка.ДокументОснование);     
	КонецЕсли;
	Если ДанныеПечати.Дата >= '20241001' Тогда
		Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		     ДокЯз = РегистрыСведений.ЯзыкДляПечатиОИР.СоздатьНаборЗаписей();
		     ДокЯз.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
		     ДокЯз.Прочитать();
		     Язычник = ДокЯз[0].Язык;
		     Если Язычник = Перечисления.Языки.Русский Тогда
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент1096_ru");    
			      КодЯзыка = "ru";
		     КонецЕсли; 
		     Если Язычник = Перечисления.Языки.Английский Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент1096_en");    
			      КодЯзыка = "en";
		     КонецЕсли;
		     Если Язычник = Перечисления.Языки.Арабский Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент1096_ar");    
		       	  КодЯзыка = "ar";
		     КонецЕсли;
		     Если Язычник = Перечисления.Языки.Турецкий Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент1096_tur");    
			      КодЯзыка = "tur";
		     КонецЕсли;
	    Иначе 
		     Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент1096_ru");    
		     КодЯзыка = "ru";
	    КонецЕсли;
	Иначе
	    Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		     ДокЯз = РегистрыСведений.ЯзыкДляПечатиОИР.СоздатьНаборЗаписей();
		     ДокЯз.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
		     ДокЯз.Прочитать();
		     Язычник = ДокЯз[0].Язык;
		     Если Язычник = Перечисления.Языки.Русский Тогда
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");    
			      КодЯзыка = "ru";
		     КонецЕсли; 
		     Если Язычник = Перечисления.Языки.Английский Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент534_en");    
			      КодЯзыка = "en";
		     КонецЕсли;
		     Если Язычник = Перечисления.Языки.Арабский Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ar");    
		       	  КодЯзыка = "ar";
		     КонецЕсли;
		     Если Язычник = Перечисления.Языки.Турецкий Тогда 
			      Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент534_tur");    
			      КодЯзыка = "tur";
		     КонецЕсли;
	    Иначе 
		     Макет = ПолучитьМакет ("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");    
		     КодЯзыка = "ru";
	    КонецЕсли;
	КонецЕсли;
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	ВыводитьДанныеПоставщика = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	ВыводитьДанныеПокупателя = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
	ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ПараметрыШапки = Новый Структура;
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ПараметрыШапки.Вставить("Номер", ДанныеПечати.Номер);
	Иначе
		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	КонецЕсли;
	
	Если КодЯзыка = "ru" Тогда
		ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	КонецЕсли;
	Если КодЯзыка = "en" Тогда
		ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "Л=en; ДЛФ=ДД"));
	КонецЕсли;
	Если КодЯзыка = "ar" Тогда
		ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "Л=ar_EG; ДЛФ=ДД"));
	КонецЕсли;
	Если КодЯзыка = "tur" Тогда
		ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "Л=tr_TR; ДЛФ=ДД"));
	КонецЕсли;
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
	?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
	ТвойАдрис = "";
	Для Каждого Стр Из ДокОснование.Организация.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрис = Стр.Представление;
		КонецЕсли;
	КонецЦИкла;
	
	
	Если ВыводитьДанныеПоставщика Тогда
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
		СведенияОПоставщике.ПолноеНаименование, ДанныеПечати.Организация.НаименованиеМеждународное); 	
		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"), ТвойАдрис );
		
		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1%2'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
		?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
	Иначе
		ПредставлениеПоставщика = "--";
		АдресПоставщика = "--";                              
		ИННПоставщика = "--";
	КонецЕсли;
	
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", АдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	// Выводим данные грузоотправителя.
	ТекстГрузоотправителя = "";
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
		ТекстГрузоотправителя = "--";
	ИначеЕсли ВыводитьДанныеПоставщика
		И (ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель 
		ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП")) Тогда
		ТекстГрузоотправителя = НСтр("ru = 'он же'; en = 'he is'", КодЯзыка);
	Иначе
		ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
	КонецЕсли;
	ТвойАдрисГрузоотправителя = ""; 
	Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		Для Каждого Стр Из ДокОснование.Грузоотправитель.КонтактнаяИнформация Цикл
			Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
				ТвойАдрисГрузоотправителя = Стр.Представление; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		ГрузоотправительМеждународный = ДанныеПечати.Грузоотправитель.НаименованиеМеждународное;
		ТекстГрузоотправителяМеждународный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1%2'; en = '%1%2'; ar = '%1%2'; Tur = '%1%2'", КодЯзыка),
		ГрузоотправительМеждународный, " " + ТвойАдрисГрузоотправителя);
		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
		ТекстГрузоотправителя, ТекстГрузоотправителяМеждународный); 
	КонецЕсли;
	
	
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";
	ТвойАдрисГрузополучателя = "";  
	Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		Для Каждого Стр Из ДокОснование.Грузополучатель.КонтактнаяИнформация Цикл
			Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
				ТвойАдрисГрузополучателя = Стр.Представление;
			КонецЕсли;
		КонецЦикла;      
	КонецЕсли; 
	Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
		ГрузополучательМеждународный = ДанныеПечати.Грузополучатель.НаименованиеМеждународное;
		ТекстГрузополучателяМеждународный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1%2'; en = '%1%2'; ar = '%1%2'; Tur = '%1%2'", КодЯзыка),
		ГрузополучательМеждународный, " " + ТвойАдрисГрузополучателя); 
	КонецЕсли;
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'"),
	ТекстГрузополучателя, ТекстГрузополучателяМеждународный);
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
	НСтр("ru = '-- от --'; en = '-- of --'; ar = '-- of --'; Tur = '-- karşı --'", КодЯзыка),
	ДанныеПечати.СтрокаПоДокументу));
	
	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПоДокументуОтгрузки =
	?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
	И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
	СтрЗаменить(ДанныеПечати.ПредставлениеСтроки5а,НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, , Ложь) ,ДанныеПечати.Номер),		НСтр("ru = '-- от --'; en = '-- of --'; ar = '-- of --'; Tur = '-- karşı --'"));
	
	Если ДанныеПечати.Дата >= '20241001' Тогда 
		
	     Если КодЯзыка = "ru" Тогда 
		      ПоДокументуОтгрузки = "Универсальный передаточный документ, " + ПоДокументуОтгрузки;
		 ИначеЕсли КодЯзыка = "en" Тогда 
		      ПоДокументуОтгрузки = "Universal transfer document, " + ПоДокументуОтгрузки;
		 ИначеЕсли КодЯзыка = "ar" Тогда 
			  ПоДокументуОтгрузки = "وثيقة نقل عالمية، " + ПоДокументуОтгрузки;
		 ИначеЕсли КодЯзыка = "tur" Тогда
		      ПоДокументуОтгрузки = "Evrensel transfer belgesi, " + ПоДокументуОтгрузки;
		 КонецЕсли;  
		  
	Иначе	  
	    Если НЕ КодЯзыка = "ru"	 Тогда       
		     Если НЕ ЭтоАктРабот Тогда
			      КоличествоСтрок = ДокОснование.Товары.Количество();        
		     Иначе   
			     Если НЕ НаОснованииАкта Тогда
				      КоличествоСтрок = ДанныеПечати.Ссылка.Услуги.Количество();
			     Иначе
				      КоличествоСтрок = ДанныеПечати.Ссылка.ДокументОснование.Услуги.Количество();
			     КонецЕсли;
		     КонецЕсли;
		ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№ п/п %1 № %2 от %3'; en = '№ %1, № %2 of %3'; ar = '№ %1, № %2 of %3'; Tur = '№ %1, № %2 karşı %3'", КодЯзыка),
		?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
		ОбластьМакета.Параметры.Номер,
		Формат(ОбластьМакета.Параметры.Дата, "ДФ=dd.MM.yyyy"));	
	    КонецЕсли;
	
	КонецЕсли;
	
	
	ПараметрыШапки.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
	
	
	ЕстьГрузополучатель = Не ДанныеПечати.ТолькоУслуги;
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННПокупателя    = "";
	ПредставлениеГрузополучателя  = "";                                                          	
	Если ВыводитьДанныеПокупателя Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
			
			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"),
			ПредставлениеПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"),
			ПредставлениеАдресаПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
			
			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2%3'"),
			ПредставлениеИННПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь),
			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
			
		КонецЦикла;
		
	КонецЕсли;
	ЗПокупателя = ?(ВыводитьДанныеПокупателя, Сред(ПредставлениеПокупателя, 3), "--");
	
	ЗАдресаПокупателя = ?(ВыводитьДанныеПокупателя, Сред(ПредставлениеАдресаПокупателя, 3), "--");
	
	ЗИННПокупателя = ?(ВыводитьДанныеПокупателя, Сред(ПредставлениеИННПокупателя, 3), "--");
	
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
	ТекстГрузополучателя, ТекстГрузополучателяМеждународный);
	
	
	ТвойАдрисПокупателя = "";
	Для Каждого Стр Из ДокОснование.Контрагент.КонтактнаяИнформация Цикл
		Если Стр.Вид.Наименование = "Международный адрес для платежей (англ.)" Тогда
			ТвойАдрисПокупателя = Стр.Представление;
		КонецЕсли;
	КонецЦикла;
	ПокупательМеждународный = ДанныеПечати.Контрагент.НаименованиеМеждународное;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
	ДанныеПечати.Контрагент.НаименованиеПолное, ПокупательМеждународный);  
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1'; en = '%2'; ar = '%2'; Tur = '%2'", КодЯзыка),
	ЗАдресаПокупателя, ТвойАдрисПокупателя);
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	ЗИННПокупателя);			
	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	ПараметрыШапки.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643'; en = 'Russian ruble, 643'; ar = 'الروبل الروسي ، 643'; Tur = 'Rus rublesi, 643'", КодЯзыка));
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);  
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Ссылка.Контрагент);
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	КонтИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,МассивТипов,МассивВидов,ТекущаяДата());
	
	Если КодЯзыка = "ru" Тогда
		Попытка          
			ПараметрыШапки.ПредставлениеГрузополучателя = Строка(ДанныеПечати.Ссылка.ДокументОснование.ЗаказКлиента.Грузополучатель.НаименованиеПолное) + "," + Строка(ДанныеПечати.Ссылка.ДокументОснование.ЗаказКлиента.АдресГрузополучателя);
			ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
		Исключение
			ПараметрыШапки.ПредставлениеГрузополучателя = Строка(ДанныеПечати.Ссылка.ДокументОснование.Грузополучатель.НаименованиеПолное) + "," + Строка(ДанныеПечати.Ссылка.ДокументОснование.АдресДоставки);
			ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
		КонецПопытки;     
	КонецЕсли;
	
	Если НЕ ЭтоАктРабот Тогда
		КоличествоСтрок = ДанныеПечати.Ссылка.Товары.Количество();  
	Иначе
		Если НЕ НаОснованииАкта Тогда
			КоличествоСтрок = ДанныеПечати.Ссылка.Услуги.Количество();
		Иначе
			КоличествоСтрок = ДанныеПечати.Ссылка.ДокументОснование.Услуги.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Если КодЯзыка = "ru" Тогда
		Попытка
			ОбластьМакета.Параметры.АдресПокупателя = КонтИнформация[0].Представление;  
		Исключение
		КонецПопытки; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	
	Если НЕ ЭтоАктРабот И НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка.ДокументОснование); 
	Иначе    
		Если НЕ НаОснованииАкта Тогда
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка); 
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка.ДокументОснование); 
		КонецЕсли; 
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КППКонтрагента = ВыборкаДетальныеЗаписи.Ссылка.КППКонтрагента;
	КонецЕсли;
	Если НЕ ЭтоАктРабот И НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Заказ = ДанныеПечати.Ссылка.ДокументОснование.ЗаказКлиента;
	Иначе
		Заказ = ДанныеПечати.Ссылка.ЗаказКлиента;
	КонецЕсли;
	Попытка
		КПППокупателя = Заказ.Контрагент.ИНН + ?(ЗначениеЗаполнено(Заказ.Контрагент.КПП), "/" + ?(КППКонтрагента <> Неопределено, Заказ.Контрагент.КПП, Заказ.Контрагент.КПП), "");
		КППГрузика = Заказ.Грузополучатель.ИНН + ?(ЗначениеЗаполнено(Заказ.Грузополучатель.КПП), "/" + ?(КППКонтрагента <> Неопределено, Заказ.Грузополучатель.КПП, Заказ.Грузополучатель.КПП), "");
		Если ДокОснование.ПечатьИННПокупателя Тогда 
			ОбластьМакета.Параметры.ИННПокупателя = КПППокупателя;
		Иначе
			ОбластьМакета.Параметры.ИННПокупателя = КППГрузика
		КонецЕсли;
	Исключение
		Если ТипЗнч(Заказ) = Тип("Неопределено") Тогда
			КППГрузика = ДанныеПечати.Ссылка.ДокументОснование.Грузополучатель.ИНН + ?(ЗначениеЗаполнено(ДанныеПечати.Ссылка.ДокументОснование.Грузополучатель.КПП), "/" + ?(КППКонтрагента <> Неопределено, ДанныеПечати.Ссылка.ДокументОснование.Грузополучатель.КПП, ДанныеПечати.Ссылка.ДокументОснование.Грузополучатель.КПП), "");
			ОбластьМакета.Параметры.ИННПокупателя = КППГрузика;	
		КонецЕсли;
	КонецПопытки;    
	Если НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И (не ЭтоАктРабот ИЛИ НаОснованииАкта)  Тогда
		СтрокаУслуги = ДанныеПечати.Ссылка.ДокументОснование.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
		"Услуга", Истина)));   
	Иначе
		СтрокаУслуги = ДанныеПечати.Ссылка.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
		"Услуга", Истина)));  
	КонецЕсли;
	Если СтрокаУслуги.Количество() ИЛИ ЭтоАктРабот ИЛИ НаОснованииАкта Тогда 
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "--"; 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "--";   
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеПечати.Контрагент.НалоговыйНомер) и ЗначениеЗаполнено(ДанныеПечати.Контрагент.РегистрационныйНомер) Тогда
		Если КодЯзыка = "ru" Тогда
			ОбластьМакета.Параметры.ИННПокупателя = "Налоговый номер " + ДанныеПечати.Контрагент.НалоговыйНомер + ", рег. номер " + ДанныеПечати.Контрагент.РегистрационныйНомер; 
		Иначе
			ОбластьМакета.Параметры.ИННПокупателя = "Tax number " + ДанныеПечати.Контрагент.НалоговыйНомер + ", reg. number " + ДанныеПечати.Контрагент.РегистрационныйНомер;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	Если КодЯзыка = "ru" Тогда
		
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		Иначе
			СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
		
		ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),"");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
		ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'", Метаданные.Языки.Русский.КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
		
		СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
		
		ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
		Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		КонецЕсли;
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
		ПредставлениеКонтрагента    = "";
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
			ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
			ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
			Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН/КПП %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
			ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН %3'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
			Иначе
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
			КонецЕсли;
			
		КонецЦикла;
		СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
		
		Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
			ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4'", Метаданные.Языки.Русский.КодЯзыка),
			ДанныеПечати.ДоверенностьНомер,
			Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
			ДанныеПечати.ДоверенностьВыдана,
			ДанныеПечати.ДоверенностьЛицо);
			СтруктураПараметров.Вставить("Основание", ТекстОснования); 	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		
		Если (НЕ ЭтоАктРабот ИЛИ НаОснованииАкта) И НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка.ДокументОснование); 
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка); 
		КонецЕсли;		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КППКонтрагента = ВыборкаДетальныеЗаписи.Ссылка.КППКонтрагента;
		КонецЕсли;  	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Дата КАК Дата,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование";
		
		Если НЕ ЭтоАктРабот ИЛИ НаОснованииАкта Тогда
			Запрос.УстановитьПараметр("ДокументОснование", ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный"), ДанныеПечати.Ссылка.ДокументОснование, ДанныеПечати.Ссылка));
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный"), ДанныеПечати.Ссылка, ДанныеПечати.Ссылка));
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьПодвала.Параметры.ДанныеТранспортнаяНакладная = Строка(ОбластьПодвала.Параметры.ДанныеТранспортнаяНакладная) + "ТТН " + ВыборкаДетальныеЗаписи.Номер + " от " + Формат(ВыборкаДетальныеЗаписи.Дата,"ДЛФ=D") + ", ";
		КонецЦикла;
		Если ЗначениеЗаполнено(ДокОснование.ДополнительнаяИнформацияПоДоставке) Тогда
			ОбластьПодвала.Параметры.ДанныеТранспортнаяНакладная = ДокОснование.ДополнительнаяИнформацияПоДоставке;
		КонецЕсли;
		НомерМасс = 1;
		
		СтруктураПараметров.ПредставлениеКонтрагента = ДанныеПечати.Ссылка.Контрагент.НаименованиеПолное + ", ИНН/КПП " + ДанныеПечати.Ссылка.Контрагент.ИНН + ?(ЗначениеЗаполнено(КППКонтрагента), "/"+КППКонтрагента, "");
		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	КонецЕсли;
	
	//Инглиш------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
	
	Если НЕ КодЯзыка = "ru" Тогда
		
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФИОРуководителя", ДокОснование.Руководитель.РабочееНаименованиеИнглиш);
		Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДокОснование.Руководитель.РабочееНаименованиеИнглиш);
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДокОснование.Руководитель.РабочееНаименованиеИнглиш);
		Иначе
			СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДокОснование.Руководитель.РабочееНаименованиеИнглиш);
			СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ФИОКладовщика", ПолучитьСтрокуНаЛатинском(ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата)));
		СтруктураПараметров.Вставить("ДолжностьКладовщика", ДокОснование.ДолжностьНаИностранном);
		Если КодЯзыка = "en" Тогда
			ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "Л=en; ДЛФ=DD"),НСтр("ru = 'г.'; en = '.'", КодЯзыка),"");
		КонецЕсли;
		Если КодЯзыка = "ar" Тогда
			ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "Л=ar_EG; ДЛФ=DD"),НСтр("ru = 'г.'; en = '.'; ar = '.'; Tur = '.'", КодЯзыка),"");
		КонецЕсли;
		Если КодЯзыка = "tur" Тогда
			ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "Л=tr_TR; ДЛФ=DD"),НСтр("ru = 'г.'; en = '.'; ar = '.'; Tur = '.'", КодЯзыка),"");
		КонецЕсли;
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
		ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '""%1"" %2года'; en = '""%1"" %2.'; ar = '""%1"" %2.'; Tur = '""%1"" %2.'", КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
		
		СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
		
		ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
		Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'; en = '%4, INN/KPP %2/%3'; ar = '%4, INN/KPP %2/%3'; Tur = '%4, INN/KPP %2/%3'", КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика, ДанныеПечати.Организация.НаименованиеМеждународное);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'; en = '%4, INN %2'; ar = '%4, INN %2'; Tur = '%4, INN %2'", КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		КонецЕсли;
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
		ПредставлениеКонтрагента    = "";
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
			ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
			ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
			Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН/КПП %3/%4'; en = '%1; %2, INN/KPP %3/%4'; ar = '%1; %2, INN/KPP %3/%4'; Tur = '%1; %2, INN/KPP %3/%4'", КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
			ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН %3'; en = '%1; %2, INN %3'; ar = '%1; %2, INN %3'; Tur = '%1; %2, INN %3'", КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
			Иначе
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
			КонецЕсли;
			
		КонецЦикла;
		СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
		Если КодЯзыка = "en" Тогда
			ТекстОснования = ДокОснование.Договор.НаименованиеИностранное;
			СтруктураПараметров.Вставить("Основание", ТекстОснования);	
		КонецЕсли;
		Если КодЯзыка = "ar" Тогда
			ТекстОснования = ДокОснование.Договор.НаименованиеИностранное;
			СтруктураПараметров.Вставить("Основание", ТекстОснования);	
		КонецЕсли;
		Если КодЯзыка = "tur" Тогда
			ТекстОснования = ДокОснование.Договор.НаименованиеИностранное;
			СтруктураПараметров.Вставить("Основание", ТекстОснования);	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеПечати.Ссылка.ДокументОснование);
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КППКонтрагента = ВыборкаДетальныеЗаписи.Ссылка.КППКонтрагента;
		КонецЕсли;  	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Дата КАК Дата,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный"), ДанныеПечати.Ссылка.ДокументОснование, ДанныеПечати.Ссылка));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		МассивСтрок = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
			ОбластьПодвала.Параметры.ДанныеТранспортнаяНакладная = Строка(ОбластьПодвала.Параметры.ДанныеТранспортнаяНакладная) + "Document " + ВыборкаДетальныеЗаписи.Номер + " of " + Формат(ВыборкаДетальныеЗаписи.Дата, "Л=en; ДЛФ=D") + ", ";
		КонецЦикла; 
		НомерМасс = 1;
		ОбластьПодвала.Параметры.ДолжностьРуководителя = ДокОснование.Руководитель.ДолжностьИнглиш; 
		
		СтруктураПараметров.ПредставлениеКонтрагента = ДанныеПечати.Контрагент.НаименованиеМеждународное + ", INN/KPP " + ДанныеПечати.Ссылка.Контрагент.ИНН + ?(ЗначениеЗаполнено(КППКонтрагента), "/"+КППКонтрагента, "");
		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	КонецЕсли;
	
	
КонецПроцедуры   

Функция ПолучитьСтрокуНаЛатинском(ИсходныйТекст)
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");
	СоответствиеСимволов.Вставить("а", "a");
	СоответствиеСимволов.Вставить("б", "b");
	СоответствиеСимволов.Вставить("в", "v");
	СоответствиеСимволов.Вставить("г", "g");
	СоответствиеСимволов.Вставить("д", "d");
	СоответствиеСимволов.Вставить("е", "e");
	СоответствиеСимволов.Вставить("ё", "e");
	СоответствиеСимволов.Вставить("ж", "zh");
	СоответствиеСимволов.Вставить("з", "z");
	СоответствиеСимволов.Вставить("и", "i");
	СоответствиеСимволов.Вставить("й", "y");
	СоответствиеСимволов.Вставить("к", "k");
	СоответствиеСимволов.Вставить("л", "l");
	СоответствиеСимволов.Вставить("м", "m");
	СоответствиеСимволов.Вставить("н", "n");
	СоответствиеСимволов.Вставить("о", "o");
	СоответствиеСимволов.Вставить("п", "p");
	СоответствиеСимволов.Вставить("р", "r");
	СоответствиеСимволов.Вставить("с", "s");
	СоответствиеСимволов.Вставить("т", "t");
	СоответствиеСимволов.Вставить("у", "u");
	СоответствиеСимволов.Вставить("ф", "f");
	СоответствиеСимволов.Вставить("х", "kh");
	СоответствиеСимволов.Вставить("ц", "ts");
	СоответствиеСимволов.Вставить("ч", "ch");
	СоответствиеСимволов.Вставить("ш", "sh");
	СоответствиеСимволов.Вставить("щ", "shch");
	СоответствиеСимволов.Вставить("ъ", "");
	СоответствиеСимволов.Вставить("ы", "y");
	СоответствиеСимволов.Вставить("ь", "");
	СоответствиеСимволов.Вставить("э", "e");
	СоответствиеСимволов.Вставить("ю", "yu");
	СоответствиеСимволов.Вставить("я", "ya");
	
	ИсходныйТекст = СокрЛП(ТРег(ИсходныйТекст));
	ГотовоеЗначение = "";
	ТекущийСимвол = "";
	ТекущийГотовыйСимвол = "";
	Для к = 1 по СтрДлина(ИсходныйТекст) Цикл
		ТекущийСимвол = Сред(ИсходныйТекст, к, 1);
		ТекущийГотовыйСимвол = СоответствиеСимволов.Получить(ТекущийСимвол);
		Если ТекущийГотовыйСимвол = Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийСимвол;
		Иначе
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ГотовоеЗначение;
КонецФункции  

Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МакетУПД = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
	МакетУПД_625 = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
	МакетУПД_981 = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
	МакетУПД_534 = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
	МакетАнгл = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент534_en");
	МакетАрабский = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ar"); 
	
	
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	
	ЕстьПостановление534 = Ложь;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		НаОснованииАкта = Ложь;
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если ТипЗнч(ДанныеПечати.Ссылка.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				НаОснованииАкта = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не введен %2'"),
			ДанныеПечати.Ссылка,
			ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка,
			,
			"ТекстСчетФактура");
			
			Продолжить;
		КонецЕсли;
		//Сообщить(ТипЗнч(ДанныеПечати.Ссылка)); 
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ТоварыРеализации = ДанныеПечати.Ссылка.Услуги;
		Иначе  
			Если НЕ НаОснованииАкта Тогда
				ТоварыРеализации = ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"),  ДанныеПечати.Ссылка.Товары, ДанныеПечати.Ссылка.ДокументОснование.Товары); 
			Иначе
				ТоварыРеализации = ДанныеПечати.Ссылка.ДокументОснование.Услуги;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
			И ЕстьПостановление534 Тогда
			
			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, Макет, ТабличныйДокумент, ОпцииПечати);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;     
		СуммБезНДС = 0; 
		//РазделенныеСтроки
		Если ДокОснование.ОбъединитьСтроки = Ложь Тогда
			Для Каждого СтрокаТовары Из ТоварыРеализации Цикл
				Если СтрокаТовары.Количество = 0 
					И СтрокаТовары.СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОбластьСтрока = ОбластьСтрокаСтандарт;
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, , ТоварыРеализации);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом'; en = 'VAT is calculated by the tax agent'", КодЯзыка));
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
					ТолькоСтавкаБезНДС = Ложь;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС'; en = 'without VAT'; ar = 'بدون ضريبة القيمة المضافة'; Tur = 'KDV hariç'", КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС'; en = 'without VAT'; ar = 'بدون ضريبة القيمة المضافة'; Tur = 'KDV hariç'", КодЯзыка));
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтруктураПараметров.Вставить("СуммаНДС", 0);
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза'; en = 'without excise'; ar = 'بدون ضريبة الاستهلاك'; Tur = 'tüketim vergisi olmadan'", КодЯзыка));
				ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				КонецЕсли;
				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
					Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
						ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
					Иначе
						ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
					КонецЕсли;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					
					ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;
				Если ТоварыРеализации <> Неопределено Тогда 
					Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
						Единичка = ТоварыРеализации[НомерСтроки - 1].Упаковка.Наименование;	
					Иначе
						Если Не ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].Упаковка) Тогда
							Единичка = ТоварыРеализации[НомерСтроки - 1].ЕдиницаИзмерения;
						Иначе
							Единичка = ТоварыРеализации[НомерСтроки - 1].Упаковка;
						КонецЕсли;
					КонецЕсли;
					Если Единичка = "т"  Тогда	
						ОбластьСтрока.Параметры.Количество = СтрокаТовары.Количество / 1000;
					КонецЕсли; 
					Числитель = ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.Числитель;
					Если Числитель = 0 Тогда
						Числитель = 1;
					КонецЕсли; 
					ЕдИзмТонна = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("168", Истина);
					Тонна = ДокОснование.Товары.Найти(ЕдИзмТонна) <> Неопределено; 
					Если Единичка = "т" Тогда
						ОбластьСтрока.Параметры.Количество = ТоварыРеализации[НомерСтроки - 1].Количество / 1000;
					Иначе 
						Если Тонна Тогда
							ОбластьСтрока.Параметры.Количество = ТоварыРеализации[НомерСтроки - 1].Количество;
						Иначе
							Если ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].КоличествоУпаковок) Тогда
								ОбластьСтрока.Параметры.Количество = ТоварыРеализации[НомерСтроки - 1].КоличествоУпаковок; 
							Иначе
								ОбластьСтрока.Параметры.Количество = ТоварыРеализации[НомерСтроки - 1].Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЦенаБЕБЕ = Неопределено;  
					Если (НЕ ЭтоАктРабот И НЕ НаОснованииАкта) И НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						Если ДанныеПечати.Ссылка.ДокументОснование.ЦенаВключаетНДС Тогда
							ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена / (1 + (СтрЗаменить(ТоварыРеализации[НомерСтроки - 1].СтавкаНДС,"%", "") / 100)));  
						Иначе
							ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена);  
						КонецЕсли; 
					Иначе
						Если НЕ НаОснованииАкта Тогда
							Если ДанныеПечати.Ссылка.ЦенаВключаетНДС Тогда
								ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена / (1 + (СтрЗаменить(ТоварыРеализации[НомерСтроки - 1].СтавкаНДС,"%", "") / 100)));
							Иначе
								ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена);  
							КонецЕсли;  
						Иначе
							Если ДанныеПечати.Ссылка.ДокументОснование.ЦенаВключаетНДС Тогда
								ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена / (1 + (СтрЗаменить(ТоварыРеализации[НомерСтроки - 1].СтавкаНДС,"%", "") / 100)));
							Иначе
								ЦенаБЕБЕ = (ТоварыРеализации[НомерСтроки - 1].Цена);  
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
					ОбластьСтрока.Параметры.Цена = ЦенаБЕБЕ;
				КонецЕсли;
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения;    
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.Код; 
				ОбластьСтрока.Параметры.СуммаБезНДС = ТоварыРеализации[НомерСтроки - 1].СуммаСНДС - ТоварыРеализации[НомерСтроки - 1].СуммаНДС; 
				ОбластьСтрока.Параметры.НоменклатураКод = ТоварыРеализации[НомерСтроки - 1].Номенклатура.Код;
				Если КодЯзыка = "en" Тогда
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента), ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента.НаименованиеНаАнглийском, ТоварыРеализации[НомерСтроки - 1].Номенклатура.НаименованиеЯзык1);	
				КонецЕсли; 
				Если КодЯзыка = "ru" Тогда  
					Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента), ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента.НаименованиеПолное, ТоварыРеализации[НомерСтроки - 1].Номенклатура.Наименование);	  
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ТоварыРеализации[НомерСтроки - 1].Номенклатура.Наименование;
					КонецЕсли;
				КонецЕсли; 
				Если КодЯзыка = "ar" Тогда
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента), ТоварыРеализации[НомерСтроки - 1].НоменклатураКлиента.НаименованиеНаАрабском, ТоварыРеализации[НомерСтроки - 1].Номенклатура.НаименованиеЯзык2);	
				КонецЕсли;
				Если КодЯзыка = "tur" Тогда 
					Для Каждого Стр Из ТоварыРеализации[НомерСтроки - 1].Номенклатура.Представления Цикл
						Если Стр.КодЯзыка = "tr" Тогда
							ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = Стр.НаименованиеПолное;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если КодЯзыка = "en" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].Упаковка), ТоварыРеализации[НомерСтроки - 1].Упаковка.НаименованиеЯзык1, ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1);
				КонецЕсли; 
				Если КодЯзыка = "ru" Тогда 
					Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].Упаковка), ТоварыРеализации[НомерСтроки - 1].Упаковка.Наименование, ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.Наименование);  
					Иначе   
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.Наименование;
					КонецЕсли;
				КонецЕсли; 
				Если КодЯзыка = "ar" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].Упаковка), ТоварыРеализации[НомерСтроки - 1].Упаковка.НаименованиеЯзык2, ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык2);
				КонецЕсли;
				Если КодЯзыка = "tur" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(ТоварыРеализации[НомерСтроки - 1].Упаковка), ТоварыРеализации[НомерСтроки - 1].Упаковка.НаименованиеЯзык1, ТоварыРеализации[НомерСтроки - 1].Номенклатура.ЕдиницаИзмерения.НаименованиеЯзык1);
				КонецЕсли;
				МассивПоступлений = Новый Массив;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
				|ГДЕ
				|	ПриобретениеТоваровУслуг.ЗаказПоставщику.ДокументОснование = &ЗаказКлиента";
				
				Если НЕ ЭтоАктРабот Тогда
					Запрос.УстановитьПараметр("ЗаказКлиента", ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), 
					ДанныеПечати.Ссылка.ЗаказКлиента, ДанныеПечати.Ссылка.ДокументОснование.ЗаказКлиента));         
				Иначе
					Запрос.УстановитьПараметр("ЗаказКлиента", ?(ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), 
					ДанныеПечати.Ссылка.ЗаказКлиента, ДанныеПечати.Ссылка.ЗаказКлиента));
				КонецЕсли;
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					МассивПоступлений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;
				Если ТоварыРеализации[НомерСтроки - 1].Номенклатура.ВестиУчетПоГТД = Истина Тогда
					Для Каждого Эл Из МассивПоступлений Цикл 
						Отборец = Новый Структура;
						Отборец.Вставить("Номенклатура",ТоварыРеализации[НомерСтроки - 1].Номенклатура); 
						Отборец.Вставить("Количество",ТоварыРеализации[НомерСтроки - 1].Количество); 
						СтрокаП = Эл.Товары.НайтиСтроки(Отборец);
						Если СтрокаП.Количество() Тогда
							ОбластьСтрока.Параметры.СтранаПроисхождения = СтрокаП[0].НомерГТД.СтранаПроисхождения;
							ОбластьСтрока.Параметры.СтранаПроисхожденияКод = СтрокаП[0].НомерГТД.СтранаПроисхождения.Код;
							ОбластьСтрока.Параметры.НомерГТД = СтрокаП[0].НомерГТД;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);  
				СуммБезНДС  = СуммБезНДС + ТоварыРеализации[НомерСтроки - 1].СуммаСНДС - ТоварыРеализации[НомерСтроки - 1].СуммаНДС; 
			КонецЦикла;
			//КонецРазделенныеСтроки 
		Иначе
			//ОбъединенныеСтроки
			Пока СтрокаТовары.Следующий() Цикл
				Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
					ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
					Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
						И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТовары.Количество = 0 
					И СтрокаТовары.СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрока = ОбластьСтрокаНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрока = ОбластьСтрокаКомплектующие;
				Иначе
					ОбластьСтрока = ОбластьСтрокаСтандарт;
				КонецЕсли;
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД);
				Иначе
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД);
					ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
					ТолькоСтавкаБезНДС = Ложь;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтруктураПараметров.Вставить("СуммаНДС", 0);
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
				ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
					Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
						ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
					Иначе
						ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
					КонецЕсли;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					
					ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				//Если ТоварыРеализации <> Неопределено Тогда
				//	Если ДанныеПечати.Ссылка.ДокументОснование.ЦенаВключаетНДС Тогда
				//	ОбластьСтрока.Параметры.Цена = (ТоварыРеализации[НомерСтроки - 1].Сумма -ТоварыРеализации[НомерСтроки - 1].СуммаНДС)  / ТоварыРеализации[НомерСтроки - 1].Количество;
				//Иначе
				//	ОбластьСтрока.Параметры.Цена = (ТоварыРеализации[НомерСтроки - 1].Цена);
				//	КонецЕсли;			
				//КонецЕсли;   			
				Если КодЯзыка = "en" Тогда
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.Номенклатура.НаименованиеЯзык1;	
				КонецЕсли; 
				Если КодЯзыка = "ru" Тогда  
					Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.Номенклатура.Наименование;	  
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.Номенклатура.Наименование;
					КонецЕсли;
				КонецЕсли; 
				Если КодЯзыка = "ar" Тогда
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.Номенклатура.НаименованиеЯзык2;	
				КонецЕсли;
				Если КодЯзыка = "tur" Тогда 
					Для Каждого Стр Из СтрокаТовары.Номенклатура.Представления Цикл
						Если Стр.КодЯзыка = "tr" Тогда
							ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = Стр.Наименование;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если КодЯзыка = "en" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовары.ЕдиницаИзмерения.НаименованиеЯзык1;
				КонецЕсли; 
				Если КодЯзыка = "ru" Тогда 
					Если НЕ ЭтоАктРабот И НЕ НаОснованииАкта Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовары.ЕдиницаИзмеренияНаименование;  
					Иначе   
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовары.ЕдиницаИзмеренияНаименование;
					КонецЕсли;
				КонецЕсли; 
				Если КодЯзыка = "ar" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовары.ЕдиницаИзмерения.НаименованиеЯзык2;
				КонецЕсли;
				Если КодЯзыка = "tur" Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТовары.ЕдиницаИзмерения.НаименованиеЯзык1;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				КонецЕсли;
			КонецЦикла;      
		КонецЕсли;
		//ОбъединенныеСтроки
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС'; en = 'without VAT'; ar = 'بدون ضريبة القيمة المضافة'; Tur = 'KDV hariç'", КодЯзыка);
		КонецЕсли;
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
			ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
		КонецЕсли;
		
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		Если ДокОснование.ОбъединитьСтроки = Истина Тогда
			ОбластьИтого.Параметры.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС;
		Иначе
			ОбластьИтого.Параметры.ИтогоСуммаБезНДС = СуммБезНДС;
		КонецЕсли;
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на %1 %2'; en = 'The document is compiled on %1 %2'; ar = 'تم تجميع المستند على %1 %2'; Tur = 'Belge üzerinde yazılmıştır %1 %2'", КодЯзыка),
		НомерСтраницы,
		ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru = 'листе'; en = 'sheet'; ar = 'الورقة'; Tur = 'yaprak'", КодЯзыка), 
		НСтр("ru = 'листах'; en = 'sheets'; ar = 'أوراق'; Tur = 'yapraklardan'", КодЯзыка), 
		НСтр("ru = 'листах'; en = 'sheets'; ar = 'أوراق'; Tur = 'yapraklardan'", КодЯзыка), НомерСтраницы));
		СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		Если (НЕ ЭтоАктРабот ИЛИ НаОснованииАкта) И НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТекДок = ДанныеПечати.Ссылка.ДокументОснование; 
		Иначе
			ТекДок = ДанныеПечати.Ссылка;
		КонецЕсли;
		СтрокаУслуги = ТекДок.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
		"Услуга", Истина)));
		Если СтрокаУслуги.Количество() Тогда 
			ОбластьПодвал.Параметры.СопроводительныеДокументы = ТекДок.ДоверенностьНомер + " от " + Формат(ТекДок.ДоверенностьДата, "ДФ=dd.MM.yy") + " выдана " + ТекДок.ДоверенностьЛицо;   
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
		ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Печать_СчетФактура

Функция СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура";
	
	СтруктураТиповНаПечать         = Новый Структура;
	МассивСчетФактураВыданный      = Новый Массив;
	МассивСчетФактураКомиссионеру  = Новый Массив;
	МассивСчетФактураПолученный    = Новый Массив;
	ОснованияНаРеализацию          = Новый Массив;
	ОснованияКомиссионеру          = Новый Массив;
	ОснованияСчетФактураПолученный = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураНаНеподтвержденнуюРеализацию0"
			Или ИмяОбъекта = "СчетФактураВыданныйАванс"
			Или ИмяОбъекта = "СчетФактураНалоговыйАгент" Тогда
			
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера"
			Или (ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" И ПараметрыПечати.ВидФормы = "Комитент") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
			И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
		ОснованияНаРеализацию, ,
		ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Ложь)
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(
		ОснованияКомиссионеру,
		ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Истина)
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(
		ОснованияСчетФактураПолученный, ПараметрыПечати.ПечатьВВалюте);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		СообщитьОбОшибкахПечатиСчетФактурыПолученного(РезультатАнализа.ТаблицаОшибок)
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если ДанныеДляПечати <> Неопределено Тогда
			ОпцииПечатиСчетаФактуры = Новый Структура;
			ОпцииПечатиСчетаФактуры.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНаАванс",            ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНалоговыйАгент",     ДанныеДляПечати.Свойство("СчетФактураНалоговыйАгент"));
			ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте",                 ПараметрыПечати.ПечатьВВалюте);
			
			ЗаполнитьТабличныйДокументСчетФактура(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ОпцииПечатиСчетаФактуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры)
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	
	ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;
	
	Макет = ОпцииПечатиСчетаФактуры.Макет;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований");
	
	Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
		НомераДаты.Номер = ДанныеПечати.Номер;
	Иначе
		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
	КонецЕсли;
	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
	НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
	НомераДаты.ДатаИсправления =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	
	Если ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
		
		РеквизитыОснований = "";
		
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			
			Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыОснования = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыОснования = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			
			ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=', № %1 от %2, с учетом исправления № %3 от %4'", Метаданные.Языки.Русский.КодЯзыка),
			НомерСчетаФактурыОснования,
			Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"),
			?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
			Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));
			
			РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыОснований) Тогда
			РеквизитыОснований = Сред(РеквизитыОснований, 3);
		КонецЕсли;
		НомераДаты.РеквизитыОснований = РеквизитыОснований;
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	
	СтруктураПараметров = Новый Структура;
	
	// Выводим данные о поставщике.
	ДополнительноеПредставление = "";
	Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование <> СведенияОПоставщике.ПолноеНаименование Тогда
		ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='(%1)'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
	КонецЕсли;
	
	ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1 %2'"),
	СведенияОПоставщике.ПолноеНаименование,
	ДополнительноеПредставление));
	
	АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
	
	ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1%2'"),
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
	?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
	
	СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
	СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);
	
	Если НЕ ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		// Выводим данные грузоотправителя.
		ТекстГрузоотправителя = "";
		Если ДанныеПечати.ТолькоУслуги 
			ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
			ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
			ТекстГрузоотправителя = "--";
		ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель
			ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП") Тогда
			ТекстГрузоотправителя = НСтр("ru='он же'", Метаданные.Языки.Русский.КодЯзыка);
		Иначе
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
		КонецЕсли;
		
		ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		ТекстГрузоотправителя));
		
		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		
		СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
		НСтр("ru='-- от --'", Метаданные.Языки.Русский.КодЯзыка),
		ДанныеПечати.СтрокаПоДокументу));
		
		СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);
		
		ПоДокументуОтгрузки =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
		И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
		ДанныеПечати.ПредставлениеСтроки5а,
		НСтр("ru='-- от --'"));
		
		СтруктураПараметров.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
		
	КонецЕсли;
	
	ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура
	И НЕ (ДанныеПечати.ТолькоУслуги
	ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
	ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННКПППокупателя = "";
	ПредставлениеГрузополучателя  = "";
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		
		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1; %2'"),
		ПредставлениеПокупателя,
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
		
		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1; %2'"),
		ПредставлениеАдресаПокупателя,
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
		
		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1; %2%3'"),
		ПредставлениеИННПокупателя,
		СтрокаТаблицы.ИНН,
		?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"),
			ПредставлениеГрузополучателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	Сред(ПредставлениеПокупателя, 3));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	Сред(ПредставлениеАдресаПокупателя, 3));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	Сред(ПредставлениеИННПокупателя, 3));
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"),
	?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
	
	СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	КонецЕсли;
	
	Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта) 
		И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
		
		СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, %2'"),
		ДанныеПечати.ВалютаНаименованиеПолное,
		ДанныеПечати.ВалютаКод));
		
	ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
		СтруктураПараметров.Вставить("Валюта", НСтр("ru='Российский рубль, 643'", Метаданные.Языки.Русский.КодЯзыка));
	КонецЕсли;
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействующиеПостановления.Постановление981 Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
		// для печати подвала берем сведения об организации из сведений о покупателе
		СведенияОПоставщике = СведенияОПокупателе;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)
	
	СтруктураПараметров = Новый Структура;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры) Экспорт
	
	Перем ВыборкаОснований, ВыборкаКонтрагентов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Макет451      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451_ru");
	Макет1137     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_ru");
	Макет1137_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625_ru");
	Макет981      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981_ru");
	Макет534      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ru");
	МакетКорр     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_ru");
	МакетКорр_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625_ru");
	МакетКорр_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981_ru");
	МакетКорр_534 = УправлениеПечатью.МакетПечатнойФормы(
	"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный534_ru");
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	ЕстьПостановление914 = ЛОЖЬ;
	ЕстьПостановление534 = Ложь;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.'"),
			ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И НЕ ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.'"),
			ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			
		Иначе
			
			ДействующиеПостановления = Новый Структура;
			ДействующиеПостановления.Вставить("Постановление914",  Ложь);
			ДействующиеПостановления.Вставить("Постановление1137", Истина);
			ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить(
			"Постановление534",
			ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления));
			
			ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);
			
			Если ДанныеПечати.КорректировочныйСчетФактура Тогда
				Если ДействующиеПостановления.Постановление534 Тогда
					Макет = МакетКорр_534;
					ЕстьПостановление534 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
					Макет = МакетКорр_981;
					ЕстьПостановление981 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
					Макет = МакетКорр_625;
					ЕстьПостановление1137_625 = Истина;
				Иначе
					Макет = МакетКорр;
					ЕстьПостановление1137 = Истина;
				КонецЕсли;
			ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
				Макет = Макет451;
				ЕстьПостановление914 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление534 Тогда
				Макет = Макет534;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
				Макет = Макет981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
				Макет = Макет1137_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = Макет1137;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если (ЕстьПостановление914 И ЕстьПостановление1137)
				ИЛИ (ЕстьПостановление914 И ЕстьПостановление981)
				ИЛИ ((ЕстьПостановление1137 ИЛИ ЕстьПостановление1137_625) И ЕстьПостановление981)
				Или ЕстьПостановление534 И (ЕстьПостановление914
				Или ЕстьПостановление1137
				Или ЕстьПостановление1137_625
				Или ЕстьПостановление981) Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиСчетФактура(
			ДанныеПечати,
			ВыборкаОснований,
			СведенияОбОрганизации,
			ВыборкаКонтрагентов,
			ТабличныйДокумент, 
			ОпцииПечатиСчетаФактуры);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
				СтруктураПараметров = Новый Структура;
				Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
					СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта)
				Иначе
					СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
				КонецЕсли;
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура Тогда
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("СтрокаАвансы");
			Иначе
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
			КонецЕсли;
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
			
			ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
				И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
				ОбластьМакета = ОбластьМакетаСтандарт;
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
				ОбластьМакета, 
				СтрокаТовары.НомерСтроки, 
				ДанныеПечати.КорректировочныйСчетФактура, 
				ВыводитьКодыТНВЭД, 
				ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДС", "--");
					СтруктураПараметров.Вставить("СуммаНДСДо", "--");
					СтруктураПараметров.Вставить("РазницаНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаНДСУвеличение", "--");
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
					СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
					Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						СтруктураПараметров.Вставить("СуммаБезНДС", СтрокаТовары.СуммаСНДС);
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтруктураПараметров.Вставить("СуммаНДС", 0);
					СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				
				Если ДействующиеПостановления.Постановление914 
					ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
					ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
					СтруктураПараметров.Вставить("Акциз", "--");
				Иначе
					СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
				МассивВыводимыхОбластей.Очистить();
				
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если Не ДействующиеПостановления.Постановление914 Тогда
						
						ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
						Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
							ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
						Иначе
							ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
						КонецЕсли;
						ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
						ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
						
						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				
			КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
			
			Если ДействующиеПостановления.Постановление1137
				И (НЕ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И (НЕ ДанныеПечати.КорректировочныйСчетФактура)
				И ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			
			Если ДанныеПечати.КорректировочныйСчетФактура
				И ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
					ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
					ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСНаСтранице", ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице);
				КонецЕсли;
				ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
				Если ИтоговыеСуммы.ИтогоРазницаСНДСУменьшение <> 0 Тогда
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшениеНаСтранице", "--");
				КонецЕсли;
				Если ИтоговыеСуммы.ИтогоРазницаСНДСУвеличение <> 0 Тогда
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличениеНаСтранице", "--");
				КонецЕсли;
			КонецЕсли;
			
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(ТаблицаОшибок, ПечатьКомиссионеру = Ложь)
	
	Если ПечатьКомиссионеру Тогда
		ПредставлениеДокумента = НСтр("ru='счет-фактура комиссионера'");
	Иначе
		ПредставлениеДокумента = НСтр("ru='счет-фактура'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2'");
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ТекстСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			СтрокаТаблицы.ДокументОснование,
			ПредставлениеДокумента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПолученного(ТаблицаОшибок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ПредъявленСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			СтрокаТаблицы.ДокументОснование,
			НСтр("ru='счет-фактура посредника'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		ИтоговыеСуммы.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, СчетФактураНаАванс = Ложь, ТоварыРеализации = Неопределено)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("НоменклатураКод", "");
	СтруктураПараметров.Вставить("КодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = Ложь;	
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.КодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
	+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
	Строка(СтрокаТовары.Номенклатура.Наименование),
	СтрокаТовары.Характеристика.Наименование,
	,
	,
	ДополнительныеПараметрыПолученияНаименованияДляПечати)
	+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
	
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
		
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

#КонецОбласти


#Область Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	КонецЕсли;
	
	Возврат СведенияОГрузоотправителе;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)
	
	Для Сч = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(Сч);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(Сч, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОПокупателе");
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОГрузополучателе");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	
	Если ДанныеКонтрагентов <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеКонтрагентов.НайтиСледующий(СтруктураПоиска);
		ВыборкаКонтрагентов = ДанныеКонтрагентов.Выбрать();
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл
			
			СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
			СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ВыборкаКонтрагентов.Контрагент, ДанныеПечати.Дата);
			СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ВыборкаКонтрагентов.Грузополучатель, ДанныеПечати.Дата);
			
			Если ПустаяСтрока(ВыборкаКонтрагентов.КПППокупателя) Тогда
				СтрокаКонтрагента.КПП = СтрокаКонтрагента.СведенияОПокупателе.КПП
			Иначе
				СтрокаКонтрагента.КПП = ВыборкаКонтрагентов.КПППокупателя;
			КонецЕсли;
			
			СтрокаКонтрагента.ИНН = ВыборкаКонтрагентов.ИННПокупателя;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
		СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Грузополучатель, ДанныеПечати.Дата);
		Если ПустаяСтрока(ДанныеПечати.КПППокупателя) Тогда
			СтрокаКонтрагента.КПП = СтрокаКонтрагента.СведенияОПокупателе.КПП
		Иначе
			СтрокаКонтрагента.КПП = ДанныеПечати.КПППокупателя;
		КонецЕсли;
		СтрокаКонтрагента.ИНН = ДанныеПечати.ИННПокупателя;
		
	КонецЕсли;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

Функция ВыводитьКодыТНВЭД(ДанныеПечати, ДействуетПостановление981)
	ПараметрыВывода = Новый Структура("ВыводитьВСтроке, ВыводитьВКолонке");
	
	ПараметрыВывода.ВыводитьВСтроке = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
	И УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(ДанныеПечати.СтранаРегистрации, ДанныеПечати.Дата)
	И ДанныеПечати.Дата >= УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта;
	ПараметрыВывода.ВыводитьВКолонке = ПараметрыВывода.ВыводитьВСтроке И ДействуетПостановление981;
	
	Возврат ПараметрыВывода
	
КонецФункции

Функция ВедетсяУчетНДСПоФЗ56(ДатаДокумента, ДатаИсправления)
	
	НачалоПримененияФЗ56 = '20170701';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление981(ДатаДокумента, ДатаИсправления)
	
	НачалоПрименения = '20171001';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПрименения Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление534(ДатаДокумента, ДатаИсправления)
	
	Возврат ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента) >= '20210701';
	
КонецФункции

#КонецОбласти
