
&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
	// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
	Попытка	
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		Контекст.Вставить("ИтогСумма",0);
		Контекст.Вставить("ИтогСуммаБезНалога",0);
		Контекст.Вставить("ИтогСуммаНДС",0);
		Контекст.Вставить("ИтогКоличество",0);
		Контекст.Вставить("ИтогБрутто",0);
		Контекст.Вставить("ИтогНетто",0);
		Контекст.Вставить("ИтогКолМест",0);
		
		Контекст.Вставить("ПредИтогСумма",0);
		Контекст.Вставить("ПредИтогСуммаБезНалога",0);
		Контекст.Вставить("ПредИтогСуммаНДС",0);
		Контекст.Вставить("НДСИсчисляетсяАгентом", Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина);
		НоменклатураКодКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураКодКонтрагента", Контекст.ФайлДанные,Кэш);  // надо сопоставить номенклатуру перед отправкой
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Контекст.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		
		ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
			Возврат Истина;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мТаблДетал") Тогда
			Контекст.Вставить("ТаблДетал",Новый Структура());                 
			Контекст.ТаблДетал.Вставить("СтрТабл",Новый Массив);	
			ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст);
		КонецЕсли;
		
		ИтогТабл=Новый Структура;
		ИтогТабл.Вставить("Кол_во", Формат(Контекст.ИтогКоличество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000"));
		ИтогТабл.Вставить("Сумма", Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
		ИтогТабл.Вставить("НДС",Новый Структура);
		ИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		Если Контекст.ИтогКолМест>0 Тогда
			ИтогТабл.Вставить("Упаковка",Новый Структура);
			ИтогТабл.Упаковка.Вставить("КолМест",Формат(Контекст.ИтогКолМест, "ЧЦ=17; ЧДЦ=0; ЧРД=.; ЧГ=0; ЧН=0"));	
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("ЕдиницаИзмеренияВеса") Тогда
			ЕдиницаИзмеренияВеса = Контекст.ФайлДанные.ЕдиницаИзмеренияВеса;
				ИтогТаблБрутто = Новый Структура;
			Если Контекст.ФайлДанные.Свойство("МассаБруттоИтогПрописью") Тогда
				ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаБруттоИтогПрописью", Контекст.ФайлДанные,Кэш));  
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			ИначеЕсли Контекст.ИтогБрутто > 0 Тогда
				ИтогТаблБрутто.Вставить("Кол_во", Формат(Контекст.ИтогБрутто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогБрутто);
					ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблБрутто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			КонецЕсли;
			
			Если Контекст.ИтогНетто > 0 Тогда
				ИтогТаблНетто = Новый Структура;
				ИтогТаблНетто.Вставить("Кол_во", Формат(Контекст.ИтогНетто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогНетто);
					ИтогТаблНетто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблНетто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Нетто", ИтогТаблНетто);
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Свойство("ЕстьПредыдущиеДанные") Тогда
			ПредИтогТабл=Новый Структура;
			ПредИтогТабл.Вставить("Сумма", Формат(Контекст.ПредИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ПредИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ПредИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			ПредИтогТабл.Вставить("НДС",Новый Структура);
			ПредИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ПредИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("ПредИтогТабл",ПредИтогТабл);
		КонецЕсли;
		
		//Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		Док.Файл.Документ.Вставить("Основание",Новый Массив);
		
		Валюта =  Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта_КодОКВ", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Валюта) Тогда
			Док.Файл.Документ.Вставить("Валюта",Новый Структура);
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Валюта",Контекст.ФайлДанные,Док.Файл.Документ.Валюта);
		КонецЕсли;
		
		Отправитель = "";
		Получатель = "";
		ЗапретРедакций = Ложь;
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("мСторона") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
				Если Параметр.Значение.Свойство("Роль") Тогда
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
				Иначе
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ОтправительРоль Тогда
					Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ПолучательРоль Тогда
					ЗапретРедакций = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапретРедакций",Параметр.Значение,Кэш);
				КонецЕсли;
				Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
				Если Сторона<>Неопределено Тогда
					Док.Файл.Документ.Вставить(Роль,Сторона);
				КонецЕсли;
			КонецЦикла;
			Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
				Сообщить("Не удалось определить ИНН получателя документа "+строка(Контекст.Документ));
				Возврат Ложь;
			КонецЕсли;
			Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
				Сообщить("Не удалось определить ИНН отправителя документа "+строка(Контекст.Документ));
				Возврат Ложь;
			КонецЕсли;
			// Если Грузоотправитель и грузополучатель нужны, но они не попали в файл, то берем их с отправителя и получателя
			Если Не Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") или (Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") и Контекст.ЗаполнятьГрузотпрГрузполуч = Истина) Тогда
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузоотправитель") и Не Док.Файл.Документ.Свойство("Грузоотправитель") Тогда
					КопироватьГрузоотправителяС = ОтправительРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузоотправителяС") Тогда
						КопироватьГрузоотправителяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузоотправителяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузоотправителяС) Тогда
						Док.Файл.Документ.Вставить("Грузоотправитель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузоотправитель,Док.Файл.Документ[КопироватьГрузоотправителяС]);
					КонецЕсли;	
				КонецЕсли;
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузополучатель") и Не Док.Файл.Документ.Свойство("Грузополучатель") Тогда
					КопироватьГрузополучателяС = ПолучательРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузополучателяС") Тогда
						КопироватьГрузополучателяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузополучателяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузополучателяС) Тогда
						Док.Файл.Документ.Вставить("Грузополучатель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузополучатель,Док.Файл.Документ[КопироватьГрузополучателяС]);   
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Отправитель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ОтправительРоль]); 
			Получатель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ПолучательРоль]); 
			Если ЗапретРедакций = Истина Тогда
				Получатель.Вставить("ЗапретРедакций", Истина);		
			КонецЕсли;
		КонецЕсли;
		Если Док.Файл.Свойство("Имя") Тогда
			Если Контекст.ФайлДанные.Свойство("мСторона") и Док.Файл.Документ[ПолучательРоль].Свойство("Идентификатор") и Док.Файл.Документ[ОтправительРоль].Свойство("Идентификатор") Тогда
				Док.Файл.Имя = Док.Файл.Имя + Док.Файл.Документ[ПолучательРоль].Идентификатор+"_"+Док.Файл.Документ[ОтправительРоль].Идентификатор;
			КонецЕсли;
			Док.Файл.Имя = Док.Файл.Имя+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("АдресДоставки") И Контекст.ФайлДанные.АдресДоставки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресДоставки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресДоставки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("АдресПогрузки") И Контекст.ФайлДанные.АдресПогрузки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресПогрузки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресПогрузки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мОснование") Тогда
			ПолучитьДанныеИзДокумента1С_мОснование(Кэш, Док, Контекст);
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда
			Док.Файл.Документ.Вставить("Параметр",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли; 
		
		Если Контекст.ФайлДанные.Свойство("мТранспортноеСредство") Тогда
			Док.Файл.Документ.Вставить("ТранспортноеСредство",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мТранспортноеСредство Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				ТранспортноеСредство = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТранспортноеСредство",Контекст.ФайлДанные,ТранспортноеСредство);
				Док.Файл.Документ.ТранспортноеСредство.Добавить(ТранспортноеСредство);
			КонецЦикла;
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);  
		СвязанныеДокументы1С = Кэш.ОбщиеФункции.сбисПолучитьСвязанныеДокументы1С(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		Если Контекст.НДСИсчисляетсяАгентом Тогда
			СуммаВложения = Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		Иначе
			СуммаВложения = Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		КонецЕсли;
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения+" на сумму "+СуммаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		Провести = Кэш.ОбщиеФункции.РассчитатьЗначение("Провести", Контекст.ФайлДанные,Кэш); // alo Провести
		ИспользоватьГенератор = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьГенератор", Контекст.ФайлДанные,Кэш);
		
		Док.Файл.Документ.Вставить("ТаблДок", Контекст.ТаблДок);
		Если Контекст.Свойство("ТаблДетал") И Контекст.ТаблДетал.СтрТабл.Количество() > 0 Тогда
			Док.Файл.Документ.Вставить("ТаблДетал", Контекст.ТаблДетал);
		КонецЕсли;
		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование, Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер,Сумма", Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения,СуммаВложения);
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Вложение.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Примечание) Тогда
			Вложение.Вставить("Примечание",Примечание);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Вложение.Вставить("Сертификат",Сертификат);	
		КонецЕсли;
		Если ТипЗнч(ИспользоватьГенератор) = Тип("Булево") Тогда
			Вложение.Вставить("ИспользоватьГенератор", ИспользоватьГенератор);
		КонецЕсли;
		ДопПоля= Новый Структура;	// alo ДопПоля
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДопПоля",Контекст.ФайлДанные,ДопПоля);
		Если ЗначениеЗаполнено(ДопПоля) Тогда
			Вложение.Вставить("ДопПоля",ДопПоля);
		Конецесли;
		Если ЗначениеЗаполнено(Провести) Тогда // alo Провести
			Вложение.Вставить("Провести",Провести);	
		КонецЕсли;   
		Если ЗначениеЗаполнено(СвязанныеДокументы1С) Тогда
			СвязанныеДокументы1С.Вставить(0, Контекст.Документ);
			Вложение.Вставить("Документы1С",СвязанныеДокументы1С);	
		КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		//TODO временное решение, потом убрать {
		Если Кэш.ОбщиеФункции.ГенераторВключенДляДокумента(Кэш, Контекст.ФайлДанные) Тогда
			Сделка = Неопределено;
			Если Контекст.ФайлДанные.Свойство("мОснование") Тогда
				Для Каждого Параметр Из Контекст.ФайлДанные.мОснование Цикл
					Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
						Продолжить;
					КонецЕсли;
					Если Параметр.Ключ = "Сделка" ИЛИ Параметр.Ключ = "Заказ" Тогда
						Сделка = Новый Структура();
						Если НЕ ПустаяСтрока(Параметр.Значение.Основание_Номер) Тогда
							Сделка.Вставить("ЗаказНомер", Новый Структура("Имя, Значение", "ЗаказНомер", Параметр.Значение.Основание_Номер));	
						КонецЕсли;
						Если НЕ ПустаяСтрока(Параметр.Значение.Основание_Дата) Тогда
							Сделка.Вставить("ЗаказДата", Новый Структура("Имя, Значение", "ЗаказДата", Параметр.Значение.Основание_Дата));	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если Сделка <> Неопределено Тогда
					Если НЕ Док.Файл.Документ.Свойство("Параметр") Тогда
						Док.Файл.Документ.Вставить("Параметр", Новый Массив);
					КонецЕсли;
					Если Сделка.Свойство("ЗаказНомер") Тогда
						Док.Файл.Документ.Параметр.Добавить(Сделка.ЗаказНомер);
					КонецЕсли;
					Если Сделка.Свойство("ЗаказДата") Тогда
						Док.Файл.Документ.Параметр.Добавить(Сделка.ЗаказДата);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Док.Файл.Документ.Свойство("Параметр") Тогда
				НакладнаяДата = Неопределено;
				НакладнаяНомер = Неопределено;
				Для Каждого ТекСтрока ИЗ Док.Файл.Документ.Параметр Цикл
					Если ТекСтрока.Имя = "ОснованиеДата" Тогда
						НакладнаяДата = Новый Структура("Имя, Значение");
						НакладнаяДата.Имя = "НакладнаяДата";
						НакладнаяДата.Значение = ТекСтрока.Значение;
					КонецЕсли;
					Если ТекСтрока.Имя = "ОснованиеНомер" Тогда
						НакладнаяНомер = Новый Структура("Имя, Значение");
						НакладнаяНомер.Имя = "НакладнаяНомер";
						НакладнаяНомер.Значение = ТекСтрока.Значение;
					КонецЕсли;
				КонецЦикла;
				Если НакладнаяДата <> Неопределено Тогда
					Док.Файл.Документ.Параметр.Добавить(НакладнаяДата);	
				КонецЕсли;
				Если НакладнаяНомер <> Неопределено Тогда
					Док.Файл.Документ.Параметр.Добавить(НакладнаяНомер);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// }
		ИмяФормыПоФормату = "Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СформироватьДокументДляГенератора", ИмяФормыПоФормату, "Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.СформироватьДокументДляГенератора(Кэш, Док, Контекст, Вложение);	
			Вложение.СтруктураДокумента = Док;
		КонецЕсли;
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента", ИмяФормыПоФормату, "Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
		КонецЕсли;
		Возврат Истина;
		
	Исключение
		Если Кэш.Свойство("РезультатОтправки") Тогда
			Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
			Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", ОписаниеОшибки(), Контекст.Документ, 726)
		КонецЕсли;
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст) Экспорт
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДетал Цикл
		
		Если Контекст.Свойство("СписокТЧ") Тогда  
			Если Контекст.СписокТЧ.НайтиПоЗначению(Параметр.Ключ)<>Неопределено Тогда
				Продолжить;
			Иначе
				Контекст.СписокТЧ.Добавить(Параметр.Ключ);
			КонецЕсли;
		КонецЕсли;		
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
			ТабЧастьДокумента = Параметр.Значение;
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
			ТабЧастьДокумента = Новый Массив;
			ТабЧастьДокумента.Добавить(Параметр.Значение);
		Иначе   // табличная часть вычисляется с помощью функции
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		КонецЕсли;
		
		Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
			сч=0;
			Для Каждого Стр Из ТабЧастьДокумента Цикл
				сч=сч+1;
				НоваяСтрока = Новый Структура;
				//все значения ТаблДок_ внутри мТаблДетал
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
				Если НЕ НоваяСтрока.Свойство("ПорНомер") Тогда
					НоваяСтрока.Вставить("ПорНомер",Строка(сч)); 
				КонецЕсли;
				//поддержка параметров
				Если Стр.Свойство("мПараметр") Тогда
					НоваяСтрока.Вставить("Параметр", Новый Массив);
					Для Каждого Элемент Из Стр.мПараметр Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
						Параметр = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
						НоваяСтрока.Параметр.Добавить(Параметр);
					КонецЦикла;
				КонецЕсли;
				//поддержка характеристик
				СтруктураХарактеристика = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Характеристика",Стр,СтруктураХарактеристика);
				Если СтруктураХарактеристика.Количество()>0 Тогда
					НоваяСтрока.Вставить("Характеристика",СтруктураХарактеристика);
				КонецЕсли;
				
				ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтрокиДетализации","Файл_"+Контекст.ФайлДанные.Файл_Формат+"_"+СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_"),"Файл_Шаблон", Кэш);
				Если фрм<>Ложь Тогда
					ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки_Детал(НоваяСтрока, Кэш, Контекст, Стр);	
				КонецЕсли;
				Если ДобавлятьСтроку<>Ложь Тогда
					Контекст.ТаблДетал.СтрТабл.Добавить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ПолучитьРеквизитыДокумента(Кэш, Ини,РеквизитыДляПоиска,Вложение,Строка) Экспорт
	// Процедура получает реквизиты документа, необходимые для сопоставления
	//Если ((Кэш.Парам.РежимСопоставления = 1) и (Вложение.Тип = "АктВР" или Вложение.Тип = "ЭДОНакл")) или ((Кэш.Парам.РежимСопоставления = 2) и (Вложение.Тип = "СчФктр")) Тогда // сопоставляем накладные и акты
	//тип1С = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Имя",Ини,Кэш);
	типы1С = Новый СписокЗначений;
	Если Ини.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумента Из Ини.мДокумент Цикл
			Если РазделДокумента.Значение.Свойство("Документ") Тогда
				типы1С.Добавить(Сред(РазделДокумента.Значение.Документ.Значение, Найти(РазделДокумента.Значение.Документ.Значение,".")+1));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Номер = Сред(Вложение.Название, Найти(Вложение.Название, "№ ")+2);//парсим название.
	//Номер = Лев(Номер, Найти(Номер, " от ")-1);
	//Дата = Сред(Вложение.Название, Найти(Вложение.Название, " от ")+4, 10);
	//Если Найти(Дата, " ") Тогда
	//	Дата = Лев(Дата, Найти(Дата, " ")-1);
	//	Если СтрДлина(Дата) = 8 Тогда
	//		Дата = Лев(Дата, 6)+"20"+Прав(Дата, 2);
	//КонецЕсли;
	//КонецЕсли;
	//Дата = Дата(Сред(Дата,7,4), Сред(Дата,4,2), Лев(Дата, 2));
	// << alo Меркурий
	если Вложение= неопределено тогда
		Сумма = 0;
		Дата = "";
		Номер = "";
		Документы1С = Новый СписокЗначений;
		Название = "";
		Идентификатор = "";
	иначе
		Дата = Вложение.Дата;
		Номер= Вложение.Номер;
		Документы1С = Вложение.Документы1С;
		Название = Вложение.Название;
		Идентификатор=Вложение.Идентификатор;
		Сумма = Сред(Вложение.Название, Найти(Вложение.Название, "на сумму ")+9);
		Если Найти(Сумма, "р.")>0 Тогда
			Сумма = Лев(Сумма, Найти(Сумма, "р.")-1);
		ИначеЕсли Найти(Сумма, ",")>0 Тогда // если валюта не рубль
			Сумма = Лев(Сумма, Найти(Сумма, ",")-1);	
		КонецЕсли;
		Попытка 
			Сумма = Число(СтрЗаменить(Сумма," ",""));
		Исключение
			Сумма = 0;
		КонецПопытки;
	конецесли;
	Если РеквизитыДляПоиска.Свойство("Сумма") Тогда
		РеквизитыДляПоиска.Сумма = РеквизитыДляПоиска.Сумма + Сумма;
	иначе
		//Сумма1С = 0;
		//Если ЗначениеЗаполнено(Вложение.Документы1С) Тогда
		//	Попытка
		//		Сумма1С = Вложение.Документы1С[0].Значение.СуммаДокумента;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		РеквизитыДляПоиска.Вставить("Статус", Строка.Статус);
		РеквизитыДляПоиска.Вставить("Дата", Дата);
		РеквизитыДляПоиска.Вставить("Номер", Номер);
		РеквизитыДляПоиска.Вставить("Сумма", Сумма);
		РеквизитыДляПоиска.Вставить("типы1С", типы1С);
		РеквизитыДляПоиска.Вставить("ТипСБИС", Строка.СоставПакета[0].Значение.Тип);
		РеквизитыДляПоиска.Вставить("Документы1С", Документы1С);
		РеквизитыДляПоиска.Вставить("РанееСопоставленныеДокументы1С", Документы1С);   // Нужен, чтобы в случае выбора другого документа, для предыдущего удалить идентификатор и статус
		//РеквизитыДляПоиска.Вставить("Сумма1С", Сумма1С);
		РеквизитыДляПоиска.Вставить("НазваниеСБИС", Название);
		РеквизитыДляПоиска.Вставить("СоставПакета", Строка.СоставПакета[0].Значение);
		РеквизитыДляПоиска.Вставить("Контрагент", Строка.СоставПакета[0].Значение.Контрагент);
		РеквизитыДляПоиска.Вставить("НашаОрганизация", Строка.СоставПакета[0].Значение.НашаОрганизация);
		РеквизитыДляПоиска.Вставить("ИдВложения", Идентификатор);		
		// alo Меркурий >>
	КонецЕсли;
КонецПроцедуры	
&НаКлиенте
Функция СформироватьРасхождение(ДанныеВложений, Кэш) Экспорт
	СтруктураФайлаКонтрагента	= ДанныеВложений.СтруктураФайлаКонтрагента;
	СтруктураФайлаНаша			= ДанныеВложений.ВложениеНаше.СтруктураДокумента;
	Док							= СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша);
	ОшибкаПреобразования = Ложь;
	Если Кэш.ОбщиеФункции.ГенераторВключенДляДокумента(Кэш, ДанныеВложений.ВложениеНаше) Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СформироватьРасхождениеДляГенератора","Файл_"+ДанныеВложений.ВложениеНаше.Тип+"_"+СтрЗаменить(СтрЗаменить(ДанныеВложений.ВложениеНаше.ВерсияФормата, ".", "_"), " ", ""),"Файл_Шаблон", Кэш);
		Если фрм <> Ложь Тогда
			Контекст = Новый Структура("ФайлДанные", Док);
			фрм.СформироватьРасхождениеДляГенератора(Кэш, Док, Контекст, ДанныеВложений.ВложениеНаше);	
			//Вложение.СтруктураДокумента = Док;
		КонецЕсли;
		ВложениеПодстановка = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДанныеВложений.ВложениеНаше,,Истина);
		ВложениеПодстановка.СтруктураДокумента = Док;	
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрименитьПодстановку", "Файл_Шаблон", "Файл_Шаблон_" + СтрЗаменить(ВложениеПодстановка.ВерсияФормата, ".", "_"), Кэш);
		Если Не фрм = Ложь Тогда
			ШаблонXML = фрм.ПрименитьПодстановку(Кэш, ВложениеПодстановка, Новый Структура, ОшибкаПреобразования);
		Иначе
			ШаблонXML = "";
		КонецЕсли;
	Иначе	
		ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(Док, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
	КонецЕсли;
	Если ОшибкаПреобразования Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ШаблонXML);
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ШаблонXML) = Тип("Массив") Тогда
		Если ЗначениеЗаполнено(ШаблонXML) Тогда
			XMLДокумента = ШаблонXML[0].Тело;
		Иначе
			XMLДокумента = "";
		КонецЕсли;
	Иначе
		XMLДокумента = ШаблонXML;
	КонецЕсли;
	ДанныеВложений.ВложениеНаше.Вставить("XMLДокумента", XMLДокумента);
	ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, ДанныеВложений.ВложениеНаше);
	Вложение = Новый Структура("СтруктураФайла,XMLДокумента,Название,ТекстHTML, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата", Док, XMLДокумента, СтруктураФайлаНаша.Файл.Документ.Название,ТекстHTML, ДанныеВложений.ВложениеНаше.Тип, ДанныеВложений.ВложениеНаше.ПодТип, ДанныеВложений.ВложениеНаше.ВерсияФормата,ДанныеВложений.ВложениеНаше.ПодВерсияФормата);
	Возврат Вложение;
КонецФункции
Функция СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша) Экспорт
	Док  = Новый Структура;
	Док.Вставить("Файл",Новый Структура);
	Док.Файл.Вставить("Формат",СтруктураФайлаНаша.Файл.Формат);
	Док.Файл.Вставить("ВерсияФормата",СтруктураФайлаНаша.Файл.ВерсияФормата);
	Док.Файл.Вставить("Имя",СтруктураФайлаНаша.Файл.Имя);
	Если СтруктураФайлаНаша.Файл.Свойство("КодФормы") тогда
		Док.Файл.Вставить("КодФормы",СтруктураФайлаНаша.Файл.КодФормы);
	КонецЕсли;
	Док.Файл.Вставить("Документ",Новый Структура);
	Для Каждого Элемент Из СтруктураФайлаНаша.Файл.Документ Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Структура") и ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Док.Файл.Документ.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	// Вставим примечание из заказа-основания, если не заполняется явно в ИНИ
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ")
		И (НЕ Док.Файл.Документ.Свойство("Примечание") ИЛИ НЕ ЗначениеЗаполнено(Док.Файл.Документ.Примечание))
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Примечание") Тогда
		
			Док.Файл.Документ.Вставить("Примечание", СтруктураФайлаКонтрагента.Файл.Документ.Примечание);
			
	КонецЕсли;
	
	Док.Файл.Документ.Вставить("Основание",Новый Массив);
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") Тогда
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер,Название",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер,СтруктураФайлаКонтрагента.Файл.Формат));
	Иначе
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер));
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Отправитель") Тогда
		Док.Файл.Документ.Вставить("Отправитель",СтруктураФайлаКонтрагента.Файл.Документ.Отправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Отправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Получатель") Тогда
		Док.Файл.Документ.Вставить("Получатель",СтруктураФайлаКонтрагента.Файл.Документ.Получатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Получатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузоотправитель") Тогда
		Док.Файл.Документ.Вставить("Грузоотправитель",СтруктураФайлаКонтрагента.Файл.Документ.Грузоотправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузоотправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузополучатель") Тогда
		Док.Файл.Документ.Вставить("Грузополучатель",СтруктураФайлаКонтрагента.Файл.Документ.Грузополучатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузополучатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Поставщик") Тогда
		Док.Файл.Документ.Вставить("Поставщик",СтруктураФайлаКонтрагента.Файл.Документ.Поставщик);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Поставщик);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Покупатель") Тогда
		Док.Файл.Документ.Вставить("Покупатель",СтруктураФайлаКонтрагента.Файл.Документ.Покупатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Покупатель);
	КонецЕсли;
	
	// Заполним параметры заказа по документу контрагента
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") 
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Параметр") Тогда
		ПараметрыКЗаполнению = СтруктураФайлаКонтрагента.Файл.Документ.Параметр;
		МассивПараметров = Новый Массив;
		Если ТипЗнч(ПараметрыКЗаполнению) = Тип("Структура") Тогда
			Для Каждого ПараметрКЗаполнению Из ПараметрыКЗаполнению Цикл
				СтруктураПараметр = Новый Структура("Имя, Значение",ПараметрКЗаполнению.Ключ,ПараметрКЗаполнению.Значение);
				МассивПараметров.Добавить(СтруктураПараметр);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрыКЗаполнению) = Тип("Массив") Тогда
			МассивПараметров = ПараметрыКЗаполнению;		
		КонецЕсли;
		Док.Файл.Документ.Вставить("Параметр", МассивПараметров);
	КонецЕсли;
	
	Если СтруктураФайлаНаша.Файл.Документ.Свойство("Параметр") Тогда
		// Для заказа произведем замену параметров, которые заполнились из СтруктураФайлаКонтрагента
		Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") И Док.Файл.Документ.Свойство("Параметр") Тогда
			КолвоПараметровКонтрагента = Док.Файл.Документ.Параметр.Количество();
			Для Каждого Параметр Из СтруктураФайлаНаша.Файл.Документ.Параметр Цикл
				ПараметрОбновлен = Ложь;
				Для ПозицияОбхода = 0 По КолвоПараметровКонтрагента - 1 Цикл
					Если Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Имя = Параметр.Имя Тогда
						Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Значение = Параметр.Значение;
						ПараметрОбновлен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ПараметрОбновлен Тогда
					Док.Файл.Документ.Параметр.Добавить(Параметр);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Док.Файл.Документ.Вставить("Параметр", СтруктураФайлаНаша.Файл.Документ.Параметр);
		КонецЕсли;
	КонецЕсли;
	
	ТабЧастьНаша = МассивСтруктурВТаблицуЗначений(СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл);
	ТабЧастьНаша.Колонки.Добавить("ЕстьВФайлеКонтрагента", Новый ОписаниеТипов("Булево"));
	ЕстьПорНомерВФайлеКонтрагента = Ложь;
	Если СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0].Свойство("ПорНомерВФайлеКонтрагента") Тогда
		ЕстьПорНомерВФайлеКонтрагента = Истина;	
	КонецЕсли;
	
	ТабЧастьКонтрагента = Новый Соответствие;   // сворачиваем табличную часть по идентификатору строки
	Для Каждого СтрТабл Из СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.СтрТабл Цикл
		Если СтрТабл.Свойство("Идентификатор") и ЗначениеЗаполнено(СтрТабл.Идентификатор) И НЕ ЕстьПорНомерВФайлеКонтрагента Тогда
			СтрокаСоответствия = ТабЧастьКонтрагента.Получить(СтрТабл.Идентификатор);
			Если СтрокаСоответствия = Неопределено Тогда
				ТабЧастьКонтрагента.Вставить(СтрТабл.Идентификатор, СтрТабл);	
			Иначе
				Если СтрТабл.Свойство("Кол_во") и СтрокаСоответствия.Свойство("Кол_во") Тогда
					СтрокаСоответствия.Кол_во = Формат(Число(СтрокаСоответствия.Кол_во)+Число(СтрТабл.Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
				КонецЕсли;
				Если СтрТабл.Свойство("СуммаБезНал") и СтрокаСоответствия.Свойство("СуммаБезНал") Тогда
					СтрокаСоответствия.СуммаБезНал = Формат(Число(СтрокаСоответствия.СуммаБезНал)+Число(СтрТабл.СуммаБезНал),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("Сумма") и СтрокаСоответствия.Свойство("Сумма") Тогда
					СтрокаСоответствия.Сумма = Формат(Число(СтрокаСоответствия.Сумма)+Число(СтрТабл.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("НДС") и СтрТабл.НДС.Свойство("Сумма") и СтрокаСоответствия.Свойство("НДС") и СтрокаСоответствия.НДС.Свойство("Сумма") Тогда
					СтрокаСоответствия.НДС.Сумма = Формат(Число(СтрокаСоответствия.НДС.Сумма)+Число(СтрТабл.НДС.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ТабЧастьКонтрагента.Вставить(Новый УникальныйИдентификатор, СтрТабл);	
		КонецЕсли;
	КонецЦикла;
	
	ИтогСумма = 0;
	ИтогКоличество = 0;
	ИтогСуммаБезНал = 0;
	ИтогНДС = 0;
	СтрОтклонения = Новый Массив;
	Для Каждого СтрокаСоответствия Из ТабЧастьКонтрагента Цикл
		СтрТабл = СтрокаСоответствия.Значение;
		НоваяСтрока = Новый Структура();
		Если СтрТабл.Свойство("КодПокупателя") Тогда
			НоваяСтрока.Вставить("КодПокупателя", СтрТабл.КодПокупателя);
		КонецЕсли;
		Если СтрТабл.Свойство("КодПоставщика") Тогда
			НоваяСтрока.Вставить("КодПоставщика", СтрТабл.КодПоставщика);
		КонецЕсли;
		Номенклатура = Неопределено;
		ОКЕИ = Неопределено;
		ХарактеристикаНоменклатуры = Неопределено;
		СтрТабл.Свойство("Номенклатура", Номенклатура);
		//СтрТабл.Свойство("ОКЕИ", ОКЕИ);
		СтрТабл.Свойство("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		//Отбор = Новый Структура("Номенклатура, ОКЕИ", Номенклатура, ОКЕИ);
		Если ЕстьПорНомерВФайлеКонтрагента Тогда
			Отбор = Новый Структура("ПорНомерВФайлеКонтрагента", СтрТабл.ПорНомер);
		Иначе
			Отбор = Новый Структура("Номенклатура", Номенклатура);
			
			Если ТабЧастьНаша.Колонки.Найти("ХарактеристикаНоменклатуры")<>Неопределено Тогда
				Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
					Отбор.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				Иначе
					Отбор.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НайденныеСтроки = ТабЧастьНаша.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.ЕстьВФайлеКонтрагента = Истина;
			Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
				Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
					НоваяСтрока.Вставить(Поле.Ключ, НайденнаяСтрока[Поле.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Попытка
				ИтогСумма = ИтогСумма+НайденнаяСтрока.Сумма;
				ИтогКоличество = ИтогКоличество+НайденнаяСтрока.Кол_во;
				ИтогСуммаБезНал = ИтогСуммаБезНал+НайденнаяСтрока.СуммаБезНал;
				ИтогНДС = ИтогНДС+НайденнаяСтрока.НДС.Сумма;
			Исключение
			КонецПопытки;
		Иначе     // если удалили строки в загруженном документе
			НоваяСтрока.Вставить("Название", ?(СтрТабл.Свойство("Название"),СтрТабл.Название,""));
			НоваяСтрока.Вставить("Кол_во", "0");
			НоваяСтрока.Вставить("Цена", "0");
			НоваяСтрока.Вставить("СуммаБезНал", "0");
			НоваяСтрока.Вставить("Сумма", "0");
		КонецЕсли;
		ПредСтрТабл = Новый Структура;
		Для Каждого Поле Из СтрТабл Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры"
				И Поле.Ключ<>"ИмяТЧ"
				И Поле.Ключ<>"НомерСтрокиТЧ"
				И Поле.Ключ<>"НеЗагружать" Тогда   // эти поля добавляются в структуру файла при загрузке, при выгрузке расхождения они не нужны
				ПредСтрТабл.Вставить(Поле.Ключ, Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		ПреобразоватьПараметрыВМассив(ПредСтрТабл);
		НоваяСтрока.Вставить("ПредСтрТабл", ПредСтрТабл);
		СтрОтклонения.Добавить(НоваяСтрока);
	КонецЦикла;
	// Если добавились строки, которых не было в файле контрагента
	НашиСтроки = ТабЧастьНаша.НайтиСтроки(Новый Структура("ЕстьВФайлеКонтрагента", Ложь)); 
	Для Каждого СтрТабл Из НашиСтроки Цикл
		НоваяСтрока = Новый Структура();
		Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
				НоваяСтрока.Вставить(Поле.Ключ, СтрТабл[Поле.Ключ]);
			КонецЕсли;
		КонецЦикла;
		СтрОтклонения.Добавить(НоваяСтрока);
		Попытка
			ИтогСумма = ИтогСумма+СтрТабл.Сумма;
			ИтогКоличество = ИтогКоличество+СтрТабл.Кол_во;
			ИтогСуммаБезНал = ИтогСуммаБезНал+СтрТабл.СуммаБезНал;
			ИтогНДС = ИтогНДС+СтрТабл.НДС.Сумма;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Док.Файл.Документ.Вставить("ТаблДок", Новый Структура);
	Док.Файл.Документ.ТаблДок.Вставить("ИтогТабл",Новый Массив);
	ИтогТабл = Новый Структура("Сумма,Кол_во,СуммаБезНал,НДС",ИтогСумма,ИтогКоличество,ИтогСуммаБезНал,Новый Структура("Сумма",ИтогНДС));
	Если СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Свойство("ИтогТабл") Тогда
		ИтогТабл.Вставить("ПредИтогТабл", СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.ИтогТабл);
	КонецЕсли;
	Док.Файл.Документ.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
	Док.Файл.Документ.ТаблДок.Вставить("СтрТабл", СтрОтклонения);
	Возврат Док;
КонецФункции
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);
		Попытка
			СтрТ.ОКЕИ = СокрЛП(СтрТ.ОКЕИ);	
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции
Функция ПреобразоватьПараметрыВМассив(СтруктураУчастника)
	Если СтруктураУчастника.Свойство("Параметр") и ТипЗнч(СтруктураУчастника.Параметр) = Тип("Структура") Тогда
		МассивПараметров = Новый Массив;
		Для Каждого Элемент Из СтруктураУчастника.Параметр Цикл
			СтруктураПараметра = Новый Структура("Имя, Значение", Элемент.Ключ, Элемент.Значение);
			Массивпараметров.Добавить(СтруктураПараметра);
		КонецЦикла;
		СтруктураУчастника.Вставить("Параметр", Массивпараметров);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеИзДокумента1С_мОснование(Кэш, Док, Контекст) Экспорт
	Для Каждого Параметр Из Контекст.ФайлДанные.мОснование Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из Параметр.Значение Цикл
				ВременныйКонтекстФайлДанные = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Контекст.ФайлДанные,,Ложь);
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ВременныйКонтекстФайлДанные,Элемент);
				Основание = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ВременныйКонтекстФайлДанные,Основание);
				Док.Файл.Документ.Основание.Добавить(Основание);	
			КонецЦикла;
		Иначе
			ВременныйКонтекстФайлДанные = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Контекст.ФайлДанные,,Ложь);
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ВременныйКонтекстФайлДанные,Параметр.Значение);
			Основание = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ВременныйКонтекстФайлДанные,Основание);
			Док.Файл.Документ.Основание.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//KES МОТП ИСМП--->
&НаКлиенте
Функция ОбработатьСложныйУзел(СложныйУзел,СтараяСтрока,НоваяСтрока,Кэш)
	
	Для Каждого Элемент Из СложныйУзел Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			//перебрать массив
			Для Каждого ЭлементыУзла Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементыУзла) = Тип("Структура") Тогда
					ЗаполнитьСложныйУзел(ЭлементыУзла,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш)
				КонецЕсли;
			КонецЦикла;
			//Только в одном исключительном случае структуру превращаем в массив на данном этапе - НомСредИдентТов
			//Конструкция  <мНомСредИдентТов Имя="НомСредИдентТов"> <мКИЗ Имя="КИЗ"> без описания НомСредИдентТов!
		ИначеЕсли (Элемент.Ключ = "НомСредИдентТов" ИЛИ Элемент.Ключ = "КИЗ" ИЛИ Элемент.Ключ = "НомУпак")
			И ТипЗнч(Элемент.Значение)=Тип("Структура") Тогда 
			ЗаполнитьСложныйУзел(Элемент.Значение,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьСложныйУзел(СложныйУзелСтруктура,ИмяУзла,СтараяСтрока,НоваяСтрока,Кэш)
	
	СтруктураВложеннойСтроки = Новый Структура;
	Для Каждого ЭлементСтруктурыСтр Из СложныйУзелСтруктура Цикл
		
		Если НЕ НоваяСтрока.Свойство(ИмяУзла) Тогда
			НоваяСтрока.Вставить(ИмяУзла,Новый Массив);
		КонецЕсли;

		//ещё один вложенный сложный узел? Должен быть в ини после простых узлов
		Если ТипЗнч(ЭлементСтруктурыСтр.Значение)=Тип("Структура") Тогда
			ОбработатьСложныйУзел(ЭлементСтруктурыСтр.Значение,СтараяСтрока,СтруктураВложеннойСтроки,Кэш);
			Продолжить;
		КонецЕсли;
		
		//узел_атрибут (НомСредИдентТов_ИдентТрансУпак, КИЗ_Значение, НомУпак_Значение)
		Поз = Найти(ЭлементСтруктурыСтр.Ключ,"_");
		Если Поз = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВложеннойСтроки.Вставить(Сред(ЭлементСтруктурыСтр.Ключ,Поз+1),Кэш.ОбщиеФункции.РассчитатьЗначение(ЭлементСтруктурыСтр.Ключ, СложныйУзелСтруктура, Кэш));
		
	КонецЦикла;
	Если НоваяСтрока.Свойство(ИмяУзла) Тогда
		НоваяСтрока[ИмяУзла].Добавить(СтруктураВложеннойСтроки);
	КонецЕсли;
	
КонецПроцедуры
//<--- KES МОТП ИСМП

//Функция формирует к отправке пакет корреспонденции
&НаКлиенте
Функция СформироватьПакетКорреспонденции(Кэш=Неопределено, ПараметрыФормированияПакета=Неопределено, Отказ=Неопределено) Экспорт
	Если	Кэш = Неопределено
		И	ПараметрыФормированияПакета = Неопределено
		И	Отказ = Неопределено Тогда
		//Тестовый вызов
		Возврат Неопределено;
	КонецЕсли;
	СписокФайлов = ПараметрыФормированияПакета.СписокФайлов;
	КорреспонденцияКОтправке= Новый Массив;
	//Для вложений, которые требует конвертации в XML, создадим временные файлы.
	Для Каждого Строка Из СписокФайлов Цикл
		СбисВложение	= Неопределено;
		СтруктураФайла	= Неопределено;
		Для Каждого ПараметрФайла Из Строка.ПараметрыФайла Цикл
			Если ПараметрФайла.Представление = "Вложение" Тогда
				СбисВложение = ПараметрФайла.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если	Не ЗначениеЗаполнено(СбисВложение)
			Или Не СбисВложение.Свойство("СтруктураДокумента", СтруктураФайла) Тогда
			КорреспонденцияКОтправке.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла", Строка.ПолноеИмяФайла,Строка.ИмяФайла));
			Продолжить;
		КонецЕсли;
		СбисВложение.Вставить("Получатель", ПараметрыФормированияПакета.Получатель);
		СбисВложение.Вставить("Отправитель", ПараметрыФормированияПакета.Отправитель);
		ОшибкаПреобразования = Ложь;
		КлючПреобразования = Кэш.ОбщиеФункции.сбисИмяXSLTДляВложения(Кэш, СтруктураФайла.Файл, СбисВложение);
		Если Кэш.ОбщиеФункции.ГенераторВключенДляДокумента(Кэш, СбисВложение) Тогда
			ВложениеПодстановка = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисВложение,,Истина);
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрименитьПодстановку", "Файл_Шаблон_" + СтрЗаменить(СбисВложение.ВерсияФормата, ".", "_"), "Файл_Шаблон", Кэш); 
			Если фрм = Ложь Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(,"Файл_Шаблон.СформироватьПакетКорреспонденции",,"Не найдена подстановка");
			КонецЕсли;
			XML_Шаблон = фрм.ПрименитьПодстановку(Кэш, ВложениеПодстановка, Новый Структура, ОшибкаПреобразования);
			Если ОшибкаПреобразования Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(XML_Шаблон, "Файл_Шаблон.СформироватьПакетКорреспонденции");
			КонецЕсли;
		Иначе	
			ДопПараметрыПреобразования = Новый Структура;
			Если СбисВложение.ОписаниеФайла.Свойство("Кодировка") Тогда
				ДопПараметрыПреобразования.Вставить("Кодировка", СбисВложение.ОписаниеФайла.Кодировка);
			КонецЕсли;
			//Костыль для старой отправки файла прайса - формируем с простыми элементами и только коммерческую информацию
			СтруктураФайлаКОтправке = СтруктураФайла;
			Если Лев(КлючПреобразования, 10) = "CommerceML" Тогда
				СтруктураФайлаКОтправке = Новый Структура("КоммерческаяИнформация");
				ЗаполнитьЗначенияСвойств(СтруктураФайлаКОтправке, СтруктураФайла.Файл);
				ДопПараметрыПреобразования.Вставить("СПростымиЭлементами", Истина);
			КонецЕсли;
			XML_Шаблон = Кэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, СтруктураФайлаКОтправке, КлючПреобразования, ДопПараметрыПреобразования, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(XML_Шаблон, "Файл_Шаблон.СформироватьПакетКорреспонденции");
			КонецЕсли;
			//ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(Док, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
		КонецЕсли;
		ПараметрыФайлаКЗаписи = Новый Структура;
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ПараметрыФайлаКЗаписи, СбисВложение.ОписаниеФайла);
		ПараметрыФайлаКЗаписи.Вставить("Данные", XML_Шаблон);
		ПараметрыФайлаКЗаписи.Имя = ПараметрыФайлаКЗаписи.Имя + "_" + КлючПреобразования;
		XML_Описание = Кэш.ОбщиеФункции.сбисЗаписатьФайл_Клиент(Кэш, ПараметрыФайлаКЗаписи, Отказ);
		КорреспонденцияКОтправке.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла", XML_Описание.ПолноеИмя,XML_Описание.Имя));
	КонецЦикла;
	Возврат КорреспонденцияКОтправке;
КонецФункции

//Функция формирует контекст для чтения из документа 1с
&НаКлиенте
Функция ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	ЗначениеИни = ОписаниеРасхождения.ЗначениеИни;
    Документ1С = ОписаниеРасхождения.Документ1С;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С); 
	ЗначениеИни.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	Контекст.Вставить("ДокументДанные", Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(ЗначениеИни, Документ1С, Кэш.КэшЗначенийИни, Кэш.Парам));  // alo Меркурий
	
	Возврат Контекст;
КонецФункции
  
#Область include_core_vo2_Файл_Шаблон_ПолучитьТабличнуюЧастьДокумента1С

//Функция формирует структуру табличной части файла	
&НаКлиенте
Функция ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст) Экспорт
	Перем СбисНДСИсчисляетсяАгентом;
	СуммаВключаетНДС=Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаВключаетНДС", Контекст.ФайлДанные,Кэш);
	КодыМаркировки = Кэш.ОбщиеФункции.РассчитатьЗначение("КодыМаркировки", Контекст.ФайлДанные,Кэш);
	ПредКодыМаркировки = Кэш.ОбщиеФункции.РассчитатьЗначение("ПредКодыМаркировки", Контекст.ФайлДанные,Кэш);
	Если Не Контекст.Свойство("НДСИсчисляетсяАгентом", СбисНДСИсчисляетсяАгентом) Тогда
		СбисНДСИсчисляетсяАгентом = Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина;
	КонецЕсли;
	УказанТипНоменклатуры = Ложь;
	КолТоваров = 0;
	// проверяем надо ли пересчитывать суммы в валюту учета
	Валюта = Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта", Контекст.ФайлДанные,Кэш);
	ВалютаУчета = Кэш.ОбщиеФункции.РассчитатьЗначение("ВалютаУчета", Контекст.ФайлДанные,Кэш);
	Если ЗначениеЗаполнено(Валюта) и ЗначениеЗаполнено(ВалютаУчета) и Валюта<>ВалютаУчета Тогда
		ПересчитатьВВалютеУчета = Кэш.ОбщиеФункции.РассчитатьЗначение("ПересчитатьВВалютеУчета", Контекст.ФайлДанные,Кэш);
	Иначе
		ПересчитатьВВалютеУчета = Ложь;
	КонецЕсли;
	Если ПересчитатьВВалютеУчета=Истина Тогда
		ИтогСумма = Кэш.ОбщиеФункции.РассчитатьЗначение("ИтогСумма", Контекст.ФайлДанные,Кэш);
		СуммаДляПересчетаВключаетНДС = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаДляПересчетаВключаетНДС", Контекст.ФайлДанные,Кэш);	
		Если Не ЗначениеЗаполнено(СуммаДляПересчетаВключаетНДС) Тогда
			СуммаДляПересчетаВключаетНДС = СуммаВключаетНДС;
		КонецЕсли;
		КурсВзаиморасчетов = Кэш.ОбщиеФункции.РассчитатьЗначение("КурсВзаиморасчетов", Контекст.ФайлДанные,Кэш);
		КратностьВзаиморасчетов = Кэш.ОбщиеФункции.РассчитатьЗначение("КратностьВзаиморасчетов", Контекст.ФайлДанные,Кэш);
		Если Контекст.ФайлДанные.Свойство("Валюта_КодОКВ") и Контекст.ФайлДанные.Свойство("ВалютаУчета_КодОКВ") Тогда
			Контекст.ФайлДанные.Валюта_КодОКВ = Контекст.ФайлДанные.ВалютаУчета_КодОКВ;
		КонецЕсли;
	КонецЕсли;
	
	ЦенаВключаетНДС = Кэш.ОбщиеФункции.РассчитатьЗначение("ЦенаВключаетНДС", Контекст.ФайлДанные,Кэш);
	Если Не ЗначениеЗаполнено(ЦенаВключаетНДС) Тогда
		ЦенаВключаетНДС = СуммаВключаетНДС;
	КонецЕсли;
	
	сч=1;
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДок Цикл
		// Чтобы одна и та же табличная часть не попадала 2 раза в документ (в СФ, если по документу-основанию формируются дополнительные файлы)
		Если Контекст.Свойство("СписокТЧ") Тогда  
			Если Контекст.СписокТЧ.НайтиПоЗначению(Параметр.Ключ)<>Неопределено Тогда
				Продолжить;
			Иначе
				Контекст.СписокТЧ.Добавить(Параметр.Ключ);
			КонецЕсли;
		КонецЕсли;		
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
			ТабЧастьДокумента = Параметр.Значение;
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") и Лев(Параметр.Значение.ТаблДок,1)<>"{" Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
			ТабЧастьДокумента = Новый Массив;
			ТабЧастьДокумента.Добавить(Параметр.Значение);
		Иначе   // табличная часть вычисляется с помощью функции
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		КонецЕсли;
		
		Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
			Для Каждого Стр Из ТабЧастьДокумента Цикл
				//Если Кэш.Парам.ОтправлятьНоменклатуруСДокументами = Истина и Кэш.Ини.Свойство("Номенклатура") Тогда
				//	Номенклатура = Кэш.ОбщиеФункции.РассчитатьЗначение("Номенклатура", Стр, Кэш);
				//	Если Кэш.СписокНоменклатуры.НайтиПоЗначению(Номенклатура) = Неопределено Тогда
				//		Кэш.СписокНоменклатуры.Добавить(Номенклатура);
				//	КонецЕсли;
				//КонецЕсли;
				ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
				Стр.Вставить("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры);
				Стр.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
				Стр.Вставить("КодыМаркировки", КодыМаркировки);
				Стр.Вставить("ПредКодыМаркировки", ПредКодыМаркировки);
				НоваяСтрока = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
				НоваяСтрока.Вставить("ПорНомер",Формат(сч, "ЧГ=0")); 
				СуммаНДС = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаНДС", Стр, Кэш);
				Попытка
					СуммаНДС = Число(СуммаНДС);
				Исключение
					СуммаНДС = 0;
				КонецПопытки;
				Если НоваяСтрока.Свойство("Сумма") и СуммаВключаетНДС<>Неопределено Тогда
				Попытка
					НоваяСтрока.Сумма = Число(НоваяСтрока.Сумма);
				Исключение
					НоваяСтрока.Сумма = 0;
				КонецПопытки;
				НоваяСтрока.Вставить("СуммаБезНал",формат(НоваяСтрока.Сумма - ?(СуммаВключаетНДС, СуммаНДС, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
				// d.ch 20.02.19 Для налоговой ставки "НДС исчисляется налоговым агентом" обнуляем сумму с учетом НДС
				Если СбисНДСИсчисляетсяАгентом Тогда
					НоваяСтрока.Сумма = "0.00";
				Иначе 
					НоваяСтрока.Сумма = формат(Число(НоваяСтрока.Сумма) + ?(СуммаВключаетНДС, 0, СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				КонецЕсли;
				Если Стр.Свойство("СуммаАкциз") и ЗначениеЗаполнено(Стр.СуммаАкциз) Тогда
					НоваяСтрока.Вставить("Акциз",Новый Структура);
					НоваяСтрока.Акциз.Вставить("Сумма", Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаАкциз", Стр, Кэш));	
				КонецЕсли;
				Если Стр.Свойство("СуммаНДС") Тогда
					НоваяСтрока.Вставить("НДС",Новый Структура);
					фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗначениеИТипСтавки","РаботаСДокументами1С","",Кэш);
					СтрСтавка = фрм.ЗначениеИТипСтавки(Стр.СтавкаНДС);
					НоваяСтрока.НДС.Вставить( "Сумма", формат(СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
					НоваяСтрока.НДС.Вставить( "Ставка", СтрСтавка.Ставка);	
					НоваяСтрока.НДС.Вставить( "ТипСтавки", СтрСтавка.ТипСтавки);	
				КонецЕсли;
				
				Если Стр.Свойство("мПараметр") Тогда
					НоваяСтрока.Вставить("Параметр", Новый Массив);
					Для Каждого Элемент Из Стр.мПараметр Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
						Параметр = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
						НоваяСтрока.Параметр.Добавить(Параметр);
					КонецЦикла;
				КонецЕсли;
				
				Если Стр.Свойство("НомСредИдентТов") Тогда
					НомСредИдентТов = Кэш.ОбщиеФункции.РассчитатьЗначение("НомСредИдентТов", Стр, Кэш);
					НоваяСтрока.Вставить("НомСредИдентТов", НомСредИдентТов);
				КонецЕсли;
				
				Если	Стр.Свойство("мСведПрослеж")
					И	Стр.мСведПрослеж.Свойство("СведПрослежРасчет") Тогда
					КонтекстРасчета = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Стр.мСведПрослеж.СведПрослежРасчет,,Ложь);
					КонтекстРасчета.Вставить("мСведПрослеж", Стр.мСведПрослеж);
					Стр.мСведПрослеж = Новый Структура("СведПрослеж", Кэш.ОбщиеФункции.РассчитатьЗначение("СведПрослеж", КонтекстРасчета, Кэш));
				КонецЕсли;				
				
				//KES МОТП ИСМП-->
				//перебрать все свойства строки и найти сложные узлы
				мСложныеУзлы = Новый Массив;
				Для Каждого Элемент Из Стр Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Структура")
						И	Не (	Элемент.Ключ = "мПараметр"
								Или	Элемент.Ключ = "ПредСтрТабл_СведПрослеж") Тогда
						ОбработатьСложныйУзел(Элемент.Значение,Стр,НоваяСтрока,Кэш);
					КонецЕсли;
				КонецЦикла;
				//<--KES МОТП ИСМП
				
				Если Стр.Свойство("ПредСтрТабл") Тогда
					Если сч = 1 Тогда  
						Контекст.Вставить("ЕстьПредыдущиеДанные", Истина);
					КонецЕсли;
					//В строку должны быть заполнены все простые узлы заранее (которые добавляются кодом), чтобы при заполнении они выгружались в случае наличия составных узлов в ини
					ПредыдущиеДанные = Новый Структура("СуммаБезНал");
					
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ПредСтрТабл",Стр,ПредыдущиеДанные);
					СуммаНДСДо = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаНДСДо", Стр, Кэш);
					СуммаНДСДо = Число(СуммаНДСДо);
					ПредыдущиеДанные.СуммаБезНал = формат(Число(ПредыдущиеДанные.Сумма) - ?(СуммаВключаетНДС, СуммаНДСДо, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					Если СбисНДСИсчисляетсяАгентом Тогда
						ПредыдущиеДанные.Сумма = "0.00";
					Иначе 
						ПредыдущиеДанные.Сумма = формат(Число(ПредыдущиеДанные.Сумма) + ?(СуммаВключаетНДС, 0, СуммаНДСДо), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					КонецЕсли;
					Если Стр.Свойство("СуммаАкцизДо") и ЗначениеЗаполнено(Стр.СуммаАкцизДо) Тогда
						ПредыдущиеДанные.Вставить("Акциз",Новый Структура);
						ПредыдущиеДанные.Акциз.Вставить( "Сумма", Стр.СуммаАкцизДо);	
					КонецЕсли;
					ПредыдущиеДанные.Вставить("НДС",Новый Структура);
					фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗначениеИТипСтавки","РаботаСДокументами1С","", Кэш);
					СтрСтавка = фрм.ЗначениеИТипСтавки(Стр.СтавкаНДСДо);
					ПредыдущиеДанные.НДС.Вставить( "Сумма", формат(СуммаНДСДо, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0; ЧО=1"));	
					ПредыдущиеДанные.НДС.Вставить( "Ставка", СтрСтавка.Ставка);	
					ПредыдущиеДанные.НДС.Вставить( "ТипСтавки", СтрСтавка.ТипСтавки);
					
					Если Стр.Свойство("ПредНомСредИдентТов") Тогда
						ПредНомСредИдентТов = Кэш.ОбщиеФункции.РассчитатьЗначение("ПредНомСредИдентТов", Стр, Кэш);
						ПредыдущиеДанные.Вставить("НомСредИдентТов", ПредНомСредИдентТов);
					КонецЕсли;
					
					НоваяСтрока.Вставить("ПредСтрТабл",ПредыдущиеДанные);
					Контекст.ПредИтогСумма       	= Контекст.ПредИтогСумма + ПредыдущиеДанные.Сумма;
					Контекст.ПредИтогСуммаБезНалога = Контекст.ПредИтогСуммаБезНалога + ПредыдущиеДанные.СуммаБезНал;
					Контекст.ПредИтогСуммаНДС    	= Контекст.ПредИтогСуммаНДС + СуммаНДСДо;
				КонецЕсли;				
				
				Если Стр.Свойство("Расхождения") Тогда
					НоваяСтрока.Вставить("Расхождения", Новый Массив);
					Для Каждого Элемент Из Стр.Расхождения Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент);
						Расхождение = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Расхождения",Стр,Расхождение);
						НоваяСтрока.Расхождения.Добавить(Расхождение);
					КонецЦикла;	
				КонецЕсли;
				
				// при необходимости пересчитываем в валюту учета
				Если ПересчитатьВВалютеУчета=Истина Тогда
					Если НЕ ЗначениеЗаполнено(ИтогСумма) Тогда   // есть готовые суммы по каждой строке и не надо распределять общую сумму по строкам
						CуммаДляПересчета = Кэш.ОбщиеФункции.РассчитатьЗначение("CуммаДляПересчета", Стр, Кэш); 
						CуммаНДСДляПересчета = Кэш.ОбщиеФункции.РассчитатьЗначение("CуммаНДСДляПересчета", Стр, Кэш); 
						Попытка
							СуммаВВалютеУчета = CуммаДляПересчета*КурсВзаиморасчетов/?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов);
							СуммаНДСВВалютеУчета = CуммаНДСДляПересчета*КурсВзаиморасчетов/?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов);
							СуммаНДС = СуммаНДСВВалютеУчета;
							НоваяСтрока.СуммаБезНал = формат(СуммаВВалютеУчета - ?(СуммаДляПересчетаВключаетНДС, СуммаНДСВВалютеУчета, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							НоваяСтрока.Сумма = формат(Число(СуммаВВалютеУчета) + ?(СуммаДляПересчетаВключаетНДС, 0, СуммаНДСВВалютеУчета), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							НоваяСтрока.НДС.Сумма = формат(СуммаНДСВВалютеУчета, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							Если НЕ (НоваяСтрока.Свойство("Цена") И Число(НоваяСтрока.Цена) = 0) Тогда
								НоваяСтрока.Вставить("Цена", формат(Число(НоваяСтрока.СуммаБезНал)/?(Число(НоваяСтрока.Кол_во)=0,1,Число(НоваяСтрока.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
							КонецЕсли;
							Если НоваяСтрока.Свойство("Параметр") Тогда
								Для каждого мПараметр Из НоваяСтрока.Параметр Цикл
									Если мПараметр.Имя = "Цена1С" Тогда
										мПараметр.Значение = формат(Число(?(ЦенаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.СуммаБезНал))/?(Число(НоваяСтрока.Кол_во)=0,1,Число(НоваяСтрока.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураУпаковка = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Упаковка",Стр,СтруктураУпаковка);
				Если СтруктураУпаковка.Количество()>0 Тогда
					НоваяСтрока.Вставить("Упаковка",СтруктураУпаковка);
				КонецЕсли;
				
				СтруктураБрутто = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Брутто",Стр,СтруктураБрутто);
				Если СтруктураБрутто.Количество()>0 Тогда
					НоваяСтрока.Вставить("Брутто",СтруктураБрутто);
				КонецЕсли;
				
				СтруктураНетто = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Нетто",Стр,СтруктураНетто);
				Если СтруктураНетто.Количество()>0 Тогда
					НоваяСтрока.Вставить("Нетто",СтруктураНетто);
				КонецЕсли;
				
				СтруктураХарактеристика = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Характеристика",Стр,СтруктураХарактеристика);
				Если СтруктураХарактеристика.Количество()>0 Тогда
					НоваяСтрока.Вставить("Характеристика",СтруктураХарактеристика);
				КонецЕсли;
				
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтроки","Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата),"Файл_Шаблон", Кэш);
				Если фрм<>Ложь Тогда
					ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки(НоваяСтрока, Кэш, Контекст, Стр);	
				КонецЕсли;
				Если ДобавлятьСтроку<>Ложь Тогда      // <>Ложь написано для совместимости со старыми функциями сбисПослеФормированияСтроки, которые могли ничего не возвращать
					
					Попытка
						Контекст.ИтогКоличество     = Контекст.ИтогКоличество + НоваяСтрока.Кол_во;
					Исключение
					КонецПопытки;
					Попытка
					Контекст.ИтогСумма       	= Контекст.ИтогСумма + НоваяСтрока.Сумма;
					Контекст.ИтогСуммаБезНалога = Контекст.ИтогСуммаБезНалога + НоваяСтрока.СуммаБезНал;
					Контекст.ИтогСуммаНДС    	= Контекст.ИтогСуммаНДС + СуммаНДС;
					Исключение
					КонецПопытки;
					Попытка
						Контекст.ИтогБрутто         = Контекст.ИтогБрутто + ?(НоваяСтрока.Брутто.Свойство("Кол_во"),НоваяСтрока.Брутто.Кол_во, 0);
					Исключение
					КонецПопытки;
					Попытка
						Контекст.ИтогНетто         = Контекст.ИтогНетто + ?(НоваяСтрока.Нетто.Свойство("Кол_во"),НоваяСтрока.Нетто.Кол_во, 0);
					Исключение
					КонецПопытки;
					Попытка
						Контекст.ИтогКолМест 	    = Контекст.ИтогКолМест + ?(НоваяСтрока.Упаковка.Свойство("КолМест"),НоваяСтрока.Упаковка.КолМест, 0);
					Исключение
					КонецПопытки;
					
					Контекст.ТаблДок.СтрТабл.Добавить(НоваяСтрока);
					сч=сч+1;
					Если НоваяСтрока.Свойство("Тип") Тогда
						УказанТипНоменклатуры = Истина;
						Если НоваяСтрока.Тип = "1" Тогда
							КолТоваров = КолТоваров+1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// При необходимости проверяем, вся ли номенклатура сопоставлена
				Если Контекст.Свойство("НоменклатураКодКонтрагента") и (Не НоваяСтрока.Свойство(Контекст.НоменклатураКодКонтрагента) или Не ЗначениеЗаполнено(НоваяСтрока[Контекст.НоменклатураКодКонтрагента]))  Тогда
					Контекст.СоставПакета.Вставить("Ошибка","Не вся номенклатура сопоставлена");	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если Контекст.ФайлДанные.Свойство("ЗаполнятьГрузотпрГрузполуч") Тогда
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Контекст.ФайлДанные.ЗаполнятьГрузотпрГрузполуч);
	ИначеЕсли УказанТипНоменклатуры = Ложь или (УказанТипНоменклатуры и КолТоваров>0) Тогда
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Истина);
	Иначе
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Ложь);
	КонецЕсли;
	
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СбисПослеФормированияТабличнойЧасти","Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата),"Файл_Шаблон", Кэш);
	Если Не фрм = Ложь Тогда
		фрм.СбисПослеФормированияТабличнойЧасти(Кэш, Контекст, Новый Структура("ТаблДок, ПересчитатьВВалютеУчета, ИтогСумма", Контекст.ТаблДок, ПересчитатьВВалютеУчета=Истина, ИтогСумма));	
	КонецЕсли;	
КонецФункции	

#Область include_core_vo2_Файл_Шаблон_ПолучитьТабличнуюЧастьДокумента1С_ШтатныеОбработчикиТочекВхода

&НаКлиенте
Функция СбисПослеФормированияТабличнойЧасти(Кэш, Контекст, ДопПараметры) Экспорт	
	Если Кэш.ОбщиеФункции.РассчитатьЗначение("EDI", Контекст.ФайлДанные) = Истина Тогда
		ДанныеТаблДокEDI = ПолучитьДанныеСделкиEDI(Кэш, Контекст);
		ДополнитьТабличнуюЧастьПараметрамиПоДаннымИсходногоЗаказа(Кэш, Контекст, Новый Структура("Формируемый, Исходный", ДопПараметры.ТаблДок, ДанныеТаблДокEDI));
	КонецЕсли;	
	// при необходимости пересчитываем в валюту учета
	Если	ДопПараметры.ПересчитатьВВалютеУчета
		И	ЗначениеЗаполнено(ДопПараметры.ИтогСумма) Тогда
		ПересчитатьТабличнуюЧастьВВалютеУчетаПоИтоговойСумме(Кэш, Контекст, ДопПараметры.ИтогСумма)
	КонецЕсли;
КонецФункции
#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ПолучитьТабличнуюЧастьДокумента1С_Прочее

//Функция возвращает данные вложения для заполнения своств в ТЧ
&НаКлиенте
Функция ПолучитьДанныеСделкиEDI(Кэш, Контекст, Отказ=Ложь)
	Перем Вложение;
	//Если указана сделка по документу, то получим данные СБИС и ТЧ для дозаполнения
	СделкаEDI = Кэш.ОбщиеФункции.РассчитатьЗначение("EDIСделкаДляДозаполнения", Контекст.ФайлДанные);
	Если Не ЗначениеЗаполнено(СделкаEDI) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыПакетаСБИС	= Кэш.ОбщиеФункции.ИдентификаторСБИСПоДокументу(Кэш, СделкаEDI);
	ИДПакетаСделки		= ПараметрыПакетаСБИС.ИдДокумента;
	Если Не ЗначениеЗаполнено(ИДПакетаСделки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ИДПакетаСделки);
	Для Каждого ВложениеСделки Из СоставПакета.Вложение Цикл
		Если	Не ВложениеСделки.Свойство("Тип")
			Или Не ВложениеСделки.Тип = "ПодтверждениеЗаказа" Тогда
			Продолжить;
		КонецЕсли;
		Вложение = ВложениеСделки;
		Прервать;
	КонецЦикла;
	Если Вложение = Неопределено Тогда
		//Нет вложения Сделки
		Возврат Неопределено;
	КонецЕсли;
	РазобранныеДанныеВложения = Кэш.ОбщиеФункции.ПолучитьРазобранныеДанныеВложенияСбис(Кэш, СоставПакета, Вложение, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РазобранныеДанныеВложения, "ПолучитьДанныеСделкиEDI");
	КонецЕсли;
	ТаблДокДанные = РазобранныеДанныеВложения;
	Если	Не ТаблДокДанные.Свойство("СтруктураФайла", ТаблДокДанные)
		Или	Не ТаблДокДанные.Свойство("Файл",			ТаблДокДанные)
		Или	Не ТаблДокДанные.Свойство("Документ",		ТаблДокДанные)
		Или	Не ТаблДокДанные.Свойство("ТаблДок",		ТаблДокДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Возврат ТаблДокДанные;
КонецФункции	

&НаКлиенте
Процедура ПересчитатьТабличнуюЧастьВВалютеУчетаПоИтоговойСумме(Кэш, Контекст, ИтогСумма)
	Перем СбисНДСИсчисляетсяАгентом;
	Если Не Контекст.Свойство("НДСИсчисляетсяАгентом", СбисНДСИсчисляетсяАгентом) Тогда
		СбисНДСИсчисляетсяАгентом = Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина;
	КонецЕсли;	
	Попытка 
		Контекст.ИтогСумма	= 0; 
		Контекст.ИтогСуммаБезНалога = 0;
		Контекст.ИтогСуммаНДС = 0;
		
		ИтогСуммаБезНалога	= 0;
		ИтогСуммаНДС		= 0;
		КлючРаспределения	= "Сумма";
		Если СбисНДСИсчисляетсяАгентом Тогда
			КлючРаспределения	= "СуммаБезНал";
			Контекст.ИтогСумма	= 0;
		КонецЕсли;
		
		МассивРаспределения	= Новый Массив;
		Для Каждого СтрокаДокумента Из Контекст.ТаблДок.СтрТабл Цикл 
			Если СтрокаДокумента.Свойство("Рассчитано") и СтрокаДокумента.Рассчитано Тогда
				Контекст.ИтогСумма = Контекст.ИтогСумма + СтрокаДокумента.Сумма; 
				Контекст.ИтогСуммаБезНалога = Контекст.ИтогСуммаБезНалога + СтрокаДокумента.СуммаБезНал;
				Контекст.ИтогСуммаНДС = Контекст.ИтогСуммаНДС + СтрокаДокумента.НДС.Сумма;
				МассивРаспределения.Добавить("0");
			Иначе	
				МассивРаспределения.Добавить(СтрокаДокумента[КлючРаспределения]); 
			КонецЕсли;	
		КонецЦикла;
		Кэш.ОбщиеФункции.сбисРаспределитьСуммуПоСтолбцу(МассивРаспределения, ИтогСумма, Контекст.ТаблДок.СтрТабл, КлючРаспределения);
		РасчетСуммыНДСПоСтавке = Кэш.ОбщиеФункции.РассчитатьЗначение("РасчетСуммыНДСПоСтавке", Контекст.ФайлДанные,Кэш);
		Для Каждого СтрокаДокумента Из Контекст.ТаблДок.СтрТабл Цикл
			Если СтрокаДокумента.Свойство("Рассчитано") и СтрокаДокумента.Рассчитано Тогда 
				Продолжить;
			ИначеЕсли РасчетСуммыНДСПоСтавке = Истина Тогда
				//Выделение суммы НДС, Расчет суммы без НДС
				Если Не СбисНДСИсчисляетсяАгентом Тогда
					ЗначениеСтавкиНДС = Кэш.ОбщиеФункции.сбисПолучитьСтавкуНДСЧисло(СтрокаДокумента.НДС.Ставка);
					СтрокаДокумента.НДС.Сумма = Формат(?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаДокумента.Сумма * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					СтрокаДокумента.СуммаБезНал = Формат(Число(СтрокаДокумента.Сумма) - Число(СтрокаДокумента.НДС.Сумма), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрокаДокумента.Цена <> 0 Тогда
					СтрокаДокумента.Цена = формат(Число(СтрокаДокумента.СуммаБезНал)/?(Число(СтрокаДокумента.Кол_во)=0,1,Число(СтрокаДокумента.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
			Иначе
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаДокумента.СуммаБезНал);
				МассивРаспределения.Добавить(СтрокаДокумента.НДС.Сумма);
				МассивРаспределенныхСумм = Кэш.ОбщиеФункции.сбисРаспределитьПропорционально(Число(СтрокаДокумента.Сумма), МассивРаспределения);
				Если МассивРаспределенныхСумм <> Неопределено Тогда
					СтрокаДокумента.СуммаБезНал = Формат(МассивРаспределенныхСумм[0], "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					СтрокаДокумента.НДС.Сумма = Формат(МассивРаспределенныхСумм[1], "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					Если СтрокаДокумента.Цена <> 0 Тогда
						СтрокаДокумента.Цена = формат(Число(СтрокаДокумента.СуммаБезНал)/?(Число(СтрокаДокумента.Кол_во)=0,1,Число(СтрокаДокумента.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					КонецЕсли;
					Если СтрокаДокумента.Свойство("Параметр") Тогда
						Для каждого мПараметр Из СтрокаДокумента.Параметр Цикл
							Если мПараметр.Имя = "Цена1С" Тогда
								мПараметр.Значение = формат(Число(СтрокаДокумента.Сумма)/?(Число(СтрокаДокумента.Кол_во)=0,1,Число(СтрокаДокумента.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ИтогСуммаБезНалога = ИтогСуммаБезНалога + Число(СтрокаДокумента.СуммаБезНал);
			ИтогСуммаНДС = ИтогСуммаНДС + Число(СтрокаДокумента.НДС.Сумма);
			Если СтрокаДокумента.Свойство("Рассчитано") Тогда    // для документов с двумя табл. частями (товары, услуги) для корректного расчета итогов
				СтрокаДокумента.Рассчитано = Истина;
			Иначе
				СтрокаДокумента.Вставить("Рассчитано", Истина);  
			КонецЕсли;	
		КонецЦикла;	
		
		Контекст.ИтогСумма	= Контекст.ИтогСумма + ИтогСумма;
		Контекст.ИтогСуммаБезНалога = Контекст.ИтогСуммаБезНалога + ИтогСуммаБезНалога;
		Контекст.ИтогСуммаНДС = Контекст.ИтогСуммаНДС + ИтогСуммаНДС;
	Исключение
	КонецПопытки;
КонецПроцедуры

//Фукнция перносит параметры по строкам из подтверждения заказа.
&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПараметрамиПоДаннымИсходногоЗаказа(Кэш, Контекст, ИнфоОТаблДок)
	Перем СтрокиФормируемый, СтрокиИсходный;
	ТаблДокИсходный		= ИнфоОТаблДок.Исходный;
	ТаблДокФормируемый	= ИнфоОТаблДок.Формируемый; 
	Если	Не ЗначениеЗаполнено(ТаблДокФормируемый)
		Или	Не ТаблДокФормируемый.Свойство("СтрТабл", СтрокиФормируемый)
		Или	Не ТипЗнч(СтрокиФормируемый) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Если	Не ЗначениеЗаполнено(ТаблДокИсходный)
		Или	Не ТаблДокИсходный.Свойство("СтрТабл", СтрокиИсходный)
		Или	Не ТипЗнч(СтрокиИсходный) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	ПоляПоиска = Кэш.ОбщиеФункции.РассчитатьЗначение("EDIПараметрыОтбораДляДозаполнения", Контекст.ФайлДанные);
	Для Каждого СтрокаТаблДокИсходный Из СтрокиИсходный Цикл
		ПараметрОбогатить = Неопределено;
		Если Не СтрокаТаблДокИсходный.Свойство("Параметр", ПараметрОбогатить) Тогда
			Продолжить;
		КонецЕсли;
		Фильтр = Кэш.ОбщиеФункции.СбисПараметрыОтбора(Кэш, СтрокаТаблДокИсходный, ПоляПоиска);
		ОтобранныеСтроки = Кэш.ОбщиеФункции.СбисНайтиСтроки(Кэш, СтрокиФормируемый, Фильтр);
		Для Каждого СтрокаОтобрана Из ОтобранныеСтроки Цикл
			Если Не СтрокаОтобрана.Свойство("Параметр") Тогда
				СтрокаОтобрана.Вставить("Параметр", Новый Массив);
			КонецЕсли;
			//Переносим параметры
			Для Каждого КлючИЗначениеПараметр Из ПараметрОбогатить Цикл
				СтруктураПараметр = Новый Структура("Имя, Значение", КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
				СтрокаОтобрана.Параметр.Добавить(СтруктураПараметр);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ОбогатитьДокументДляГенератора

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ОбогатитьДокументДляГенератора_Вызов

&НаКлиенте
Функция СформироватьДокументДляГенератора(Кэш, Док, Контекст, Вложение) Экспорт
	
	Если НЕ Кэш.ОбщиеФункции.ГенераторВключенДляДокумента(Кэш, Контекст.ФайлДанные) Тогда
		Возврат Док;
	КонецЕсли;
	
	ТекДокумент = Док.Файл.Документ;
	ТекДокумент.Вставить("ДефНомИспрСФ",  "-");
	ТекДокумент.Вставить("ДефДатаИспрСФ", "-");
	ТекДокумент.Вставить("ПоФактХЖ", 	Вложение.Название);
	ТекДокумент.Вставить("НаимДокОпр", 	ТекДокумент.Название);
	
	Если НЕ ТекДокумент.Свойство("Грузоотправитель") Тогда
		ТекДокумент.Вставить("Грузоотправитель", Новый Структура());
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ТекДокумент.Грузоотправитель, Вложение.Отправитель);
	КонецЕсли;
	Если НЕ ТекДокумент.Свойство("Грузополучатель") Тогда
		ТекДокумент.Вставить("Грузополучатель", Новый Структура());
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ТекДокумент.Грузополучатель, Вложение.Получатель);
	КонецЕсли;
	Если ОтправительГрузоотправительОнЖе(Кэш, ТекДокумент.Отправитель, ТекДокумент.Грузоотправитель) Тогда
		ТекДокумент.Грузоотправитель.Вставить("ОнЖе", "он же");	
	КонецЕсли;
	
	// На будущее (с) Сычев
	//фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьПоДокументПараметр", "Файл_" + Док.Файл.Формат + "_" + СтрЗаменить(СтрЗаменить(Док.Файл.ВерсияФормата, ".", "_"), " ", ""), "Файл_Шаблон", Кэш);
	//Если фрм<>Ложь Тогда
	//	фрм.СформироватьДокументДляГенератора(Кэш, Док, Контекст, Вложение);	
	//	Вложение.СтруктураДокумента = Док;
	//КонецЕсли;
	
	ЗаполнитьПоДокументПараметр(Кэш,  ТекДокумент);
	ЗаполнитьПоДокументОснование(Кэш, ТекДокумент);
	
	СчетчикБезНДС = 0;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.ТаблДок.СтрТабл Цикл
		ТекСтрока.Вставить("ДефСуммаЦен", 				"");
		ТекСтрока.Вставить("ДефНДС", 					"");
		ТекСтрока.Вставить("ДефЕдКод", 					"");
		ТекСтрока.Вставить("ДефКодСтраныПроизводства", 	"");
		ЗаполнитьПоСтрТаблПараметр(Кэш, ТекСтрока); 
		СформироватьИнфПол(Кэш, ТекСтрока);
		
		Если ТекСтрока.НДС.Свойство("Ставка") Тогда
			Если ТекСтрока.НДС.Ставка = "без НДС" Тогда
				ТекСтрока.Вставить("БезНДС", ТекСтрока.НДС.Ставка);
				СчетчикБезНДС = СчетчикБезНДС + 1;
			Иначе
				ТекСтрока.Вставить("БезНДС", "");
			КонецЕсли;
		Иначе
			ТекСтрока.Вставить("БезНДС", "");
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.ТаблДок.ИтогТабл Цикл
		
		Если СчетчикБезНДС = ТекДокумент.ТаблДок.СтрТабл.Количество() Тогда
			ТекСтрока.Вставить("БезНДС", "без НДС");	
		Иначе
			ТекСтрока.Вставить("БезНДС", "");
		КонецЕсли;
		
		ТекСтрока.Вставить("ДефСумма", "");
		ТекСтрока.Вставить("ДефНДС", "");
		
	КонецЦикла;
	
	СформироватьОснование(Кэш, ТекДокумент);
	СформироватьПараметры(Кэш, ТекДокумент);
	
	ТекДокумент.Вставить("Подписант", Новый Структура("ОблПолн", 5));
	
	Возврат Док;
	
КонецФункции

#Область include_core_ТребуетРефактор_ЗаполнениеПараметровПодстановки  
// Нужно вынести специфику документа (УПД) на его форму формирования (форму тоже запилить)
&НаКлиенте
Процедура ЗаполнитьПоДокументПараметр(Кэш, ТекДокумент) Экспорт
	
	Если НЕ ТекДокумент.Свойство("Параметр") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.Параметр Цикл
		
		Если ТекСтрока.Имя = "ИдГосКон" Тогда
			ТекДокумент.Вставить(ТекСтрока.Имя, ТекСтрока.Значение);
		ИначеЕсли ТекСтрока.Имя = "СвТранГруз"  Тогда
			ТекДокумент.Вставить(ТекСтрока.Имя, ТекСтрока.Значение);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоДокументОснование(Кэш, ТекДокумент) Экспорт
	
	Если НЕ ТекДокумент.Свойство("Основание") Тогда
		Возврат;	
	КонецЕсли;
	
	мПРД = Новый Массив;
	мСчФ = Новый Массив;
	мПередатДокумОсн = Новый Массив;
	
	СчФ = Новый Структура("Номер, Дата");
	ИспрСчФ = Новый Структура("НомИспрСФ, ДатаИспрСФ, ДефНомИспрСФ, ДефДатаИспрСФ");
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.Основание Цикл
		
		Если НЕ ТекСтрока.Свойство("Номер") ИЛИ ПустаяСтрока(ТекСтрока.Номер) ИЛИ ТекСтрока.Номер = Неопределено ИЛИ ТекСтрока.Номер = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Тип") Тогда
			Ключ = "Тип";	
		Иначе
			Ключ = "Название";	
		КонецЕсли;
		
		Если		ТекСтрока[Ключ] = "ПРД" Тогда
			мПРД.Добавить(Новый Структура("НомерПРД, ДатаПРД", 
				ТекСтрока.Номер, 
				ТекСтрока.Дата));
		ИначеЕсли	ТекСтрока[Ключ] = "ДокПодтвОтгр" Тогда
			ТекДокумент.Вставить("ДокПодтвОтгр", Новый Структура());
			ТекДокумент.ДокПодтвОтгр.Вставить("ДатаДокОтгр", ТекСтрока.Дата);
			ТекДокумент.ДокПодтвОтгр.Вставить("НомДокОтгр",  ТекСтрока.Номер);
			ТекДокумент.ДокПодтвОтгр.Вставить("НаимДокОтгр", ТекСтрока.НаимДокОтгр);
		ИначеЕсли	ТекСтрока[Ключ] = "СчФ" Тогда
			СчФ.Номер = ТекСтрока.Номер;
			СчФ.Дата = ТекСтрока.Дата;
		ИначеЕсли	ТекСтрока[Ключ] = "ИспрСчФ" Тогда
			ИспрСчФ.НомИспрСФ = ТекСтрока.Номер;
			ИспрСчФ.ДатаИспрСФ = ТекСтрока.Дата;
			ИспрСчФ.ДефНомИспрСФ = "";
			ИспрСчФ.ДефДатаИспрСФ = "";
		ИначеЕсли	ТекСтрока[Ключ] = "ИсхСчФ" Тогда
			мСчФ.Добавить(Новый Структура("Номер, Дата",
				ТекСтрока.Номер,
				ТекСтрока.Дата));
			
			ЗаписьПередатДокум = Новый Структура("Номер, Дата, Название");
			ЗаполнитьЗначенияСвойств(ЗаписьПередатДокум, ТекСтрока);
			Если	Ключ = "Название"
				Или	ЗаписьПередатДокум.Название = Неопределено Тогда
				ЗаписьПередатДокум.Название = " ";//Нет названия, пробел для отрисовки пустого названия						
			КонецЕсли;
			мПередатДокумОсн.Добавить(ЗаписьПередатДокум);
			ТекДокумент.Вставить("ПередатДокум", ТекСтрока.Номер + " от " + ТекСтрока.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчФ.Номер <> Неопределено 
		И СчФ.Дата <> Неопределено 
		И ИспрСчФ.НомИспрСФ <> Неопределено Тогда
		ТекДокумент.Вставить("НомИспрСФ",	  ИспрСчФ.НомИспрСФ);
		ТекДокумент.Вставить("ДатаИспрСФ",    ИспрСчФ.ДатаИспрСФ);
		ТекДокумент.ДефНомИспрСФ = ИспрСчФ.ДефНомИспрСФ;
		ТекДокумент.ДефДатаИспрСФ = ИспрСчФ.ДефДатаИспрСФ;
		
		Если ТекДокумент.Свойство("ДокПодтвОтгр") Тогда 
			ТекДокумент.ДокПодтвОтгр.Вставить("ДатаДокОтгр", Счф.Дата);
			ТекДокумент.ДокПодтвОтгр.Вставить("НомДокОтгр",  Счф.Номер);
		КонецЕсли;
	КонецЕсли;
	
	Если мПРД.Количество() <> 0 тогда
		ТекДокумент.Вставить("ПРД", мПРД);	
	КонецЕсли;
	
	Если мСчФ.Количество() <> 0 тогда
		ТекДокумент.Вставить("СчФ", мСчФ);	
	КонецЕсли;
	
	Если мПередатДокумОсн.Количество() <> 0 тогда
		ТекДокумент.Вставить("ПередатДокумОсн", мПередатДокумОсн);	
	КонецЕсли;
	
КонецПроцедуры

//Функция обогащает документ, у которого есть ПредСтрТабл
&НаКлиенте
Функция СформироватьТабличнуюЧастьТабличнаяЧастьДокументаИзменений(Кэш, ТекДокумент) Экспорт
	Перем ПредСтрТабл;
	ТекДокумент.ТаблДок.СтрТабл = СформироватьРазностнуюТабличнуюЧастьТабличнаяЧастьДокумента(ТекДокумент.ТаблДок.СтрТабл);	
	ИтогиСоответствие = Новый Соответствие;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.ТаблДок.СтрТабл Цикл
		СформироватьИнфПол(Кэш, ТекСтрока);
		Если Не ТекСтрока.Свойство("ПредСтрТабл", ПредСтрТабл) Тогда
			//Нет узла ПредСтрТабл, значит ничего не менялось
			ПредСтрТабл = ТекСтрока;
		КонецЕсли;
		СформироватьУвеличениеУменьшение(ТекСтрока, ПредСтрТабл, ИтогиСоответствие);
		Если ТекСтрока.Свойство("СведПрослеж") И ПредСтрТабл.Свойство("СведПрослеж") Тогда
			ПрослежТоварРасхождение(ТекСтрока.СведПрослеж, ПредСтрТабл.СведПрослеж);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.ТаблДок.ИтогТабл Цикл
		ЗаполнитьУвеличениеУменьшениеИтоги(ТекСтрока, ИтогиСоответствие);
		ТекСтрока.Удалить("НДС");
		ТекСтрока.Удалить("ПредИтогТабл");
		ТекСтрока.Удалить("Сумма");
		ТекСтрока.Удалить("СуммаБезНал");
	КонецЦикла;
КонецФункции	
	
&НаКлиенте
Процедура СформироватьОснование(Кэш, ТекДокумент) Экспорт
	
	Если НЕ ТекДокумент.Свойство("Основание") Тогда
		Возврат;	
	КонецЕсли;
	
	Исключения = ПолучитьИсключенияОснование();
	ОснованиеМассив = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ ТекДокумент.Основание Цикл
		
		Если ТекСтрока.Свойство("Тип") Тогда
			Ключ = "Тип";	
		Иначе
			Ключ = "Название";	
		КонецЕсли;
		
		Если Исключения.Получить(ТекСтрока[Ключ]) = Истина Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Название) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ТекСтрока.Свойство("Дата") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) И ТекСтрока.Название <> "-" Тогда
			Продолжить;	
		КонецЕсли; 
		
		Основание = Новый Структура("Номер, Название, Дата");
		Основание.Название 	= ТекСтрока.Название;
		Основание.Номер 	= ТекСтрока.Номер;
		Основание.Дата 		= ТекСтрока.Дата;
		
		ОснованиеМассив.Добавить(Основание);
		
	КонецЦикла;
	
	Если ОснованиеМассив.Количество() = 0 Тогда
		ОснованиеМассив.Добавить(Новый Структура("Название", "Без документа-основания"));
	КонецЕсли;
	
	ТекДокумент.Вставить("Основание", ОснованиеМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПараметры(Кэш, ТекДокумент) Экспорт
	
	Если НЕ ТекДокумент.Свойство("Параметр") Тогда
		Возврат;
	КонецЕсли;
	
	мПараметры = ТекДокумент.Параметр;
	
	ДобавитьСведенияGLNПоИмениСтороны(Кэш, ТекДокумент, "Получатель", мПараметры, "GLNПокуп");
	ДобавитьСведенияGLNПоИмениСтороны(Кэш, ТекДокумент, "Грузополучатель", мПараметры, "GLNГрузПолуч");
	ДобавитьСведенияGLNПоИмениСтороны(Кэш, ТекДокумент, "Отправитель", мПараметры, "GLNПост");
	ДобавитьСведенияGLNПоИмениСтороны(Кэш, ТекДокумент, "Грузоотправитель", мПараметры, "GLNГрузОтпр");
	
	мПараметры = ПолучитьПараметрыБезПустыхЗаписей(Кэш, мПараметры);
	
	Если мПараметры.Количество() <> 0 Тогда
		ТекДокумент.Вставить("Параметры", мПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ОбогатитьДокументДляГенератора_ТабличнаяЧасть

&НаКлиенте
Функция СформироватьРазностнуюТабличнуюЧастьТабличнаяЧастьДокумента(ТабличныеДанные)
	
	РазностнаяТабличнаяЧасть = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ ТабличныеДанные Цикл
		Если ТекСтрока.Свойство("ПредСтрТабл") Тогда
			Если НЕ СтрокиТабличнойЧастиРавны(ТекСтрока, ТекСтрока.ПредСтрТабл) Тогда
				РазностнаяТабличнаяЧасть.Добавить(ТекСтрока);	
			КонецЕсли;
		Иначе
			РазностнаяТабличнаяЧасть.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазностнаяТабличнаяЧасть;
	
КонецФункции

&НаКлиенте
Функция СтрокиТабличнойЧастиРавны(Строка1, Строка2)
	
	СтрокиРавны = Истина;
	
	Для Каждого ТекПоказатель ИЗ ПолучитьПоказателиСравнения() Цикл
		
		Попытка
			Если ПоказателиРавны(Строка1[ТекПоказатель], Строка2[ТекПоказатель]) Тогда
				Продолжить;	
			Иначе
				СтрокиРавны = Ложь;
				Прервать;
			КонецЕслИ;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СтрокиРавны;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПоказателиСравнения()
	
	ПоказателиСравнения = Новый Массив;
	ПоказателиСравнения.Добавить("Акциз");
	ПоказателиСравнения.Добавить("НДС");
	ПоказателиСравнения.Добавить("Сумма");
	ПоказателиСравнения.Добавить("СуммаБезНал");
	
	Возврат ПоказателиСравнения;
	
КонецФункции

&НаКлиенте
Функция ПоказателиРавны(Показатель1, Показатель2)
	
	Если ТипЗнч(Показатель1) <> ТипЗнч(Показатель2) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если ТипЗнч(Показатель1) = Тип("Структура") Тогда
    	Возврат СтруктурыРавны(Показатель1, Показатель2);
	Иначе
		Возврат (Показатель1 = Показатель2);
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция СтруктурыРавны (Структура1, Структура2)
	
	//без рекурсии
	//считаем состав полей одинаковым
	
	Для Каждого ТекПоле из Структура1 Цикл
		Если ТекПоле.Значение <> Структура2[ТекПоле.Ключ] Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Процедура СформироватьУвеличениеУменьшение(ТекСтрока, ТекСтрокаДо, ИтогиСоответствие)
	
	Если ТекСтрока.Свойство("Акциз") Тогда
		РасчитатьУвеличениеУменьшениеПоИмени(ТекСтрока.Акциз.Сумма,	ТекСтрокаДо.Акциз.Сумма,	ТекСтрока, "Акциз",		ИтогиСоответствие);
	КонецЕсли;
	Если ТекСтрока.Свойство("НДС") Тогда
		РасчитатьУвеличениеУменьшениеПоИмени(ТекСтрока.НДС.Сумма,	ТекСтрокаДо.НДС.Сумма,		ТекСтрока, "СуммаНДС",	ИтогиСоответствие);
	КонецЕсли;
	РасчитатьУвеличениеУменьшениеПоИмени(ТекСтрока.Сумма,			ТекСтрокаДо.Сумма,			ТекСтрока, "СуммаЦен",	ИтогиСоответствие);
	РасчитатьУвеличениеУменьшениеПоИмени(ТекСтрока.СуммаБезНал,		ТекСтрокаДо.СуммаБезНал,	ТекСтрока, "Стоим",		ИтогиСоответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьУвеличениеУменьшениеПоИмени(Знач Значение, Знач ЗначениеДо, ТекСтрока, ИмяРеквизита, ИтогиСоответствие)
	
	Попытка
		ЗначениеЧисло = Число(Значение);
	Исключение
		ЗначениеЧисло = 0;
	КонецПопытки;
	
	Попытка
		ЗначениеДоЧисло = Число(ЗначениеДо);
	Исключение
		ЗначениеДоЧисло = 0;
	КонецПопытки;
	
	УстановитьУвеличениеУменьшение(ЗначениеЧисло, ЗначениеДоЧисло, ТекСтрока, ИмяРеквизита, ИтогиСоответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУвеличениеУменьшение(Значение, ЗначениеДо, ТекСтрока, ИмяРеквизита, ИтогиСоответствие)
	
	Увеличение = 0;
	Уменьшение = 0;
	
	Изменение = ЗначениеДо - Значение;
	
	Если Изменение > 0 Тогда
		Уменьшение = Изменение;	
	ИначеЕсли Изменение < 0 Тогда
		Увеличение = -Изменение;	
	КонецЕсли;
	
	//ФЛК требует заполнения одного из полей
	Если Увеличение <> 0 Тогда
		СумароватьУвеличенияУменьшения( ИмяРеквизита + "Увел", Увеличение, ИтогиСоответствие);
	КонецЕсли;
	
	Если Уменьшение <> 0 Тогда
		ТекСтрока.Вставить(ИмяРеквизита + "Ум", Формат(Уменьшение, "ЧРД=.; ЧН=0.00; ЧГ="));
		СумароватьУвеличенияУменьшения( ИмяРеквизита + "Ум", Уменьшение, ИтогиСоответствие);
	Иначе
		ТекСтрока.Вставить(ИмяРеквизита + "Увел", Формат(Увеличение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СумароватьУвеличенияУменьшения(ИмяРеквизита, Значение, ИтогиСоответствие)
	
	Сумма = ИтогиСоответствие.Получить(ИмяРеквизита);
	
	Если Сумма = Неопределено Тогда
		Сумма = Значение;		
	Иначе		
		Сумма = Сумма + Значение;
	КонецЕсли;
	
	ИтогиСоответствие.Вставить(ИмяРеквизита, Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУвеличениеУменьшениеИтоги(ТекСтрока, ИтогиСоответствие)
	
	Значение = ИтогиСоответствие.Получить("СтоимУвел");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаБезНДСУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СтоимУм");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаБезНДСУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
	
	Значение = ИтогиСоответствие.Получить("СуммаЦенУвел");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СуммаЦенУм");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
	
	Значение = ИтогиСоответствие.Получить("СуммаНДСУвел");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаНДСУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
		ТекСтрока.Вставить("БезНДСУвел", "");
	ИначеЕсли ТекСтрока.Свойство("СуммаУвел") Тогда
		ТекСтрока.Вставить("БезНДСУвел", "без НДС");
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СуммаНДСУм");
	Если Не Значение = Неопределено Тогда
		ТекСтрока.Вставить("СуммаНДСУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
		ТекСтрока.Вставить("БезНДСУм", "");
	ИначеЕсли ТекСтрока.Свойство("СуммаУм") Тогда
		ТекСтрока.Вставить("БезНДСУм", "без НДС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрослежТоварРасхождение(СведПрослеж, ПредСведПрослеж)
	Перем СтрокаРеализации, РНПТРеализации;
	
	ТаблПрослеж = Новый Массив;
	IndexRnpt = Новый Соответствие;
		
	Для Каждого ТекСтрока ИЗ СведПрослеж Цикл
		
		Марка = Новый Структура("ЕдИзмПрослеж, НаимЕдИзмПрослеж, НомТовПрослеж, КолВЕдПрослеж",
			ТекСтрока.ЕдИзмПрослеж,
			ТекСтрока.НаимЕдИзмПрослеж,
			ТекСтрока.НомТовПрослеж,
			ТекСтрока.КолВЕдПрослеж);
			
		ТаблПрослеж.Добавить(Марка);
			
		IndexRnpt.Вставить(СокрЛП(ТекСтрока.ЕдИзмПрослеж) + "_" + ТекСтрока.НаимЕдИзмПрослеж + "_" + СокрЛП(ТекСтрока.НомТовПрослеж), ТаблПрослеж.ВГраница());
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПредСведПрослеж Цикл
		
		КодЕдИзм = СокрЛП(ТекСтрока.ЕдИзмПрослеж);
		НаименованиеЕдИзм = ТекСтрока.НаимЕдИзмПрослеж;
		НомерПрослежТов = СокрЛП(ТекСтрока.НомТовПрослеж);
		
		ИндексСтроки = IndexRnpt.Получить(КодЕдИзм + "_" + НаименованиеЕдИзм + "_" + НомерПрослежТов);
		
		Если ИндексСтроки <> Неопределено Тогда
			
			Дельта = Число(ТаблПрослеж[ИндексСтроки].КолВЕдПрослеж) - Число(ТекСтрока.КолВЕдПрослеж);
			Если Дельта > 0 Тогда
				ТаблПрослеж[ИндексСтроки].Вставить("УвелКолВЕдПрослеж", Формат(Дельта, "ЧЦ=26; ЧДЦ=11; ЧГ="));
			Иначе
				ТаблПрослеж[ИндексСтроки].Вставить("УмКолВЕдПрослеж", Формат(-Дельта, "ЧЦ=26; ЧДЦ=11; ЧГ="));
			КонецЕсли;
			
			ТаблПрослеж[ИндексСтроки].Вставить("ПредКолВЕдПрослеж", ТекСтрока.КолВЕдПрослеж);
		Иначе   
			Марка = Новый Структура("ЕдИзмПрослеж, НаимЕдИзмПрослеж, НомТовПрослеж, КолВЕдПрослеж, УмКолВЕдПрослеж, ПредКолВЕдПрослеж",
				ТекСтрока.ЕдИзмПрослеж,
				ТекСтрока.НаимЕдИзмПрослеж,
				ТекСтрока.НомТовПрослеж,
				0,
				ТекСтрока.КолВЕдПрослеж,
				ТекСтрока.КолВЕдПрослеж);
			
			ТаблПрослеж.Добавить(Марка);
		КонецЕсли;
		
	КонецЦикла;
	
	СведПрослеж = ТаблПрослеж;
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ОбогатитьДокументДляГенератора_Прочее

&НаКлиенте
Функция ОтправительГрузоотправительОнЖе(Кэш, Отправитель, Грузоотправитель) Экспорт
	Перем ГрузоотправительАдрес, ОтправительАдрес;
	
	ГрузоотправительИНН = ПолучитьРеквизитПоИмениСтороны(Кэш, Грузоотправитель, "Грузоотправитель", "ИНН");
	ГрузоотправительКПП = ПолучитьРеквизитПоИмениСтороны(Кэш, Грузоотправитель, "Грузоотправитель", "КПП");
	ОтправительИНН = ПолучитьРеквизитПоИмениСтороны(Кэш, Отправитель, "Отправитель", "ИНН");
	ОтправительКПП = ПолучитьРеквизитПоИмениСтороны(Кэш, Отправитель, "Отправитель", "КПП");
	
	ПроверятьАдреса = 	Грузоотправитель.Свойство("Адрес", ГрузоотправительАдрес) 
					И 	ГрузоотправительАдрес.Количество() 
					И 	Отправитель.Свойство("Адрес", ОтправительАдрес)
					И 	ОтправительАдрес.Количество();

	Если ТипЗнч(ГрузоотправительАдрес) = Тип("Массив") Тогда
		//Считаем первый адрес актуальным
		ГрузоотправительАдрес = ГрузоотправительАдрес[0]
	КонецЕсли;
	СтруктураАдрГрузоотп = ОпределитьСтруктуруАдреса(Кэш, ГрузоотправительАдрес);

	Если ТипЗнч(ОтправительАдрес) = Тип("Массив") Тогда 
		//Считаем первый адрес актуальным
		ОтправительАдрес = ОтправительАдрес[0]
	КонецЕсли;
	СтруктураАдрОтп = ОпределитьСтруктуруАдреса(Кэш, ОтправительАдрес);

	Если (ГрузоотправительИНН = ОтправительИНН) И (ГрузоотправительКПП = ОтправительКПП) Тогда
		Если ПроверятьАдреса Тогда 
			Если СтруктураАдрГрузоотп.Свойство("АдрТекст") И СтруктураАдрОтп.Свойство("АдрТекст") Тогда
				Возврат СтруктураАдрГрузоотп.АдрТекст = СтруктураАдрОтп.АдрТекст; 
			КонецЕсли;
		Иначе
			Возврат Истина
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;	
КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитПоИмениСтороны(Кэш, Сторона, ИмяСтороны, ИмяРеквизита)
	
	Попытка
		Если Сторона.Свойство("СвЮл") Тогда
			Значение = Сторона.СвЮл[ИмяРеквизита];	
		ИначеЕсли Сторона.Свойство("СвФл") Тогда
			Значение = Сторона.СвФл[ИмяРеквизита];	
		ИначеЕсли Сторона.Свойство("СвИп") Тогда
			Значение = Сторона.СвИп[ИмяРеквизита];	
		Иначе
			Значение = Неопределено;	
		КонецЕсли;
	Исключение
		Значение = Неопределено;	
	КонецПопытки;
	
	Возврат Значение; 
	
КонецФункции

&НаКлиенте
Процедура СформироватьИнфПол(Кэш, ТекСтрока) Экспорт 
	
	мИнфПол = Новый Массив;
	
	Для Каждого Текущий ИЗ ТекСтрока Цикл
		Если Текущий.Ключ = "GTIN" Тогда
			мИнфПол.Добавить(Новый Структура("Имя, Значение", "GTIN", Текущий.Значение));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекСтрока.Свойство("Параметр") Тогда
		Исключения = ПолучитьИсключенияИнфПол();
		Для Каждого ТекПараметр ИЗ ТекСтрока.Параметр Цикл
			
			Если Исключения.Получить(ТекПараметр.Имя) = Истина Тогда
				Продолжить;	
			КонецЕсли;
			
			мИнфПол.Добавить(Новый Структура("Имя, Значение", ТекПараметр.Имя, ТекПараметр.Значение));
			
		КонецЦикла;
	КонецЕсли;
	
	мИнфПол = ПолучитьПараметрыБезПустыхЗаписей(Кэш, мИнфПол);
	
	Если мИнфПол.Количество() <> 0 Тогда
		ТекСтрока.Вставить("ИнфПол", мИнфПол);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыБезПустыхЗаписей(Кэш, МассивПараметров)
	
	МассивПараметровИсходящий = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ МассивПараметров Цикл
		
		Если НЕ ТекСтрока.Свойство("Имя") ИЛИ НЕ ТекСтрока.Свойство("Значение") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			Продолжить;	
		КонецЕсли;
		
		МассивПараметровИсходящий.Добавить(Новый Структура("Имя, Значение", ТекСтрока.Имя, ТекСтрока.Значение));
		
	КонецЦикла;
	
	Возврат МассивПараметровИсходящий;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИсключенияИнфПол() Экспорт 
	
	ИсключенияИнфПол = Новый Соответствие;
	ИсключенияИнфПол.Вставить("ИдГосКон", Истина);
	ИсключенияИнфПол.Вставить("СвТранГруз", Истина);
	ИсключенияИнфПол.Вставить("ДатаПер", Истина);
	ИсключенияИнфПол.Вставить("РабОргПрод_Должность", Истина);
	ИсключенияИнфПол.Вставить("РабОргПрод_ФИО", Истина);
	ИсключенияИнфПол.Вставить("ИнЛицо_Должность", Истина);
	ИсключенияИнфПол.Вставить("ИнЛицо_ФИО", Истина);
	ИсключенияИнфПол.Вставить("ИнЛицо_НаимОргПер", Истина);
	ИсключенияИнфПол.Вставить("СвПерВещ", Истина);
	ИсключенияИнфПол.Вставить("НомерГТД", Истина);
	
	Возврат ИсключенияИнфПол;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСведенияGLNПоИмениСтороны(Кэш, ТекДокумент, ИмяСтороны, МассивПараметров, Ключ)
	
	Если НЕ ТекДокумент.Свойство(ИмяСтороны) Тогда
		Возврат;	
	КонецЕсли;
	
	Данные = ТекДокумент[ИмяСтороны];
	Если НЕ Данные.Свойство("GLN") Тогда
		Возврат;	
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", Ключ, Данные.GLN));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСтрТаблПараметр(Кэш, ТекСтрока) Экспорт 
	
	Если НЕ ТекСтрока.Свойство("Параметр") тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого ТекПараметр ИЗ ТекСтрока.Параметр Цикл
		
		Если ТекПараметр.Имя = "НомерГТД" Тогда
			ТекСтрока.Вставить("ГТД", СокрЛП(ТекПараметр.Значение));
			Прервать;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИсключенияОснование() Экспорт 
	
	ИсключенияИнфПол = Новый Соответствие;
	ИсключенияИнфПол.Вставить("ПРД", Истина);
	ИсключенияИнфПол.Вставить("СчФ", Истина);
	ИсключенияИнфПол.Вставить("КСчФ", Истина);
	ИсключенияИнфПол.Вставить("ИспрСчФ", Истина);
	ИсключенияИнфПол.Вставить("ИсхСчФ", Истина);
	ИсключенияИнфПол.Вставить("ИспрИсхСчФ", Истина);
	ИсключенияИнфПол.Вставить("ДокПодтвОтгр", Истина);
	
	Возврат ИсключенияИнфПол;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки_Вызов
/////////////////////////////////////////

//Генератор ФЭД для формирования вложений {
&НаКлиенте
Функция ПрименитьПодстановку(Кэш, Вложение, ДопПараметры, Отказ) Экспорт
	Перем СбисФормыПоиска;
	Если Не ДопПараметры.Свойство("ФормыПоиска", СбисФормыПоиска) Тогда
		СбисФормыПоиска = Новый Массив;
		СбисФормыПоиска.Добавить("Файл_" + Вложение.Тип + "_" + СтрЗаменить(Вложение.ВерсияФормата, ".", "_"));
		Если Не Вложение.ВерсияФормата = "3.01" Тогда
			СбисФормыПоиска.Добавить("Файл_Шаблон_" + СтрЗаменить(Вложение.ВерсияФормата, ".", "_"));
		КонецЕсли;
		СбисФормыПоиска.Добавить("Файл_Шаблон");
		ДопПараметры.Вставить("ФормыПоиска", СбисФормыПоиска);
	КонецЕсли;
	
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "СформироватьПодстановку", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
	Если фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;

	//АльтернативнаяФормаФункции = "Файл_" + Вложение.Тип + "_" + СтрЗаменить(Вложение.ВерсияФормата, ".", "_");
	//фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СформироватьПодстановку", АльтернативнаяФормаФункции, "Файл_Шаблон", Кэш);
	СтруктураВложения_5_01 = фрм.СформироватьПодстановку(Кэш, Вложение, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СтруктураВложения_5_01, "Файл_Шаблон.ПрименитьПодстановку");
	КонецЕсли;
	
	Если	ДопПараметры.Свойство("МассоваяОтправка")
		И	ДопПараметры.МассоваяОтправка Тогда
		Возврат СтруктураВложения_5_01;	
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
	
	ПараметрыДокумента = Новый Структура("ВерсияФормата, ТипДокумента, ПодТип, ПодВерсияФормата");
	ПараметрыДокумента.ВерсияФормата 	= Вложение.ВерсияФормата;
	ПараметрыДокумента.ТипДокумента 	= Вложение.Тип;
	ПараметрыДокумента.ПодТип 			= Вложение.ПодТип;
	ПараметрыДокумента.ПодВерсияФормата = Вложение.ПодВерсияФормата;
	НаборПодстановок					= Новый Структура("Генератор", СтруктураВложения_5_01);
	
	Попытка
		ШаблонXML = Кэш.Интеграция.Интеграция_ФЭДМультиСгенерировать(
			ПараметрыДокумента, 
			НаборПодстановок, 
			Новый Структура("Кэш", Кэш));
	Исключение
		Отказ = Истина;
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ИнфоОбОшибке, "Файл_Шаблон.ПрименитьПодстановку");	
	КонецПопытки;
	
	Возврат ШаблонXML;
	
КонецФункции

//ДопПараметры - Структура: 
&НаКлиенте
Функция СформироватьПодстановку(Кэш=Неопределено, Вложение=Неопределено, ДопПараметры=Неопределено, Отказ=Неопределено) Экспорт
	Если Кэш = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Генератор = Новый Соответствие;
	Попытка
		ЗаполнитьГенераторДаннымиВложения(Кэш, Генератор, Вложение, ДопПараметры);
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ИнформацияОбОшибке,"Файл_Шаблон.СформироватьПодстановку");
	КонецПопытки;
		
	Возврат Генератор;
	
КонецФункции

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки_ФункцииЗаполнения

&НаКлиенте
Процедура ЗаполнитьГенераторДаннымиВложения(Кэш, Генератор, Вложение, ДопПараметры)
	
	ЗаполнитьОбщиеДанные(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Получатель",			ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Грузополучатель",	ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Отправитель",		ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Грузоотправитель",	ДопПараметры);
	ЗаполнитьПодписант(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьТабличныеДанные(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьИтоги(Кэш, Генератор, Вложение, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщиеДанные(Кэш, Генератор, Вложение, ДопПараметры)
	
	ТекФайл = Вложение.СтруктураДокумента.Файл;
	ТекДокумент = ТекФайл.Документ;
	
	Если ТекФайл.Свойство("Дата") И ТекФайл.Свойство("Время") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ДатаИнфПр", ТекФайл, "Дата");
		УстановитьЗначениеПоКлючу(Генератор, "ВремИнфПр", ТекФайл, "Время");
	Иначе
		Генератор.Вставить("ДатаИнфПр", Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
		Генератор.Вставить("ВремИнфПр", Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	КонецЕсли;		

	Генератор.Вставить("ВремИнфИсп", 	Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	Генератор.Вставить("ИдФайл", 		ТекФайл.Имя);
	Генератор.Вставить("Дата", 			ТекДокумент.Дата);
	Генератор.Вставить("Номер", 		СокрЛП(ТекДокумент.Номер));
	
	УстановитьЗначениеПоКлючу(Генератор, "ДефНомИспрСФ",  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ДефДатаИспрСФ", 	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПоФактХЖ", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "НаимДокОпр", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПРД", 			  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "НомИспрСФ", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ДатаИспрСФ", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Основание", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Параметры", 	  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СчФ", 	  		  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПередатДокумОсн",   ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПередатДокум",  	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Срок",   			  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СрокВремя",   	  ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СвСчФакт.ИдГосКон", ТекДокумент, "ИдГосКон");
	УстановитьЗначениеПоКлючу(Генератор, "Функция", 		  ТекДокумент, "Тип"); 
	УстановитьЗначениеПоКлючу(Генератор, "СвТранГруз",  	  ТекДокумент);
	
	Если ТекДокумент.Свойство("НомОсн") Тогда	
		УстановитьЗначениеПоКлючу(Генератор, "НомОсн",	ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДатаОсн", ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "НаимОсн",	ТекДокумент);
	КонецЕсли;
	
	Если ТекДокумент.Свойство("ДокПодтвОтгр") Тогда	
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.ДатаДокОтгр", ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НомДокОтгр",  ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НаимДокОтгр", ТекДокумент);
	КонецЕсли;
	Если Вложение.Свойство("Регламент") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "СодОпер", Вложение.Регламент, "Название");
	КонецЕсли;
	Если ТекДокумент.Свойство("Валюта") Тогда
		ЗаполнитьВалюту(Кэш, Генератор, ТекДокумент.Валюта, ДопПараметры); 
	КонецЕсли;
	Если ТекДокумент.Свойство("Исправление") И ТекДокумент.Исправление Тогда
		
		Попытка
			Генератор.Вставить("НомИспрСФ", 	ТекДокумент.НомерИсправления);
			Генератор.Вставить("Номер", 		ТекДокумент.НомерИсходного);
		Исключение
		КонецПопытки;
		
		Попытка
			Генератор.Вставить("ДатаИспрСФ",	ТекДокумент.Дата);
			Генератор.Вставить("Дата", 			ТекДокумент.ДатаИсходного);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет сторону в генератор
&НаКлиенте
Процедура ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, ИмяСтороны, ДопПараметры) Экспорт
	Перем СбисФормыПоиска, СбисОсновнаяФорма;
	//фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ИсточникДанных_ИтогТабл", "Файл_Шаблон_" + СтрЗаменить(Вложение.СтруктураДокумента.Файл.ВерсияФормата, ".", "_"), "Файл_Шаблон");
	Если Не ДопПараметры.Свойство("ФормыПоиска", СбисФормыПоиска) Тогда
		СбисФормыПоиска = Новый Массив
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ИсточникДанных_ПолучитьДанныеСтороныПоИмени", СбисФормыПоиска, Новый Структура, Ложь);
	Если фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	
	Данные = фрм.ИсточникДанных_ПолучитьДанныеСтороныПоИмени(Кэш, Вложение, ИмяСтороны);
	
	Если Данные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Данные.Свойство("ОнЖе") Тогда
		УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".ОнЖе", Данные, "ОнЖе");
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".Название",	Данные, "Название");
	УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".GLN",		Данные, "GLN");
	
	ЗаполнитьРегистрационныеДанныеЛица	(Кэш, Генератор, Данные,			ИмяСтороны);
	ЗаполнитьБанковскиеРеквизиты		(Кэш, Генератор, ИмяСтороны + ".",	Данные);
	ЗаполнитьКонтактныеДанные			(Кэш, Генератор, ИмяСтороны + ".",	Данные);
	ЗаполнитьАдресныеДанные				(Кэш, Генератор, ИмяСтороны,		Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРегистрационныеДанныеЛица(Кэш, Генератор, Данные, ИмяСтороны)
	Перем КлючДанные, ЗначениеДанные;
	
	Если Данные.Свойство("СвЮЛ", ЗначениеДанные) Тогда
		КлючДанные = "СвЮл";
		Генератор.Вставить(ИмяСтороны + ".СвЮл.Название",	"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.КПП",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефКПП",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ОГРН",		"");
	ИначеЕсли Данные.Свойство("СвФЛ", ЗначениеДанные) Тогда
		КлючДанные = "СвФл";
		Генератор.Вставить(ИмяСтороны + ".СвФл.Название",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Фамилия",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Имя",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Отчество",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ДефИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ОГРН",		ИмяСтороны + "." + КлючДанные + ".СвГосРегИП");
	ИначеЕсли Данные.Свойство("СвИП", ЗначениеДанные) Тогда
		КлючДанные = "СвИп";
		Генератор.Вставить(ИмяСтороны + ".СвИп.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Фамилия",	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Имя",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Отчество",	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.СвГосРегИП",	"");
	ИначеЕсли Данные.Свойство("СвИн", ЗначениеДанные) Тогда
		КлючДанные = "СвИн";
		Генератор.Вставить(ИмяСтороны + ".СвИн.Название",	"");
	Иначе
		Возврат;
	КонецЕсли;
	ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяСтороны + "." + КлючДанные + ".", ЗначениеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБанковскиеРеквизиты(Кэш, Генератор, ИмяРеквизита, Данные)
	
	Если Данные.Свойство("БанкРекв") Тогда
		
		СтруктураБанкРекв = Данные.БанкРекв;
		
		Генератор.Вставить(ИмяРеквизита + "НомерСчета", 	"");
		Генератор.Вставить(ИмяРеквизита + "БИК", 			"");
		Генератор.Вставить(ИмяРеквизита + "КорСчет", 		"");
		Генератор.Вставить(ИмяРеквизита + "НаимБанк", 		"");
		
		Если ЗначениеЗаполнено(СтруктураБанкРекв.РСчет) Тогда
			
			естьБИК 		= ЗначениеЗаполнено(СтруктураБанкРекв.БИК);
			естьНаимБанк 	= ЗначениеЗаполнено(СтруктураБанкРекв.НаимБанк);
			естьКСчет 		= ЗначениеЗаполнено(СтруктураБанкРекв.КСчет);
			
			Если естьБИК ИЛИ естьНаимБанк ИЛИ естьКСчет Тогда
				
				Генератор.Вставить(ИмяРеквизита + "НомерСчета", 	СтруктураБанкРекв.РСчет);
				Генератор.Вставить(ИмяРеквизита + "БИК", 			СтруктураБанкРекв.БИК);
				Генератор.Вставить(ИмяРеквизита + "КорСчет", 		СтруктураБанкРекв.КСчет);
				Генератор.Вставить(ИмяРеквизита + "НаимБанк", 		СтруктураБанкРекв.НаимБанк);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактныеДанные(Кэш, Генератор, ИмяРеквизита, Данные)
	
	Если Данные.Свойство("Контакт") Тогда
		
		УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Email",   Данные.Контакт, "EMAIL");
		УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Телефон", Данные.Контакт, "Телефон");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресныеДанные(Кэш, Генератор, ИмяСтороны, Данные)
	
	Если Не Данные.Свойство("Адрес") Или Не Данные.Адрес.Количество() Тогда
		Возврат;
	КонецЕсли;
	ИсточникАдрес = Данные.Адрес;
	Если ТипЗнч(ИсточникАдрес) = Тип("Массив") Тогда
		ИсточникАдрес = ИсточникАдрес[0]
	КонецЕсли;
	СтруктураАдреса = ОпределитьСтруктуруАдреса(Кэш, ИсточникАдрес);
	
	Если СтруктураАдреса.Свойство("АдрРФ") Тогда
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрГород",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрДом",		"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрИндекс",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКварт",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКодРегион","");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрУлица",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКорпус",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрНаселПункт",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрРайон",		"");
		
		Если СтруктураАдреса.АдрРФ.Свойство("Город") И СтруктураАдреса.АдрРФ.Свойство("КодРегион") Тогда
			Если Не ЗначениеЗаполнено(СтруктураАдреса.АдрРФ.Город) И ЗначениеЗаполнено(СтруктураАдреса.АдрРФ.КодРегион) Тогда
				Если СтруктураАдреса.АдрРФ.КодРегион = 77 Тогда
					СтруктураАдреса.АдрРФ.Город	= "Москва ";
				ИначеЕсли СтруктураАдреса.АдрРФ.КодРегион = 78 Тогда
					СтруктураАдреса.АдрРФ.Город = "Санкт-Петербург";
				ИначеЕсли СтруктураАдреса.АдрРФ.КодРегион = 92 Тогда
					СтруктураАдреса.АдрРФ.Город = "Севастополь";
				КонецЕсли;   
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяСтороны + ".Адрес.АдрРФ.Адр", СтруктураАдреса.АдрРФ);
		
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("АдрИно") Тогда
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрИно.АдрТекст",	"");
		Генератор.Вставить(ИмяСтороны + ".Адрес.АдрИно.КодСтр",		"");
		
		ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяСтороны + ".Адрес.АдрИно.", СтруктураАдреса.АдрИно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалюту(Кэш, Генератор, Данные, ДопПараметры)
	УстановитьЗначениеПоКлючу(Генератор, "КодОКВ",		Данные); 
	ЗаполненныйКодГенератор = Генератор.Получить("КодОКВ");
	Если ЗаполненныйКодГенератор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если		ЗаполненныйКодГенератор = "643" Тогда
		Генератор.Вставить("НаимОКВ", "Российский рубль");
	ИНачеЕсли	ЗаполненныйКодГенератор = "840" Тогда
		Генератор.Вставить("НаимОКВ", "Доллар США");
	ИначеЕсли	ЗаполненныйКодГенератор = "978" Тогда
		Генератор.Вставить("НаимОКВ", "Евро");
	Иначе
		УстановитьЗначениеПоКлючу(Генератор, "НаимОКВ", Данные, "Название"); 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяРеквизита, СтруктураДанных)
	
	Для Каждого ТекРеквизит ИЗ СтруктураДанных Цикл
		
		Ключ = ИмяРеквизита + ТекРеквизит.Ключ;
		
		ЗначениеВГенераторе = Генератор.Получить(Ключ);
		Если ЗначениеВГенераторе = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		//Если требуется положить по новому пути, то смотрим на значение, указанное в генераторе 
		Если ЗначениеЗаполнено(ЗначениеВГенераторе) Тогда
			Генератор.Вставить(ЗначениеВГенераторе, ТекРеквизит.Значение);
			Генератор.Удалить(Ключ);
		Иначе
			Генератор.Вставить(Ключ, ТекРеквизит.Значение);
		КонецЕсли;
			//Генератор.Вставить(Ключ, ТекРеквизит.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписант(Кэш, Генератор, Вложение, ДопПараметры) Экспорт
	
	ТекДокумент = Вложение.СтруктураДокумента.Файл.Документ;
	
	Если НЕ ТекДокумент.Свойство("Подписант") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.ОблПолн", ТекДокумент.Подписант, "ОблПолн");
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.Статус", ТекДокумент.Подписант, "Статус");
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.ОснПолн", ТекДокумент.Подписант, "ОснПолн");
	
	Если Вложение.Отправитель.Свойство("СвЮЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвЮЛ;
		ЭтоИП = Ложь;
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвФЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвФЛ;
		ЭтоИП = Истина; //в формате (УкдКсчфДис_1115133, УпдСчфДоп_1115131) узла ФЛ нет
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвИП") Тогда
		СтруктураЛица = Вложение.Отправитель.СвИП;
		ЭтоИП = Истина;
		
	Иначе
		Возврат;	
	КонецЕсли;
	
	Если ЭтоИП Тогда
		
		Подписант = "Подписант.ИП.";
		
		Генератор.Вставить(Подписант + "СвГосРегИП", "");
		Генератор.Вставить(Подписант + "ИННФЛ", СтруктураЛица.ИНН);
		
		ЗаполнитьФИО(Кэш, Генератор, Подписант, СтруктураЛица);
		
	Иначе
		
		Подписант = "Подписант.ЮЛ.";
		
		Генератор.Вставить(Подписант + "Должн", "");
		Генератор.Вставить(Подписант + "ИННЮЛ", СтруктураЛица.ИНН);
		
		ЗаполнитьФИО(Кэш, Генератор, Подписант, Вложение.Ответственный);			
		
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Кэш, Генератор, ИмяРеквизита, СтруктураФИО)
	
	Если СтруктураФИО.Свойство("Фамилия") Тогда
		Генератор.Вставить(ИмяРеквизита + "Фамилия", СтруктураФИО.Фамилия);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Имя") Тогда
		Генератор.Вставить(ИмяРеквизита + "Имя", СтруктураФИО.Имя);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Отчество") Тогда
		Генератор.Вставить(ИмяРеквизита + "Отчество", СтруктураФИО.Отчество);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанные(Кэш, Генератор, Вложение, ДопПараметры)
	Отказ = Ложь;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ИсточникДанных_ПолучитьТабличнуюЧастьДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	ТабличнаяЧастьДокумента = фрм.ИсточникДанных_ПолучитьТабличнуюЧастьДокумента(Кэш, Вложение, "СтрТабл");
	
	Если ТабличнаяЧастьДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ОбработчикДанных_ПолучитьТабличнуюЧастьДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	ДопПараметрыОбработки = Новый Структура("Генератор, Вложение, Кэш, ДополнительныеПараметры", Генератор, Вложение, Кэш, ДопПараметры);
	
	Генератор.Вставить("ТабличныеДанные", Новый Массив);
	Для Каждого ТекСтрока ИЗ ТабличнаяЧастьДокумента Цикл
		ПараметрыОбработчика = Новый Структура("ИсточникДанных, ДанныеРезультат, Суффикс", ТекСтрока, Новый Соответствие(), "");
		фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ОбработчикДанных_ЗаполнитьСтрокуТабличнойЧастиДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
		Попытка
			фрм.ОбработчикДанных_ЗаполнитьСтрокуТабличнойЧастиДокумента(ПараметрыОбработчика, ДопПараметрыОбработки);
			Генератор["ТабличныеДанные"].Добавить(ПараметрыОбработчика.ДанныеРезультат);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Кэш.ОбщиеФункции.СбисВызватьИсключение(ИнфоОбОшибке, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеАкциз(Аргумент, ДопПараметры) Экспорт
	Перем Суффикс;
	Если Не Аргумент.Свойство("Суффикс", Суффикс) Тогда
		Суффикс = ""
	КонецЕсли;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Акциз") Тогда
		Возврат
	КонецЕсли;
	Если Источник.Акциз.Сумма = "без акциза" Тогда
		УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс, Источник.Акциз.Сумма, Новый Структура("ИскатьВИсточнике", Ложь));
	Иначе
		УстановитьЗначениеПоКлючу(Приемник, "Акциз" + Суффикс,		Источник.Акциз, "Сумма");
		УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс,	"");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеСуммаНДС(Аргумент, ДопПараметры)
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ДефНДС" + Суффикс, Источник);
	УстановитьЗначениеПоКлючу(Приемник, "БезНДС" + Суффикс, Источник);
	
	Если Не Источник.Свойство("НДС") Тогда
		Возврат;
	ИначеЕсли Источник.НДС.Свойство("Ставка") Тогда
		Если Источник.НДС.Ставка <> "без НДС" Тогда
			УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
		КонецЕсли;
	Иначе
		УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеЕдИзм(Аргумент, ДопПараметры) Экспорт
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ЕдИзм" + Суффикс, Источник, "ЕдИзм");
	УстановитьЗначениеПоКлючу(Приемник, "ЕдКод" + Суффикс, Источник, "ОКЕИ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеСтранаПроизводства(Аргумент, ДопПараметры)
	Отказ = Ложь;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	ФормыДляПоиска = ДопПараметры.ДополнительныеПараметры.ФормыПоиска;
	фрм = ДопПараметры.Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(ДопПараметры.Кэш, "ИсточникДанных_ПолучитьСтранаПроизводства", ФормыДляПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		ДопПараметры.Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанныеСтранаПроизводства");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	
	СтранаПроизводства = фрм.ИсточникДанных_ПолучитьСтранаПроизводства(ДопПараметры.Кэш, Источник);
	
	Если СтранаПроизводства = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ПустаяСтрока(СтранаПроизводства.КодСтраныПроизводства) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Приемник, "КодСтраныПроизводства",СтранаПроизводства);
	УстановитьЗначениеПоКлючу(Приемник, "СтранаПроизводства",	СтранаПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеНомСредИдентТов(Аргумент, ДопПараметры)
	Перем мИсточникИдентТов;
	
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("НомСредИдентТов") Тогда
		Возврат;
	КонецЕсли;
		
	КИЗ		= 		 Новый Массив;
	НомУпак	= 		 Новый Массив;
	ИдентТрансУпак = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ Источник.НомСредИдентТов Цикл
		Если	ТекСтрока.Свойство("КИЗ", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Массив") Тогда
			Для Каждого ТекКИЗ ИЗ мИсточникИдентТов Цикл
				КИЗ.Добавить(Новый Структура("Номер", ТекКИЗ.Значение));	
			КонецЦикла;
		КонецЕсли;
		Если	ТекСтрока.Свойство("НомУпак", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Массив") Тогда
			Для Каждого ТекКИЗ ИЗ мИсточникИдентТов Цикл
				НомУпак.Добавить(Новый Структура("Номер", ТекКИЗ.Значение));	
			КонецЦикла;
		КонецЕсли;
		Если	ТекСтрока.Свойство("ИдентТрансУпак", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Строка") Тогда
			ИдентТрансУпак.Добавить(Новый Структура("ИдентТрансУпак", мИсточникИдентТов));
		КонецЕсли;
	КонецЦикла;
	
	Если КИЗ.Количество() Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НомСредИдентТов" + Суффикс + ".КИЗ",			 КИЗ,			 Новый Структура("ИскатьВИсточнике", Ложь));
	КонецЕсли;
	Если НомУпак.Количество() Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НомСредИдентТов" + Суффикс + ".НомУпак",		 НомУпак,		 Новый Структура("ИскатьВИсточнике", Ложь));
	КонецЕсли;
	Если ИдентТрансУпак.Количество() Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НомСредИдентТов" + Суффикс, 					 ИдентТрансУпак, Новый Структура("ИскатьВИсточнике", Ложь));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеУпаковка(Аргумент, ДопПараметры) Экспорт
	Перем сУпаковка;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Упаковка", сУпаковка) Тогда
		Возврат;
	КонецЕсли;
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Вместимость", сУпаковка, "Вместимость");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Код", 		сУпаковка, "Код");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Название", 	сУпаковка, "Название");
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Название", 	сУпаковка, "Название");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеБрутто(Аргумент, ДопПараметры)
	
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Брутто") Тогда
		Возврат
	КонецЕсли;
	УстановитьЗначениеПоКлючу(Приемник, "Брутто", Источник.Брутто, "Кол_во");		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеRnptData(Аргумент, ДопПараметры)
	Перем иСведПРослеж;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("СведПрослеж", иСведПРослеж) Тогда
		Возврат;
	КонецЕсли;
		
	RnptData = Новый Массив;
	Корректировка = Источник.Свойство("ПредСтрТабл") И Источник.ПредСтрТабл.Свойство("СведПрослеж");
	
	Для Каждого ТекСтрока ИЗ иСведПРослеж Цикл
		
		Марка = Новый Структура("MuCode, MuName, Rnpt, RnptQty",
			СокрЛП(ТекСтрока.ЕдИзмПрослеж),
			ТекСтрока.НаимЕдИзмПрослеж,
			СокрЛП(ТекСтрока.НомТовПрослеж),
			ТекСтрока.КолВЕдПрослеж);
			
		Если Корректировка Тогда
			
			Если ТекСтрока.Свойство("УвелКолВЕдПрослеж") Тогда
				Марка.Вставить("DiffUp", ТекСтрока.УвелКолВЕдПрослеж);
			КонецЕсли;
			
			Если ТекСтрока.Свойство("УмКолВЕдПрослеж") Тогда
				Марка.Вставить("DiffDown", ТекСтрока.УмКолВЕдПрослеж);
			КонецЕсли;
			
			Если ТекСтрока.Свойство("ПредКолВЕдПрослеж") Тогда
				Марка.Вставить("BeforeQty", ТекСтрока.ПредКолВЕдПрослеж);
			КонецЕсли;
			
		КонецЕсли;
			
		RnptData.Добавить(Марка);
		
	КонецЦикла;
	
	Если RnptData.Количество() Тогда
		УстановитьЗначениеПоКлючу(Приемник, "RnptData", RnptData, Новый Структура("ИскатьВИсточнике", Ложь));
	КонецЕсли;                                                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеНДСЗначениеНДСТип(Аргумент, ДопПараметры) Экспорт
	
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
		
	УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "");
	Процент = "";
	
	Если Не Источник.Свойство("НДС") Тогда
		Возврат;
	ИначеЕсли Источник.НДС.Свойство("ТипСтавки") Тогда
		Если Источник.НДС.ТипСтавки = "процент" Тогда
			Если ДопПараметры.Свойство("СимволПроцент") Тогда 
				Процент = ДопПараметры.СимволПроцент;
			Иначе
				Процент = "%";
			КонецЕсли;
		ИначеЕсли Источник.НДС.ТипСтавки = "текст" Тогда
			Если Источник.НДС.Ставка = "без НДС" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, Источник.НДС.Ставка);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.НДС.Свойство("Ставка") Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, Источник.НДС.Ставка + Процент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеЦенаБезНДС(Аргумент, ДопПараметры)
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ЦенаБезНДС" + Суффикс, Источник, "Цена");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеПредСтрТабл(Аргумент, ДопПараметры)
	Перем иПредСтрТабл, КоличествоДок;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("ПредСтрТабл", иПредСтрТабл) Тогда
		Возврат;
	КонецЕсли;
	АргументЗаполнить = Новый Структура("ИсточникДанных, ДанныеРезультат, Суффикс", иПредСтрТабл, Приемник, "До");
	
	ЗаполнитьТабличныеДанныеПоСуффиксу(АргументЗаполнить, ДопПараметры);
	
	УстановитьЗначениеПоКлючу(Приемник, "КоличествоДок", 	АргументЗаполнить.ИсточникДанных, "Кол_во");
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенДо", 		АргументЗаполнить.ИсточникДанных, "Сумма");
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенБезНДСДо", АргументЗаполнить.ИсточникДанных, "СуммаБезНал");
	
	//Костыль для удаления КолТовДо
	Попытка
		КоличествоДок = Число(Приемник.Получить("КоличествоДок"));
		Если КоличествоДок = 0 Тогда
			Приемник.Удалить("КоличествоДок");
		КонецЕсли;
	Исключение
		//Не числовое значение в приемнике. Пока без обработки
	КонецПопытки;
КонецПроцедуры

//Процедура заполняет ТЧ с учетом суффикса в строку. Для ПредСТрТабл, например, должно быть сформировано тоже самое, только с суффиксом До
&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеПоСуффиксу(Аргумент, ДопПараметры)
	ЗаполнитьТабличныеДанныеСуммаНДС			(Аргумент, ДопПараметры); 
	ЗаполнитьТабличныеДанныеЕдИзм				(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеНДСЗначениеНДСТип	(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеЦенаБезНДС			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеНомСредИдентТов		(Аргумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеОбщие(Аргумент, ДопПараметры) Экспорт
	
	ТекСтрока = Аргумент.ИсточникДанных;
	ТекДанные = Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомер", 		ТекСтрока, "Код");
	УстановитьЗначениеПоКлючу(ТекДанные, "Количество", 		ТекСтрока, "Кол_во");		
	УстановитьЗначениеПоКлючу(ТекДанные, "Наименование", 	ТекСтрока, "Название");
	УстановитьЗначениеПоКлючу(ТекДанные, "Цена", 			ТекСтрока, "ЦенаСНДС");
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенБезНДС", 	ТекСтрока, "СуммаБезНал");
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦен", 		ТекСтрока, "Сумма");
	УстановитьЗначениеПоКлючу(ТекДанные, "Артикул", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ПорНомер", 		ТекСтрока);
	
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефСуммаЦен", 				ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефНДС", 						ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефЕдКод",					ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефКодСтраныПроизводства",	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ГТД", 						ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ИнфПол", 						ТекСтрока); 
	
	Если ТекСтрока.Свойство("Характеристика") 
		 И ТекСтрока.Характеристика.Свойство("Значение")
		 И ЗначениеЗаполнено(ТекСтрока.Характеристика.Значение) Тогда
		 
		 УстановитьЗначениеПоКлючу(ТекДанные, "КодПартии",					ТекСтрока, "Характеристика.Значение");
	КонецЕсли;
	
	Если Не (	ТекСтрока.Свойство("АкцизУвел")
			И	ТекСтрока.АкцизУвел = "0.00") Тогда
		//Если Акциз не менялся, то он не передаётся.
		УстановитьЗначениеПоКлючу(ТекДанные, "АкцизУвел", 	ТекСтрока);
		УстановитьЗначениеПоКлючу(ТекДанные, "АкцизУм", 	ТекСтрока);
	КонецЕсли;
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенУвел", 	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенУм", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаНДСУвел", 	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаНДСУм", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СтоимУвел", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СтоимУм", 		ТекСтрока);
	
	УстановитьЗначениеПоКлючу(ТекДанные, "GTIN", 			ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомерСтор", 	ТекСтрока, "КодПокупателя");
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомер", 		ТекСтрока, "КодПоставщика");
	УстановитьЗначениеПоКлючу(ТекДанные, "ПрТовРаб",		ТекСтрока, "Тип");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтоги(Кэш, Генератор, Вложение, ДопПараметры)
	
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ИсточникДанных_ИтогТабл", "Файл_Шаблон_" + СтрЗаменить(Вложение.СтруктураДокумента.Файл.ВерсияФормата, ".", "_"), "Файл_Шаблон");
	ИтогиДокумента = фрм.ИсточникДанных_ИтогТабл(Кэш, Вложение);
	
	Если ИтогиДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураИтоги = ИтогиДокумента.СтруктураИтоги; 
	ИмяТабл = ИтогиДокумента.ИмяТабл; 
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".Сумма",			СтруктураИтоги, "Сумма");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДС",		СтруктураИтоги, "СуммаБезНал");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДС",		СтруктураИтоги, "СуммаБезНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".ДефСумма",			СтруктураИтоги, "ДефСумма");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДС",			СтруктураИтоги, "БезНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".ДефНДС",			СтруктураИтоги, "ДефНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДСУвел",	СтруктураИтоги, "СуммаБезНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДСУм",	СтруктураИтоги, "СуммаБезНДСУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаУвел",		СтруктураИтоги, "СуммаУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаУм",			СтруктураИтоги, "СуммаУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДСУвел",		СтруктураИтоги, "СуммаНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДСУм",		СтруктураИтоги, "СуммаНДСУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДСУвел",		СтруктураИтоги, "БезНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДСУм",			СтруктураИтоги, "БезНДСУм");
	
	Если СтруктураИтоги.Свойство("НДС") Тогда
		Если НЕ (СтруктураИтоги.Свойство("БезНДС") И СтруктураИтоги.БезНДС = "без НДС") Тогда
			УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДС", СтруктураИтоги.НДС, "Сумма");	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураИтоги.Свойство("Нетто") Тогда
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".Кол_во", СтруктураИтоги.Нетто, "Кол_во");
	КонецЕсли;
	Если СтруктураИтоги.Свойство("Упаковка") Тогда
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".Упаковка.КолМест", СтруктураИтоги.Упаковка, "КолМест");
	КонецЕсли;
	Если СтруктураИтоги.Свойство("Брутто") Тогда
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".БруттоВс", СтруктураИтоги.Брутто, "Кол_во");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки_Прочее

//В качестве доп.Параметров может приходить либо ключ для поиска в источнике, либо структура с описанием, что делать с источником
&НаКлиенте
Процедура УстановитьЗначениеПоКлючу(ДанныеСоответствия, Ключ, ИсточникДанных, ДопПараметры=Неопределено) Экспорт
	
	ИскатьВИсточнике = Истина;
	Попытка
		ДанныеГенератор = ИсточникДанных;
		Если	Не ТипЗнч(ИсточникДанных) = Тип("Структура")
			И	Не ТипЗнч(ИсточникДанных) = Тип("Массив") Тогда
			ДанныеГенератор = ИсточникДанных;
			ИскатьВИсточнике = Ложь;
		ИначеЕсли ДопПараметры = Неопределено Тогда
			КлючПоиска = Ключ;
		ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Строка") Тогда
			КлючПоиска = ДопПараметры;
		Иначе
			Если ДопПараметры.Свойство("ИскатьВИсточнике") Тогда
				ИскатьВИсточнике = ДопПараметры.ИскатьВИсточнике;
			КонецЕсли;
			Если ДопПараметры.Свойство("КлючПоиска") Тогда
				КлючПоиска = ДопПараметры.КлючПоиска
			КонецЕсли;
		КонецЕсли;
		
		Если ИскатьВИсточнике Тогда
			ПутьПоиска = СтрЗаменить(КлючПоиска, ".", Символы.ПС);
			Для НомерСтрокиПути = 1 По СтрЧислоСтрок(ПутьПоиска) Цикл
				ДанныеГенератор = ДанныеГенератор[СтрПолучитьСтроку(ПутьПоиска, НомерСтрокиПути)];
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(ДанныеГенератор) = Тип("Строка") Тогда
			ДанныеГенератор = СокрЛП(ДанныеГенератор);
		ИначеЕсли ДанныеГенератор = Null Тогда 
			Возврат;
		КонецЕсли;
		ДанныеСоответствия.Вставить(Ключ, ДанныеГенератор);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтруктуруАдреса(Кэш, СтруктураАдреса)
	
	Если НЕ СтруктураАдреса.Свойство("АдрРФ") Тогда 
		Если СтруктураАдреса.Свойство("Юридический") Тогда 
			Возврат СтруктураАдреса.Юридический;		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураАдреса.Свойство("АдрИно") Тогда 
		Если СтруктураАдреса.Свойство("Юридический") Тогда 
			Возврат СтруктураАдреса.Юридический;		
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки_ИсточникДанных

&НаКлиенте
Функция ИсточникДанных_ПолучитьДанныеСтороныПоИмени(Кэш, Вложение, ИмяСтороны) Экспорт
	
	Попытка
		Возврат Вложение.СтруктураДокумента.Файл.Документ[ИмяСтороны];	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ИсточникДанных_ПолучитьТабличнуюЧастьДокумента(Кэш, Вложение, ИмяТабличнойЧасти) Экспорт
	
	Попытка
		Возврат Вложение.СтруктураДокумента.Файл.Документ.ТаблДок[ИмяТабличнойЧасти];
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ИсточникДанных_ПолучитьСтранаПроизводства(Кэш, Источник) Экспорт
	
	Попытка
		Возврат Новый Структура("КодСтраныПроизводства, СтранаПроизводства", Источник.Страна, Источник.СтранаНаименование);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ИсточникДанных_ИтогТабл(Кэш, Вложение) Экспорт
	
	Попытка
		ИтогТабл = Вложение.СтруктураДокумента.Файл.Документ.ТаблДок.ИтогТабл;
		Возврат Новый Структура("СтруктураИтоги, ИмяТабл", ИтогТабл[0], "ПредИтогТабл");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область include_core_vo2_Файл_Шаблон_ГенераторФЭД_ФормированиеПодстановки_ОбработчикДанных

//Штатный обработчик строки подстановки
&НаКлиенте
Процедура ОбработчикДанных_ЗаполнитьСтрокуТабличнойЧастиДокумента(Аргумент, ДопПараметры) Экспорт
	ЗаполнитьТабличныеДанныеПоСуффиксу			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеСтранаПроизводства	(Аргумент, ДопПараметры); 
	ЗаполнитьТабличныеДанныеУпаковка			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеБрутто				(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеRnptData			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеПредСтрТабл			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеОбщие				(Аргумент, ДопПараметры);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
