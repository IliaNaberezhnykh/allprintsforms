
&НаКлиенте
Перем ГлобальныйКэш Экспорт;

&НаКлиенте
Перем РаботаСJSON, ГлавноеОкно;

#Область include_core_vo2_Модуль_МодульОбъектаКлиент

&НаКлиенте
Процедура УстановитьПараметрыГлобальногоМодуля(ПараметрыУстановки=Неопределено, Кэш) Экспорт
	ГлобальныйКэш	= Новый Структура("КэшНастроек, СБИС, Парам, ТекущийСеанс, ПараметрыСистемы, ТихийРежим");
	ЗаполнитьЗначенияСвойств(ГлобальныйКэш, Кэш);
	РаботаСJSON		= Кэш.РаботаСJSON;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
КонецПроцедуры

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_РаботаСАккаунтом

&НаКлиенте
Процедура ЗаполнитьСведенияОПользователеИАккаунте(ПараметрыЗаполнить, Кэш) Экспорт
	Попытка
		ИнформацияОТекущемПользователе	= СбисПолучитьИнформациюОТекущемПользователе(ПараметрыЗаполнить, Кэш);
		ГлавноеОкно.Пользователь	= ИнформацияОТекущемПользователе.Название; 
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдАккаунта");
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдПользователя");
		ИнформацияОТекущемПользователе.Свойство("НомерАккаунта", Кэш.СБИС.ПараметрыИнтеграции.ИдАккаунта);
		
		Кэш.СБИС.Вставить("Сессии", Новый Соответствие());
		Если	ИнформацияОТекущемПользователе.Свойство("ИдПерсоны", Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя)
			И	ЗначениеЗаполнено(Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя) Тогда
			КлючСессии = Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
			Кэш.СБИС.Сессии.Вставить(КлючСессии, Новый Структура());
			Кэш.СБИС.Сессии[КлючСессии].Вставить("params", Новый Структура());
			Кэш.СБИС.Сессии[КлючСессии].Вставить("accounts", Новый Соответствие());
			Кэш.СБИС.Сессии[КлючСессии].accounts.Вставить(Кэш.СБИС.ПараметрыИнтеграции.ИдАккаунта, Кэш.Парам.ИдентификаторСессии);
		Иначе	
			Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя = "";
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ЗаполнитьСведенияОПользователеИАккаунте");
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Функция СбисПолучитьСписокАккаунтов(Кэш, ДопПараметры, Отказ) Экспорт
	СписокАккаунтов = Кэш.Интеграция.СБИС_ПолучитьСписокАккаунтов(Кэш, Новый Структура(), Новый Структура(), Ложь);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(, "МодульОбъектаКлиент.СбисПолучитьСписокАккаунтов",, "Не удалось получить список аккаунтов");
	КонецЕсли;
	Если ТипЗнч(СписокАккаунтов) = Тип("Структура") Тогда
		Если СписокАккаунтов.Свойство("Список") Тогда
			Возврат СписокАккаунтов.Список;
		КонецЕсли;
	КонецЕсли;	
	Возврат СписокАккаунтов;
КонецФункции 

&НаКлиенте	
Функция СбисПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт    
	Результат = Кэш.Интеграция.СБИС_ПереключитьАккаунт(Кэш, param, Новый Структура(), Ложь);
	Если Отказ Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПереключитьАккаунт",, "Не удалось переключить аккаунт");
	КонецЕсли;
	
	КлючПользователя =  Кэш.СБИС.ПараметрыИнтеграции.КодСервиса + "_" + Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
	Кэш.СБИС.Сессии[КлючПользователя].accounts.Вставить(param.НомерАккаунта, Результат);
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИдАккаунта", param.НомерАккаунта);
	Возврат Результат;
КонецФункции
                                                                                                        
&НаКлиенте	
Функция СбисПолучитьИнформациюОТекущемПользователе(ПараметрыЗапросаИнформации=Неопределено, Кэш) Экспорт  
	Отказ = Ложь;
	Результат = Кэш.Интеграция.СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, Новый Структура, Новый Структура(), Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(Результат, "МодульОбъектаКлиент.ПолучитьИнформациюОТекущемПользователе",, "Не удалось получить информацию о текущем пользователе");
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;    
	
	Если Не Результат.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не Результат.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не Результат.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли; 
	
	Если Результат.Свойство("Пользователь") Тогда
		 Фамилия = Результат.Пользователь.Фамилия;
		 Имя = Результат.Пользователь.Имя;
		 Отчество = Результат.Пользователь.Отчество; 
		 Если Результат.Пользователь.Свойство("ИдПрофиля") Тогда
			Результат.Вставить("ИдПерсоны", Результат.Пользователь.ИдПрофиля);
		 КонецЕсли;
		 Если Результат.Пользователь.Свойство("Аккаунт") Тогда
		 	Результат.Вставить("НомерАккаунта", Результат.Пользователь.Аккаунт.Номер);
		 КонецЕсли;
	 КонецЕсли;
	Результат.Вставить("Название", Фамилия+" "+Имя+" "+Отчество); 
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция СбисДействияПриВыходеИзАккаунта(Кэш, ДопПараметры = Неопределено) Экспорт 
	Кэш.Парам.ЗапомнитьПароль		= Ложь;
	Кэш.Парам.ЗапомнитьСертификат	= Ложь;
	Кэш.Парам.Пароль				= "";
	СохранитьМеткиСтатусов(Кэш, ДопПараметры);
КонецФункции
	
#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Статистика

// Процедура собирает статистику и отправляет на сервис.
//
// Параметры:
//  ПараметрыСтатистики	 - Структура	 - Действие
//  ДопПараметры		 - Структура	 - 
//
&НаКлиенте
Процедура СбисСтатистика_СформироватьИЗаписать(ПараметрыСтатистики, ДопПараметры) Экспорт
	Если Не ГлобальныйКэш.СБИС.ОбменВключен Или Не ГлобальныйКэш.СБИС.Авторизован Тогда
		//При отключенном обмене или без авторизации записать ничего не сможем.
		Возврат;
	КонецЕсли;
	Попытка
		ДанныеСтатистики = СбисСтатистика_СформироватьДанныеСообщений(ПараметрыСтатистики, ДопПараметры);
		Отказ = Ложь;
		Для Каждого СообщениеСтатистики Из ДанныеСтатистики.Сообщения Цикл
			РезультатОтправки = ГлобальныйКэш.ТекущийСенас.Модули.Интеграция.СбисОтправитьСообщениеСтатистики(ГлавноеОкно.Кэш, СообщениеСтатистики, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(РезультатОтправки, "Интеграция.СбисОтправитьСообщениеСтатистики");;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СообщениеОбОшибке Из ДанныеСтатистики.Ошибки Цикл
			РезультатОтправки = ГлобальныйКэш.ТекущийСенас.Модули.Интеграция.СбисОтправитьСообщениеОшибки(ГлавноеОкно.Кэш, СообщениеОбОшибке, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(РезультатОтправки, "Интеграция.СбисОтправитьСообщениеОшибки");;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СбисСтатистика_СформироватьИЗаписать");;
	КонецПопытки;
КонецПроцедуры

//Функция, в зависимости от выбранного действия, формирует параметры к отправке на сервис статистики
&НаКлиенте
Функция	СбисСтатистика_СформироватьДанныеСообщений(ПараметрыСтатистики, ДопПараметры) 
	Отказ = Ложь;
	Действие = ПараметрыСтатистики.Действие;
	Если Не ПараметрыСтатистики.Свойство("ИмяРеестра") Тогда
		ПараметрыСтатистики.Вставить("ИмяРеестра", ГлавноеОкно.Кэш.Текущий.ТипДок);
	КонецЕсли;
	Результат = Новый Структура("Сообщения, Ошибки", Новый Массив, Новый Массив);	
	Если Действие = "Отправка" Тогда
		РезультатОтправки = ПараметрыСтатистики.РезультатОтправки;
		//обрабатываем результат в Кэш
		Если РезультатОтправки.Отправлено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", РезультатОтправки.Отправлено, ПараметрыСтатистики.ИмяРеестра, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Если РезультатОтправки.Ошибок Тогда
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 0, 100, ПараметрыСтатистики.ИмяРеестра, Действие);
			Для Каждого ОшибкаОтправки Из РезультатОтправки.ДетализацияОшибок Цикл
				ТекстОшибки = ОшибкаОтправки.Ключ;
				ПараметрыСообщения.count		= 1;
				ПараметрыСообщения.error_name	= ТекстОшибки;
				ПараметрыСообщения.code			= 100;
				//Если нет соответствия кодов, то ставится код по-умолчанию 100.
				Если РезультатОтправки.Свойство("СоответствиеКодовИТекстовОшибок") Тогда
					КодОшибки = РезультатОтправки.СоответствиеКодовИТекстовОшибок.Получить(ТекстОшибки);
					Если Не КодОшибки = Неопределено Тогда
						ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
					КонецЕсли;
				КонецЕсли;
				//Генерируем для каждой ошибки из детализации сообщение для статистики
				Для Каждого ДетализацияОшибки Из ОшибкаОтправки.Значение Цикл
					СбисСтек = Неопределено;
					//Если у ошибки нет стека, то генерируем
					Если Не ДетализацияОшибки.СтруктураОшибки.Свойство("stack", СбисСтек) Тогда
						СбисСтек	= Новый Массив;
						ЗаписьВСтек	= Новый Структура("message,details,code");
						ЗаполнитьЗначенияСвойств(ЗаписьВСтек, ДетализацияОшибки.СтруктураОшибки);
						ЗаписьВСтек.Вставить("method_name", "WriteDocumentEx");
						Если ДетализацияОшибки.СтруктураОшибки.Свойство("dump") Тогда
							ЗаписьВСтек.Вставить("dump", ДетализацияОшибки.СтруктураОшибки.dump);
						КонецЕсли;
						СбисСтек.Добавить(ЗаписьВСтек);
					КонецЕсли;
					
					ПараметрыОтправки = Новый Структура;
					ПараметрыОтправки.Вставить("ini_name",	ПараметрыСтатистики.ИмяРеестра);
					ПараметрыОтправки.Вставить("value",		Строка(ДетализацияОшибки.ОбработанДокумент1С));
					ПараметрыОтправки.Вставить("type",		"ДокументСсылка." + ПараметрыСтатистики.ИмяРеестра);
					
					ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
					НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
					НовоеСообщение.data.Вставить("stack", СбисСтек);
					НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
					Результат.Ошибки.Добавить(НовоеСообщение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Действие = "Загрузка" Тогда
		//обрабатываем результат
		Если ПараметрыСтатистики.Результат.Всего.Выполнено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", ПараметрыСтатистики.Результат.Всего.Выполнено, ПараметрыСтатистики.ИмяРеестра, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Для Каждого ОшибкаЗагрузки Из ПараметрыСтатистики.Результат.Ошибки.ДетализацияОшибок Цикл
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, ПараметрыСтатистики.ИмяРеестра, Действие);
			ТекстОшибки = ОшибкаЗагрузки.Ключ;
			ПараметрыСообщения.error_name	= ТекстОшибки;
			ПараметрыСообщения.code			= 100;
			//Если нет соответствия кодов, то ставится код по-умолчанию 100.
			КодОшибки = ПараметрыСтатистики.Результат.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
			Если Не КодОшибки = Неопределено Тогда
				ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
			КонецЕсли;
			//Генерируем для каждой ошибки из детализации сообщение для статистики
			Для Каждого ДетализацияОшибки Из ОшибкаЗагрузки.Значение Цикл
				СбисСтек	= Новый Массив;
				ЗаписьВСтек	= Новый Структура(
				"message,						details,					code,					method_name", 
				ДетализацияОшибки.Состояние,	ДетализацияОшибки.Сообщение,ПараметрыСообщения.code,"ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом");
				
				СбисДампОшибки		= Новый Структура;
				ПараметрыОтправки	= Новый Структура;
				ПараметрыОтправки.Вставить("ini_name",	ПараметрыСтатистики.ИмяРеестра);
				Для Каждого СбисОбработанОбъект Из ДетализацияОшибки.ОбработаныОбъекты1С Цикл
					//Ищем первый объект, на котором свалилась загрузка. Пока что он будет основным в ошибке.
					Если Не СбисОбработанОбъект.Ошибки Тогда
						Продолжить;
					КонецЕсли;
					Если ПараметрыОтправки.Свойство("value") Тогда
						//Допишем остальные объекты в дамп на всякий.
						СбисДампДополнительныеОбъекты = Неопределено;
						Если Не СбисДампОшибки.Свойство("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты) Тогда
							СбисДампДополнительныеОбъекты = Новый Массив;
							СбисДампОшибки.Вставить("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты);
						КонецЕсли;
						СбисДампДополнительныеОбъекты.Добавить(Новый Структура("value, type", Строка(СбисОбработанОбъект.Ссылка), СбисОбработанОбъект.Тип));
						Продолжить;
					КонецЕсли;
					ПараметрыОтправки.Вставить("value",		Строка(СбисОбработанОбъект.Ссылка));
					ПараметрыОтправки.Вставить("type",		СбисОбработанОбъект.Тип);
				КонецЦикла;
				Если ЗначениеЗаполнено(СбисДампОшибки) Тогда
					ЗаписьВСтек.Вставить("dump", СбисДампОшибки);
				КонецЕсли;
				СбисСтек.Добавить(ЗаписьВСтек);					
				
				ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
				НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
				НовоеСообщение.data.Вставить("stack", СбисСтек);
				НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
				Результат.Ошибки.Добавить(НовоеСообщение);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Действие = "Ошибка" Тогда
		СбисСтек = Неопределено;
		ПараметрыСообщения	= Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, "Ошибка", Действие);
		//Если у ошибки нет стека, то генерируем
		Если Не ПараметрыСтатистики.Ошибка.Свойство("stack", СбисСтек) Тогда
			СбисСтек = Новый Массив;
			ЗаписьВСтек	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ПараметрыСтатистики.Ошибка);
			СбисСтек.Добавить(ЗаписьВСтек);
		КонецЕсли;
		
		ПараметрыСообщения.code			= Формат(ПараметрыСтатистики.Ошибка.code,"ЧГ=0");
		ПараметрыСообщения.error_name	= ПараметрыСтатистики.Ошибка.message;
		ПараметрыСообщения.error_detail	= ПараметрыСтатистики.Ошибка.details;
		
		НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
		НовоеСообщение.data.Вставить("stack", СбисСтек);
		Результат.Ошибки.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "Обновление" Тогда
		ПараметрыСтатистикиОтправка	= Новый Структура;
		ПараметрыОтправки	= Новый Структура;
		РезультатДействия			= ПараметрыСтатистики.Результат;
		Отказ = Ложь;
		ДанныеПоНастройкам			= ГлавноеОкно.Кэш.ФормаНастроек.ПолучитьИнформациюПоНастройкам(ГлавноеОкно.Кэш, ПараметрыСтатистикиОтправка, Отказ);
		//Смотрим полученные данные и формируем детальную информацию
		Дамп = Новый Структура("Действия,Xslt,Ини,Функции", Новый Массив, Новый Массив, Новый Массив, ДанныеПоНастройкам.EPF.ЕстьИзменения);
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XSLT Цикл
			Если	Не	ФайлНастроек.ЕстьИзменения
				Или		Найти(ФайлНастроек.ИмяФайла, "Утвердить") Тогда
				Продолжить;//Не отправляем статистику по изменениям титулов
			КонецЕсли;
			Дамп.Xslt.Добавить(Новый Структура("file_name", ФайлНастроек.ИмяФайла));
		КонецЦикла;
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XML Цикл
			Если Не ФайлНастроек.ЕстьИзменения Тогда
				Продолжить;
			КонецЕсли;
			Дамп.Ини.Добавить(Новый Структура("ini_name", ФайлНастроек.Ини_ИмяИни));
		КонецЦикла;
		ДанныеСообщения = Новый Структура("ИнформацияОНастройках, Ошибки", Дамп, Новый Массив);
		ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 0, 100, "Ошибка обновления", Действие);
		Для Каждого ОшибкаДействия Из РезультатДействия.Ошибки.ДетализацияОшибок Цикл
			ТекстОшибки = ОшибкаДействия.Ключ;
			ПараметрыСообщения.count		= 1;
			ПараметрыСообщения.error_name	= ТекстОшибки;
			ПараметрыСообщения.code			= "100";
			//Если нет соответствия кодов, то ставится код по-умолчанию 100.
			КодОшибки = РезультатДействия.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
			Если Не КодОшибки = Неопределено Тогда
				ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
			КонецЕсли;
			//Генерируем для каждой ошибки из детализации сообщение для статистики
			Для Каждого ДетализацияОшибки Из ОшибкаДействия.Значение Цикл
				СбисСтек = Неопределено;
				ПараметрыСообщения.action_param = ДетализацияОшибки.Название;
				//Если у ошибки нет стека, то генерируем
				Если Не ДетализацияОшибки.Данные.Свойство("stack", СбисСтек) Тогда
					СбисСтек	= Новый Массив;
					ЗаписьВСтек	= Новый Структура("message,details,code");
					ЗаполнитьЗначенияСвойств(ЗаписьВСтек, ДетализацияОшибки.Данные);
					ЗаписьВСтек.Вставить("method_name", "Обновление");
					Если ДетализацияОшибки.Данные.Свойство("dump") Тогда
						ЗаписьВСтек.Вставить("dump", ДетализацияОшибки.Данные.dump);
					КонецЕсли;
					СбисСтек.Добавить(ЗаписьВСтек);
				КонецЕсли;
				
				ПараметрыОтправки = ДетализацияОшибки.Данные.dump;
				
				ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
				НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСообщения);
				НовоеСообщение.data.Вставить("stack", СбисСтек);
				НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
				Результат.Ошибки.Добавить(НовоеСообщение);
			КонецЦикла;
		КонецЦикла;
		Для Каждого ДействиеПриОбновлении Из РезультатДействия.Действие.ДетализацияВыполнено Цикл
			Дамп.Действия.Добавить(Новый Структура("update_action_name", ДействиеПриОбновлении.Ключ));
		КонецЦикла;
		
		ПараметрыСообщения	= Новый Структура("count, action_param, action_name, data", 1, РезультатДействия.Параметры.ВерсияБыло, Действие, Дамп);
		НовоеСообщение		= СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
		Результат.Сообщения.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "Аутентификация" Тогда
		ДетальноеСообщение = ПараметрыСтатистики.ДетальноеСообщение;
		ПараметрыСообщения	= Новый Структура("count, action_param, action_name", 1, ДетальноеСообщение, Действие);
		НовоеСообщение		= СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСообщения);
		Результат.Сообщения.Добавить(НовоеСообщение);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция генерирует сообщение об успешной операции на сервис статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСтатистики)
	СтруктураПараметров = Новый Структура();
	Для Каждого КлючИЗначение Из ПараметрыСтатистики Цикл 
		СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СтруктураПараметров.Вставить("service",		"ext1C");
	СтрокаМодуль = ГлобальныйКэш.ПараметрыСистемы.Обработка.КраткаяВерсия + "_" + ГлобальныйКэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя;
	СтруктураПараметров.Вставить("module", 			СтрокаМодуль);
	СтруктураПараметров.Вставить("subsystem",		ГлобальныйКэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек);
	СтруктураПараметров.Вставить("connection_id",	"0");//connection_id не передаём.
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Функция генерирует готовое сообщение об ошибке для сервиса статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОшибки(ПараметрыСтатистики)
	СтруктураПараметров = СбисСтатистика_СформироватьСтруктуруОперации(ПараметрыСтатистики);
	//Добавим в data поля шапки статистики
	stat_data = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(СтруктураПараметров);
	//Допишем информацию о системе для записи.
	system_info = Новый Структура;
	system_info.Вставить("configuration_info",		ГлобальныйКэш.ПараметрыСистемы.Конфигурация.ПодробнаяИнформация);
	system_info.Вставить("configuration_version",	ГлобальныйКэш.ПараметрыСистемы.Конфигурация.Версия);
	system_info.Вставить("platform_version",		ГлобальныйКэш.ПараметрыСистемы.Клиент.ВерсияПриложения);
	system_info.Вставить("os_client",				ГлобальныйКэш.ПараметрыСистемы.Клиент.ТипОС);
	system_info.Вставить("os_server",				ГлобальныйКэш.ПараметрыСистемы.Сервер.ТипОС);
	system_info.Вставить("first_launch",			ГлобальныйКэш.ПараметрыСистемы.Обработка.ПервыйЗапуск);
	system_info.Вставить("sdk_version",				ГлобальныйКэш.СБИС.ПараметрыИнтеграции.Версия);
	stat_data.Вставить("systemInfo", system_info);
	СтруктураПараметров.Вставить("data", stat_data);
	Возврат СтруктураПараметров;		
	
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_РаботаСоСтроками

&НаКлиенте
Функция СбисФормат(ФорматнаяСтрока, ПараметрыФорматнойСтроки) Экспорт
	Результат = ФорматнаяСтрока;
	Если ПараметрыФорматнойСтроки.Свойство("Заменить") Тогда
		Для Каждого КлючИЗначение Из ПараметрыФорматнойСтроки.Заменить Цикл
			Результат = СтрЗаменить(Результат, "{" + КлючИЗначение.Ключ + "}", КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_РаботаСМеткамиСтатусов

&НаКлиенте
Функция СохранитьМеткиСтатусов(Кэш, ДопПараметры = Неопределено) Экспорт	
	// Получение способа хранения меток статусов
	// 0 - Пользователя СБИС
	// 1 - Аккаунта СБИС
	// 2 - Информационной системы
	СпособХраненияМетокСтатусов	= Кэш.Парам.СпособХраненияМетокСтатусов;
	
	МеткиСтатусов = Новый Структура("ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов",
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов,
			ГлавноеОкно.ИдентификаторПоследнегоСобытия,
			ГлавноеОкно.ДатНачЧтенияСтатусов,
			ГлавноеОкно.ДатКнцЧтенияСтатусов);
			
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДопПараметры.Вставить("СпособХраненияМетокСтатусов", СпособХраненияМетокСтатусов);
			
	Возврат Кэш.ФормаНастроек.СбисСохранитьМеткиСтатусов(Кэш, МеткиСтатусов, ДопПараметры);
КонецФункции

&НаКлиенте
Функция ПрочитатьМеткиСтатусов(ПараметрыЧтения=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	Возврат ГлавноеОкно.Кэш.ФормаНастроек.СбисПрочитатьМеткиСтатусов(ГлавноеОкно.Кэш);
                             
КонецФункции

// Процедура - периодическая процедура для синхронизации меток статусов у пользователя
//
// Параметры:
//  ДействиеОбновления	 - 	 - 
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура  ОбновитьМеткиСтатусов(ПараметрыОбновить = Неопределено, ДопПараметры) Экспорт
	МеткиСтатусов = ПрочитатьМеткиСтатусов(ПараметрыОбновить, ДопПараметры);
	Если Не ЗначениеЗаполнено(МеткиСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ГлавноеОкно, МеткиСтатусов);
КонецПроцедуры

&НаКлиенте
Функция МеткиСтатусовИзОбщихНастроек() Экспорт
	Результат = Новый Структура;
	МеткиСтатусов = ПрочитатьОбщиеНастройки("status_marks");
	
	Если МеткиСтатусов = Неопределено Тогда
		Результат.Вставить("status_marks", Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов","","","",""));
	Иначе
		Результат.Вставить("status_marks", МеткиСтатусов);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура ОбщиеНастройкиСохранить(Настройки, ДопПараметры) Экспорт
	СохранитьОбщиеНастройкиВызовСервера(Настройки);	
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ДействияПриЗапуске

&НаКлиенте
Процедура ДействияПриСтарте(ПараметрыЗапуска, Кэш) Экспорт
	Попытка
		Если Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск Тогда
			СбисДействияПриПервомЗапуске(ПараметрыЗапуска, Кэш);
		КонецЕсли;
		Если Кэш.ПараметрыСистемы.Обработка.НоваяВерсия Тогда
			РезультатДействия = СбисДействияПриОбновленииВерсии(Кэш, ПараметрыЗапуска.СтараяВерсия, ПараметрыЗапуска.АктивнаяВерсия);
			СбисСтатистика_СформироватьИЗаписать(Новый Структура("Действие, Результат, ИмяРеестра", "Обновление", РезультатДействия, Кэш.Текущий.ТипДок), Новый Структура);
			ГлавноеОкно.ПредВерсия	= ПараметрыЗапуска.АктивнаяВерсия;
			Кэш.Парам.ПредВерсия		= ПараметрыЗапуска.АктивнаяВерсия;
			Кэш.ПараметрыСистемы.Обработка.НоваяВерсия = Ложь;
		КонецЕсли;
		//Установить отложенные операции после запуска
		ОбработчикДействия = НовыйСбисОписаниеОповещения("СбисПроверитьПоследнююВерсию", ГлавноеОкно, Кэш);
		ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(
		Новый Структура("Аргумент, ОписаниеОповещения", ПараметрыЗапуска, ОбработчикДействия));
  		ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);

		ОбработчикДействия = НовыйСбисОписаниеОповещения("СбисПроверитьНаличиеОбновлений", ГлавноеОкно, Кэш);
		ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(
		Новый Структура("Периодичность,	Аргумент,							ОписаниеОповещения, ЧислоВызовов", 
						60*60*8,		Новый Структура("Режим", "Авто"),	ОбработчикДействия)));
		
		ОбработчикДействия = НовыйСбисОписаниеОповещения("ОбновитьМеткиСтатусов", ГлавноеОкно.МодульОбъектаКлиент(), Кэш);
		ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(
		Новый Структура("Периодичность, ОписаниеОповещения, ЧислоВызовов", 600, ОбработчикДействия)));

		Если 	НЕ ПараметрыЗапуска.сбисПараметры.Свойство("НеОтображатьНовостьПриЗапуске")
			ИЛИ НЕ ПараметрыЗапуска.сбисПараметры.НеОтображатьНовостьПриЗапуске Тогда
			АргументПоказаНовости = Новый Структура("ВерсияПрочитана, АктивнаяВерсия", ГлавноеОкно.ПрочитаннаяНовость, ПараметрыЗапуска.АктивнаяВерсия);
			ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(Новый Структура(
			"Аргумент,				ИмяПроцедуры,			Модуль,			ДополнительныеПараметры", 
			АргументПоказаНовости,	"СбисПроверитьНовость",	ГлавноеОкно,	Кэш));
			ПодключитьОтложенноеДействие( ОтложенноеДействиеОбновления);
		КонецЕсли;
		
		Если	ЗначениеЗаполнено(Кэш.Парам.ОжидаемаяВерсия) 
			И	Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.Парам.ОжидаемаяВерсия, ПараметрыЗапуска.АктивнаяВерсия) Тогда
			ОтложенноеДействиеОбновления = НовыйОтложенноеДействие(Новый Структура(
			"Аргумент,				Периодичность,	ИмяПроцедуры,									Модуль", 
			"Предложить перезапуск",60*15,			"сбисУстановитьОформлениеГиперссылокОбновления",ГлавноеОкно));
			ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);
		Иначе	
			Кэш.Парам.ОжидаемаяВерсия = "";
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ДействияПриСтарте");
	КонецПопытки;	
КонецПроцедуры
		
//При изменении версии внешней обработки со старой на новую
&НаКлиенте
Функция  СбисДействияПриОбновленииВерсии(Кэш, СтараяВерсия, НоваяВерсия) Экспорт
	РезультатДействия = Кэш.ОбщиеФункции.РезультатДействия_Новый(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "Обновление", ГлавноеОкно));
	Если НоваяВерсия = "2.40.1" Тогда
		//Установить переключатель автообновления файлов настроек
		Если Кэш.Парам.СпособХраненияНастроек = 0 Тогда
			Кэш.ФормаНастроек.АвтообновлениеПриИзменении(Кэш, Истина);
		КонецЕсли;
	ИначеЕсли НоваяВерсия = "2.41" Тогда
		ГлавноеОкно.ЧтениеНастроекПоТребованию = Истина;
		Кэш.Парам.ЧтениеНастроекПоТребованию = Истина;
	КонецЕсли;
	//Если ЭтоНоваяВерсия("2.45", СтараяВерсия) Тогда 
	//	ИзменитьСпособОбменаПриОбновлении(Кэш);
	//КонецЕсли;
	// для бухгалтерии с версии настроек БУХ3-0-105-31 нужно перейти на новый справочник сопоставления номенклатуры
	Если	Кэш.ОбщиеФункции.ЭтоНоваяВерсия("2.47", СтараяВерсия)
		И	НРег(Кэш.ПараметрыСистемы.Конфигурация.Имя) = "бухгалтерияпредприятия"
		И	Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.ПараметрыСистемы.Конфигурация.Версия, "3.0.105.30") Тогда 
		Кэш.ОбщиеФункции.СбисПереносНоменклатурыПоставщиковВНоменклатуруКонтрагентовНаСервере();
	КонецЕсли;
	//Если ЭтоНоваяВерсия("2.49.2", СтараяВерсия) Тогда
	//	СтрокаДетализации = РезультатДействия_СформироватьСтрокуДетализации(Кэш,,Новый Структура("Название", "Переключение способа хранения настроек"));
	//	ПараметрыПереключения = Новый Структура("Кэш", Кэш);
	//	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Переносим настройки в СБИС...", Кэш.ГлавноеОкно);
	//	Попытка
	//		Результат = Кэш.ФормаНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис(,ПараметрыПереключения);
	//		РезультатДействия_ДобавитьРезультат(Кэш, РезультатДействия, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки", Истина, Результат));
	//	Исключение
	//		ИнформацияОбОшибке = ИнформацияОбОшибке();
	//		РезультатДействия_ДобавитьОшибку(Кэш, РезультатДействия, СтрокаДетализации, СбисИсключение(ИнформацияОбОшибке ,"ОбщиеФункции.СбисДействияПриОбновленииВерсии"));
	//	КонецПопытки;
	//	Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	//КонецЕсли;
	
	Отказ = Ложь;
	СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш,,Новый Структура("Название", "Добавление печатных форм"));
	РезультатДобавленияПФ = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, РезультатДействия, СтрокаДетализации, РезультатДобавленияПФ);
		Отказ = Ложь;
	Иначе
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, РезультатДействия, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки", Истина, "Добавлены печатные формы"));
	КонецЕсли;
	Возврат РезультатДействия;
КонецФункции

//Выполняется при первом запуске обработки
&НаКлиенте
Процедура СбисДействияПриПервомЗапуске(ПараметрыЗапуска, Кэш) Экспорт
	Попытка
		Отказ = Ложь;
		РезультатДобавленияПФ = Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш, Отказ);
		Если Отказ Тогда
			СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка, ИмяРеестра", "Запись ошибки", РезультатДобавленияПФ, Кэш.Текущий.ТипДок);
			СбисСтатистика_СформироватьИЗаписать(СбисПараметрыСтатистики, Новый Структура);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисДействияПриПервомЗапуске");
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ПериодическиеПроцедуры

//НЕ РАБОТА ПО РАСПИСАНИЮ. Это обработчик периодических операций - раз в пару минут, +-10 секунд. Гарантированной точности в промежутках нет
&НаКлиенте
Процедура ВыполнитьОтложенныеПроцедуры(Кэш) Экспорт

	ОтложенныеОперации = Кэш.ТекущийСеанс.ОтложенныеОперации;
	ОтложенныеПроцедуры = ОтложенныеОперации.Процедуры;
	Если Не ОтложенныеОперации.Запущено Тогда
		Возврат;
	КонецЕсли;
	//Начало обработки
	ОтложенныеОперации.ПоследнийВызовМС = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш); 
	Если Кэш.Парам.РежимОтладки Тогда
		лОтладочныеДанные = Новый Структура(
		"Тип,		Модуль,					Вызов,							Время,			Идентификатор,	Сообщение", 
		"START",	"МодульОбъектаКлиент",	"ВыполнитьОтложенныеПроцедуры",	ТекущаяДата(),	"Begin",		"");
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	ОтложенныеПроцедурыОчистить = Новый Массив;
	СледующийВызов = ОтложенныеОперации.МаксимальныйПериод;
	//Выполним что можно
	Для Каждого КлючИЗначение Из ОтложенныеПроцедуры Цикл
		ВыполняемаяОперация = КлючИЗначение.Значение;
		Если ВыполняемаяОперация.СледующийВызовМС > ОтложенныеОперации.ПоследнийВызовМС Тогда
			ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, ОтложенныеОперации);
			Продолжить;
		КонецЕсли;
		Попытка
			ВремяНачала = ТекущаяДата(); 
			ВыполняемаяОперация.ПоследнийВызовМС = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
			ВыполнитьСбисОписаниеОповещения(ВыполняемаяОперация.Аргумент, ВыполняемаяОперация.ОписаниеОповещения);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			РезультатОшибка = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ВыполнитьОтложенныеПроцедуры");
			Если ОтложенныеОперации.СообщатьПриОшибке Тогда
				СообщитьСбисИсключение(РезультатОшибка, Новый Структура("ФормаВладелец", ГлавноеОкно));
			КонецЕсли;
			Если Кэш.Парам.РежимОтладки Тогда
				лОтладочныеДанные = Новый Структура(
				"Тип,		Модуль,					Вызов,												Время,			Идентификатор,					Сообщение", 
				"ERROR",	"МодульОбъектаКлиент",	ВыполняемаяОперация.ОписаниеОповещения.ИмяПроцедуры,ТекущаяДата(),	ВыполняемаяОперация.ИдДействия,	Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(РезультатОшибка));
				ДанныеВЛог = Новый Массив;
				ДанныеВЛог.Добавить(лОтладочныеДанные);
				СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
			КонецЕсли;
			//В случае ошибки - падения выполнения кода, удалить обработчик
			ОтложенныеПроцедурыОчистить.Добавить(КлючИЗначение.Ключ);
			Продолжить;
		КонецПопытки;
		Если Не ВыполняемаяОперация.ЧислоВызовов = Неопределено Тогда
			ВыполняемаяОперация.ЧислоВызовов = ВыполняемаяОперация.ЧислоВызовов - 1;
		КонецЕсли;
		Если Кэш.Парам.РежимОтладки Тогда
			ТекстСообщенияЛог = "Время выполнения: " + Окр(((Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш) - ВыполняемаяОперация.ПоследнийВызовМС)/1000), 2) + ".";
			Если ВыполняемаяОперация.ЧислоВызовов = Неопределено Тогда
				ТекстСообщенияЛог = ТекстСообщенияЛог + " Выполняется бесконечно.";
			Иначе
				ТекстСообщенияЛог = ТекстСообщенияЛог + " Осталось вызовов: " + ВыполняемаяОперация.ЧислоВызовов;
			КонецЕсли;
			лОтладочныеДанные = Новый Структура(
			"Тип,		Модуль,					Вызов,												Время,			Идентификатор,					Сообщение", 
			"SUСCESS",	"МодульОбъектаКлиент",	ВыполняемаяОперация.ОписаниеОповещения.ИмяПроцедуры,ВремяНачала,	ВыполняемаяОперация.ИдДействия,	ТекстСообщенияЛог);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
		Если ВыполняемаяОперация.ЧислоВызовов = 0 Тогда
			ОтложенныеПроцедурыОчистить.Добавить(КлючИЗначение.Ключ);
		Иначе
			//Операция требуется ещё, определим время следующего вызова, но не более максимального срока.
			ВыполняемаяОперация.СледующийВызовМС = ВыполняемаяОперация.ПоследнийВызовМС + ВыполняемаяОперация.ПериодичностьМС;
			ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, ОтложенныеОперации);
		КонецЕсли;
	КонецЦикла;
	//Очистим те, что уже отработали, либо упали с ошибкой
	Для Каждого КлючОчистить Из ОтложенныеПроцедурыОчистить Цикл
		ОтложенныеПроцедуры.Удалить(КлючОчистить);
	КонецЦикла;
	
	Если ОтложенныеПроцедуры.Количество() Тогда
		ВремяОбработки =  Окр((Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш) - ОтложенныеОперации.ПоследнийВызовМС)/1000, 2);
		СледующийВызов = СледующийВызов - ВремяОбработки;
		Если СледующийВызов <= 0 Тогда
			СледующийВызов = 0.1;
		КонецЕсли;
		ГлавноеОкно.ПодключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур", СледующийВызов, Истина);
		Если Кэш.Парам.РежимОтладки Тогда
			лОтладочныеДанные = Новый Структура(
			"Тип,	Модуль,					Вызов,							Время,			Идентификатор,		Сообщение", 
			"END",	"МодульОбъектаКлиент",	"ВыполнитьОтложенныеПроцедуры",	ТекущаяДата(),	"That's all folks",	"Следующий вызов: " + СледующийВызов);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
	Иначе
		ОтложенныеОперации.Запущено = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПериодСледующегоВыза(Кэш, СледующийВызов, ВыполняемаяОперация, ОтложенныеОперации)
	СледующийВызовДляОперацииПотребуется = Окр((ВыполняемаяОперация.СледующийВызовМС - ОтложенныеОперации.ПоследнийВызовМС)/1000, 2);
	//СледующийВызовДляОперацииПотребуется = Окр((ВыполняемаяОперация.ПериодичностьМС - (Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш) - ВыполняемаяОперация.ПоследнийВызовМС))/1000, 2);
	Если СледующийВызов > СледующийВызовДляОперацииПотребуется Тогда
		СледующийВызов = СледующийВызовДляОперацииПотребуется;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ПереключениеАккаунта

&НаКлиенте
Функция СбисПолучитьТикетДляАккаунта(Кэш, ПараметрыПолученияТикета, Отказ) Экспорт

	ИдДокумента = ПараметрыПолученияТикета.ИдДокумента;
	ИдАккаунта = ПараметрыПолученияТикета.ИдАккаунта;

	СтарыйИдСессии = Кэш.Парам.ИдентификаторСессии;

	Попытка		
		ЗаписанныеСессии = Кэш.СБИС.Сессии;
		КлючПользователя =  Кэш.СБИС.ПараметрыИнтеграции.КодСервиса+"_"+Кэш.СБИС.ПараметрыИнтеграции.ИдПользователя;
		СессииПользователя = ЗаписанныеСессии.Получить(КлючПользователя);
		СессияПользователяПоАккаунту = СессииПользователя.accounts.Получить(ИдАккаунта); 
		Если СессияПользователяПоАккаунту = Неопределено Тогда
			СписокАккаунтов = СбисПолучитьСписокАккаунтов(Кэш, Новый Структура(), Ложь);
			АккаунтПользователя = Ложь;
			Для каждого Аккаунт Из СписокАккаунтов Цикл
				Если Аккаунт.НомерАккаунта = ИдАккаунта Тогда
					АккаунтПользователя = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;

			Если Не АккаунтПользователя Тогда
				ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта", ,"Аккаунт документа не подключен для данного пользователя");
			КонецЕсли; 

			СессияПользователяПоАккаунту = СбисПереключитьАккаунт(Кэш, Новый Структура("НомерАккаунта", ИдАккаунта), Новый Структура(), Ложь); 
			Если СессияПользователяПоАккаунту = Неопределено Тогда 
				ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта", , "Не удалось получить сессию для аккаунта документа"); 
			КонецЕсли;
			Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
		Иначе
			Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
			СессияДействительна = Кэш.Интеграция.сбисСессияДействительна(Кэш) = 1;
			Если Не СессияДействительна Тогда
				СессияПользователяПоАккаунту = СбисПереключитьАккаунт(Кэш, Новый Структура("НомерАккаунта", ИдАккаунта), Новый Структура(), Ложь); 
				Если СессияПользователяПоАккаунту = Неопределено Тогда 
					ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта", , "Не удалось получить сессию для аккаунта документа");
				КонецЕсли;
				Кэш.Парам.ИдентификаторСессии = СессияПользователяПоАккаунту;
			КонецЕсли;
		КонецЕсли;	

		Тикет = Кэш.Интеграция.ПолучитьТикетДляТекущегоПользователя(Кэш);

		//Кэш.Парам.ИдентиФикаторСессии = СтарыйИдСессии;
	Исключение
		Кэш.Парам.ИдентиФикаторСессии = СтарыйИдСессии;
		ИнфоОбОбшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОбшибке, "МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта");	 
	КонецПопытки;
	Возврат Новый Структура("Тикет, СтарыйИдСессии", Тикет, СтарыйИдСессии);
КонецФункции	

&НаКлиенте
Процедура КомандаОткрытьДокументОнлайн (ОписаниеДокумента, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Результат = Новый Структура("Ссылка, Пакет", "");
	Попытка
		ПараметрыДокумента = Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеДокумента.ПараметрыПакетаСБИС, Новый Структура("Кэш", Кэш));
		Если ЗначениеЗаполнено(ПараметрыДокумента.ИдДокумента) Тогда
			ДопПарам = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
			СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПараметрыДокумента.ИдДокумента, ДопПарам);
			Если типЗнч(СоставПакета)= тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда // alo
				Результат.Ссылка = СоставПакета.СсылкаДляНашаОрганизация;			
				Если ЗначениеЗаполнено(Результат.Ссылка) И Не ПараметрыДокумента.Тикет = "" Тогда
					Результат.Ссылка = Результат.Ссылка + "&ticket=" + ПараметрыДокумента.Тикет + "&nocheck=1";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Кэш.Парам.СпособОбмена <> 1 Тогда
			// загружаем пакет в кабинет без отправки << alo Меркурий 
			лРежимДиалога = РежимДиалогаВопрос.ДаНет;
			лТекстДиалога = "Документ не сопоставлен со СБИС. Создать черновик?";
			сбисПараметрыСоздания= Новый Структура("Кэш, ОписаниеДокумента, Результат, ОбработчикРезультата", Кэш, ОписаниеДокумента, Результат, ДопПараметры.ОбработчикРезультата);
			ОбработчикДиалога = НовыйСбисОписаниеОповещения("СоздатьЧерновик", Кэш.ГлавноеОкно.МодульОбъектаКлиент(), сбисПараметрыСоздания);
			СбисПоказатьВопрос(ОбработчикДиалога, лТекстДиалога, лРежимДиалога, 0, КодВозвратаДиалога.Да);
			Возврат;
			// alo Меркурий >>
		КонецЕсли;
		Если ПараметрыДокумента.Свойство("СтарыйИдСессии") Тогда
			Кэш.Парам.ИдентиФикаторСессии = ПараметрыДокумента.СтарыйИдСессии;
		КонецЕсли;	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Результат = Кэш.ОбщиеФункции.сбисИсключение(ИнфОбОшибке, "МодульОбъектаКлиент.ОткрытьДокументОнлайн");
		ДопПараметры.ОбработчикРезультата.Параметры.Отказ = Истина;
	КонецПопытки;
	ВыполнитьСбисОписаниеОповещения(Результат, ДопПараметры.ОбработчикРезультата);

КонецПроцедуры	

&НаКлиенте
Процедура СоздатьЧерновик(Ответ, СбисПараметрыСоздания) Экспорт 
	Кэш = сбисПараметрыСоздания.Кэш;
	Попытка
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВыполнитьСбисОписаниеОповещения("Отменено пользователем", сбисПараметрыСоздания.ОбработчикРезультата);
			Возврат;
		КонецЕсли;
		Пакет = сбисПараметрыСоздания.ОписаниеДокумента.Пакет;
		Результат = сбисПараметрыСоздания.Результат;
		ИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.Текущий.ТипДок;
		ЗначениеИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.ФормаНастроек.Ини(сбисПараметрыСоздания.Кэш, ИниТекущегоРеестра);
		Если  ЗначениеИниТекущегоРеестра.свойство("НеЗапускатьВДокументооборот") тогда
			СохранитьНеЗапускатьВДокументооборот=ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот;
		Иначе 
			СохранитьНеЗапускатьВДокументооборот=неопределено;
		КонецЕсли;
		ЗначениеИниТекущегоРеестра.Вставить("НеЗапускатьВДокументооборот", Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.Добавить(сбисПараметрыСоздания.Кэш.ТаблДок.ТекущиеДанные);
		фрмОД = ГлавноеОкно.сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+сбисПараметрыСоздания.Кэш.Текущий.ТипДок,"Документ_Шаблон",сбисПараметрыСоздания.Кэш);
		фрмОД.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
		Если  СохранитьНеЗапускатьВДокументооборот = Неопределено Тогда
			ЗначениеИниТекущегоРеестра.удалить("НеЗапускатьВДокументооборот");
		Иначе
			ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот = СохранитьНеЗапускатьВДокументооборот;
		КонецЕсли;
		Если сбисПараметрыСоздания.Кэш.РезультатОтправки.Отправлено Тогда
			фрм = ГлавноеОкно.СбисНайтиФормуФункции("СбисПрочитатьСведенияОПакете", сбисПараметрыСоздания.Кэш.ФормаРаботыСоСтатусами, "");
			ИдДокументаАккаунта	= фрм.СбисПрочитатьСведенияОПакете(Новый Структура("ДокументСсылка", Пакет), Кэш);
			Если ЗначениеЗаполнено(ИдДокументаАккаунта.ИдДокумента) Тогда
				СоставПакета		= сбисПараметрыСоздания.Кэш.Интеграция.ПрочитатьДокумент(сбисПараметрыСоздания.Кэш, ИдДокументаАккаунта.ИдДокумента);
				ПараметрыДокумента	= Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ИдДокументаАккаунта, Новый Структура("Кэш", Кэш));
				Если ТипЗнч(СоставПакета)= Тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда
					Результат.Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
					Если ЗначениеЗаполнено(Результат.Ссылка) И Не ПараметрыДокумента.Тикет = "" Тогда
						Результат.Ссылка = Результат.Ссылка + "&ticket=" + ПараметрыДокумента.Тикет + "&nocheck=1";
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокумента.Свойство("СтарыйИдСессии") Тогда
					Кэш.Парам.ИдентиФикаторСессии = ПараметрыДокумента.СтарыйИдСессии;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		Результат = НовыйСбисИсключение(ИнфОбОшибке, "МодульОбъектаКлиент.СоздатьЧерновик");
		СбисПараметрыСоздания.ОбработчикРезультата.ДополнительныеПараметры.Отказ = Истина;
	КонецПопытки;
	ВыполнитьСбисОписаниеОповещения(Результат, СбисПараметрыСоздания.ОбработчикРезультата);

КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Отправка

&НаКлиенте
Функция СформироватьСтруктуруКонтрагентаДляОтправки(ОписаниеКонтрагента, Кэш) Экспорт
	Перем ДопПараметрыСтороны;
	kontr			= Новый Структура; 
	СоставПакета	= ОписаниеКонтрагента.СоставПакета;
	
	//ИД контрагента
	Если	СоставПакета.Контрагент.Свойство("Идентификатор")
		И	ЗначениеЗаполнено(СоставПакета.Контрагент.Идентификатор) Тогда
		kontr.Вставить( "Идентификатор", СоставПакета.Контрагент.Идентификатор);
	Иначе
		КлючДляДопПараметров = Кэш.ОбщиеФункции.КлючСтороныДляДопПараметров(СоставПакета.Контрагент, Новый Структура);
		Если	Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство("мСторона")
			И	Кэш.ТекущийСеанс.РасчитанныеЗначения.мСторона.Получить(КлючДляДопПараметров) <> Неопределено//, ДопПараметрыСтороны)
			И	Не Кэш.ТекущийСеанс.РасчитанныеЗначения.мСторона[КлючДляДопПараметров].Получить("КодОператораАбонентскогоЯщика") = Неопределено Тогда
			//ИД явно не указан, то проверить наличие ИД оператора А/Я
			kontr.Вставить("Идентификатор", Кэш.ТекущийСеанс.РасчитанныеЗначения.мСторона[КлючДляДопПараметров].Получить("КодОператораАбонентскогоЯщика"));
		КонецЕсли;
	КонецЕсли;
	
	//Контакты
	Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
		Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
			kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
		КонецЕсли;
		Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
			kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
		КонецЕсли;
	КонецЕсли;
	
	//СвФЛ/СвЮл
	Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
			Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
				Если Параметр.Имя = "ЧастноеЛицо" Тогда
					СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
				КонецЕсли;
				Если Параметр.Имя = "СНИЛС" Тогда
					СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
				КонецЕсли;     					
			КонецЦикла;
		КонецЕсли;  
		Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда  
			СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
			СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
			СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
			СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвФЛ.КодФилиала) Тогда
			СвФЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвФЛ.КодФилиала );	
		КонецЕсли;

		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда
			СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
			СвЮЛ.Вставить( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
			СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	
	//Подразделение
	Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
		Подразделение = Новый Структура;
		Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
		kontr.Вставить( "Подразделение", Подразделение );
	КонецЕсли;	
	Возврат kontr;
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Отладка

&НаКлиенте
Процедура СохранитьОтладочныеДанныеСБИС(ДанныеЗаписать, ДопПараметры=Неопределено) Экспорт
	Перем ПараметрКЗаписи;	
	ОбщиеФункцииДокументов = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	Если ДанныеЗаписать.Свойство("XML", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ШаблонXML = ЗаписьПараметра.Данные;
			Если ЗаписьПараметра.Отказ Тогда
				ШаблонXML = РаботаСJson.ПреобразоватьЗначениеВJson(ШаблонXML);
			КонецЕсли;
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= ГлобальныйКэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = ОбщиеФункцииДокументов.СбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, ГлобальныйКэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = ОбщиеФункцииДокументов.сбисЗаписатьФайл_Клиент(ГлобальныйКэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xml", ШаблонXML, "windows-1251"), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				СообщитьСбисИсключение(РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("XSLT", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= ГлобальныйКэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = ОбщиеФункцииДокументов.сбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, ГлобальныйКэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = ОбщиеФункцииДокументов.СбисЗаписатьФайл_Клиент(ГлобальныйКэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xslt", ЗаписьПараметра.Данные,  КодировкаТекста.UTF8), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				СообщитьСбисИсключение(РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("Log", ПараметрКЗаписи) Тогда
		СбисИмяМодуля	= Неопределено;
		ОшибкаЗаписи	= Ложь;
		СбисИмяПапкиЛог	= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		СбисПутьЗаписи	= ОбщиеФункцииДокументов.сбисФорматКаталога(ОбщиеФункцииДокументов.сбисФорматКаталога(ГлобальныйКэш.Парам.КаталогОтладки + "Log", ГлобальныйКэш.ПараметрыСистемы.Клиент) + СбисИмяПапкиЛог, ГлобальныйКэш.ПараметрыСистемы.Клиент);
		//Если Не	ЗаписьПараметра.Свойство("Модуль", СбисИмяМодуля) Тогда
		//	СБисИмяМодуля = "Неизвестно";
		//КонецЕсли;
		ФайлТест = Новый Файл(СбисПутьЗаписи);
		Если	Не ФайлТест.Существует()
			Или	Не ФайлТест.ЭтоКаталог() Тогда 
			Попытка
				СоздатьКаталог(СбисПутьЗаписи);
			Исключение
				ГлобальныйКэш.Парам.РежимОтладки = Ложь;
				СтруктураОшибки = НовыйСбисИсключение(,"МодульОбъектаКлиент.СбисСохранитьОтладочныеДанные", 772, "Ошибка работы с файловой системой", "Ошибка доступа к каталогу записи логов " + СбисПутьЗаписи + ". Детально: " + ИнформацияОбОшибке().Описание);
				СообщитьСбисИсключение(СтруктураОшибки);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		СбисФорматЛога = "{Время}{Тип}{Вызов}{Идентификатор}{Сообщение}";
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			СбисИмяМодуля = ЗаписьПараметра.Модуль + ".txt";
			СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрЗаменить(СбисФорматЛога, 
			"{Время}",		СбисДополнитьСтроку(Формат(ЗаписьПараметра.Время, "ДФ=HH:mm:ss"),10)),
			"{Тип}",		СбисДополнитьСтроку(ЗаписьПараметра.Тип, 10)),
			"{Сообщение}",	ЗаписьПараметра.Сообщение);
			Если ЗаписьПараметра.Свойство("Идентификатор") Тогда
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(ЗаписьПараметра.Вызов, 40)),
				"{Идентификатор}",	СбисДополнитьСтроку(ЗаписьПараметра.Идентификатор, 40));
			Иначе
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(ЗаписьПараметра.Вызов, 70)),
				"{Идентификатор}",	"");
			КонецЕсли;
			ТекстДок = Новый ТекстовыйДокумент;
			ФайлТест = Новый Файл(СбисПутьЗаписи + СбисИмяМодуля);
			Если ФайлТест.Существует() Тогда
				ТекстДок.Прочитать(СбисПутьЗаписи + СбисИмяМодуля);
			КонецЕсли;							
			ТекстДок.ДобавитьСтроку(СтрокаНаВывод);
			ТекстДок.Записать(СбисПутьЗаписи + СбисИмяМодуля);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СбисДополнитьСтроку(СтрокаИсх, ДлинаСтрокиДополнить, СимволДополнить = " ")
	СтрокаРезультат = Лев(СтрокаИсх, ДлинаСтрокиДополнить);
	Пока  СтрДлина(СтрокаРезультат) < ДлинаСтрокиДополнить Цикл
		СтрокаРезультат = СтрокаРезультат + СимволДополнить;
	КонецЦикла;
	Возврат СтрокаРезультат;
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ОбновлениеСтатусов

// Функция - применяет изменения по документам ЭД в 1С
//
// Параметры:
//  ПараметрыОбновленияВходящие	 - 	 - 
//  ДопПараметры				 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ОбновитьИзмененияПоДокументамСбис(ПараметрыОбновленияВходящие, ДопПараметры) Экспорт
	Перем МодульРаботыСоСтатусами1С, МеткиПользовательские, ДопПараметрыФильтра, ДействиеОбновления, ЕстьОбработкаПрерывания;
	Кэш		= ГлавноеОкно.Кэш;
	Отказ	= Ложь;
	ПараметрыБлокировкиСтатусов	= Новый Структура("Ключ, Пользователь, Значение", "status_update",	ГлавноеОкно.Пользователь);
	ПараметрыБлокировкиСтатусов.Вставить("Идентификатор",	Кэш.ТекущийСеанс.Параметры.Идентификатор);
	ПараметрыБлокировкиСтатусов.Вставить("Режим",			Кэш.Парам.СпособХраненияМетокСтатусов);
	ПараметрыБлокировкиСтатусов.Вставить("Аккаунт",			Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш));
	
	ПараметрыБлокировкиСтатусов.Значение = ПрочитатьОбщиеНастройки(ПараметрыБлокировкиСтатусов.Ключ);
	ДопПараметрыВызовов			= Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
		
	ГлавноеОкно.СбисПоказатьСостояние("Подготовка обновления статусов");

	//Тут ищем новую функцию. Переназначение на старые обработчики происходит внутри типовой формы работы со статусами
	МодульРаботыСоСтатусамиСБИС		= ГлавноеОкно.СбисНайтиФормуФункции("СбисЗаписатьИзмененияПоДокументам1С",	ГлавноеОкно.Кэш.ФормаРаботыСоСтатусами,	"");
	МодульОбработкиСпискаИзменений	= ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений",			"РаботаСДокументами1С",		"");
	МодульРаботыСоСтатусами1С		= Ложь;
	Если ГлобальныйКэш.Парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		МодульРаботыСоСтатусами1С = Кэш.ОбщиеФункции.СбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("РезультатДействия", ДействиеОбновления) Тогда
		ДействиеОбновления = НовыйРезультатДействия(Новый Структура("Тип", "ОбновлениеСтатусов"), Новый Структура);
	КонецЕсли;
		
	ДействиеОбновления.Параметры.Метки = Новый Структура("ДатаПоследнегоЗапросаСтатусов, ИдентификаторПоследнегоСобытия, ДатНачЧтенияСтатусов, ДатКнцЧтенияСтатусов",
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов,
			ГлавноеОкно.ИдентификаторПоследнегоСобытия,
			ГлавноеОкно.ДатНачЧтенияСтатусов,
			ГлавноеОкно.ДатКнцЧтенияСтатусов);
	Если ПараметрыОбновленияВходящие.Свойство("Метки", МеткиПользовательские) Тогда
		ЗаполнитьЗначенияСвойств(ДействиеОбновления.Параметры.Метки, МеткиПользовательские);
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("ДополнительныеПараметрыФильтра",	ДопПараметрыФильтра) Тогда
		ДопПараметрыФильтра = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыОбновленияВходящие.Свойство("ОбработкаПрерывания",	ЕстьОбработкаПрерывания) Тогда
		ЕстьОбработкаПрерывания = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов) Тогда
		ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов = НачалоДня(Кэш.Интеграция.СБИС_ТекущаяДата(Кэш));
	КонецЕсли;
	
	ДопПараметрыОбновления = Новый Структура("Кэш, ДопПараметрыФильтра", ГлавноеОкно.Кэш, ДопПараметрыФильтра);
	ДопПараметрыОбновления.Вставить("ПараметрыБлокировки",	ПараметрыБлокировкиСтатусов);
	Если МодульРаботыСоСтатусамиСБИС = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов",779,,"Не удалось определить модуль для обработки статусов СБИС");
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, СбисИсключение);
		Возврат ДействиеОбновления;
	Иначе
		ДопПараметрыОбновления.Вставить("МодульСтатусовСбис",	МодульРаботыСоСтатусамиСБИС);
	КонецЕсли;
	Если Не МодульРаботыСоСтатусами1С = Ложь Тогда
		ДопПараметрыОбновления.Вставить("МодульСтатусов1С",		МодульРаботыСоСтатусами1С);
	КонецЕсли;
	Если Не МодульОбработкиСпискаИзменений = Ложь Тогда
		ДопПараметрыОбновления.Вставить("МодульОбработкиСписка",МодульОбработкиСпискаИзменений);
	КонецЕсли;
	Если ПараметрыОбновленияВходящие.Свойство("ОбработчикЗавершения") Тогда
		ДопПараметрыОбновления.Вставить("ОбработчикПослеЗавершения", ПараметрыОбновленияВходящие.ОбработчикЗавершения);
	КонецЕсли;
	
	ОбработкаЗавершения		= НовыйСбисОписаниеОповещения("ОбновитьИзмененияПоДокументамСбис_Завершение", ГлавноеОкно.МодульОбъектаКлиент(), ДопПараметрыОбновления);
	ОтложенноеЗавершение	= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработкаЗавершения, ДействиеОбновления));
	Если ЕстьОбработкаПрерывания Тогда
		//На случай прерывания пользователем, отложенное завершение обновления
		ПодключитьОтложенноеДействие(ОтложенноеЗавершение);
	КонецЕсли;
	Пока ДействиеОбновления.Параметры.ПродолжатьЗапрос Цикл
		Попытка
			СбисВыполнитьОбновлениеПачкиСтатусов(ДействиеОбновления, ДопПараметрыОбновления);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов"));
			Прервать;
		КонецПопытки;
		//СохранитьМеткиСтатусов(Кэш);
		Если ЕстьОбработкаПрерывания Тогда
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОбработкаПрерывания Тогда
		//Если не прерывалось, то отключить отложенное действие и выполнить завершение в обычном режиме.
		ОтключитьОтложенноеДействие(Новый Структура("ОтложенноеДействие", ОтложенноеЗавершение));
	КонецЕсли;
	ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, ОбработкаЗавершения); 
	Возврат ДействиеОбновления;
КонецФункции

// Процедура - завершает обновление статусов - снимает блокировку на чтение изменений, обновляет метки
//
// Параметры:
//  ДействиеОбновления	 - 	 - 
//  ДопПараметры				 - 	 - 
//
&НаКлиенте
Процедура  ОбновитьИзмененияПоДокументамСбис_Завершение(ДействиеОбновления, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Попытка	
		РазблокироватьСтатусыСбис(ДопПараметры.ПараметрыБлокировки);
	Исключение
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьОшибку(Кэш, ДействиеОбновления, СтрокаДетализации, НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеСтатусов_Завершение"));
	КонецПопытки;
	
	//При успешном выполнении добавить строку в результат для вывода сообщения 
	Если Не ДействиеОбновления.Всего.ОшибокВыполнения И Не ДействиеОбновления.Всего.ОшибокПодготовки Тогда
		СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));
		СтрокаДетализации.Состояние = "Завершено";
		СтрокаДетализации.Сообщение = "Статусы обновлены до " + Формат(ДействиеОбновления.Параметры.Метки.ДатаПоследнегоЗапросаСтатусов, "ДФ=dd.MM.yyyy");
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, ДействиеОбновления, СтрокаДетализации, Новый Структура("Выполнено, КлючГруппировки, Считать", Истина, "Статусы обработаны", Ложь));
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ГлавноеОкно, ДействиеОбновления.Параметры.Метки);
	СохранитьМеткиСтатусов(Кэш);
	ГлавноеОкно.СбисСпрятатьСостояние(ГлавноеОкно);
	Если ДопПараметры.Свойство("ОбработчикПослеЗавершения") Тогда
		ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, ДопПараметры.ОбработчикПослеЗавершения);
	КонецЕсли;
КонецПроцедуры

// Процедура - выполняет обновление пачки статусов
//
// Параметры:
//  ДействиеОбновления	 - объект РезультатДействия	 - описание и параметры запущенной операции обновления
//  ДопПараметры		 - Структура	 - Кэш, ПараметрыБлокировки, модули для записи изменений в 1С
//
&НаКлиенте
Процедура СбисВыполнитьОбновлениеПачкиСтатусов(ДействиеОбновления, ДопПараметры) Экспорт
	Перем 	ПоследнееСобытие, ПоследнееСобытиеСИД, ТекущееСобытие; 
	
	Кэш					= ДопПараметры.Кэш;
	СтруктураНастроек	= ДействиеОбновления.Параметры.Метки;	

	ГлавноеОкно.СбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий), ГлавноеОкно,, "(прервать -  Ctrl+Break)");

	СтруктураНастроек.ДатНачЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	СтрокаДетализации = Кэш.ОбщиеФункции.РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ОбновлениеСтатусов", Новый Структура("Название", "Обновление статусов"));

	Попытка	
		ЗаблокироватьСтатусыСбис(СтруктураНастроек, ДопПараметры.ПараметрыБлокировки);
		ДатаДоЗапросаСписка = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
		СписокИзменений = СбисВыполнитьЧтениеИзменений(ДействиеОбновления, ДопПараметры);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов");
	КонецПопытки;
	
	ДействиеОбновления.Параметры.СчетчикПачек		= ДействиеОбновления.Параметры.СчетчикПачек + 1;
	ДействиеОбновления.Параметры.ПродолжатьЗапрос	= СписокИзменений.Навигация.ЕстьЕще = "Да";

	МассивДокументов = Новый Массив;

#Область include_core_ТребуетРефактор_Модуль_ОбновлениеСтатусов
	Для Каждого оДокумент Из СписокИзменений.Документ Цикл
		ДействиеОбновления.Параметры.СчетчикСобытий = ДействиеОбновления.Параметры.СчетчикСобытий + 1;
		ГлавноеОкно.сбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий),,, "(прервать -  Ctrl+Break)");
		МассивДокументов.Добавить(оДокумент);
		Если оДокумент.Свойство("Событие", ПоследнееСобытие) Тогда
			ПоследнееСобытие = ПоследнееСобытие[ПоследнееСобытие.Количество() -1];
			Если	ПоследнееСобытие.Свойство("Идентификатор")
				И	ПоследнееСобытие.Свойство("ДатаВремя") Тогда
				ПоследнееСобытиеСИД = ПоследнееСобытие;
			КонецЕсли;
		КонецЕсли;
		Если Не Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
			//Может быть неопределено
			Продолжить;
		КонецЕсли;
		ИмяОбработчика = СтрЗаменить("сбис" + оДокумент.Регламент.Название + "_" + оДокумент.Событие[0].Название, " ", "_");
		фрмОбработчика = ГлавноеОкно.СбисНайтиФормуФункции(ИмяОбработчика, "РаботаСДокументами1С", "", Кэш);
		Если фрмОбработчика = Ложь Тогда
			Продолжить;
		КонецЕсли;
		//Переписать на ОписаниеОповещения.
		Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
		Результат= Вычислить("фрмОбработчика." + ИмяОбработчика + "(Контекст)");
	КонецЦикла;
#КонецОбласти

	СтруктураНастроек.ДатКнцЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	
	ГлавноеОкно.СбисПоказатьСостояние(СтрЗаменить(ДействиеОбновления.Параметры.СтрокаСостояния, "{счетчик}", ДействиеОбновления.Параметры.СчетчикСобытий),,, "(прервать -  Ctrl+Break)");
	
	//Взять с последнего обработанного события его ИД и дату время для метки. В случае, даже если ИД потрётся, запрос продолжится от даты последнего события
	Если ЗначениеЗаполнено(ПоследнееСобытие) Тогда
		Если ПоследнееСобытиеСИД = Неопределено Тогда
			//События есть, но в них нет ИД и времени. Поставить для фильтра дату.
			СообщениеДеталиазции = "Неверный формат списка: отсутствует описание событий документов. Часть статусов в диапазоне от "+ СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов + " до " + ДатаДоЗапросаСписка + " может быть пропущена.";
			СтруктураНастроек.ИдентификаторПоследнегоСобытия	= "";
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ДатаДоЗапросаСписка;
			ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов",726,,СообщениеДеталиазции);
		Иначе
			СтруктураНастроек.ИдентификаторПоследнегоСобытия	= ПоследнееСобытиеСИД.Идентификатор;
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ПоследнееСобытиеСИД.ДатаВремя;
		КонецЕсли;
		ДействиеОбновления.Параметры.ЕстьИзменения = Истина;
	ИначеЕсли Не СписокИзменений.Документ.Количество() Тогда
		Возврат;
	Иначе
		//Либо список документов есть, но у всех список событий пуст, дату/идентификатор никак не обновить.
		СообщениеДеталиазции = "Неверный формат списка: отсутствует описание событий документов. Часть статусов в диапазоне от "+ СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов + " до " + ДатаДоЗапросаСписка + " может быть пропущена.";
		СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов		= ДатаДоЗапросаСписка;
		СтруктураНастроек.ИдентификаторПоследнегоСобытия	= "";
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.СбисВыполнитьОбновлениеПачкиСтатусов",726,,СообщениеДеталиазции);
	КонецЕсли;
	
	ДопПараметры.МодульСтатусовСбис.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура("ИдАккаунта", Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш)));
	Если ДопПараметры.Свойство("МодульСтатусов1С") Тогда        
		ДопПараметры.МодульСтатусов1С.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.Кэш.Парам.КаталогНастроек);
	КонецЕсли;                             
	Если ДопПараметры.Свойство("МодульОбработкиСписка") Тогда
		ДопПараметры.МодульОбработкиСписка.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
	КонецЕсли;
	//Считаем без детализации, т.к. пока нечего детализировать
	Кэш.ОбщиеФункции.РезультатДействия_ДобавитьРезультат(Кэш, ДействиеОбновления,, Новый Структура("Выполнено, КлючГруппировки", Истина, "Статусы обработаны"));
	
	СтруктураНастроек.ДатКнцЧтенияСтатусов = Кэш.Интеграция.СБИС_ТекущаяДата(Кэш);
	Если СписокИзменений.Свойство("ОбработчикПослеИзменений") Тогда
		//Для интеграции через каталог надо почистить файлы после обработки
		ВыполнитьСбисОписаниеОповещения(ДействиеОбновления, СписокИзменений.ОбработчикПослеИзменений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисВыполнитьЧтениеИзменений(ДействиеОбновления, ДопПараметры) Экспорт
	
	Кэш		= ДопПараметры.Кэш;
	Отказ	= Ложь;
	СтруктураНастроек = ДействиеОбновления.Параметры.Метки;
	
	filter = Новый Структура("ПолныйСертификатЭП", "Нет"); 
	Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
		filter.Вставить("ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
	Иначе
		filter.Вставить("ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс""")); 
	КонецЕсли;
	Для Каждого ДопПарам Из ДопПараметры.ДопПараметрыФильтра Цикл
		filter.Вставить(ДопПарам.Ключ, ДопПарам.Значение);     
	КонецЦикла;
	
	navigation = Новый Структура; 
	navigation.Вставить("РазмерСтраницы", "100"); 
	filter.Вставить("Навигация", navigation);
	//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
	
	Результат = Кэш.Интеграция.СБИС_СписокИзменений(Кэш, filter, Новый Структура, Отказ);
	Если Отказ Тогда
		//Если проблемы с соединением, то просто закончим работу.
		Если	Результат.code = 775
			Или	Результат.code = 400 Тогда
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
		
		//Пытаемся воостановить цепочку по дату, если в первый проход событие не было найдено (возможно, было удалено).
		Если	Не	(	ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия)
					И	ДействиеОбновления.Параметры.ЕстьИзменения) Тогда
			//СохранитьМеткиСтатусов(Кэш);
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
		
		//Если событие на онлайне удалили, то пытаемся по дате запросить
		filter = Новый Структура;
		filter.Вставить("ПолныйСертификатЭП",	"Нет");
		filter.Вставить("ДатаВремяС",			Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
		filter.Вставить("Навигация",			navigation );
		Для Каждого ДопПарам Из ДопПараметры.ДопПараметрыФильтра Цикл
			filter.Вставить( ДопПарам.Ключ, ДопПарам.Значение);     
		КонецЦикла;
		
		Отказ = Ложь;
		Результат = Кэш.Интеграция.СБИС_СписокИзменений(Кэш, filter, Новый Структура, Отказ);
		Если Отказ Тогда
			ВызватьСбисИсключение(Результат, "МодульОбъектаКлиент.СбисВыполнитьЧтениеИзменений");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура РазблокироватьСтатусыСбис(ПараметрыБлокировкиСтатусов)
	Попытка
		Если ПараметрыБлокировкиСтатусов.Значение = Неопределено Тогда
			ПараметрыБлокировкиСтатусов.Значение = Новый Соответствие;
		КонецЕсли;
		ПараметрыБлокировкиСтатусов.Значение.Удалить(ПараметрыБлокировкиСтатусов.Идентификатор);
		СохранитьОбщуюНастройку(ПараметрыБлокировкиСтатусов.Ключ, ПараметрыБлокировкиСтатусов.Значение);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗаблокироватьСтатусы");		
	КонецПопытки;
КонецПроцедуры

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура ЗаблокироватьСтатусыСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов)
	Попытка
		Если ПараметрыБлокировкиСтатусов.Значение = Неопределено Тогда
			ПараметрыБлокировкиСтатусов.Значение = Новый Соответствие;
		Иначе
			ПроверитьБлокировкуСтатусовСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов);
		КонецЕсли;
		ОбновлениеЗапущено	= ПараметрыБлокировкиСтатусов.Значение;
		ТекущаяБлокировка = ОбновлениеЗапущено.Получить(ПараметрыБлокировкиСтатусов.Идентификатор);
		Если ТекущаяБлокировка = Неопределено Тогда
			//Таймаут 10 минут на блокировку.
			ТекущаяБлокировка = Новый Структура("user, account, timeout, date_begin", ПараметрыБлокировкиСтатусов.Пользователь, ПараметрыБлокировкиСтатусов.Аккаунт, 600);
		КонецЕсли;
		//Обновить дату начала по текущим меткам
		ТекущаяБлокировка.date_begin = СтруктураМетокСтатусов.ДатНачЧтенияСтатусов;
		ОбновлениеЗапущено.Вставить(ПараметрыБлокировкиСтатусов.Идентификатор, ТекущаяБлокировка);
		СохранитьОбщуюНастройку(ПараметрыБлокировкиСтатусов.Ключ, ПараметрыБлокировкиСтатусов.Значение);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗаблокироватьСтатусы");		
	КонецПопытки;
КонецПроцедуры

//Проверка блокировки обновления статусов. Если другой пользователь запустил обработку статусов.
&НаКлиенте
Процедура ПроверитьБлокировкуСтатусовСбис(СтруктураМетокСтатусов, ПараметрыБлокировкиСтатусов)
    Перем ОперацияПроверкиСтатусов, ОбновлениеЗапущено;
	
	ДатаПроверки = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ТекущаяДата(ГлавноеОкно.Кэш);
	КлючиИстекли = Новый Массив;
	ОбновлениеЗапущено = ПараметрыБлокировкиСтатусов.Значение;
	Для Каждого КлючИЗначениеБлокировки Из ОбновлениеЗапущено Цикл
		Если		КлючИЗначениеБлокировки.Ключ = ПараметрыБлокировкиСтатусов.Идентификатор Тогда
			//Это текущий сеанс
			Продолжить;
		ИначеЕсли	ДатаПроверки - КлючИЗначениеБлокировки.Значение.date_begin >= КлючИЗначениеБлокировки.Значение.timeout Тогда
			//У блокировки истёк таймаут
			КлючиИстекли.Добавить(КлючИЗначениеБлокировки.Ключ);
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Режим	= 2 Тогда
			//В рамках ИС - обновление блокируется при любом пользователе
			ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу пользователя: " + КлючИЗначениеБлокировки.Значение.Пользователь); 
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Режим	= 1 Тогда
			//В рамках аккаунта - если уже запущено от того же аккаунта
			Если	ПараметрыБлокировкиСтатусов.Аккаунт	= КлючИЗначениеБлокировки.Значение.account Тогда
				ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу Вашего аккаунта."); 
			КонецЕсли;
		//В рамках пользователя
		ИначеЕсли	ПараметрыБлокировкиСтатусов.Пользователь= КлючИЗначениеБлокировки.Значение.user Тогда
			ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу Вашего пользователя."); 
		//Иначе
		//	ВызватьСбисИсключение(,"МодульОбъектаКлиент.СбисПроверитьБлокировкуСтатусов", 710, "Ошибка блокировки данных", "Обновление статусов уже выполняется по запросу пользователя: " + КлючИЗначениеБлокировки.Значение.Пользователь); 
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИстек Из КлючиИстекли Цикл 
		ОбновлениеЗапущено.Удалить(КлючИстек);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ОбщиеНастройки

// Функция - читает общие настройки Saby
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаКлиенте
Функция ПрочитатьОбщиеНастройки(КлючНастройки=Неопределено) Экспорт
	Попытка
		Возврат ПрочитатьОбщиеНастройкиСервер(КлючНастройки);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ИсключениеВызов	= НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ПрочитатьОбщиеНастройки");
		Если	ИсключениеВызов.message = "Нарушение прав доступа!"
			И	ГлобальныйКэш.ПараметрыСистемы.Клиент.РежимЗапускаПриложения = "ТолстыйКлиентОбычноеПриложение" Тогда
			Возврат Неопределено;
		Иначе
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ПрочитатьОбщиеНастройки");
		КонецЕсли;
	КонецПопытки;	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаСервере
Функция ПрочитатьОбщиеНастройкиСервер(КлючНастройки)	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ХранилищеОбщихНастроек.Загрузить("Saby", "params", , "Saby");
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Если Не КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Результат = Результат.Получить(КлючНастройки);
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции	

// Процедура - сохраняет общую настройку Saby
//
// Параметры:
//  КлючНастройки		 - Строка	- Ключ записи
//  ЗначениеНастройки	 - Произвольный	 - Значение для записи
//
&НаКлиенте
Процедура СохранитьОбщуюНастройку(КлючНастройки, ЗначениеНастройки) Экспорт
	Попытка
		ПараметрыОбновитьДляСервера = Новый Структура;
		ПараметрыОбновитьДляСервера.Вставить(КлючНастройки, ЗначениеНастройки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СохранитьОбщиеНастройкиНаСервере(ПараметрыОбновитьДляСервера);
		#Иначе
			СохранитьОбщиеНастройкиВызовСервера(ПараметрыОбновитьДляСервера);
		#КонецЕсли
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ИсключениеВызов	= НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ПрочитатьОбщиеНастройки");
		Если	ИсключениеВызов.message = "Нарушение прав доступа!"
			И	ГлобальныйКэш.ПараметрыСистемы.Клиент.РежимЗапускаПриложения = "ТолстыйКлиентОбычноеПриложение" Тогда
			Возврат;
		Иначе
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СохранитьОбщуюНастройку");
		КонецЕсли;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбщиеНастройкиВызовСервера(Знач ЗначенияОбновить)
	СохранитьОбщиеНастройкиНаСервере(ЗначенияОбновить);
КонецПроцедуры

&НаСервере
Процедура СохранитьОбщиеНастройкиНаСервере(ЗначенияОбновить)
	УстановитьПривилегированныйРежим(Истина);
	ОбщиеНастройки = ХранилищеОбщихНастроек.Загрузить("Saby", "params", , "Saby");
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки = ЗначенияОбновить;
	Иначе
		Для Каждого Элемент Из ЗначенияОбновить Цикл
			ОбщиеНастройки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("Saby", "params", ОбщиеНастройки, , "Saby");
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Расхождения

&НаКлиенте
Процедура ВыполнитьПроверкуРасхожденийПоСоответствию (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт
	Для каждого СтрокаСоответствия Из ОписаниеПроверкиРасхождения.Соответствие Цикл
		Попытка
			ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия(СтрокаСоответствия, ДопПараметры);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			//добавить ошибку в РезультатДействия
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

//весь результат помещается в переданный объект ДопПараметры.РезультатДействия
&НаКлиенте
Процедура ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт
	Перем СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С;
	РезультатДействия = ДопПараметры.РезультатДействия;
	Кэш = ДопПараметры.Кэш;
	ДокументСсылка = ОписаниеПроверкиРасхождения.Ключ;
	Если Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДаннымСбис", СтруктураДокументаПоДаннымСбис) Тогда
			//дополучить или ошибка
	КонецЕсли;
	Если Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДанным1С", СтруктураДокументаПоДанным1С) Тогда
			//дополучить или ошибка
	КонецЕсли;
	//Для каждого ПроверкаРасхождения Из ОписаниеПроверкиРасхождения.Значение.НаборПроверок.ПроверкаРасхождений Цикл
	//	//мДокумент = мУзелПроверкиРасхождения.Значение.мДокумент;
	//	
	//	//выполнить проверку по списку проверок в мДокумент
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбисДляРасхождений(СтрокаСпискаДокументов, Кэш) Экспорт
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоПакетуСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ИдентификаторПакета = Строка.Значение.Идентификатор;
		//+tda//Если интеграция через каталог, передаём не идентификатор, а сам пакет
		Если Кэш.Парам.СпособОбмена = 1 Тогда
			ИдентификаторПакета = Строка.Значение;
		КонецЕсли;
		//-tda//
		ОшибкаЧтения = Ложь;
		ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ИдентификаторПакета,,ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			фрм.НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, Кэш.Ини, ГлавноеОкно.Кэш.Парам.КаталогНастроек, МассивСлужебных);
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		ИначеЕсли	ТипЗнч(СтрокаСпискаДокументов) = Тип("Структура") 
			И	СтрокаСпискаДокументов.Свойство("ВернутьПустойСоставПакета")
			И	СтрокаСпискаДокументов.ВернутьПустойСоставПакета Тогда
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			Сообщить("В пакете "+ПолныйСоставПакета.Название+" отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1СДляРасхождений(СтрокаСпискаДокументов, Кэш) Экспорт
	МассивВложений = Кэш.ОбщиеФункции.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, Кэш);
	Возврат МассивВложений;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДокумента1СПоПакетуСбис(ОписаниеПроверки, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Вложение = ОписаниеПроверки.Вложение;
	СоставПакета = ОписаниеПроверки.СоставПакета;
	ДанныеДокумента = Новый Структура();
	СоответствиеДокументДанные = Новый Соответствие;
	Для Каждого Документ1С Из Вложение.Документы1С Цикл

		Контекст = Новый Структура("МассивПакетов", Новый Массив);
		ВходящийКонтекстРасчета = Новый Структура;
		мФайлДляРасчета = Найти_мФайлПоВложению(Вложение, Документ1С, Кэш);
		Если мФайлДляРасчета = Неопределено Тогда
			Сообщить("Не найден файл");
			Продолжить;
		КонецЕсли;	
		ЗначениеИниДокумента = Новый Структура("мФайл", Новый Структура(мФайлДляРасчета.Ключ, мФайлДляРасчета.Значение));
		ЗначениеИниДокумента.Вставить("Формат2016",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
		ЗначениеИниДокумента.Вставить("Формат2019",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
		ЗначениеИниДокумента.Вставить("ФорматУКД2020",	Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
		ЗначениеИниДокумента.Вставить("ВходящийКонтекст", Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
		ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
		
		ИниДокумента = СтрПолучитьСтроку(СтрЗаменить(Кэш.ОбщиеФункции.ПолучитьИмяИСПоСсылке(Документ1С.Значение), ".", Символы.ПС), 2);
		СоответствиеДокументДанные.Вставить(Документ1С.Значение, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента)); 	
		
	КонецЦикла; 
	Если Не СоответствиеДокументДанные.Количество() = 0 Тогда 
		Кэш.ОбщиеФункции.ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, Вложение.Документы1С, Кэш.Парам);
		Если Не Кэш.ОбщиеФункции.ОбработатьДанныеДокументов1С(Кэш, Контекст, Вложение.Документы1С, СоответствиеДокументДанные) Тогда
			Сообщить("Документ не обработан.");
			Возврат Неопределено;
		Иначе
			Попытка  
				Возврат Контекст.МассивПакетов[0].Вложение[0].СтруктураДокумента.Файл.Документ;
			Исключение
				Возврат Неопределено;
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;	 
КонецФункции

&НаКлиенте
Функция Найти_мФайлПоВложению(Вложение, Документ1С, Кэш)
	Перем Результат;
	ИниДокумента = СтрПолучитьСтроку(СтрЗаменить(Кэш.ОбщиеФункции.ПолучитьИмяИСПоСсылке(Документ1С.Значение), ".", Символы.ПС), 2);
	ЗначениеИниДокумента = Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента);
	Если Не ТипЗнч(ЗначениеИниДокумента) = Тип("Структура") Или Не ЗначениеИниДокумента.Свойство("мФайл") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ЗначениеИниДокумента.мФайл Цикл   
		ТипИзИни = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", КлючИЗначение.Значение);
		ПодтипИзИни = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", КлючИЗначение.Значение);
		ВерсияФорматаИзИни = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", КлючИЗначение.Значение);
		ПодверсияФорматаИзИни = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", КлючИЗначение.Значение);	
		
		Если Вложение.Тип = ТипИзИни
			И Вложение.Подтип = ПодтипИзИни
			И Вложение.ВерсияФормата = ВерсияФорматаИзИни
			И Вложение.ПодверсияФормата = ПодверсияФорматаИзИни Тогда 
			Результат = Новый Структура("Ключ, Значение", КлючИЗначение.Ключ, КлючИЗначение.Значение);   
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НайтиВложениеСбисПоВложению1С(ОписаниеПакета, ДопПараметры) Экспорт
	СоставПакетаСбис = ОписаниеПакета.СоставПакетаСбис;
	Вложение1С = ОписаниеПакета.Вложение1С;
	Для Каждого ВложениеСбис Из СоставПакетаСбис.Вложение Цикл
		Если Не ВложениеСбис.Свойство("Служебный") или ВложениеСбис.Служебный = "Нет"
			И Вложение1С.Тип = ВложениеСбис.Тип
			И Вложение1С.ПодТип = ВложениеСбис.ПодТип
			И Вложение1С.ВерсияФормата = ВложениеСбис.ВерсияФормата
			И Строка(Вложение1С.ПодВерсияФормата) = ВложениеСбис.ПодВерсияФормата Тогда
			Возврат ВложениеСбис;
		КонецЕсли;	
	КонецЦикла;		
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры

// Процедура - запускает редактор файлов настроек
//
// Параметры:
//  ПараметрыЗапускаВходящие - 	 - 
//
&НаКлиенте
Процедура ЗапуститьРедакторИни(ПараметрыЗапускаВходящие=Неопределено) Экспорт
	
	фрм = ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекОбщее");
	Если фрм = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "ФормаГлавноеОкно.ЗапуститьРедакторИни",,,"Не удалось получить форму редактора файлов настроек");
		СообщитьСбисИсключение(СбисИсключение);
		Возврат;
	КонецЕсли;
    фрм.ЗакрыватьПриЗакрытииВладельца = Истина;
	фрм.Показать(ПараметрыЗапускаВходящие);

КонецПроцедуры

// Процедура - сообщить пользователю
//
// Параметры:
//  ПараметрыСообщения	 - 	Структура - Текст, СтатусСообщения, ЭлементНазначения, ФормаВладелец
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура СбисСообщить(ПараметрыСообщения, ДопПараметры=Неопределено) Экспорт
	Перем СбисСтатусСообщения;
	
	Если ГлобальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не ПараметрыСообщения.Свойство("СтатусСообщения", СбисСтатусСообщения) Тогда
			СбисСтатусСообщения = СтатусСообщения.Обычное
		КонецЕсли;
		Сообщить(ПараметрыСообщения.Текст, СбисСтатусСообщения);
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ПараметрыСообщения.Текст;
		Если ПараметрыСообщения.Свойство("ЭлементНазначения") Тогда
			Сообщение.Поле = ПараметрыСообщения.ЭлементНазначения;
		КонецЕсли;
		Если		ПараметрыСообщения.Свойство("ФормаВладелец")
			И Не	ПараметрыСообщения.ФормаВладелец = Неопределено  Тогда
			Сообщение.ИдентификаторНазначения = ПараметрыСообщения.ФормаВладелец.УникальныйИдентификатор;
		КонецЕсли;
		Сообщение.Сообщить(); 
	#КонецЕсли	
КонецПроцедуры

// Процедура - Сбис показать вопрос. Идентично ПоказатьВопрос, с учетом модальности ОФ.
//
// Параметры:
//  СбисОписаниеОповещенияОЗавершении	 - СбисОписаниеОповещения	 - обработчик диалога
//  ТекстВопроса						 - Строка					 - 
//  Кнопки								 - Список					 - 
//  Таймаут								 - Таймаут					 - 
//  КнопкаПоУмочанию					 - Кнопка/элемент списка	 - 
//  Заголовок							 - Строка					 - 
//  КнопкаТаймаута						 - Кнопка/элемент списка	 - 
//
&НаКлиенте
Процедура СбисПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмочанию = Неопределено, Заголовок="", КнопкаТаймаута=Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута), СбисОписаниеОповещенияОЗавершении);
	#Иначе
		ПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СбисЗавершитьРаботу() Экспорт
	
	Оповестить("ЗакрытьСБИС");

	Попытка
		
		ГлавноеОкно.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, ГлобальныйКэш.Парам));
		Если ГлобальныйКэш.СБИС.Авторизован Тогда
			СохранитьМеткиСтатусов(ГлавноеОкно.Кэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ЗавершитьПлагин") И ГлобальныйКэш.ТекущийСеанс.ЗавершитьПлагин = Истина Тогда
			ГлобальныйКэш.Сбис.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИСПлагин_Завершить(ГлобальныйКэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
			ГлобальныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
			ГлавноеОкно.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
			ГлавноеОкно.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
		КонецЕсли;
		
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		ГлавноеОкно.Кэш.Интеграция.Завершить(ГлавноеОкно.Кэш, Новый Структура, Ложь);
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗавершитьРаботу");  
		СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "platform_warning"));
				
	КонецПопытки;
	
	ГлавноеОкно.ЗавершитьРаботу = Истина; 
	ГлавноеОкно.Закрыть();
	
КонецПроцедуры

//Процедура показывает пользователю выбор из сформированного списка значений
&НаКлиенте
Процедура СбисВыбратьИзСписка(СписокВыбора, ДопПараметры) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(СписокВыбора.ВыбратьЭлемент(ДопПараметры.Заголовок, ДопПараметры.Элемент), ДопПараметры.Обработчик);
	#Иначе
		СписокВыбора.ПоказатьВыборЭлемента(ДопПараметры.Обработчик, ДопПараметры.Заголовок, ДопПараметры.Элемент);
	#КонецЕсли	
	
КонецПроцедуры

// Функция - Возвращает дату в миллисекундах
// 
// Возвращаемое значение:
//  Число - миллисекунды
//
&НаКлиенте
Функция ПолучитьДатуВМиллисекундах() Экспорт 
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Используется только на обычных формах. Для поддержки 8.2 ниже 17 версии
		Возврат (ТекущаяДата() - '0001.01.01') * 1000 - 10800000;
	#Иначе
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	#КонецЕсли

КонецФункции

//Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Процедура ИзменитьПараметрСбис(ИмяПараметраСбис, ЗначениеПараметраСбис) Экспорт
	ГлавноеОкно.Кэш.Парам[ИмяПараметраСбис] = ЗначениеПараметраСбис;
	ГлобальныйКэш.Парам[ИмяПараметраСбис]	= ЗначениеПараметраСбис;	
КонецПроцедуры

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_Интерфейс

&НаКлиенте
Процедура ВызватьОбработчикКнопки(Команда) Экспорт
	//Найдем действие, которое требуется выполнить при нажатии.
	Попытка
		РазделКнопки = ПолучитьМенюТекущегоРаздела(ГлавноеОкно.Кэш); 
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.ВызватьОбработчикКнопки");
	КонецПопытки;
	
	Для Каждого СбисКнопка Из РазделКнопки Цикл
		Если Не СбисКнопка.ИмяКнопки = Команда.Имя Тогда 
			Продолжить;
		КонецЕсли;
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(СбисКнопка.МетодАктивации, "РаботаСДокументами1С", "ФормаГлавноеОкно");
		Если фрм = Ложь Тогда
			ВызватьСбисИсключение(, "МодульОбъектКлиент.ВызватьОбработчикКнопки",,"Не удалось найти обработчик метода " + Команда.Имя);
		Иначе
			ОбработчикДействия = НовыйСбисОписаниеОповещения(сбисКнопка.МетодАктивации, фрм, Команда);
			ВыполнитьСбисОписаниеОповещения(ГлавноеОкно.Кэш, ОбработчикДействия);
		КонецЕсли;
		Возврат;
	КонецЦикла;
	ВызватьСбисИсключение(, "МодульОбъектКлиент.ВызватьОбработчикКнопки",,"Не удалось найти обработчик метода " + Команда.Имя);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМенюТекущегоРаздела(Кэш) Экспорт
	
    Перем ИмяТекущийРаздел, ЗначениеТекущийРаздел;
	Если		Не	Кэш.Свойство("Разделы") Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не определена структура разделов.");
	ИначеЕсли	Кэш.Текущий = Неопределено Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не определён текущий раздел.");
	ИначеЕсли	Не	Кэш.Разделы.Свойство("р" + Кэш.Текущий.Раздел, ИмяТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "Не удалось определить раздел.");
	ИначеЕсли	Не Кэш.МенюРазделов.Свойство(ИмяТекущийРаздел, ЗначениеТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "В меню разделов не найден основной раздел.");
	ИначеЕсли	Не ЗначениеТекущийРаздел.Свойство(Кэш.Текущий.Имя, ЗначениеТекущийРаздел) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ПолучитьМенюТекущегоРаздела", 779, , "В меню разделов не найден текущий раздел.");
	КонецЕсли;
	Возврат ЗначениеТекущийРаздел;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Классы

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_КлассРезультатДействия

// Функция - Класс результат действия
//
// Параметры:
//  ПараметрыДействия	 - Структура	- 
//		Тип - тип действия ОбновлениеСтатусов/Отправка/Загрузка/Обновление
//  ДопПараметры		 - Структура	- для расширения.
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция НовыйРезультатДействия(ПараметрыДействия, ДопПараметры) Экспорт
	
	РезультатДействия = Новый Структура;
	РезультатДействия.Вставить("Операция",	ПараметрыДействия.Тип);
	РезультатДействия.Вставить("Время",		Новый Структура("Начало, Конец, Запись, ОжиданиеОтвета, Выполнение, ПолучениеДанных, Подготовка",0,0,0,0,0,0,0));
	РезультатДействия.Вставить("Всего",		Новый Структура("Выполнено, НеВыполнено, ОшибокВыполнения, ОшибокПодготовки", 0,0,0,0));
	РезультатДействия.Вставить("Действие",	Новый Структура("ДетализацияВыполнено, ДетализацияНеВыполнено", Новый Соответствие,Новый Соответствие));
	РезультатДействия.Вставить("Ошибки",	Новый Структура("ДетализацияОшибок, СоответствиеКодов", Новый Соответствие,Новый Соответствие));
	Если		РезультатДействия.Операция = "ОбновлениеСтатусов" Тогда
		РезультатДействия.Вставить("Параметры", Новый Структура("ПредставлениеОперации, СчетчикПачек, СчетчикСобытий, ЕстьИзменения, ПродолжатьЗапрос, Метки", "Обновление статусов", 0, 0, Ложь, Истина));
		РезультатДействия.Параметры.Вставить("СтрокаСостояния", "Обновление статусов отправленных документов {счетчик}");
	ИначеЕсли   РезультатДействия.Операция = "ОбновлениеОбработки" Тогда
		РезультатДействия.Вставить("Параметры",	Новый Структура("ВерсияБыло, ВерсияНовая, ПредставлениеОперации", ГлобальныйКэш.Парам.ПредВерсия, ПараметрыДействия.НоваяВерсия , "Обновление"));		
	Иначе
		РезультатДействия.Вставить("Параметры",	Новый Структура("КоличествоСвободныхПотоков, КоличествоОтветов, ПорНомер, ПредставлениеОперации, ФормаВызова, СформированныеДанные, ДанныеПоСтатусам", 30));
	КонецЕсли;
	РезультатДействия.Время.Начало = ПолучитьДатуВМиллисекундах();
	Если	ДопПараметры.Свойство("СтатусыДляОбработки")
		И	ДопПараметры.СтатусыДляОбработки Тогда
		РезультатДействия.Вставить("НаЗаписьСтатусов", Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
	КонецЕсли;
	Возврат РезультатДействия;

КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_КлассСбисОписаниеОповещения

// Функция - Конструктор класс описание оповещения с учетом старых ОФ
//
// Параметры: аналогично ОписаниеОповещения
// 
// Возвращаемое значение:
// СбисОписаниеОповещения  - экземпляр класса
//
&НаКлиенте
Функция НовыйСбисОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры = Неопределено, СбисПроцедураИсключения = Неопределено, СбисМодульИсключения = Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОписаниеОповещенияРезультат = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки", СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключения);
	#Иначе
		Если СбисПроцедураИсключения = Неопределено Тогда
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры);
		Иначе
			СбисМодульИсключенияУстановить = СбисМодульИсключения;
			Если СбисМодульИсключенияУстановить = Неопределено Тогда 
				СбисМодульИсключенияУстановить = СбисМодуль;
			КонецЕсли;
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключенияУстановить);
		КонецЕсли;
	#КонецЕсли
	Возврат ОписаниеОповещенияРезультат;
КонецФункции

// Процедура - Выполняет описание оповещения
//
// Параметры:
//  РезультатВызова			 - Произвольный				- первый аргумент в вызове
//  СбисОписаниеОповещения	 - СбисОписаниеОповещения	- вызываемый экземпляр описания оповещения для обработки
//
&НаКлиенте
Процедура ВыполнитьСбисОписаниеОповещения(РезультатВызова=Неопределено, СбисОписаниеОповещения) Экспорт
	Если СбисОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Попытка
			Выполнить("СбисОписаниеОповещения.Модуль." + СбисОписаниеОповещения.ИмяПроцедуры + "(РезультатВызова, СбисОписаниеОповещения.ДополнительныеПараметры)");
		Исключение
			СтандартнаяОбработка = Истина;
			Если ЗначениеЗаполнено(СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Выполнить("СбисОписаниеОповещения.МодульОбработкиОшибки." + СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки + "(ИнформацияОбОшибке, СтандартнаяОбработка, СбисОписаниеОповещения.ДополнительныеПараметры)");
			КонецЕсли;
			Если СтандартнаяОбработка Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	#Иначе
		ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_КлассСбисИсключение

// Процедура - Сообщает сбис исключение
//
// Параметры:
//  СбисИсключение	 - Структура	 - экземпляр ExtSysException(СбисИсключение)
//  ДопПараметры	 - Структура	 - 
//		СтатусСообщения		- Строка	- статус сообщения: "warning" - показать форму предупреждения со ссылкой на решение проблемы. "attention" - показать форму ошибки, "message" - вывод в обычном режиме
//		Отправлять			- Булево, признак отключения отправки ошибки в статистику
//
&НаКлиенте
Процедура СообщитьСбисИсключение(СбисИсключение, ДопПараметры=Неопределено) Экспорт
	Перем СтатусОшибки, лРешениеПроблемы, лФормаВладелец, лОтправлятьОшибку;
	Если	Не	ТипЗнч(СбисИсключение) = Тип("Структура")
		Или Не	СбисИсключение.Свойство("message")
		Или	Не	СбисИсключение.Свойство("details") Тогда
		Возврат;
	КонецЕсли;
	ТекстОшибки = Строка(СбисИсключение.message) + ?(СбисИсключение.Свойство("details") И СбисИсключение.message <> СбисИсключение.details, " (" + СбисИсключение.details + ")", "");
	Если ГлобальныйКэш.Парам.РежимОтладки Тогда
		
		Попытка
			СбисПоследняяЗаписьСтек = СбисИсключение.stack[0].methodName;
		Исключение
			СбисПоследняяЗаписьСтек	= "МодульОбъектаКлиент.СообщитьСбисИсключение";
		КонецПопытки;
		ИмяМодуля = СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 1);
		ИмяВызова = СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 2);
		ПолныйТекстСообщения = РаботаСJson.ПреобразоватьЗначениеВJson(СбисИсключение);
		лОтладочныеДанные = Новый Структура(
		"Тип,		Модуль,		Вызов,		Время,			Идентификатор,		Сообщение", 
		"ERROR",	ИмяМодуля,	ИмяВызова,	ТекущаяДата(),	СбисИсключение.code,ПолныйТекстСообщения);
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		
	КонецЕсли;
	
	Если ГлобальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	
	Если	ДопПараметры = Неопределено
		Или Не	ДопПараметры.Свойство("СтатусСообщения", СтатусОшибки) Тогда
		
		Если СбисИсключение.Свойство("help", лРешениеПроблемы)
			И	ЗначениеЗаполнено(лРешениеПроблемы) Тогда
			СтатусОшибки = "warning";
		Иначе
			СтатусОшибки = "attention";
		КонецЕсли;
		
	КонецЕсли;
	Если 		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ФормаВладелец", лФормаВладелец) Тогда
		//лФормаВладелец = ГлавноеОкно;
	КонецЕсли;
	Если 		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Отправлять", лОтправлятьОшибку) Тогда
		лОтправлятьОшибку = Истина;
	КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ТекстСсылка",		"Решение проблемы");
	ПараметрыСообщения.Вставить("Текст",			ТекстОшибки);
	ПараметрыСообщения.Вставить("АдресСсылка",		лРешениеПроблемы);
	ПараметрыСообщения.Вставить("ФормаВладелец",	лФормаВладелец);
	лОтправлятьОшибку = лОтправлятьОшибку И Не СбисИсключение.code = 775;
	Если		СтатусОшибки = "warning" Тогда
		ФормаПредупреждение = ГлавноеОкно.СбисПолучитьФорму("ФормаПредупреждения",,,лФормаВладелец);
		ФормаПредупреждение.Показать(ГлобальныйКэш, ПараметрыСообщения);
	ИначеЕсли	СтатусОшибки = "attention" Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			фрм						= ГлавноеОкно.СбисПолучитьФорму("ФормаОшибка",,,лФормаВладелец);
			фрм.ТекстОшибки			= ТекстОшибки;
			фрм.ИнформацияОбОшибке	= "";
			фрм.ОткрытьМодально(60);
		#Иначе
			СбисСообщить(ПараметрыСообщения); 
		#КонецЕсли
	ИначеЕсли СтатусОшибки = "platform_warning" Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстОшибки);
		#Иначе
			ПоказатьПредупреждение(,ТекстОшибки);
		#КонецЕсли
		
	Иначе
		СбисСообщить(ПараметрыСообщения); 
	КонецЕсли;
	//Если не отключено, то отправим информацию о возникшей ошибке
	Если лОтправлятьОшибку Тогда	
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение);
		Попытка
			СбисСтатистика_СформироватьИЗаписать(сбисПараметрыСтатистики, Новый Структура);	
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СообщитьСбисИсключение(НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СформироватьИЗаписатьСтатистикуНаСервис"), Новый Структура("Отправлять", Ложь));
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

//Процедура генерирует и вызывает ExtSysException(СбисИсключение)
&НаКлиенте
Процедура ВызватьСбисИсключение(БазоваяОшибка=Неопределено, СбисИмяКоманды,
								СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, СбисДамп=Неопределено, СбисХелп=Неопределено) Экспорт
	ИсключениеВызов = НовыйСбисИсключение(БазоваяОшибка, СбисИмяКоманды, СбисКод, СбисСообщение, СбисДетализация, СбисДамп, СбисХелп);
	ВызватьИсключение(СбисИсключение_Сериализовать(ИсключениеВызов));
КонецПроцедуры

//Конструктор ExtSysException
//Кэш				- Кэш обработки на клиенте
//БазоваяОшибка		- (необяз) ExtSysException(СбисИсключение)/ИнформацияОбОшибке/Структура("code, message, detail, dump, help")/Строка (в json/произвольная)/Число(код ошибки)
//СбисИмяКоманды	- Имя команды в стек
//Работает если в БазовойОшибке что-то неопределено, иначе берутся значения по-умолчанию
//СбисКод			- (необяз)код для новой ошибки. 		По-умолч 100
//СбисСообщение		- (необяз)сообщение для новой ошибки.	По-умолч сообщение по коду 
//СбисДетализация	- (необяз)детализация для новой ошибки.	По-умолч сообщение по коду
//СбисДамп			- (необяз)дамп ошибки
//СбисХелп			- (необяз)ссылка на решение проблемы
&НаКлиенте
Функция НовыйСбисИсключение(БазоваяОшибка=Неопределено, СбисИмяКоманды,
							СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, 
							СбисДамп=Неопределено, СбисХелп=Неопределено) Экспорт
	Перем СбисСтек,СбисОсновнаяОшибка,СтрокаРазбора;
	СбисИсключение = Новый Структура("code, message, details, methodName, dump, help, base", СбисКод, СбисСообщение, СбисДетализация, СбисИмяКоманды, СбисДамп, СбисХелп);
	
	Если		ТипЗнч(БазоваяОшибка) = Тип("ИнформацияОбОшибке") Тогда
		Попытка
			СбисОсновнаяОшибка = СбисИсключение_ДеСериализовать(БазоваяОшибка.Описание);
		Исключение
			//Это не запакованный Exception
			СтруктураОшибкиСообщения = БазоваяОшибка;
			СложнаяСтруктура = Ложь;
			КодНеизвестногоИсключения = 500;
			Пока ТипЗнч(СтруктураОшибкиСообщения.Причина) = Тип("ИнформацияОбОшибке") Цикл
				СтруктураОшибкиСообщения = СтруктураОшибкиСообщения.Причина;
				СложнаяСтруктура = Истина;
			КонецЦикла;
			Если СложнаяСтруктура Тогда
				СообщениеОбОшибке = СтруктураОшибкиСообщения.Описание;
				ДетализацияОшибки = БазоваяОшибка.Описание;
			ИначеЕсли БазоваяОшибка.Причина = Неопределено Тогда
				СообщениеОбОшибке = СбисИсключение_СообщениеПоКоду(КодНеизвестногоИсключения);
				ДетализацияОшибки = БазоваяОшибка.Описание;
			Иначе
				СообщениеОбОшибке = БазоваяОшибка.Описание;
				ДетализацияОшибки = БазоваяОшибка.Причина;
			КонецЕсли;
			СбисДамп = Новый Структура("ИсходнаяСтрока, НомерСтроки", БазоваяОшибка.ИсходнаяСтрока, БазоваяОшибка.НомерСтроки);
			СбисОсновнаяОшибка = Новый Структура("code,details,methodName,dump,message", КодНеизвестногоИсключения, ДетализацияОшибки, БазоваяОшибка.ИмяМодуля, СбисДамп, СообщениеОбОшибке);
		КонецПопытки;
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Строка") Тогда
		//Конструктор из строки
		СбисОсновнаяОшибка = Новый Структура("code,message,details,methodName,dump");
		Если Лев(СбисОсновнаяОшибка,1) = "{" Тогда
			СтрокаРазбора = БазоваяОшибка;
		ИначеЕсли	Лев(СбисОсновнаяОшибка,35) = "callBLObject(): Метод бизнес логики"
			И		Найти(СбисОсновнаяОшибка,"вернул ошибку") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{"));
			СтрокаРазбора = Лев(СтрокаРазбора, СтрДлина(СтрокаРазбора)-1);
		ИначеЕсли Найти(БазоваяОшибка,"{""jsonrpc"":") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{""jsonrpc"":"));
		Иначе
			СбисОсновнаяОшибка.code	= 100;
			СбисОсновнаяОшибка.message	= БазоваяОшибка;
			СбисОсновнаяОшибка.details	= БазоваяОшибка;
		КонецЕсли;	
		Если Не СтрокаРазбора = Неопределено Тогда
			Попытка
				СбисОсновнаяОшибка = РаботаСJSON.СбисПрочитатьJSON(СтрокаРазбора);
				Если СбисОсновнаяОшибка.Свойство("Error") Тогда
					СбисОсновнаяОшибка = СбисОсновнаяОшибка.Error;
				КонецЕсли;
			Исключение
				СбисОсновнаяОшибка.code	= 100;
				СбисОсновнаяОшибка.message	= БазоваяОшибка;
				СбисОсновнаяОшибка.details	= БазоваяОшибка;
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Число") Тогда
		СбисОсновнаяОшибка = Новый Структура("code,message,details", БазоваяОшибка, СбисИсключение_СообщениеПоКоду(БазоваяОшибка), СбисИсключение_СообщениеПоКоду(БазоваяОшибка));
	Иначе
		СбисОсновнаяОшибка = БазоваяОшибка;
	КонецЕсли;
	
	//Если не указаны основные поля для новой ошибки
	Если СбисИсключение.code = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.code = 100;
		Иначе
			СбисИсключение.code = СбисОсновнаяОшибка.code;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.message = Неопределено Тогда
		Если		СбисОсновнаяОшибка = Неопределено
			Или	Не	СбисОсновнаяОшибка.Свойство("message", СбисИсключение.message) Тогда
			СбисИсключение.message = СбисИсключение_СообщениеПоКоду(СбисИсключение.code);
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.details = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.details = СбисИсключение.message;
		ИначеЕсли Не СбисОсновнаяОшибка.Свойство("details", СбисИсключение.details) Тогда
			СбисИсключение.details = СбисОсновнаяОшибка.detail;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.help = Неопределено Тогда
		Если СбисОсновнаяОшибка <> Неопределено и СбисОсновнаяОшибка.Свойство("help") Тогда
			СбисИсключение.help = СбисОсновнаяОшибка.help;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисОсновнаяОшибка = Неопределено Тогда
		Возврат СбисИсключение;
	ИначеЕсли Не СбисОсновнаяОшибка.Свойство("base", СбисИсключение.base) Тогда
		СбисИсключение.base = СбисОсновнаяОшибка;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если СбисОсновнаяОшибка.Свойство("stack", СбисСтек) Тогда
		СбисОсновнаяОшибка.Удалить("stack");
	Иначе
		СбисСтек = Новый Массив;
		СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисОсновнаяОшибка);
		Если		СбисОсновнаяОшибка.Свойство("method_Name") Тогда
			СбисЗаписьВСтек.methodName = СбисОсновнаяОшибка.method_Name;
		ИначеЕсли	СбисОсновнаяОшибка.Свойство("Action") Тогда
			СбисЗаписьВСтек.methodName = СбисОсновнаяОшибка.Action;
		КонецЕсли;
		СбисСтек.Добавить(СбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
	ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисИсключение);
	СбисСтек.Вставить(0, СбисЗаписьВСтек);
	СбисИсключение.Вставить("stack", СбисСтек);
	Если СбисОсновнаяОшибка.Свойство("data") Тогда
		СбисИсключение.Вставить("data", СбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если СбисДамп = Неопределено Тогда
		Если СбисОсновнаяОшибка.Свойство("dump", СбисИсключение.dump) Тогда
			СбисОсновнаяОшибка.Удалить("dump");
		КонецЕсли;
	КонецЕсли;
	Возврат СбисИсключение;
	
КонецФункции

&НаКлиенте
Функция СбисИсключение_Сериализовать(СбисИсключение)
	Возврат СбисИсключение_СериализоватьСервер(СбисИсключение);
КонецФункции

&НаСервереБезКонтекста
Функция СбисИсключение_СериализоватьСервер(СбисИсключение)
	Возврат ЗначениеВСтрокуВнутр(СбисИсключение);
КонецФункции
	
&НаКлиенте
Функция СбисИсключение_ДеСериализовать(СбисИсключение)
	Возврат СбисИсключение_ДеСериализоватьСервер(СбисИсключение);
КонецФункции	

&НаСервереБезКонтекста
Функция СбисИсключение_ДеСериализоватьСервер(СбисИсключение)
	Возврат ЗначениеИзСтрокиВнутр(СбисИсключение);
КонецФункции

&НаКлиенте
Функция СбисИсключение_СообщениеПоКоду(СбисКодОшибки)
	Если		СбисКодОшибки = 100 Тогда
		Возврат "Неизвестная ошибка системы";
	ИначеЕсли	СбисКодОшибки = 300 Тогда
		Возврат "Неизвестная ошибка БЛ";
	ИначеЕсли	СбисКодОшибки = 301 Тогда
		Возврат "Сервис СБИС.Диск временно недоступен";
	ИначеЕсли	СбисКодОшибки = 400 Тогда
		Возврат "Неизвестная ошибка СБИС Плагина";
	ИначеЕсли	СбисКодОшибки = 409 Тогда
		Возврат "Сеанс с учетной системой завершен";
	ИначеЕсли	СбисКодОшибки = 500 Тогда
		Возврат "Неизвестная ошибка клиента";
	ИначеЕсли	СбисКодОшибки = 600 Тогда
		Возврат "Неизвестная ошибка настроек";
	ИначеЕсли	СбисКодОшибки = 700 Тогда
		Возврат "Неизвестная ошибка подключения";
	ИначеЕсли	СбисКодОшибки = 717 Тогда
		Возврат "Несовместимая версия файла базы данных";
	ИначеЕсли	СбисКодОшибки = 726 Тогда
		Возврат "Вложения не определены";
	ИначеЕсли	СбисКодОшибки = 735 Тогда
		Возврат "Данная операция недоступна";
	ИначеЕсли	СбисКодОшибки = 755 Тогда
		Возврат "Не найден сертификат ЭП";
	ИначеЕсли	СбисКодОшибки = 770 Тогда
		Возврат "Ошибка XSLT";
	ИначеЕсли	СбисКодОшибки = 772 Тогда
		Возврат "Ошибка работы с файловой системой";
	ИначеЕсли	СбисКодОшибки = 773 Тогда
		Возврат "Неизвестная ошибка при выполнении метода";	
	ИначеЕсли	СбисКодОшибки = 775 Тогда
		Возврат "Не получен ответ от плагина";	
	ИначеЕсли	СбисКодОшибки = 776 Тогда
		Возврат "Запуск программы/функции/метода не удался";	
	ИначеЕсли	СбисКодОшибки = 779 Тогда
		Возврат "Не найден объект";	
	ИначеЕсли 	СбисКодОшибки = 784 Тогда
		Возврат "Ошибка в настройках соединения";	
	КонецЕсли;
	Возврат "Неизвестная ошибка системы";
КонецФункции

#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_КлассОтложенныеФункции

// Класс - отложенное действие
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		ОписаниеОповещения			- Условно-Обязательный, СбисОписаниеОповещения - обработчик вызова.
//		ИмяПроцедуры				- Условно-Обязательный, Строка, - Имя - имя процедуры/функции для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//		Модуль						- Условно-Обязательный, Форма/МодульОбъекта, - модуль для описания оповещения.				Если не указан параметр "ОписаниеОповещения"
//		ДополнительныеПараметры 	- Необязательный, Структура(Неопределено) - Второй параметр для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//		ИмяПроцедурыОбработкиОшибки	- Необязательный Строка, - Имя - имя процедуры/функции для описания оповещения при ошибке.	Если не указан параметр "ОписаниеОповещения"
//		МодульОбработкиОшибки		- Необязательный Форма/МодульОбъекта, - модуль для описания оповещения при ошибке.			Если не указан параметр "ОписаниеОповещения"
//		ИдентификаторДействия		- Необязательный, Строка(ИмяПроцедуры) - ключ для поиска действия. Если не указан, то берётся имя процедуры из описания оповещения.
//		Периодичность				- Необязательный, Число(100) мс - как часто производится вызов. Если не указано, то сразу после завершения последнего вызова. 
//		Аргумент 					- Необязательный, Произвольный(Неопределено),  - Аргумент для вызова описания оповещения
//		ЧислоВызовов				- Необязательнвц, Число(1) - сколько раз делать вызов. Если Неопределено, то бесконечно.
//		ВызватьСразу				- Необязательный, Булево(Истина) - Выполнить сразу при завершении текущих вызовов. Смысл указывать есть только при большой периодичности между вызовами, когда нет необходимости вызова сразу при подключении операции.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - класс отложенное действие
//
&НаКлиенте
Функция НовыйОтложенноеДействие(ПараметрыКонструктора) Экспорт
	Перем СбисОписаниеОповещения, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки;
	Попытка
		Если Не ПараметрыКонструктора.Свойство("ОписаниеОповещения", СбисОписаниеОповещения) Тогда
			ПараметрыКонструктора.Свойство("ДополнительныеПараметры",		ДопПараметры);
			ПараметрыКонструктора.Свойство("ИмяПроцедурыОбработкиОшибки",	ИмяПроцедурыОбработкиОшибки);
	 		ПараметрыКонструктора.Свойство("МодульОбработкиОшибки",			МодульОбработкиОшибки);
			СбисОписаниеОповещения = НовыйСбисОписаниеОповещения(ПараметрыКонструктора.ИмяПроцедуры, ПараметрыКонструктора.Модуль, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки);
		КонецЕсли;
		ОбъектОтложенногоДействия = Новый Структура(
		"ОписаниеОповещения,	СледующийВызовМС,									ЧислоВызовов, ПоследнийВызовМС, ПериодичностьМС, Аргумент, ИдДействия", 
		СбисОписаниеОповещения,	ПолучитьДатуВМиллисекундах());
		Если Не ПараметрыКонструктора.Свойство("ИдентификаторДействия", ОбъектОтложенногоДействия.ИдДействия) Тогда
			ОбъектОтложенногоДействия.ИдДействия = СбисОписаниеОповещения.ИмяПроцедуры;
		КонецЕсли;
		Если ПараметрыКонструктора.Свойство("Периодичность", ОбъектОтложенногоДействия.ПериодичностьМС) Тогда
			ОбъектОтложенногоДействия.ПериодичностьМС = ОбъектОтложенногоДействия.ПериодичностьМС * 1000;
			Если ПараметрыКонструктора.Свойство("ВызватьСразу") И Не ПараметрыКонструктора.ВызватьСразу Тогда
				//ПО умолчанию, вызывается при попадании в обработчик, но можно отключить, тогда вызов будет через указанную периодичность по таймеру от момента подключения
				ОбъектОтложенногоДействия.СледующийВызовМС = ОбъектОтложенногоДействия.СледующийВызовМС + ОбъектОтложенногоДействия.ПериодичностьМС;
			КонецЕсли;
		Иначе
			ОбъектОтложенногоДействия.ПериодичностьМС = 100;//по-дефолту, сразу при срабатывании
		КонецЕсли;
		Если Не ПараметрыКонструктора.Свойство("ЧислоВызовов", ОбъектОтложенногоДействия.ЧислоВызовов) Тогда
			ОбъектОтложенногоДействия.ЧислоВызовов = 1;//Однократно, для бесконечного вызова - Неопределено
		КонецЕсли;
		ПараметрыКонструктора.Свойство("Аргумент", ОбъектОтложенногоДействия.Аргумент);
		
		Возврат ОбъектОтложенногоДействия;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.НовыйОтложенноеДействие");
	КонецПопытки;
КонецФункции

// Процедура - запускает отложенное действие на выполнение
//
// Параметры:
//  ОтложенноеДействие	 - Объект отложенное действие, которое надо запустить на выполнение 
//
&НаКлиенте
Процедура ПодключитьОтложенноеДействие(ОтложенноеДействие) Экспорт
	ОтложенныеОперации = ГлобальныйКэш.ТекущийСеанс.ОтложенныеОперации;
	ОтложенныеПроцедуры = ОтложенныеОперации.Процедуры;
	ОтложенныеПроцедуры.Вставить(ОтложенноеДействие.ИдДействия, ОтложенноеДействие);
	Если ОтложенныеОперации.Запущено Тогда
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		//Переключаем чтобы вызов произошёл сразу.
	КонецЕсли;	
	ГлавноеОкно.ПодключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур", 0.1, Истина);
	ОтложенныеОперации.Запущено = Истина;
КонецПроцедуры
	
// Процедура - убирает отложенное действие из списка выполняемых
//
// Параметры:
//  ПараметрыОтключения - Структура
//		ОтложенноеДействие	 - Условно-Обязательный, Объект отложенное действие, которое надо отключить. Либо передан ИдентификаторДействия 
//		ИдентификаторДействия- Условно-Обязательный, Строка, ид действия, которое надо отключить. Либо передано ОтложенноеДействие 
//
&НаКлиенте
Процедура ОтключитьОтложенноеДействие(ПараметрыОтключения) Экспорт
	Перем КлючОперации;
	Если ПараметрыОтключения.Свойство("ОтложенноеДействие") Тогда
		КлючОперации = ПараметрыОтключения.ОтложенноеДействие.ИдДействия;
	Иначе
		КлючОперации = ПараметрыОтключения.ИдентификаторДействия;
	КонецЕсли;
	
	ОтложенныеПроцедуры = ГлобальныйКэш.ТекущийСеанс.ОтложенныеОперации.Процедуры;
	Если ОтложенныеПроцедуры.Свойство(КлючОперации) Тогда
		ОтложенныеПроцедуры.Удалить(КлючОперации);
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_КлассЛокальныйКэш

// Класс - Кэш
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		АдресСервера		- Необязательный, Строка, адрес сервера настройки. Если не указано, то берётся первый доступный
//		МодульОбъектаКлиент	- Необязательный, Форма/МодульОбъекта. Если не указан, берётся текущий.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - пустой класс Кэш
//
&НаКлиенте
Функция НовыйЛокальныйКэш(ПараметрыКонструктора) Экспорт
	
	Кэш = Новый Структура("СБИС, ТекущийСеанс, Парам, ТихийРежим", НовыйКэшСБИС(ПараметрыКонструктора), НовыйТекущийСеанс(ПараметрыКонструктора), Новый Структура, Ложь);
	Если ПараметрыКонструктора.Свойство("ТихийРежим") Тогда
		Кэш.ТихийРежим = ПараметрыКонструктора.ТихийРежим;
	КонецЕсли;
	Возврат Кэш;
	
КонецФункции

//Устанавливает кэш обмена
&НаКлиенте
Функция	НовыйКэшСБИС(ПараметрыКонструктора) Экспорт
	Перем МодульОбъектаКлиент, СбисАдресСервера;
	Если Не ПараметрыКонструктора.Свойство("АдресСервера",			СбисАдресСервера) Тогда
		СбисАдресСервера = СписокДоступныхСерверовСБИС()[0].Значение;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("МодульОбъектаКлиент",	МодульОбъектаКлиент) Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			МодульОбъектаКлиент = ЭтотОбъект;
		#Иначе
			МодульОбъектаКлиент = ЭтаФорма; 
		#КонецЕсли
	КонецЕсли;
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	Если Сред(СбисПредставлениеСервера, 1, 4) = "fix-" Тогда
		КодСервиса = "fix";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 5) = "test-" Тогда
		КодСервиса = "test";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 6) = "online" Тогда
		КодСервиса = "";
	Иначе
		КодСервиса = "undefine";
	КонецЕсли;
	ПараметрыИнтеграцииСБИС = Новый Структура("ИдАккаунта, ИдПользователя, ИнтеграцияИмя, Пользователь, Демо");
	ПараметрыИнтеграцииСБИС.Вставить("Версия",				"");
	ПараметрыИнтеграцииСБИС.Вставить("РезервныйДомен",		Ложь);
	ПараметрыИнтеграцииСБИС.Вставить("ПредставлениеСервера",СбисПредставлениеСервера);
	ПараметрыИнтеграцииСБИС.Вставить("КодСервиса",			КодСервиса);
	ПараметрыИнтеграцииСБИС.Вставить("ГенераторФЭД",		Ложь);
	
	ДанныеВозврата = Новый	Структура;
	ДанныеВозврата.Вставить("Ини",					Новый Структура);
	ДанныеВозврата.Вставить("ДанныеИнтеграции",		Новый Структура);
	ДанныеВозврата.Вставить("ПараметрыИнтеграции",	ПараметрыИнтеграцииСБИС);
	ДанныеВозврата.Вставить("ОбменВключен",			Ложь);
	ДанныеВозврата.Вставить("Авторизован",			Ложь);
	ДанныеВозврата.Вставить("АдресСервера",			сбисАдресСервера);
	ДанныеВозврата.Вставить("МодульОбъектаКлиент",	МодульОбъектаКлиент);
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция НовыйТекущийСеанс(ПараметрыКонструктора)
	
	КэшТекущегоСеанса = Новый Структура("Формы, Модули, Функции, РасчитанныеЗначения, Интерфейс, ОтложенныеОперации", Новый Структура("Получены", Новый Структура), Новый Структура("Интеграция, ФункцииДокументов"), Новый Структура, Новый Структура, Новый Структура, Новый Структура("Запущено, Процедуры, МаксимальныйПериод, СообщатьПриОшибке, ПоследнийВызовМС, СообщатьОбОшибках", Ложь, Новый Структура, 600, Истина));
	КэшТекущегоСеанса.Вставить("Параметры", Новый Структура("Идентификатор", Строка(Новый УникальныйИдентификатор)));
	КэшТекущегоСеанса.Формы.Вставить("Клиентские",	Новый СписокЗначений);
	КэшТекущегоСеанса.Формы.Вставить("Стандартные",	Новый СписокЗначений);
	КэшТекущегоСеанса.Интерфейс.Вставить("Блокировки",	Новый Соответствие);
	Возврат КэшТекущегоСеанса;
	
КонецФункции

&НаКлиенте
Функция СписокДоступныхСерверовСБИС() Экспорт
	СписокДоступныхСерверов = Новый СписокЗначений;
	СписокДоступныхСерверов.Добавить("https://online.sbis.ru/", "online.sbis.ru");
	СписокДоступныхСерверов.Добавить("https://fix-online.sbis.ru/", "fix-online.sbis.ru");
	Если Не ГлобальныйКэш = Неопределено Тогда
		Если ГлобальныйКэш.Парам.РежимОтладки Тогда
			СписокДоступныхСерверов.Добавить("https://test-online.sbis.ru/", "test-online.sbis.ru");
		КонецЕсли;
		Если ГлобальныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда//Допоним список резервными доменами
			СписокДоступныхСерверов.Вставить(1, "https://online.saby.ru/", "online.saby.ru");
			СписокДоступныхСерверов.Добавить("https://fix-online.saby.ru/", "fix-online.saby.ru");
		КонецЕсли;
	КонецЕсли;
	Возврат СписокДоступныхСерверов;
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецОбласти