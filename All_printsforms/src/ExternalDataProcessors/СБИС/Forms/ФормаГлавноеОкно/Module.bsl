
&НаКлиенте
Перем Кэш Экспорт;

#Область include_local_ФормаГлавноеОкно

&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Если Кэш = Неопределено Тогда
		Возврат СбисПолучитьФорму("МодульОбъектаКлиент");
	КонецЕсли;
	Возврат Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьДокументы(Команда)
	// Процедура вызывает форму сопоставления документов	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
		Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
		//закомментировано, т.к. теперь сопоставление идет по вложениям
		//ИначеЕсли СписокОтмеченныхДокументов.Количество()=1 Тогда	 
		//	фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументом1С");
		//	Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	//Если Обновить=Истина Тогда
	//	ОбновитьКонтент();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументы",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументы(1, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыбранныеДокументы(Ответ, СбисДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПросуммироватьВыделенные(Кнопка)
	// Процедура считает суммы документов сбис и сопоставленных им документов 1С	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СуммыПоВложениям = Новый Структура;
	Суммы1С = Новый Структура;
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		Для Каждого Строка Из СписокОтмеченныхДокументов Цикл
			СоставПакета = Строка.Значение.СоставПакета[0].Значение;
			Если СоставПакета.Свойство("Вложение") Тогда
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
						Если ЗначениеЗаполнено(Вложение.Тип) Тогда
							Если Не СуммыПоВложениям.Свойство(Вложение.Тип) Тогда
								Название = Лев(Вложение.Название, Найти(Вложение.Название,"№")-2);
								Если Не ЗначениеЗаполнено(Название) Тогда
									Название = Вложение.Тип;	
								КонецЕсли;
								СуммыПоВложениям.Вставить(Вложение.Тип, Новый Структура("Название,Сумма",Название,0));
							КонецЕсли;
							Попытка
								Сумма = Число(Вложение.Сумма);
							Исключение
								Сумма=0;
							КонецПопытки;
							СуммыПоВложениям[Вложение.Тип].Сумма = СуммыПоВложениям[Вложение.Тип].Сумма+Сумма;
							Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда
								ИниЗагрузки = Кэш.ОбщиеФункции.сбисИниЗагрузкиПоДокументу1С(Кэш, Вложение.Документы1С[0].Значение);
								ИмяРеквизитаСуммы = Кэш.ОбщиеФункции.сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки);
								ЗаполнитьСуммыДокументов1С(Суммы1С, Вложение.Документы1С[0].Значение, ИмяРеквизитаСуммы);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	ТекстСообщения = "Сумма документов СБИС:"+Символы.ПС;
	Для Каждого Элемент Из СуммыПоВложениям Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	ТекстСообщения = ТекстСообщения + "   "+Символы.ПС+"Сумма документов 1С:"+Символы.ПС;
	Для Каждого Элемент Из Суммы1С Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	Сообщить(ТекстСообщения);	
	//СуммаДокументовСБИС = 0;
	//СуммаДокументов1С   = 0;
	//СуммаДельта         = 0;
	//СписокДокументов = ТаблДокПолучитьВыбранныеСтроки();
	//Для Каждого СтрокаДокумента из СписокДокументов Цикл 
	//		СуммаДокументовСБИС = СуммаДокументовСБИС + СтрокаДокумента.Значение.Сумма; 
	//	Попытка
	//		СуммаДокументов1С   = СуммаДокументов1С+СтрокаДокумента.Значение.Документ1С.СуммаДокумента;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;	
	//СуммаДельта = СуммаДокументовСБИС - СуммаДокументов1С;
	//СуммаДельта = ?(СуммаДельта<0,-СуммаДельта,СуммаДельта); 
	//Предупреждение("Сумма документов СБИС: "+строка(СуммаДокументовСБИС)+Символы.ПС+"Сумма документов 1С: "+строка(СуммаДокументов1С)+Символы.ПС+"Отклонение: "+строка(СуммаДельта));
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

////////////////////// Управляемое приложение/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Аккордеон = Новый Структура();
КонецПроцедуры //ПриСозданииНаСервере()
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьРеквизитОбъектаДокумента();
	ЭтаФорма.ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(Знач СтруктураДляОбновленияФормы)
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма.РеквизитФормыВЗначение(Элемент.Ключ)) = Тип("ТаблицаЗначений") Тогда
				ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				ЭтаФорма[Элемент.Ключ].Загрузить(ТаблицаДанных);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрУстановить(Команда)
	сбисПослеУстановкиФильтра(Истина, Неопределено);
КонецПроцедуры

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Аккордеон

&НаКлиенте
Функция УстановитьИконкиРазделов(Раздел) 
	Если Раздел = "АккордеонПолученные11" Тогда
		Возврат "Inbox";
	ИначеЕсли Раздел = "АккордеонОтправленные22" Тогда
		Возврат "Outbox";
	ИначеЕсли Раздел = "АккордеонПродажа33" Тогда
		Возврат "Selling";
	ИначеЕсли Раздел = "АккордеонПокупка44" Тогда
		Возврат "Purchase";
	ИначеЕсли Раздел = "АккордеонНастройки55" Тогда
		Возврат "Setting";
	ИначеЕсли Раздел = "АккордеонСправочники66" Тогда
		Возврат "Nomenclature";	
	ИначеЕсли Раздел = "АккордеонУчет77" Тогда
		Возврат "Accounting";
	ИначеЕсли Раздел = "АккордеонЗадачи88" Тогда
		Возврат "Deeds";
	ИначеЕсли Раздел = "АккордеонОтчетность99" Тогда
		Возврат "Ereport";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура  СформироватьСтруктуруАккордеона(Аккордеон, ДопПараметры = Неопределено) Экспорт
	
	Попытка
		ОтключитьВидимостьРазделаПоСпособуОбмена = Кэш.Интеграция.Аккордеон_ОтключенныеРазделы(); //видимость разделов
	Исключение
		ОтключитьВидимостьРазделаПоСпособуОбмена = Новый Структура();
	КонецПопытки;
	
	Если Кэш.Текущий.ТекущийРаздел = "5" Тогда                       //позиционирование на разделе
		ВыбранныйРаздел = "АккордеонНастройки55"; 
	ИначеЕсли СпособОбмена = 1 Тогда
		ВыбранныйРаздел =  "АккордеонПродажа33"; 
	Иначе
		ВыбранныйРаздел = СбисПолучитьИмяКнопкиПоРазделу(Кэш.Парам.РазделПоУмолчанию);
	КонецЕсли;
	
	СтруктураАккордеона = "{""accordion"": [";
	Для Каждого КлючИЗначениеАккордеон Из Аккордеон Цикл
		РежимОтключения = Неопределено;
		Если ОтключитьВидимостьРазделаПоСпособуОбмена.Свойство(КлючИЗначениеАккордеон.Ключ, РежимОтключения) Тогда
			Если РежимОтключения = "ВесьРаздел" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		Для Каждого ЭлементСтруктуры Из КлючИЗначениеАккордеон.Значение Цикл
			Если РежимОтключения = Неопределено Или (ЭлементСтруктуры.Значение.level = 1 И РежимОтключения = "ТолькоПодразделы") Тогда
				СтруктураАккордеона = СтруктураАккордеона + Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЭлементСтруктуры.Значение) + ",";
            КонецЕсли;
		КонецЦикла;	 
	КонецЦикла;	
	СтруктураАккордеона=СтруктураАккордеона+"]";
	СтруктураАккордеона=СтрЗаменить(СтруктураАккордеона, ",]", "]");
	СтруктураАккордеона=СтрЗаменить(СтруктураАккордеона, "boolparent", "parent@"); //символ "@" не может быть в ключе структуры
		
	СтруктураАккордеона = СтруктураАккордеона + ", ""selectedItem"":"""+ВыбранныйРаздел+"""";
	СтруктураАккордеона = СтруктураАккордеона + ", ""marginTop"":""26px""}";      //высота блока с птичкой
	
	ПредставлениеАккордеона = ПолучитьПредставлениеАккордеона(Кэш.СовместимостьМетодов.Аккордеон.Аккордеон83);
	сбисТекстHTML = СтрЗаменить(ПредставлениеАккордеона, "%accordion%", СтруктураАккордеона);
	сбисУстановитьHTML(сбисТекстHTML);	
	
КонецПроцедуры

&НаКлиенте
Процедура сбисУстановитьHTML(сбисТекстHTML)	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ПолучитьЭлементыФормы().ПолеHTMLдокумента.УстановитьТекст(сбисТекстHTML);
	#Иначе
		ПолеHTMLдокумента = сбисТекстHTML;
	#КонецЕсли
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеАккордеона(Аккордеон83)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработкаОбъект = ЭтотОбъект;
	#Иначе
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	#КонецЕсли
    Если Аккордеон83 Тогда
		Возврат ОбработкаОбъект.ПолучитьМакет("Аккордеон83").ПолучитьТекст();
	Иначе
		Возврат ОбработкаОбъект.ПолучитьМакет("Аккордеон82").ПолучитьТекст();
	КонецЕсли;
КонецФункции	
&НаКлиенте
Функция  СгенерироватьЭлементМеню(Идентификатор, ТекстовоеСодержимое) Экспорт
	СтруктураЭлемента = Новый Структура();
	СтруктураЭлемента.Вставить("id",Идентификатор);
	СтруктураЭлемента.Вставить("title",ТекстовоеСодержимое);
	СтруктураЭлемента.Вставить("icon", УстановитьИконкиРазделов(Идентификатор));
	СтруктураЭлемента.Вставить("level",1);
	СтруктураЭлемента.Вставить("boolparent",Истина);
	СтруктураЭлемента.Вставить("action",Истина);
	Родитель = Идентификатор;
	Возврат Новый Структура("СтруктураЭлемента, Родитель", СтруктураЭлемента, Родитель);
КонецФункции

&НаКлиенте
Функция  СгенерироватьКнопку(Идентификатор, ТекстовоеСодержимое, Родитель) Экспорт
	СтруктураЭлемента = Новый Структура();
	СтруктураЭлемента.Вставить("id",Идентификатор);
	СтруктураЭлемента.Вставить("title",ТекстовоеСодержимое);
	СтруктураЭлемента.Вставить("level",2);
	СтруктураЭлемента.Вставить("parent",Родитель);
	СтруктураЭлемента.Вставить("action",Истина);
	Возврат СтруктураЭлемента;
КонецФункции	

&НаКлиенте
Функция ПолучитьИнформациюОВерсииПользователя()
	СтатусВерсииПользователя = "";
	ВерсияПользователя = "";
	СтатусВерсии = 5; //IE не воспринимает "0", поэтому нулевой статус, когда версия актуальна, заменяю на "5"
	Если Кэш.ПараметрыСистемы.Обработка.Свойство("СтатусВерсии") Тогда
		СтатусВерсии = Кэш.ПараметрыСистемы.Обработка.СтатусВерсии;
		Если СтатусВерсии = 1 Тогда
			СтатусВерсииПользователя = "Доступно обновление";
		ИначеЕсли СтатусВерсии = 2 Тогда
			СтатусВерсииПользователя = "Версия устарела";
		ИначеЕсли СтатусВерсии = 3 Или СтатусВерсии = 4 Тогда
			СтатусВерсииПользователя = "Версия сильно устарела!";
		КонецЕсли;	
	КонецЕсли;

	Если Кэш.ПараметрыСистемы.Обработка.Свойство("Версия") Тогда
		ВерсияПользователя = "v. " + Кэш.ПараметрыСистемы.Обработка.Версия;
	КонецЕсли;	
    //обработать предложение перезапуска после обновления
	Возврат СтатусВерсииПользователя+";"+ВерсияПользователя+";"+Строка(СтатусВерсии);	
КонецФункции	
	
&НаКлиенте
Функция ПолучитьЭлементыФормы()	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ЭлементыФормы;
	#Иначе
		Возврат Элементы;
	#КонецЕсли	
КонецФункции

&НаКлиенте
Процедура ОбновитьАккордеон(ПараметрыОбновления, Кэш) Экспорт
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если ПараметрыОбновления.Свойство("ОбновитьИнформациюОВерсии") Тогда
		Попытка
			#Если ВебКлиент Тогда
				ЭлементыФормочки.ПолеHTMLдокумента.Документ.updateFooter(ПолучитьИнформациюОВерсииПользователя());
			#Иначе
				ЭлементыФормочки.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].updateFooter(ПолучитьИнформациюОВерсииПользователя());	
			#КонецЕсли
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОбработатьДействиеНаКлиенте(ИмяДействия, Параметры)
	ИДКнопки = Параметры;
	Если ИмяДействия = "ADDON_NAVIGATE" Тогда  //обработать выбор раздела аккордеона
		Попытка 
			Если ПустаяСтрока(ИДКнопки) Тогда
				//Возврат ;
			КонецЕсли;
			ПерейтиВРаздел(ИДКнопки);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаКлиент().СообщитьСбисИсключение(МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ГлавноеОкно.ОбработатьДействиеНаКлиенте."+ИмяДействия));
		КонецПопытки;		
	ИначеЕсли ИмяДействия = "ADDON_CLICK" Тогда
		Если ИДКнопки = "addon_status_version" Тогда   //не выводится диалог
			сбисПроверитьНаличиеОбновлений(Новый Структура("Режим, ТекстДиалога", 
			"Ручной",
			"Обновление <ВерсияНаСервере> готово к установке. Продолжить?"));
		ИначеЕсли ИДКнопки = "addon_version" Тогда //показать ФормаНовости
			ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
			ФормаНовости.Открыть();
			СтандартнаяОбработка = Ложь;	
		ИначеЕсли ИДКнопки = "addon_logo" Тогда //пока никак не обрабатывается	
		КонецЕсли;
	ИначеЕсли ИмяДействия = "ADDON_READSYSTEMINFO" Тогда
		Возврат ПолучитьИнформациюОВерсииПользователя(); 
	КонецЕсли;	
	Возврат Параметры;
КонецФункции

#КонецОбласти

#Область include_core_vo3_Аккордеон

&НаКлиенте
Процедура ПолеHTMLдокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементСобытия = ДанныеСобытия.srcElement;
	#Иначе
		ЭлементСобытия = ДанныеСобытия.Element;
	#КонецЕсли
	Если ЭлементСобытия["id"] = "toExtSys" Тогда
		Попытка
			ИмяДействия	= ЭлементСобытия.getAttribute("action");
			Параметр	= ЭлементСобытия.textContext; //Иногда можно брать из ЭлементСобытия.innerHTML;
			Результат = ОбработатьДействиеНаКлиенте(ИмяДействия, Параметр);
			ВернутьРезультат(Результат);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

 &НаКлиенте
Процедура ВернутьРезультат(Результат)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	#Если ВебКлиент Тогда
		ЭлементыФормочки.ПолеHTMLдокумента.Документ.domConnector.resolve(Результат);
	#Иначе
		ЭлементыФормочки.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].resolve(Результат);
	#КонецЕсли 			
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОшибку(Ошибка)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	#Если ВебКлиент Тогда
		ЭлементыФормочки.ПолеHTMLдокумента.Документ.domConnector.reject(Ошибка);
	#Иначе
		ЭлементыФормочки.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].domConnector.reject(Ошибка);
	#КонецЕсли 
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультат(Результат)
	Возврат EncodeXdtoXml(Результат);
КонецФункции

&НаКлиенте
Процедура ПолучитьРеквизитОбъектаДокумента()
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТипОбъектаДокумент = ТипЗнч(ЭлементыФормочки.ПолеHTMLдокумента.Документ);
	Если ТипОбъектаДокумент = Тип("COMОбъект") Тогда
		//IE
		РеквизитОбъектаДокумента = "parentWindow";
	ИначеЕсли ТипОбъектаДокумент = Тип("ВнешнийОбъект") Тогда
		//WebKit
		РеквизитОбъектаДокумента = "defaultView";
		//Иначе
		//	///Что-то пошло не так
		//	Отказ = Истина;
		//	Сообщить("Неизвестный тип документа: <"+Строка(ТипОД)+">");
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции
//Панель фильра
&НаКлиенте
Процедура ФильтрОткрытьПанельУстановки(Элемент)
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	Если Кэш.Заплатки<>Ложь Тогда
		Если Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок)<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		ИначеЕсли Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон")<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон",,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		Иначе
			ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
			ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
			ФормаФильтра.Открыть();
		КонецЕсли;
	Иначе
		ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
		ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
		ФормаФильтра.Открыть();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция сбисПослеУстановкиФильтра(Результат, Параметры) Экспорт
	Если Результат<>Неопределено Тогда
		ФильтрОбновитьПанель();	
		сбисСохранитьФильтрРаздела(Кэш);
		ОбновитьКонтент();
	КонецЕсли
КонецФункции
&НаКлиенте
Процедура ТекущееЗначениеФильтраНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФильтрОткрытьПанельУстановки("");
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОчистить(Элемент) Экспорт
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОбновитьПанель() Экспорт
	ТекущееЗначениеФильтра="";
	Если ФильтрПериод="За период" Тогда
		ТекущееЗначениеФильтра = ФильтрПериод+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	ИначеЕсли ФильтрПериод="За весь период" Тогда
		ТекущееЗначениеФильтра = "";
	Иначе
		ТекущееЗначениеФильтра = ФильтрПериод;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	если ЗначениеЗаполнено(ФильтрТипыДокументов) И (кэш.текущий.типДок="Отправленные" или кэш.текущий.типДок="Полученные") тогда // Фильтр заполнен и в этом разделе будет действовать
		списокТипДок="";
		для каждого типДок из ФильтрТипыДокументов цикл 
			списокТипДок=списокТипДок+типДок.представление+",";
		конеццикла;
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + лев(списокТипДок,СтрДлина (списокТипДок)-1);	
	конецесли;
	Если ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ФильтрСостояние;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаска) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрМаска);	
	КонецЕсли;	
	//Добавим дополнительные параметры фильтра для текущего раздела
	Если Не ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Возврат;
	КонецЕсли;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтраНет"];		
	иначе
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура сбисСохранитьФильтрРаздела(Кэш) Экспорт
	ТекущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	Если ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить(Кэш.Разделы["р"+Кэш.Текущий.Раздел], ТекущийФильтр);
	КонецЕсли;
КонецПроцедуры
// Навигация
&НаКлиенте
Процедура НавигацияПерваяСтраница(Команда)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПредыдущаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница-1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияСледующаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница+1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПоследняяСтраница(Команда)
	ФильтрСтраница = 0;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВсе()
	ОтметитьВсе = Не ОтметитьВсе;
	Для Каждого Строка Из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
&НаКлиенте
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Команда);
КонецПроцедуры
&НаКлиенте
Процедура УтвердитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Утвердить");
КонецПроцедуры
&НаКлиенте
Процедура ОтклонитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Отклонить");
КонецПроцедуры
&НаКлиенте
Функция ОбновитьКонтент() Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;	
		Кэш.ТаблДок.ТекущиеДанные.Свойство(РеквизитПоиска, ЗначениеПоиска);
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				НомерСтроки = Строка[0].ПолучитьИдентификатор(); 
				Кэш.ТаблДок.ТекущаяСтрока = НомерСтроки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СохранитьПакет(Элемент) 
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СписокПакетов = Новый массив;
	Для Каждого Элемент Из СписокОтмеченныхДокументов Цикл
		СписокПакетов.Добавить(Элемент.Значение.СоставПакета[0].Значение);
	КонецЦикла;
	Кэш.ОбщиеФункции.СохранитьПакетыНаДиск(Кэш, СписокПакетов);	
КонецПроцедуры
//&НаКлиенте
//Функция ДобавитьСбисДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
//	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
//	Для Каждого Элемент Из СписокДопЭлементов Цикл
//		Кэш.ПараметрыФильтра.Вставить(Элемент.Значение);
//	КонецЦикла;
//	
//КонецФункции

&НаКлиенте
Функция Печать(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("сбисПечатьПослеУстановкиРасширенияРаботыСФайлами",ЭтаФорма,ОбъектыНазначения));
		Иначе
			сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);   // alo Меркурий
		КонецЕсли;
	#Иначе
		сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);	// alo Меркурий
	#КонецЕсли
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// alo Меркурий
	ГлавноеОкно = ЭтаФорма;	
	
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	ЗаполнитьСписокФорм();
	ДополнительныеПараметрыКэша = Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна", "ПечатнаяФорма");
	КэшПодготовить(ДополнительныеПараметрыКэша);
	СбисПолучитьПарам();
	
	ВсеВключилось = ОпределитьИнтеграциюРабочиеФормы(Кэш,Кэш.Парам);
	Если Не ВсеВключилось Тогда//Не удалось включить интеграцию, либо форма хранения настроек недоступна
		Возврат Ложь;
	//ИначеЕсли Кэш.Парам.СпособОбмена = 1 Тогда
	//	Возврат Неопределено;//Для каталога авторизация не проводится
	КонецЕсли;	

	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если (Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьСертификат) или (НЕ Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьПароль) или Кэш.Парам.СпособОбмена = 1 Тогда
		УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
	КонецЕсли;
	// << alo Меркурий
	СбисДополнительныеПараметры  = Новый Структура("ИдентификаторКоманды, Документ",ИдентификаторКоманды, ОбъектыНазначения[0]);
	Если УспешнаяАвторизация = Истина Тогда
		сбисПечатьПослеАвторизации(Истина, СбисДополнительныеПараметры);
	Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПечатьПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
	// alo Меркурий >>
		формаАвторизации.Открыть();
	КонецЕсли;				
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеАвторизации(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя", Истина);
	Кэш.Текущий.Раздел = "3";
	Кэш.Текущий.ТипДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Параметры.Документ, "Имя");  // alo Меркурий
	Попытка
		Кэш.СБИС.МодульОбъектаКлиент.ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ИнфОбОшибке, "сбисПослеАвторизации")); 
	КонецПопытки;
	сбисПолучитьУстановитьНастройки(Кэш,Ложь);
	Если Не Кэш.КэшНастроек.ИниВПорядке Тогда
		Возврат Неопределено;
	КонецЕсли;
	Документ = Параметры.Документ;  // alo Меркурий
	//Для каждого Документ из ОбъектыНазначения Цикл
	ИмяДокумента = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
	
	//Получим настройки документа
	СписокИни = Новый СписокЗначений;
	Отказ = Ложь;
	сбисСтруктураРазделов = Кэш.ФормаНастроек.ПолучитьСтруктуруРазделов(Кэш,,Отказ);
	Для Каждого сбисРаздел Из сбисСтруктураРазделов Цикл
		Если сбисРаздел.Ключ = "БезРаздела" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого сбисПодРаздел Из сбисРаздел.Значение.Список Цикл
			Если Не	(	ЗначениеЗаполнено(сбисПодРаздел.Значение.Реестр1С_Тип)
				И	сбисПодРаздел.Значение.ЕстьЗапросРеестра
				И	сбисПодРаздел.Значение.Реестр1С_Тип = ИмяДокумента) Тогда
				Продолжить;
			КонецЕсли;
			ИмяИни = сбисПодРаздел.Значение.Реестр1С_Название;
			Если Не ЗначениеЗаполнено(ИмяИни) Тогда
				ИмяИни = ИмяДокумента;
			ИначеЕсли СписокИни.НайтиПоЗначению(сбисПодРаздел.Ключ) = Неопределено Тогда 
				СписокИни.Добавить(сбисПодРаздел.Ключ, ИмяИни);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СписокИни.Количество() = 0 тогда
		Если Кэш.ини.Свойство(ИмяДокумента) Тогда	
			СписокИни.Добавить(ИмяДокумента, ИмяДокумента);
		Иначе
			Сообщить("Выгрузка данного типа документов не поддерживается!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокИни.Количество() = 1 Тогда
	// << alo Меркурий
		сбисКомандаПослеВыбораИни(СписокИни[0].Значение, Параметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("сбисКомандаПослеВыбораИни", ЭтаФорма, Параметры);
		ОткрытьФорму(СбисПутьКФормамОбработки() + "Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокИни, "Выберите настройку для формирования документов"),,,,,Оповещение);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисКомандаПослеВыбораИни(Результат, Параметры) Экспорт
	Если Параметры.ИдентификаторКоманды = "sbis1cПогаситьВСД" Тогда
		сбисПогаситьВСД(Результат, Параметры.Документ);
	иначе 
		сбисПечатьПослеВыбораИни(Результат, Параметры);
	Конецесли;
КонецФункции 		// alo Меркурий >>
&НаКлиенте
Функция сбисПечатьПослеВыбораИни(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Документ = Параметры.Документ;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, Результат);
	Кэш.Текущий.ТипДок = Результат;
	
		
	//Подготовим фильтр для запроса документов
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить( "ФильтрДокумент", Документ); 		
	// << alo Меркурий 
	Контекст=новый структура("ини",Новый структура("Документ",новый структура("РассчитанноеЗначение", Документ)));
	РеквизитДата = "";
	РеквизитОтветственный = "";
	Для Каждого мФайл Из Ини.мФайл Цикл
		Если мФайл.Значение.Свойство("Документ_Дата") Тогда
			РеквизитДата = мФайл.Значение.Документ_Дата.Значение;
		КонецЕсли;
		Если мФайл.Значение.Свойство("Ответственный") Тогда
			РеквизитОтветственный = мФайл.Значение.Ответственный.Значение;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(РеквизитДата) Тогда
		ДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДата,Контекст);
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ДатаНач); 
	иначе
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ФильтрДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ФильтрДатаКнц); 
	КонецЕсли;
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");
	ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
	ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	Если ИниКонфигурация.Свойство("Ответственные") Тогда
		ИмяСправочника = СокрЛП(Сред(ИниКонфигурация.Ответственные.Значение, Найти(ИниКонфигурация.Ответственные.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Пользователи";
	КонецЕсли;
	ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ОписаниеТипа.ПривестиЗначение()); // alo Меркурий >>
	ПараметрыФильтра.Вставить( "ФильтрМаска", "");
	ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
	ПараметрыФильтра.Вставить( "Страница", 1 );
	ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	//Получим массив выгружаемых документов по запросу
	ТекстЗапроса = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", Ини, Кэш);
	
	МассивДокументов1С = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, КаталогНастроек);
	//Подготовим список документов
	СписокОтмеченныхДокументов = Новый СписокЗначений;
	Для каждого СтрокаТЗ из МассивДокументов1С Цикл
		СписокОтмеченныхДокументов.Добавить(СтрокаТЗ);
		ТекущаяСтрока = СтрокаТЗ;
		ТекущийРаздел = Ини.ДокументРаздел.Значение;
		//Откроем пакет документов
		ПозЗпт = Найти(ТекущийРаздел, ",");
		Если ПозЗпт>0 Тогда
			ТекущийРаздел = Лев(ТекущийРаздел, ПозЗпт-1);	
		КонецЕсли;
		фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+СтрЗаменить(ТекущийРаздел, "'", "")+"_Шаблон",, Кэш);
		//ГлавноеОкно.Кэш.ГлавноеОкно = ГлавноеОкно;
		фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
		
	КонецЦикла;	
		
		//Отправим документы			
		//фрм = ГлавноеОкно.сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон");
		//фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, СписокОтмеченныхДокументов);
		
		//КонецЦикла;
КонецФункции
// << alo Меркурий
&НаКлиенте
Функция сбисПогаситьВСД(ИмяИни, Документ)
	Кэш.Текущий.Раздел = "1";
	ПолучилосьАвтоматически = Ложь;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
	Если ЗначениеЗаполнено(Ини) И Ини.свойство("мФайл") И Ини.мФайл.свойство("АктРасхождение") Тогда
		РеквизитДатаВх = ?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, ""));
		РеквизитНомерВх = ?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, ""));
		Если ЗначениеЗаполнено(РеквизитДатаВх) ИЛИ ЗначениеЗаполнено(РеквизитНомерВх) Тогда
			ЗаписейНаСтранице = 2;
			ФильтрСтраница = 1;
			Контекст=новый структура("ини, Документ",Ини,Документ);
			
			Если Ини.Свойство("Контрагент_Роль") Тогда
				РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
				Если ЗначениеЗаполнено(РольКонтрагента) И Ини.мСторона.Свойство(РольКонтрагента) Тогда
					ФильтрКонтрагент = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольКонтрагента].Сторона.Значение,Контекст);
				КонецЕсли;
			КонецЕсли;
			
			РольОрганизации = ""; 
			Если Ини.Свойство("Организация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'","");
			ИначеЕсли Ини.Свойство("НашаОрганизация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.НашаОрганизация_Роль.Значение,"'","");
			КонецЕсли;
			Если ЗначениеЗаполнено(РольОрганизации) И Ини.мСторона.Свойство(РольОрганизации) Тогда
				ФильтрОрганизация = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольОрганизации].Сторона.Значение,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитДатаВх) Тогда
				ФильтрДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДатаВх,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитНомерВх) Тогда
				ФильтрМаска = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитНомерВх,Контекст);
			КонецЕсли;
				
			БазоваяИнтеграция = ?(Кэш.ИнтеграцияИмя = "ExtSDK2", Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK, Кэш.Интеграция);
	
			filter = БазоваяИнтеграция.ПолучитьФильтр(ЭтаФорма, Новый Структура("Тип", "ДокОтгрВх"));
			ПакетыСБИС = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно); 
			Если ЗначениеЗаполнено(ПакетыСБИС) И ПакетыСБИС.Таблица_РеестрДокументов.количество()=1 Тогда
				ПакетСБИС = ПакетыСБИС.Таблица_РеестрДокументов[0];
				фрм = сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения", ПакетСБИС.ИдСБИС,"");
				фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ, Кэш.Ини.Конфигурация, КаталогНастроек);
				
				ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПакетСБИС.ИдСБИС);
				
				фрм = сбисНайтиФормуФункции("СформироватьРасхождениеНажатие","ФормаПросмотрДокумента","", Кэш);
				фрм.МестныйКэш = Кэш;
				фрм.СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш);
				фрм.ЗаполнитьТаблицуДокументов(фрм.СоставПакета);
				фрм.СформироватьРасхождениеНажатие(неопределено);
				Если фрм.СоставПакета.Вложение.количество()>0 Тогда	
					Вложение = фрм.СоставПакета.Вложение[фрм.СоставПакета.Вложение.количество()-1];
					Если Вложение.Тип = "АктРасхождение" Тогда
						Кэш.Интеграция.СБИСЗаписатьВложения(Кэш, фрм.СоставПакета, Вложение);
						Сообщить("Обновлен документ "+фрм.СоставПакета.Название);
						ОткрытьДокументОнлайнПоПакету(фрм.СоставПакета, Кэш);
						ПолучилосьАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если не ПолучилосьАвтоматически Тогда    // открыть форму для ручной работы и инструкцию
		ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/vsd?tb=tab2");
		ПерейтиВРаздел("АккордеонДокОтгрВх11");
		Кэш.ГлавноеОкно.Открыть();
	КонецЕсли;
КонецФункции	// alo Меркурий >>

&НаКлиенте
Процедура ВерсияНажатие(Элемент, СтандартнаяОбработка)
	// Открывает хистори обработки.
	ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
	ФормаНовости.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Если Ини.Свойство("ЗапросСпискаЭлементов") Тогда
		ТекстЗапроса = СокрЛП(Ини.ЗапросСпискаЭлементов.Значение);
		Запрос = Новый Запрос(Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса)-2));
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	Дерево = РеквизитФормыВЗначение("Таблица_РеестрСправочников"); // заполняем Дерево 
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "Таблица_РеестрСправочников");
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = Элементы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	// Отмечает вложенные записи дерева значений при отметке группы (рекурсивно)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отмечен;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.ПолучитьЭлементы();
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	ОтметитьВсе = Не ОтметитьВсе;
	Потомки = Таблица_РеестрСправочников.ПолучитьЭлементы();
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// открывает карточку справочника
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

//Список клиентских форм формируется при подключении заплаток
&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиНаСервере(имяТаблицы, Знач ВидимыеКолонки, Ини) экспорт  // alo СтатусГос
	// Создание ТаблицыЗначений с описанием колонок
	ЭлементТаблица = Элементы[имяТаблицы];
		
	МассивРеквизитовФормы = Новый Массив;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Колонка.Элемент = ЭлементТаблица.ПодчиненныеЭлементы.Найти(имяТаблицы+Колонка.Имя);
		если ини.Свойство("Реестр1С_"+Колонка.Имя) Тогда
			Колонка.Ини = ини["Реестр1С_"+Колонка.Имя];
		КонецЕсли;
		Если Колонка.Элемент = Неопределено Тогда
			ОписаниеТипа = Неопределено;
			Если Колонка.Ини.Свойство("Тип") Тогда
				Если Колонка.Ини.Тип = "Строка" Тогда
		 			КвалификаторыСтроки = Новый КвалификаторыСтроки;
	    			ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
				Иначе
	    			ОписаниеТипа = Новый ОписаниеТипов(Колонка.Ини.Тип);	// например "СправочникСсылка.Сотрудники"
	 			КонецЕсли;
	 		КонецЕсли;
			Если ОписаниеТипа <> Неопределено Тогда
				МассивРеквизитовФормы.Добавить(Новый РеквизитФормы(Колонка.Имя, ОписаниеТипа, имяТаблицы));
			Иначе
				Сообщить("Необходимо описание типа поля "+Колонка.Имя);
			Конецесли;
		Конецесли;
    КонецЦикла;
    ИзменитьРеквизиты(МассивРеквизитовФормы);	    // Добавление в реквизитов колонок ТаблицыЗначений
		
	индекс = 0;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Если Колонка.Элемент = Неопределено Тогда
			СледующийЭлемент = Неопределено;
			Если индекс+1 < ВидимыеКолонки.Количество() Тогда
				СледующийЭлемент = ВидимыеКолонки[индекс+1].Элемент;
			КонецЕсли;
			Колонка.Элемент = Элементы.Вставить(имяТаблицы+Колонка.Имя, Тип("ПолеФормы"),ЭлементТаблица, СледующийЭлемент);
			Колонка.Элемент.Ширина = 10;//Колонка.Элемент.ШиринаЭлемента = 10;
		КонецЕсли;
		Колонка.Элемент.Видимость = Истина;
		Если Колонка.Ини.Свойство("Ширина") Тогда
			Попытка	// у существующих поле переключателей и картинок такого свойства нет
				Колонка.Элемент.Ширина = Колонка.Ини.Ширина;
			Исключение;
			КонецПопытки
		КонецЕсли;
		Если Колонка.Ини.Свойство("Заголовок") Тогда
			Колонка.Элемент.Заголовок = Колонка.Ини.Заголовок;
		КонецЕсли;
		Если Колонка.Ини.Свойство("Значение") И не ЗначениеЗаполнено(Колонка.Элемент.ПутьКДанным) Тогда
			Колонка.Элемент.ПутьКДанным = имяТаблицы+"."+Колонка.Ини.Значение;
		КонецЕсли;
		индекс = индекс +1;
	КонецЦикла;	
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура сбисПереключитьОтладку()
	Если РежимОтладки Тогда
		Кэш.Интеграция.ВключитьОтладку(Кэш, КаталогОтладки);
	Иначе
		Кэш.Интеграция.ОтключитьОтладку(Кэш);
	КонецЕсли;
	
	Кэш.Парам.РежимОтладки	= РежимОтладки;
	Кэш.Парам.КаталогОтладки= КаталогОтладки;
	сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021
КонецПроцедуры

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисВосстановитьФильтр(Кэш, СтруктураФильта) Экспорт
	ФильтрПериод = СтруктураФильта.ФильтрПериод;
	// если изменилась текущая дата, надо обновить период
	Если(ФильтрПериод="За сегодня") Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
	ИначеЕсли(ФильтрПериод = "За последний месяц") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-1);
	ИначеЕсли(ФильтрПериод = "За последние полгода") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-6);
	ИначеЕсли(ФильтрПериод = "За последний год") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-12);
	Иначе
		ФильтрДатаНач = СтруктураФильта.ФильтрДатаНач;
		ФильтрДатаКнц = СтруктураФильта.ФильтрДатаКнц;
	КонецЕсли;
	ФильтрСостояние = СтруктураФильта.ФильтрСостояние;
	ФильтрКонтрагент = СтруктураФильта.ФильтрКонтрагент;
	ФильтрКонтрагентПодключен = СтруктураФильта.ФильтрКонтрагентПодключен;
	ФильтрКонтрагентСФилиалами = ?(СтруктураФильта.Свойство("ФильтрКонтрагентСФилиалами"), СтруктураФильта.ФильтрКонтрагентСФилиалами, Ложь);
	ФильтрОрганизация = СтруктураФильта.ФильтрОрганизация;
	ФильтрСтраница = СтруктураФильта.ФильтрСтраница;
	ФильтрОтветственный = СтруктураФильта.ФильтрОтветственный;
	ФильтрТипыДокументов = СтруктураФильта.ФильтрТипыДокументов;
	ФильтрМаска = СтруктураФильта.ФильтрМаска;
	
	//Заполним дополнительные параметры фильтра
	Если СтруктураФильта.Свойство("ПараметрыФильтра") Тогда
		Для Каждого Элемент Из СтруктураФильта.ПараметрыФильтра Цикл
			Кэш.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ФильтрыПоРазделам = Настройки.Получить("ФильтрыПоРазделам");
	НастройкиКриптографии = Настройки.Получить("НастройкиКриптографии");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыТурбоРежим(Команда)
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументыТурбоРежим",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументыТурбоРежим(1, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПереключенияАккаунта();
КонецПроцедуры

&НаКлиенте
Функция СбисПутьКФормамОбработки() Экспорт
	Возврат Сред(ЭтаФорма.ИмяФормы, 1, СтрДлина(ЭтаФорма.ИмяФормы) - 16);
КонецФункции

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_ФункцииДляСовместимостиКода

// функции для совместимости кода 
&НаКлиенте
Функция СбисПолучитьФорму(СбисИмяФормы, Объект1С = Неопределено, ПараметрыФормы = Неопределено, СбисВладелецФормы = Неопределено) Экспорт
	Перем фрм;
	Если СбисВладелецФормы = Неопределено И СбисИмяФормы <> "ФормаГлавноеОкно" Тогда
		ВладелецФормыУстановить = ЭтаФорма;
	Иначе
		ВладелецФормыУстановить = СбисВладелецФормы;
	КонецЕсли;
	
#Область include_local_ФормаГлавноеОкно_СбисПолучитьФорму
		Если Объект1С = Неопределено Тогда
			ПолноеИмяФормы = СбисПутьКФормамОбработки() + СбисИмяФормы;
			БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".","_");
		Иначе
			ПолноеИмяФормы = Объект1С + СбисИмяФормы;
			БезопасноеИмяФормы = "ВФК_" + СтрЗаменить(ПолноеИмяФормы, ".","_");
		КонецЕсли;
		Если Кэш = Неопределено Тогда
			фрм = ПолучитьФорму(ПолноеИмяФормы, ПараметрыФормы, ВладелецФормыУстановить);
		ИначеЕсли Не Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, фрм) Тогда
			Попытка
				Если	(Кэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(СбисИмяФормы) <> Неопределено И Объект1С = Неопределено)
					Или	(Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(СбисИмяФормы) <> Неопределено И Объект1С <> Неопределено) Тогда
					фрм = ПолучитьФорму(ПолноеИмяФормы, ПараметрыФормы, ВладелецФормыУстановить);
				Иначе
					фрм = Ложь;
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				фрм = Ложь;
			КонецПопытки;			
			Кэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, фрм);
		//AU при передаче владельца, заполняем его в кэшированную форму.	
		ИначеЕсли Не фрм = Ложь Тогда
			фрм.ВладелецФормы = ВладелецФормыУстановить;
		КонецЕсли;
		Возврат фрм;
#КонецОбласти

КонецФункции

//На случай неоходимости вывода не на ГО, передаётся форма с элементом ПанельОжидания
&НаКлиенте
Процедура СбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение="") Экспорт
	Если Форма = Неопределено Тогда
		ФормаВывода = ЭтаФорма;
	Иначе
		ФормаВывода = Форма;
	КонецЕсли;
	Если ТипЗнч(ФормаВывода) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния, Индикатор);
	Иначе
		ФормаВывода.ЭлементыФормы.ПанельОжидания.Видимость	= Истина;
		ФормаВывода.НадписьОжидания		= Символы.ПС + ТекстСостояния;
		ФормаВывода.НадписьПояснение	= Пояснение;
		Если Индикатор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Форма.ЭлементыФормы.Индикатор.Видимость	= Истина;
		Форма.ЭлементыФормы.Индикатор.Значение	= Индикатор;
	КонецЕсли;	
КонецПроцедуры

//На случай неоходимости вывода не на ГО, передаётся форма с элементом ПанельОжидания
&НаКлиенте
Процедура СбисСпрятатьСостояние(Форма = Неопределено) Экспорт
	Если Форма = Неопределено Тогда
		ФормаВывода = ЭтаФорма;
	Иначе
		ФормаВывода = Форма;
	КонецЕсли;
	Если ТипЗнч(ФормаВывода) = Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	ФормаВывода.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
	ФормаВывода.ЭлементыФормы.Индикатор.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Функция сбисПолучитьЭлементыДерева(Элемент) Экспорт
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Возврат Элемент.ПолучитьЭлементы();
	КонецЕсли;
	Возврат Элемент.Строки;
КонецФункции
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Функция СбисПолучитьЭлементФормы(ОтЭлемента, ПутьКЭлементу) Экспорт
	ИмяЭлементаРазбивка = СтрЗаменить(ПутьКЭлементу, ".", Символы.ПС);
	Результат = ОтЭлемента;
	Для СчетчикРазбивки = 1 По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КлючПути = СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если	ТипЗнч(Результат) = Тип("Форма")
				Или	ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				Результат = Результат.ЭлементыФормы;
			ИначеЕсли	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				Результат = Результат["Колонки"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("Панель") Тогда
				Результат = Результат["Страницы"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("КоманднаяПанель")
					Или	ТипЗнч(Результат) = Тип("Кнопка") Тогда 
				Результат = Результат.Кнопки;
			КонецЕсли;
		#Иначе
			Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
				Результат = Результат.Элементы;
			Иначе
				Результат = Результат["ПодчиненныеЭлементы"];
			КонецЕсли;
		#КонецЕсли
		Если КлючПути = "Страницы" Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат.Найти(КлючПути);
	КонецЦикла;	
	Возврат Результат;
КонецФункции


#КонецОбласти

//------------------------------------------------------

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Сопоставление

// Сопоставление
&НаКлиенте
Функция ТаблДокПолучитьВыбранныеСтроки() Экспорт
	// Функция формирует список отмеченных строк таблицы с документами	
	СписокСтрок = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Если СтрокаТаблицы.Отмечен Тогда
			СписокСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если СписокСтрок.Количество()=0 и Кэш.ТаблДок.ТекущаяСтрока<>Неопределено Тогда
		СписокСтрок.Добавить(Кэш.ТаблДок.ТекущиеДанные);
	КонецЕсли;
	Возврат СписокСтрок;
КонецФункции
&НаКлиенте
Процедура УдалитьСопоставление(Команда)
	// Процедура удаляет сопоставление документов СБИС и 1С	
	СписокСтрок = ТаблДокПолучитьВыбранныеСтроки();
	
	//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 11 +
	МассивСтатусРегламент = Новый Массив;
	Если Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
	   И (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
	   И Кэш.Ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)

	Если СписокСтрок.Количество()>0 Тогда
		фрм = сбисНайтиФормуФункции("УдалитьПараметрыДокументаСБИСПарам",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус,ДокументСБИС_СтатусГос");	 // alo СтатусГос
		Для Каждого Строка из СписокСтрок Цикл
			
			
			Если Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
				Если МассивСтатусРегламент.Количество()>0 Тогда  // для разделов Продажа/Покупка мы не знаем для какого регламента удалить сопоставление 
					Сообщить("При ведении статусов документов в разрезе регламентов удаление сопоставления из разделов Продажа/Покупка недоступно. Удалите сопоставление вручную из дополнительных реквизитов документа 1С.");
					Возврат;
				КонецЕсли;
				Префикс = "";
				Для каждого Док1С из Строка.Значение.СоставПакета Цикл
					фрм.УдалитьПараметрыДокументаСБИСПарам(СтруктураСвойств, Док1С.Значение, Кэш.Ини, Кэш.Парам.ИдентификаторНастроек, Новый Структура("Регламент",Префикс));
				КонецЦикла;
			Иначе
				//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 12  +
				//в параметры выносной функции УдалитьПараметрыДокументаСБИС не передать регламент
				Префикс = "";
				Если Строка.Значение.СоставПакета.Количество() > 0 Тогда
					СоставПакета = Строка.Значение.СоставПакета[0].Значение;
					Если НРЕГ(СоставПакета.Направление) = "исходящий" 
						И СоставПакета.Свойство("Регламент") 
						И СоставПакета.Регламент.Свойство("Название") 
						И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
						Префикс = СоставПакета.Регламент.Название;	
					КонецЕсли;
				КонецЕсли;
				//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 
				
				Для каждого Вложение из Строка.Значение.Документы1С Цикл
					Если Вложение.Значение = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
										
					//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 13 +
					фрм.УдалитьПараметрыДокументаСБИСПарам(СтруктураСвойств, Вложение.Значение, Кэш.Ини, Кэш.Парам.ИдентификаторНастроек, Новый Структура("Регламент",Префикс));
					//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 

					Вложение.Значение = Неопределено;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ПараметрыСтатусовПриИзменении(Элемент)
	// Процедура записывает параметры запроса статусов. При следующем запросе статусов в фильтре будут указаны данные параметры	
	СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия);
	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Кэш.Парам.ИдентификаторНастроек);
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Отправка

// Отправка
&НаКлиенте
Процедура ОтправитьВыбранныеДокументыТурбоРежим(Ответ, СбисДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","ExtCom1C",, Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

Процедура ЗаполнитьСуммыДокументов1С(Суммы1С, Документ1С, ИмяРеквизитаСуммы)
	//Процедура заполняет суммы документов 1С в структуре по типам документов
	Тип = Документ1С.Метаданные().Имя;
	Название = Документ1с.Метаданные().Синоним;
	Если Не Суммы1С.Свойство(Тип) Тогда
		Суммы1С.Вставить(Тип, Новый Структура("Название,Сумма",Название,0));
	КонецЕсли;
	Попытка
		Сумма = Документ1С[ИмяРеквизитаСуммы];
	Исключение
		Сумма=0;
	КонецПопытки;
	Суммы1С[Тип].Сумма = Суммы1С[Тип].Сумма+Сумма;								
КонецПроцедуры
&НаКлиенте
&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	// Процедура запускает обработку служебных документов и получение статусов	
	Кэш.Интеграция.ОбработкаСлужебныхДокументов(Кэш);
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ТипДокумента = Кэш.Текущий.ТипДок;
	ДопПараметрыФильтра = Новый Структура;
	фрм = сбисНайтиФормуФункции("сбисПараметрыСписокИзменений","Раздел_"+ТекущийРаздел+"_"+ТипДокумента,"Раздел_"+ТекущийРаздел+"_Шаблон", Кэш);
	Если фрм <> ложь Тогда
		ДопПараметрыФильтра = фрм.сбисПараметрыСписокИзменений(Кэш);
	КонецЕсли;
	СбисОбновитьИзмененияПоДокументам(Новый Структура("ДополнительныеПараметрыФильтра", ДопПараметрыФильтра));
	//Кэш.Интеграция.ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра);
	ОбновитьКонтент();
	Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры

&НаКлиенте
Процедура СбисОбновитьИзмененияПоДокументам(ПараметрыОбновленияВходящие)
	РезультатДействия = МодульОбъектаКлиент().НовыйРезультатДействия(Новый Структура("Тип", "ОбновлениеСтатусов"), Новый Структура);
	
	ПараметрыОбработкиПрерывания = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, Аргумент", "ПрерываниеПользователемОбработкиСтатусов", ЭтаФорма, Кэш);
	
	ОбработчикЗавершения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисОбновитьИзмененияПоДокументам_ПоказатьРезультат", ЭтаФорма, Кэш); 
	//ОтложенноеДействие		= МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработчикПрерывания, РезультатДействия));
	//МодульОбъектаКлиент().ПодключитьОтложенноеДействие(ОтложенноеДействие);
	
	Попытка
		ПараметрыОбновленияНовые = Новый Структура("РезультатДействия, ДополнительныеПараметрыФильтра, ОбработкаПрерывания, ОбработчикЗавершения", РезультатДействия, ПараметрыОбновленияВходящие.ДополнительныеПараметрыФильтра, Истина, ОбработчикЗавершения);
		МодульОбъектаКлиент().ОбновитьИзмененияПоДокументамСбис(ПараметрыОбновленияНовые, Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().СообщитьСбисИсключение(МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ГлавноеОкно.СбисОбновитьСтатусы"));
	КонецПопытки;
	
	//МодульОбъектаКлиент().ОтключитьОтложенноеДействие(Новый Структура("ОтложенноеДействие", ОтложенноеДействие));
КонецПроцедуры	

// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
&НаКлиенте
Процедура СбисОбновитьИзмененияПоДокументам_ПоказатьРезультат(РезультатДействия, ЛокальныйКэш) Экспорт

	ЛокальныйКэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатДействия, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура сбисПереслатьДляОзнакомления(Кнопка)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисПолучитьФорму("ФормаПересылкаПакетов");
	фрм.Показать(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	// При изменении способа обмена (SDK, API, каталог)	"перезапускаем" обработку
	ПараметрыИнтеграции = Новый Структура("АдресСервера, СпособОбмена, СпособХраненияНастроек, ВремяОжиданияОтвета", Кэш.СБИС.АдресСервера);
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Кэш.Парам);
	ПараметрыИнтеграции.СпособОбмена = СпособОбмена;
	ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, , Ложь);
	ПараметрыПриИзменении(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога обмена	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог обмена документами"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогОбмена = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_ПеределаноДляСовместимости

////////////////////////////////////////////////////
//////////Переделано для совместимости ОФ УФ////////

&НаКлиенте
Функция СбисСписокСерверов(ЛокальныйКэш=Неопределено) Экспорт
	СписокДоступныхСерверов = Новый СписокЗначений;
	СписокДоступныхСерверов.Добавить("https://online.sbis.ru/", "online.sbis.ru");
	СписокДоступныхСерверов.Добавить("https://fix-online.sbis.ru/", "fix-online.sbis.ru");
	Если Не ЛокальныйКэш = Неопределено Тогда
		Если ЛокальныйКэш.Парам.РежимОтладки Тогда
			СписокДоступныхСерверов.Добавить("https://test-online.sbis.ru/", "test-online.sbis.ru");
		КонецЕсли;
		Если ЛокальныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда//Допоним список резервными доменами
			СписокДоступныхСерверов.Вставить(1, "https://online.saby.ru/", "online.saby.ru");
			СписокДоступныхСерверов.Добавить("https://fix-online.saby.ru/", "fix-online.saby.ru");
		КонецЕсли;
	КонецЕсли;
	Возврат СписокДоступныхСерверов;
КонецФункции

//Функция заполняет структуру с данными о текущем разделе
&НаКлиенте
Функция ОпределитьРаздел(Имя) Экспорт
	Текущий = Новый Структура();
	врДл = СтрДлина(Имя);
	идРаздел = Прав(Имя,2);
	ТекущийРаздел = Лев(идРаздел,1);
	Раздел = Прав(идРаздел,1);
	ТипДок = Сред(Имя,10,врДл-11);
	
	Текущий.Вставить("Имя", Имя);
	Текущий.Вставить("ТекущийРаздел", ТекущийРаздел);
	Текущий.Вставить("Раздел", Раздел);
	Текущий.Вставить("ТипДок", ТипДок);
	Текущий.Вставить("ПредыдущийРаздел", Неопределено);//Для отслеживания вложенности разделов. При не удачном переходе, возвращаемся по пути обратно
	
	Возврат Текущий;	
КонецФункции

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Функция ОткрытьДокументОнлайнПоПакету(Пакет, Кэш) Экспорт
	Ссылка = "";
	ОбработчикРезультата = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ОткрытьДокументОнлайнПоПакетуЗавершение", ЭтаФорма, Новый Структура("Кэш, Отказ", Кэш, Ложь)); 
	Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "8" или Кэш.Текущий.Раздел = "7" Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Новый Структура("Ссылка, Пакет", Пакет.СсылкаДляНашаОрганизация, Пакет), ОбработчикРезультата); 
	ИначеЕсли Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
		//UAA НоваяЛента
		
		ПараметрыПакетаСБИС = Кэш.ОбщиеФункции.ИдентификаторСБИСПоДокументу(Кэш, Пакет);	
		Кэш.СБИС.МодульОбъектаКлиент.КомандаОткрытьДокументОнлайн(Новый Структура("Пакет, ПараметрыПакетаСБИС", Пакет, ПараметрыПакетаСБИС), Новый Структура("Кэш, ОбработчикРезультата", Кэш, ОбработчикРезультата));			
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументОнлайнПоПакетуЗавершение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Сообщить(Результат);
		Возврат;
	ИначеЕсли ДопПараметры.Отказ Тогда
		СбисСообщитьОбОшибке(ДопПараметры.Кэш, Результат);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Результат.Ссылка) Тогда
		Сообщить("Не удалось получить ссылку на документ");
		Возврат;
	КонецЕсли;	
	
	Если	ДопПараметры.Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
		И	ДопПараметры.Кэш.Текущий.Раздел = "8" Тогда
		//Для ОФ временно не доступно
		Отказ = Ложь;
		фрм = СбисНайтиФормуФункцииОбработки(ДопПараметры.Кэш,"ПоказатьДокументОнлайн","ФормаHTML",Новый Структура,Отказ);
		Если Отказ Тогда
			СбисСообщитьОбОшибке(ДопПараметры.Кэш, фрм);
			Возврат;
		ИначеЕсли фрм = Ложь Тогда
			Сообщить("Не удалось получить форму просмотра документа");
			Возврат;
		КонецЕсли;
		фрм.ПоказатьДокументОнлайн(ДопПараметры.Кэш, Результат.Ссылка, Результат.Пакет);
	Иначе
		ЗапуститьПриложение(Результат.Ссылка);
	КонецЕсли;
КонецПроцедуры


//Процедура инициирует перезапуск главной формы.
//Флаги характеризуют глубину перезапуска.
//Флаг изменения интеграции означает, чтонеобходима повторная авторизация
//Флаг изменения формы настроек означает сброс собранных настроек для повторной обработки, переустановку параметров и проверку необходимости авторизации, если там что-то изменено.
&НаКлиенте
Процедура ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, ИзмененаИнтеграция=Истина,ИзмененаФормаНастроек=Истина)	Экспорт
		
	ПовторАвторизации = Ложь;
	СпособОбменаДо = Кэш.Парам.СпособОбмена;
	
	Если ИзмененаИнтеграция Тогда
		ПовторАвторизации = Истина;
		Если Кэш.Парам.СпособОбмена = 1 и Не ЗначениеЗаполнено(Кэш.Парам.КаталогОбмена) Тогда
			КаталогОбменаНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогОбмена"),"", Истина);
		КонецЕсли;
		СбисДополнительныеПараметры = Новый Структура("ВызыватьРекурсивно", Ложь);
		ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры);  
	Иначе//Интеграцию не меняли, однако могли быть изменены параметры обмена, настроек и сервера в сбисПараметрах. Проверить параметры и запустить авторизацию, если надо
		Если ИзмененаФормаНастроек Тогда
			ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);
		КонецЕсли;
		Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, Новый Структура("ВызыватьРекурсивно", Истина), ПовторАвторизации);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Кэш.Парам, ПараметрыИнтеграции);
	Если Не ИзмененаФормаНастроек Тогда
		ИзмененаФормаНастроек = (Не СпособХраненияНастроек = Кэш.Парам.СпособХраненияНастроек);
	КонецЕсли;
	//Если в процессе поменялось в параметрах, то отображаем и на Главном окне
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПовторныйЗапуск",			Истина);
	ПараметрыЗавершения.Вставить("ИзмененаФормаНастроек",	ИзмененаФормаНастроек);
	ПараметрыЗавершения.Вставить("РазделДо",				Кэш.Текущий.ТипДок);
	Если ПараметрыИнтеграции.СпособОбмена <> СпособОбменаДо Тогда 
		ПараметрыЗавершения.Вставить("ИзмененияОбмена", Новый Структура("СпособОбмена, СпособОбменаДо", ПараметрыИнтеграции.СпособОбмена, СпособОбменаДо));
	КонецЕсли;
	//Если Кэш.ТекущийСеанс.Свойство("ВыполненПереходНаExtSDK2") И Кэш.ТекущийСеанс.ВыполненПереходНаExtSDK2 = Истина Тогда
	//	ПараметрыЗавершения.ПовторныйЗапуск = Ложь;
	//	Кэш.ТекущийСеанс.Удалить("ВыполненПереходНаExtSDK2");
	//Иначе
	//	Кэш.ТекущийСеанс.Удалить("ПараметрыПереходаНаExtSDK2");		
	//КонецЕсли;
	
	Если ПовторАвторизации Тогда
		ПослеОткрытияАвторизация(ПараметрыЗавершения);
	Иначе
		Если ИзмененаФормаНастроек Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПослеОткрытияЗавершение(ПараметрыЗавершения);
	КонецЕсли;

	Если Не ИзмененаФормаНастроек Тогда
		Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
			ФормаАвторизации = СбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
			Если ФормаАвторизации.Открыта() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
		Если СтруктураНастроек.Свойство("ИспользоватьГенератор") Тогда
			Кэш.Парам.ИспользоватьГенератор = СтруктураНастроек.ИспользоватьГенератор; 
	        ИспользоватьГенератор = СтруктураНастроек.ИспользоватьГенератор; 
		КонецЕсли;
		Если СтруктураНастроек.Свойство("СпособОбмена") Тогда
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("СпособОбмена", СпособОбмена), Кэш.Парам.ИдентификаторНастроек);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПерейтиВРаздел(СбисИмяРаздела, ДопПараметры=Неопределено) Экспорт
	
	Если Не Кэш.Свойство("ОбщиеФункции") Тогда
		Сообщить("При запуске обработки произошла ошибка. Переход по разделам заблокирован");
		Возврат Ложь;
	КонецЕсли;
	Если ПустаяСтрока(СбисИмяРаздела) Тогда
		СбисИмяРаздела	= СбисПолучитьИмяКнопкиПоРазделу(Кэш.Парам.РазделПоУмолчанию);
	КонецЕсли;
	
	Выбор = сбисСтруктураВыбранногоРаздела(Кэш, СбисИмяРаздела);
	//Сохраняем последовательность переходов по разделам на случай, если при невозможности перехода понадобится вернуться.	
	Если Кэш.Текущий.Раздел = Выбор.Раздел Тогда
		Если Кэш.Разделы["р"+Кэш.Текущий.Раздел] = Кэш.Текущий.ТипДок Тогда//Текущий - основной раздел. Берем его как предыдущий
			Выбор.ПредыдущийРаздел = Кэш.Текущий;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на случай, если переход был между разделами и в предыдущем что-то осталось
		ИначеЕсли Не Кэш.Текущий.ПредыдущийРаздел = Неопределено Тогда//Переход был между подразделами. Взять предыдущий от текущего
			Выбор.ПредыдущийРаздел = Кэш.Текущий.ПредыдущийРаздел;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на всякий случай
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Кэш.Текущий.Раздел)
			И Не Кэш.Разделы["р"+Выбор.Раздел] = Выбор.ТипДок	Тогда
		Выбор.ПредыдущийРаздел = Новый Структура("Форма,ПредыдущийРаздел,Раздел,ТекущийРаздел,Имя,ТипДок");
		ЗаполнитьЗначенияСвойств(Выбор.ПредыдущийРаздел, Кэш.Текущий,,"ПредыдущийРаздел");//Чтобы не хранить всю историю, не берем предыдущий раздел от текущего.
	КонецЕсли;
	
	Если(Выбор.Форма=Ложь) Тогда //нет отдельной формы функции для этого раздела
		Возврат Ложь;
	КонецЕсли;
		
	Предыдущий = Кэш.Текущий;
	ПредыдущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	ФильтрСтраница = 1;
	Если Выбор.Раздел <> Кэш.Текущий.ТекущийРаздел Тогда //переходим в другую категрию
		СменаРаздела = Истина;
		Кэш.Текущий = Выбор;
		Кэш.Текущий.ТекущийРаздел = Кэш.Текущий.Раздел; //меняем текущий раздел
		Кэш.Текущий.Имя = "Аккордеон"+Кэш.Текущий.ТипДок+Кэш.Текущий.ТекущийРаздел+Кэш.Текущий.Раздел; //заменяем ссылку на текущий раздел
	иначе
		Кэш.Текущий = Выбор;
	КонецЕсли;
	// Для ЭТрН - при переходе по подразделу должен перерисовываться тулбар
	Выбор.Форма.НаСменуРаздела(Кэш);
	
	// Обновляем данные на форме главного окна
	Попытка
		СтруктураДляОбновленияФормы = Выбор.Форма.ОбновитьКонтент(Кэш);
		Если СтруктураДляОбновленияФормы = Ложь Тогда //если не смогли обновить таблицу - откатываем назад
			Если Предыдущий.Раздел = "" Тогда
				ПерейтиВРаздел("АккордеонПолученные11");
				Возврат Истина;
			Иначе
				Кэш.Текущий = Предыдущий;
				Кэш.Текущий.Форма.НаСменуРаздела(Кэш);
				сбисВосстановитьФильтр(Кэш, ПредыдущийФильтр);
				ФильтрОбновитьПанель();
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Выбор.Форма.НастроитьКолонки(Кэш);
			Выбор.Форма.НавигацияУстановитьПанель(Кэш);
			ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
			Если Выбор.ТипДок <> Кэш.Текущий.ТипДок Тогда //была переадресация
				Возврат Истина;		
			КонецЕсли
		КонецЕсли;			
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;		
	
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		// Прячем пользовательские параметры фильтра предыдущего раздела
		Если ЗначениеЗаполнено(Предыдущий.Раздел) Тогда
			НазваниеРазделаПред = Кэш.Разделы["р"+Предыдущий.Раздел];
			ФормаДопФильтраПред = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРазделаПред+"_"+Предыдущий.ТипДок,"Фильтр_Раздел_"+НазваниеРазделаПред+"_Шаблон", Кэш);
			Если ФормаДопФильтраПред<>ложь Тогда
				СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтраПред);	
			КонецЕсли;
		КонецЕсли;
		// Устанавливаем пользовательские параметры фильтра для текущего раздела
		НазваниеРаздела = Кэш.Разделы["р"+Выбор.Раздел];	
		ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
		Если ФормаДопФильтра<>ложь Тогда
			ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
		КонецЕсли;
	КонецЕсли;
	
	ФильтрОбновитьПанель();
	фрм = сбисНайтиФормуФункции("сбисОформлениеДопПолейРеестра","Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_"+Выбор.ТипДок,"Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_Шаблон", Кэш);
	Если фрм<>Ложь Тогда
		фрм.сбисОформлениеДопПолейРеестра(Кэш);
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Функция открывает окно диалога выбора папки
&НаКлиенте
Функция сбисВыбратьКаталог(лТекущийКаталог, Отказ=Ложь) Экспорт
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= лТекущийКаталог;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		Возврат Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент)
	Иначе
		Отказ = Истина;
		Возврат лТекущийКаталог;
	КонецЕсли;
КонецФункции

//Дописывает окончание к выбранному каталогу.
&НаКлиенте
Функция сбисФорматКаталога(лТекущийКаталог) Экспорт
	Возврат лТекущийКаталог + ?(Прав(лТекущийКаталог, 1) = "\", "", "\");	
КонецФункции

//Процедура завершает текущую сессию на онлайне и предлагает авторизоваться, в случае авторизации обновляет информацию на главном окне	
&НаКлиенте
Процедура сбисВыйти() Экспорт
	Попытка
		Кэш.СБИС.МодульОбъектаКлиент.СбисДействияПриВыходеИзАккаунта(Кэш);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, ИнформацияОбОшибке);
	КонецПопытки;
	
	Кэш.Интеграция.ЗакрытьСессию(Кэш);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	формаАвторизации		= сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = формаАвторизации.ОткрытьМодально();
		сбисПослеАвторизации(Результат, СбисДополнительныеПараметры);
	#Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
		формаАвторизации.Открыть();
	#КонецЕсли
КонецПроцедуры

// Процедура проверяет структуру настроек, обновляет данные на форме об установленных настройках, заполняет разделы Продажа и Покупка подразделами	
&НаКлиенте
Процедура СбисОбновитьИнформациюНастроекНаГлавномОкне(ЛокальныйКэш, УстановленныеИниФайлы=Неопределено, Отказ=Ложь) Экспорт

	Если ЛокальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Пользователь", Пользователь);
	СбисОбновитьЗаголовокФормы(ЛокальныйКэш.СБИС, ДопПараметры); 

КонецПроцедуры


&НаКлиенте
Процедура СбисОбновитьЗаголовокФормы(ОсновныеПараметрыФормы, ДопПараметры=Неопределено) 
	НовыйЗаголовок = ОсновныеПараметрыФормы.ПараметрыИнтеграции.ПредставлениеСервера;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") 
			И ДопПараметры.Свойство("Пользователь") 
			И ЗначениеЗаполнено(ДопПараметры.Пользователь) Тогда
		МассивФИО = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ДопПараметры.Пользователь, " ");
		Если МассивФИО.Количество() = 3 Тогда
			НовыйЗаголовок = НовыйЗаголовок + " (" + МассивФИО[0] + " " + Лев(МассивФИО[1], 1) + "." + Лев(МассивФИО[2], 1) + ".)";
		Иначе
			НовыйЗаголовок = НовыйЗаголовок + " (" + ДопПараметры.Пользователь + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновныеПараметрыФормы.ПараметрыИнтеграции.Демо) Тогда
		Если ОсновныеПараметрыФормы.ПараметрыИнтеграции.Демо > ТекущаяДата() Тогда
			НовыйЗаголовок = НовыйЗаголовок + " (Демо-версия)";
		Иначе
			НовыйЗаголовок = НовыйЗаголовок + " (Пробный период истек)";
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.Заголовок = НовыйЗаголовок;
КонецПроцедуры

//Проверяет, что строка является каталогом и открывает его в проводнике
&НаКлиенте
Процедура сбисОткрытьКаталог(ВыбранныйКаталог) Экспорт
	Попытка
		Файл = Новый Файл(ВыбранныйКаталог);
		Если Файл.ЭтоКаталог() Тогда
			ЗапуститьПриложение(ВыбранныйКаталог);
		Иначе
			Сообщить("Неверно указан путь к каталогу настроек.");
		КонецЕсли;
	Исключение
		Сообщить("Не удалось открыть каталог настроек.");
	КонецПопытки;
КонецПроцедуры

//Процедура вызывает очистку сохраненного кэша настроек ини
&НаКлиенте
Процедура сбисОчиститьКэшНастроек() Экспорт 
	Кэш.ФормаНастроек.сбисОчиститьКэшНастроек(Кэш);
КонецПроцедуры

// Функция возвращает название раздела в аккордеоне по красивому названию.
&НаКлиенте
Функция СбисПолучитьИмяКнопкиПоРазделу(РазделТест) Экспорт
	
	Если РазделТест = "Полученные" Тогда
		Возврат "АккордеонПолученные11";
	ИначеЕсли РазделТест = "Отправленные" Тогда
		Возврат "АккордеонОтправленные22";
	ИначеЕсли РазделТест = "Продажа" Тогда
		Возврат "АккордеонПродажа33";
	ИначеЕсли РазделТест = "Учет" Тогда
		Возврат "АккордеонУчет77";
	ИначеЕсли	РазделТест = "Задачи"
			И	Найти("34567", Строка(Кэш.Парам.СпособОбмена)) Тогда
		Возврат "АккордеонЗадачи88";
	Иначе
		Возврат "АккордеонПокупка44";
	КонецЕсли;
	
КонецФункции

//Не использовать! Использовать с формы работы с настройками общее
//Вызов получения и установки настроек
&НаКлиенте
Процедура СбисПолучитьУстановитьНастройки(ЛокальныйКэш, СказатьЧтоВсеХорошо, Отказ=Ложь) Экспорт
	Попытка
		Кэш.ФормаНастроекОбщее.СбисПолучитьИУстановитьНастройкиВКэш(Новый Структура("ПринудительнаяПроверка, ПродолжитьУстановку", СказатьЧтоВсеХорошо, Истина), Кэш)
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СбисОшибка = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке, "ФормаГлавноеОкно.СбисПолучитьУстановитьНастройки");
		СбисСообщитьОбОшибке(ЛокальныйКэш, СбисОшибка, Новый Структура("ФормаВладелец", ЭтаФорма));
	КонецПопытки;
КонецПроцедуры

//Формирует структуру раздела по его имени из аккордеона. Вынесено в отделную функцию для внешнего интерфейса.
&НаКлиенте
Функция сбисСтруктураВыбранногоРаздела(ЛокальныйКэш, ИмяВыбранногоРаздела) Экспорт
	Выбор = ОпределитьРаздел(ИмяВыбранногоРаздела);
	НазваниеРаздела = ЛокальныйКэш.Разделы["р"+Выбор.Раздел];
	фрм = сбисНайтиФормуФункции("ОбновитьКонтент","Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Раздел_"+НазваниеРаздела+"_Шаблон", ЛокальныйКэш);
	Выбор.Вставить("Форма", фрм);
	Возврат Выбор;
КонецФункции

&НаКлиенте
Процедура сбисПослеПросмотраНовости(Результат) Экспорт
	
	Если Результат = Неопределено ИЛИ Кэш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
	
		ПрочитаннаяНовость = Версия;
		Кэш.Парам.ПрочитаннаяНовость = Версия;

	Иначе

		ПрочитаннаяНовость = "2.45.0.1";
		Кэш.Парам.ПрочитаннаяНовость = "2.45.0.1";
	КонецЕсли;

КонецПроцедуры

//Функция меняет в указанной таблице колонки
&НаСервере
Процедура НастроитьКолонкиФормы(СтруктраДляОбновленияФормы) Экспорт
	Перем ДобавитьКолоноки, УдалитьКолонки;
	
	СтруктураПолей	= СтруктраДляОбновленияФормы.СтруктураПолей;
	
	Если СтруктураПолей.Свойство("КолонкиИзменить")	Тогда	
		КолонкиТаблицы	= ЭтаФорма;
		ПутьККолонкам	= СтрЗаменить(СтруктраДляОбновленияФормы.ПутьККолонкам, ".",	Символы.ПС);
		Для	шаг = 1 По СтрЧислоСтрок(ПутьККолонкам)	Цикл
			КолонкиТаблицы	= КолонкиТаблицы[СтрПолучитьСтроку(ПутьККолонкам,шаг)];
		КонецЦикла;
		Для	Каждого ДанныеКолонки Из СтруктураПолей.КолонкиИзменить	Цикл
			ИмяКолонки		= ДанныеКолонки.ПолноеИмяКолонки;
			КолонкаТаблицы	= КолонкиТаблицы.Найти(ИмяКолонки);                           
			Если	КолонкаТаблицы = Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			
			Для	Каждого	ПараметрРеактировать Из ДанныеКолонки.ПараметрыИзменить	Цикл
				Попытка
					КолонкаТаблицы[ПараметрРеактировать.Ключ]	= ПараметрРеактировать.Значение;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;                                                                         
	
	Если СтруктураПолей.Свойство("КолонкиДобавить", ДобавитьКолоноки) Тогда
		КвалификаторыСтроки = Новый КвалификаторыСтроки();
		ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
		      
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		// Добавление колонок таблицы значений
			ТЧ = РеквизитФормыВЗначение(СтруктраДляОбновленияФормы.ИмяТаблицы);
			ДобавляемыеРеквизиты = Новый Массив;
			НомерПоследнего = ДобавитьКолоноки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл
				Если ТЧ.Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
					НовРеквизит = Новый РеквизитФормы(ДобавитьКолоноки[Индекс], ОписаниеТипа, СтруктраДляОбновленияФормы.ИмяТаблицы, ДобавитьКолоноки[Индекс]);
					ДобавляемыеРеквизиты.Добавить(НовРеквизит);
				КонецЕсли;
			КонецЦикла;
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			Для Каждого Колонка Из ДобавитьКолоноки Цикл                                
				
				ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицы;
				Если СтруктраДляОбновленияФормы.Свойство("ИмяТаблицыФормы") Тогда
					ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицыФормы;
				КонецЕсли;
				
				НовПоле = Элементы.Найти(ИмяТаблицыФормы + Колонка);
				Если НовПоле = Неопределено Тогда
					НовПоле = Элементы.Добавить(ИмяТаблицыФормы + Колонка, Тип("ПолеФормы"), Элементы.Найти(ИмяТаблицыФормы));
					НовПоле.Вид = ВидПоляФормы.ПолеВвода;
					НовПоле.ПутьКДанным = СтруктраДляОбновленияФормы.ИмяТаблицы + "." + Колонка;
				КонецЕсли;
			КонецЦикла;
		#Иначе
			ДобавляемыеРеквизиты = Новый Массив;
			ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицы;
			Если СтруктраДляОбновленияФормы.Свойство("ИмяТаблицыФормы") Тогда
				ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицыФормы;
			КонецЕсли;			

			НомерПоследнего = ДобавитьКолоноки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл 
				Если ЭлементыФормы[ИмяТаблицыФормы].Значение.Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
					Если ЭлементыФормы[ИмяТаблицыФормы].Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
						Поле = ЭлементыФормы[ИмяТаблицыФормы].Колонки.Добавить(ДобавитьКолоноки[Индекс]);
					Иначе
						Поле = ЭлементыФормы[ИмяТаблицыФормы].Колонки.Найти(ДобавитьКолоноки[Индекс])
					КонецЕсли;
					ЭлементыФормы[ИмяТаблицыФормы].Значение.Колонки.Добавить(ДобавитьКолоноки[Индекс], ОписаниеТипа);
					Поле.Данные = ДобавитьКолоноки[Индекс];
				КонецЕсли;
			КонецЦикла;
			//Для Каждого Колонка Из ДобавитьКолоноки Цикл
			//КонецЦикла;
		#КонецЕсли
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("КолонкиУдалить", УдалитьКолонки) Тогда
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			Для Каждого Колонка Из УдалитьКолонки Цикл
				Поле = Элементы.Найти(СтруктраДляОбновленияФормы.ИмяТаблицы + Колонка);
				Если Поле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Элементы.Удалить(Поле);
			КонецЦикла; 
			
			ТЧ = РеквизитФормыВЗначение(СтруктраДляОбновленияФормы.ИмяТаблицы);	
			УдаляемыеРеквизиты = Новый Массив;
			НомерПоследнего = УдалитьКолонки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл
				Если ТЧ.Колонки.Найти(УдалитьКолонки[Индекс]) <> Неопределено Тогда
					УдаляемыеРеквизиты.Добавить(СтруктраДляОбновленияФормы.ИмяТаблицы + "." + УдалитьКолонки[Индекс]);
				КонецЕсли;
			КонецЦикла;
			ИзменитьРеквизиты(,УдаляемыеРеквизиты);
		#Иначе
			Для Каждого Колонка Из УдалитьКолонки Цикл	
				Поле = ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Значение.Колонки.Найти(Колонка);
				Если Поле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Значение.Колонки.Удалить(Поле);
				КолонкаТЧ = ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Колонки.Найти(Колонка);
				Если КолонкаТЧ <> Неопределено Тогда
					ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Колонки.Удалить(КолонкаТЧ);
				КонецЕсли;
			КонецЦикла;	
			УдаляемыеРеквизиты = Новый Массив;
			НомерПоследнего = УдалитьКолонки.ВГраница();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

/////работа с сохраняемыми значениями/////

//Выполняет запись текущих настроек обработки
//Возвращает истина при успехе, структуру ошибки при неудаче.
&НаКлиенте
Функция СбисСохранитьЗначения(ПараметрыЗаписи, Отказ = Ложь) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СохранитьЗначение("сбисПарам", ПараметрыЗаписи.Парам);
	#Иначе
		//Делаем через внешний интерфейс.
		Если ПараметрыЗаписи.ВыполнитьВручную Тогда
			Возврат СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ);
		//Если делаем вызов перед закрытием, то просто записываем в реквизиты и платформа делает сама стандартым механизмом.
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыЗаписи.Парам);
		КонецЕсли;
	#КонецЕсли
	Возврат Истина;
	
КонецФункции

//Выполняет дозапись указанных настроек в ручном режиме. Необходимо для работы ВИ, без открытия формы
&НаСервере
Функция СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ)
	Попытка
		СоответствиеНастроек = ХранилищеСистемныхНастроек.Загрузить(ЭтаФорма.ИмяФормы+"/ТекущиеДанные");
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка чтения из хранилища настроек: " + ОписаниеОшибки());
	КонецПопытки;
	Если СоответствиеНастроек = Неопределено Тогда
		СоответствиеНастроек = Новый Соответствие;
	КонецЕсли;
	Для Каждого КлючИЗначениеОбновить Из ПараметрыЗаписи.Парам Цикл
		СоответствиеНастроек.Вставить(КлючИЗначениеОбновить.Ключ, КлючИЗначениеОбновить.Значение);
	КонецЦикла;
	Попытка
		ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы+"/ТекущиеДанные",,СоответствиеНастроек);	
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка записи в хранилище настроек: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина
	
КонецФункции

/////Вывод списка/////

&НаКлиенте
Процедура сбисВывестиДанныеВТаблДок(Кнопка)
	
	фрм = сбисНайтиФормуФункции("сбисВывестиСписок","Форма_ВывестиСписок","Форма_ВывестиСписок",Кэш);	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		фрм.сбисВывестиСписок(Кэш, ВывестиСписокСфромироватьКонтекстНаСервере(Кэш.ТаблДок.Имя));
	Иначе
		фрм.сбисВывестиСписок(Кэш);
	КонецЕсли;
	
КонецПроцедуры

//УФ функция формирует контекст для вывода списка управляемых форм.
//&НаСервере
Функция ВывестиСписокСфромироватьКонтекстНаСервере(ТабличнаяЧасть)
	
	Контекст	= Новый	Структура();
	КолонкиНеДобавлять	= Новый	Массив;
	
	//На форме списка не выйдет обратиться к колонкам другой формы, поэтому данные по колонкам собираем заранее, на сервере в главном окне.
	Колонки			= ЭтаФорма.Элементы[ТабличнаяЧасть].ПодчиненныеЭлементы;
	
	СтруктураЗаголовков		= Новый	Структура("Видимые, Невидимые", Новый	Структура, Новый	Структура);
	Для	Каждого	Колонка	Из	Колонки	Цикл
		МногострочныйПуть	= СтрЗаменить(Колонка.ПутьКДанным,".",Символы.ПС);
		Если	Колонка.Видимость
			И	Колонка.Доступность	Тогда
			СтруктураЗаголовков.Видимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
		Иначе
			Если	Колонка.Доступность	Тогда
				СтруктураЗаголовков.Невидимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
			Иначе
				КолонкиНеДобавлять.Добавить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Проверим невидимые элементы
	ТабличнаяЧастьКолонкиВсе = ЭтаФорма.РеквизитФормыВЗначение(ТабличнаяЧасть, Тип("ТаблицаЗначений")).СкопироватьКолонки();
	Для	Каждого	Колонка	Из	ТабличнаяЧастьКолонкиВсе.Колонки	Цикл
		Если	СтруктураЗаголовков.Видимые.Свойство(Колонка.Имя)
			Или		СтруктураЗаголовков.Невидимые.Свойство(Колонка.Имя)
			Или	Не	КолонкиНеДобавлять.Найти(Колонка.Имя)=Неопределено Тогда
			Продолжить;
		Иначе
			СтруктураЗаголовков.Невидимые.Вставить(Колонка.Имя, Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	Если	Не	СтруктураЗаголовков.Видимые.Количество()
		И	Не	СтруктураЗаголовков.Невидимые.Количество()	Тогда
		СтруктураЗаголовков	= Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("СтруктураЗаголовков",	СтруктураЗаголовков);
	Контекст.Вставить("ТабличнаяЧасть",			ТабличнаяЧасть);
	Контекст.Вставить("Данные", ЗначениеВСтрокуВнутр(ЭтаФорма[ТабличнаяЧасть].Выгрузить()));
	
	Возврат	Контекст;
	
КонецФункции

/////Аккордеон/////

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_ОтложеныеПроцедуры

&НаКлиенте
Процедура СбисПроверитьПоследнююВерсию(ПараметрыПроверки, ЛокальныйКэш) Экспорт
	Попытка
		Отказ = Ложь;
		сбисВерсияНаСервере = Кэш.ОбщиеФункции.сбисПолучитьНомерВерсииОбработкиПоПараметрам(Кэш, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(сбисВерсияНаСервере, "ОбщиеФункции.сбисПолучитьНомерВерсииОбработкиПоПараметрам");
		КонецЕсли; 
    Исключение
        ИнфоОбОшибке = ИнформацияОбОшибке();
        Если Кэш.Парам.СпособОбмена = 1
                И Найти(ИнфоОбОшибке.Описание,"Ошибка работы с Интернет:  Couldn't resolve host name") > 0 Тогда
            Возврат; // Заглушка для интеграции каталог. Интернета у пользователя может не быть.
        КонецЕсли;
        МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисПроверитьПоследнююВерсию");
	КонецПопытки;
КонецПроцедуры

//Выполняет вызов проверки автообновления
&НаКлиенте
Процедура СбисПроверитьНаличиеОбновлений(ПараметрыПроверки, ДоПараметры=Неопределено) Экспорт
	Попытка
		Если ЗначениеЗаполнено(Кэш.Парам.ОжидаемаяВерсия) Тогда
			Возврат;
		КонецЕсли;
		сбисПоказатьСостояние("Проверка наличия обновлений", ЭтаФорма);
		Кэш.ОбщиеФункции.СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыПроверки);
		сбисСпрятатьСостояние(ЭтаФорма);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисПроверитьНаличиеОбновлений");
	КонецПопытки;

КонецПроцедуры

//Выполняет вызов проверки автообновления
&НаКлиенте
Процедура СбисПроверитьНовость(ПараметрыПроверки, ДопПараметры) Экспорт
	Попытка
		Если ПараметрыПроверки.ВерсияПрочитана  = ПараметрыПроверки.АктивнаяВерсия Тогда
			Возврат
		КонецЕсли;
		ФормаНовости = СбисПолучитьФорму("ФормаНовости");
		ФормаНовости.Открыть();
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисПроверитьНовость");
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_ЗапускУстановкаКэш

////////////////////////////////////////////////////
////////////////Запуск, установка кэш///////////////
////////////////////////////////////////////////////

// Процедура заполняет структуру Кэша	
&НаКлиенте
Функция КэшПодготовить(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	сбисПоказатьСостояние("Установка параметров", ЭтаФорма);
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Кэш = МодульОбъектаКлиент().НовыйЛокальныйКэш(СбисДополнительныеПараметры);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		сбисПарам = ВосстановитьЗначение("сбисПарам");
		Если ЗначениеЗаполнено(сбисПарам) Тогда//Параметры есть. Заполним предверсию на форме для определения параметров запуска.
			Кэш.Парам = сбисПарам;
			ПредВерсия = Кэш.Парам.ПредВерсия;
		КонецЕсли;
	#КонецЕсли
	
	СбисПараметрыСистемы = ПолучитьПараметрыСистемы(Отказ);
	Если Отказ Тогда
		Возврат СбисПараметрыСистемы;
	КонецЕсли;
	Кэш.Вставить("ПараметрыСистемы", СбисПараметрыСистемы);
	Версия = Кэш.ПараметрыСистемы.Обработка.Версия;
	Кэш.ТекущийСеанс.Формы.Стандартные = ЗаполнитьСписокФорм();
	
	СбисОбщиеФункции = СбисПолучитьФорму("РаботаСДокументами1С"); 
	Если СбисОбщиеФункции = Ложь Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 776, "Запуск программы/функции/метода не удался", "Не удалось определить модули для работы внешней обработки. Обратитесь в техническую поддержку.");
	КонецЕсли;
	СбисОбщиеФункции.МестныйКэш = Кэш;
	Кэш.ТекущийСеанс.Модули.ФункцииДокументов = СбисОбщиеФункции;
		
	ПутьКРеквзизитуКолонки = "{%ТЧ%}.";
	Если СбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ПутьКРеквзизитуКолонки = ПутьКРеквзизитуКолонки + "{%ТЧ%}";
	КонецЕсли;
	Кэш.ТекущийСеанс.Интерфейс.Вставить("ШаблонРеквизитаКолонок", ПутьКРеквзизитуКолонки);
	
	Кэш.Вставить("Заплатки", Ложь);
	Кэш.Вставить("ВИ", сбисПолучитьФорму("SDK2"));
	Кэш.Вставить("Плагин", Неопределено);//Делать через Кэш.Интеграция при включенном ExtSDK.
	Кэш.Вставить("Текущий",Новый Структура());
	Кэш.Текущий.Вставить("Раздел","");
	Кэш.Текущий.Вставить("ТекущийРаздел","");
	Кэш.Текущий.Вставить("Имя","");
	Кэш.Текущий.Вставить("ТипДок","");
	Кэш.Текущий.Вставить("ПредыдущийРаздел",Неопределено);
	
	Кэш.Вставить("ТаблДок","");
	Кэш.Вставить("ГлавноеОкно",ЭтаФорма);
	Кэш.Вставить("ФормаНастроекОбщее",	сбисПолучитьФорму("ФайлыНастроекОбщее"));
	Кэш.Вставить("ОбщиеФункции",		сбисОбщиеФункции);
	Кэш.Вставить("РаботаСJSON",			сбисПолучитьФорму("РаботаСJSON"));
	//Кэш.С1.Вставить("ДокументСБИС_Ид",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид"));
	//Кэш.С1.Вставить("ДокументСБИС_Статус",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус"));
	
	Кэш.Вставить("Разделы",Новый Структура());
	Кэш.Разделы.Вставить("р1","Полученные");
	Кэш.Разделы.Вставить("р2","Отправленные");
	Кэш.Разделы.Вставить("р3","Продажа");
	Кэш.Разделы.Вставить("р4","Покупка");
	Кэш.Разделы.Вставить("р5","Настройки");
	Кэш.Разделы.Вставить("р6","Справочники");
	Кэш.Разделы.Вставить("р7","Учет");
	Кэш.Разделы.Вставить("р8","Задачи");
	Кэш.Разделы.Вставить("р9","Отчетность");
	
	//%Отчетность%
	Кэш.Разделы.Вставить("Продажа",		Новый Структура());
	Кэш.Разделы.Вставить("Покупка",		Новый Структура());
	Кэш.Разделы.Вставить("Отчетность",	Новый Структура());
	Кэш.Разделы.Вставить("Справочники",	Новый Структура());
	Кэш.Вставить("МенюРазделов", Новый Структура());
	
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Кэш.Вставить("ПараметрыФильтра", Новый Структура);
	КонецЕсли;
	Кэш.Вставить("ТипыПолейФильтра", Новый Структура);
	Кэш.Вставить("ИспользоватьОбработчикиСобытий", Ложь);
	
	Кэш.Вставить("ини",Новый Структура());
	//Кэш.Вставить("Цвет",Новый Структура());
	//Кэш.Цвет.Вставить("АктивныйПункт",Новый Цвет(255,112,51));
	//Кэш.Цвет.Вставить("ФонАктивныйРаздел",Новый Цвет(247,243,240));
	//Кэш.Цвет.Вставить("ФонПассивныйРаздел",Новый Цвет(251,251,251));
	//Кэш.Цвет.Вставить("ТекстАктивныйРаздел",Новый Цвет(0,0,0));
	//Кэш.Цвет.Вставить("ТекстПассивныйРаздел",Новый Цвет(153,153,153));
	//Кэш.Цвет.Вставить("ФонОшибки",Новый Цвет(255,209,209));
	
	Кэш.Вставить("Реестры",Новый Структура());
	Кэш.Вставить("КэшЗначенийИни",Новый Структура());
	Кэш.Вставить("КэшСертификатов",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("ТекущийПакет",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("Организации",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("РеквизитСопоставленияНоменклатуры","");
	Кэш.КэшЗначенийИни.Вставить("ИниЗагрузки",Новый Структура);
	// Пользовательские фильтры
	Кэш.Вставить("ПараметрыФильтра", Новый Структура());
	Кэш.Вставить("ФормаРаботыСоСтатусами","Статусы_Регистры");
	// Дополнительные вложения, прикладываются к каждому отправляемому пакету
	Кэш.Вставить ("ДопВложение",Новый Массив);
	Кэш.Вставить("СписокНоменклатуры",Новый СписокЗначений);
	Кэш.Вставить("КоличествоВОтправке", 100);
	Кэш.Вставить("КоличествоПотоковОтправки", 10);
	Кэш.Вставить("ПодготовленныеКОтправке", Новый Массив);
	Кэш.Вставить("НеобработанныеОтветыОтправки", Новый Массив);
	//Кэш.Вставить("СБИС.ДанныеИнтеграции.Плагин.НеобработанныеОтветы", Новый Структура);
	Кэш.Вставить("КэшНастроек", Новый Структура);
	Кэш.Вставить("СовместимостьМетодов", сбисСовместимостьМетодов(Кэш));

	МодульОбъектаКлиент().УстановитьПараметрыГлобальногоМодуля(, Кэш);
	
	Если ЗначениеЗаполнено(СбисДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры Цикл
			Если КлючИЗначение.Ключ = "Парам" Тогда
				Продолжить;
			ИначеЕсли КлючИЗначение.Ключ = "РежимЗапускаГлавногоОкна" Тогда
				РежимЗапускаГлавногоОкна = КлючИЗначение.Значение;
				Продолжить;
			КонецЕсли;
			Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Кэш;
КонецФункции

//Устанавливает в Кэш формы для работы с настройками и методами работы с сервисом
&НаКлиенте
Функция ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры=Неопределено)	Экспорт
	
	#Если ВебКлиент Тогда
		// для веб ставим всегда АПИ
		ПараметрыИнтеграции.СпособОбмена = 3;
	#КонецЕсли
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВызыватьРекурсивно") Тогда
		СбисДополнительныеПараметры.Вставить("ВызыватьРекурсивно", Истина);
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВключатьОбмен") Тогда
		СбисДополнительныеПараметры.Вставить("ВключатьОбмен", Истина);
	КонецЕсли;
	
	//Переделал передачу параметров на структуру, чтобы нормально добавить адрес сервера и его дальнейшую передачу
	ПараметрыИнтеграции_До = Новый Структура("СпособОбмена, СпособХраненияНастроек, АдресСервера");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_До, ПараметрыИнтеграции);
	
	сбисПоказатьСостояние("Подключение SDK", ЭтаФорма);
	ОпределитьФормуИнтеграции(Кэш, ПараметрыИнтеграции.СпособОбмена);
	ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);	
	сбисОпределитьФормуРаботысЭП();
	
	ВключениеВыполнено = Ложь;
	Если СбисДополнительныеПараметры.ВызыватьРекурсивно Тогда
		Результат = Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш,ПараметрыИнтеграции,СбисДополнительныеПараметры,ВключениеВыполнено);
		Если ВключениеВыполнено Тогда//Если менялись параметры соединения, например, изменен в каталоге изменен адрес сервера, то включение уже выполнялось через рекурсивный вызов и повторно делать незачем
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить("ФормаОтправки", Кэш.Интеграция);
	
	Если Не Кэш.ТихийРежим//Включаем интеграцию сразу, только если не вызов извне и запуск не был отменен специально
		И	СбисДополнительныеПараметры.ВключатьОбмен Тогда
		Кэш.ФормаНастроек.сбисПодключитьЗаплатки(Кэш, Кэш.Парам);
		ОбменВключен = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("Включить", Кэш.ИнтеграцияИмя, "", Кэш).Включить(Кэш, ПараметрыИнтеграции);
		ВерсияИнтеграции= Кэш.СБИС.ПараметрыИнтеграции.Версия;
		Если Не ОбменВключен = Истина Тогда
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	//Дошли досюда, значит всё должно быть включено. Проверим, что в процессе включения ничего не поменялось 
	УспешноУстнановлено = Истина;
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_До Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		УспешноУстнановлено = Ложь;
		Прервать;
	КонецЦикла;
	сбисСпрятатьСостояние(ЭтаФорма);
	Возврат УспешноУстнановлено;	
	
КонецФункции

//Устанавливает в Кэш форму, в зависимости от установленного способа обмена
&НаКлиенте
Процедура ОпределитьФормуИнтеграции(ЛокальныйКэш,ВидОбмена) Экспорт
	// кладем в кэш форму интеграции в зависимости от способа обмена
	// удалить
	ЛокальныйКэш.Вставить("КоличествоВОтправке", 100);
	//
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		НадписьSDK = "ВерсияИнтеграции";
	Иначе
		НадписьSDK = "НадписьВерсияИнтеграции";
	КонецЕсли;
	ИнтеграцияЗаголовок = "";
	Если ВидОбмена=0 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2");
		ИнтеграцияЗаголовок = "SDK2";
	ИначеЕсли ВидОбмена=2 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2Шифрование"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2Шифрование");
		ИнтеграцияЗаголовок = "SDK2";
	ИначеЕсли ВидОбмена=3 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("API"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","API");
		ИнтеграцияЗаголовок = "API";
	ИначеЕсли ВидОбмена=1 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ИнтеграцияКаталог"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ИнтеграцияКаталог");
		ИнтеграцияЗаголовок = "Каталог";
	ИначеЕсли ВидОбмена=4 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK");
		ИнтеграцияЗаголовок = "ExtSDK";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=5 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDKCrypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDKCrypto");
		ИнтеграцияЗаголовок = "ExtSDKCrypto";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=6 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2";
	ИначеЕсли ВидОбмена=7 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2Crypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2Crypto");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2Crypto";
	КонецЕсли;
	Если Не ЛокальныйКэш.ТихийРежим Тогда
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Заголовок = ИнтеграцияЗаголовок;
	КонецЕсли;
	ЛокальныйКэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя = ЛокальныйКэш.ИнтеграцияИмя;
	ЛокальныйКэш.ТекущийСеанс.Модули.Интеграция			= ЛокальныйКэш.Интеграция;	
	
	ЛокальныйКэш.Вставить("ФормаОтправки", ЛокальныйКэш.Интеграция);
КонецПроцедуры

//Устанавливает в Кэш форму, в зависимости от выбранного способа хранения настроек
&НаКлиенте
Процедура ОпределитьФормуРаботыСНастройками(ЛокальныйКэш, ВидОбмена, ВидХраненияНастроек) Экспорт
	
	Если ВидХраненияНастроек = 1 Тогда
		Если ЛокальныйКэш.Интеграция.ДоступныСерверныеНастройки() Тогда
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекСервер"));
		Иначе
			ВидХраненияНастроек	= 0;
			//Сообщить("Не удалось включить получение настроек с сервера! Для указанного способа обмена отсутствует возможность!", СтатусСообщения.Информация);
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
		КонецЕсли;
	Иначе
		ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
	КонецЕсли;
	ЛокальныйКэш.ФормаНастроек.ПараметрыРаботы = Новый Структура;
	ЛокальныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ЛокальныйКэш);
	
КонецПроцедуры

// Начальное заполнение всех необходимых для работы объектов	
&НаКлиенте
Функция ПослеОткрытияЗаполнитьКэш(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	ПодключитьРасширениеРаботыСФайлами();
	РезультатПодготовки = КэшПодготовить(СбисДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;
	СбисОбновитьЗаголовокФормы(Кэш.СБИС, Новый Структура("Пользователь", Пользователь));
	СбисПолучитьПарам(СбисДополнительныеПараметры);
	ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	

	Возврат Кэш;
КонецФункции

// Начально заполнение всех необходимых для работы объектов	
&НаКлиенте
Процедура ПослеУстановитьРасширениеРаботыСФайлами(Результат=Неопределено) Экспорт
	ОтказЗапуска = Ложь;
	ДополнительныеПараметрыКэша = Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна", "Обычный");
	РезультатЗапуска = ПослеОткрытияЗаполнитьКэш(ДополнительныеПараметрыКэша,ОтказЗапуска);
	Если ОтказЗапуска Тогда
		сбисСообщитьОбОшибке(Кэш, РезультатЗапуска);
	Иначе
		//СбисПодготовитьРеестрДлительныхОпераций(); TODO раскомментировать, когда потребуется.
		ПослеОткрытияАвторизация();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияАвторизация(СбисДополнительныеПараметры=Неопределено) Экспорт
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Если Кэш.Парам.СпособОбмена = 1 Тогда//Для каталога пропускаем авторизацию.
		сбисПослеАвторизации(Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш), СбисДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Авторизация
	сбисПоказатьСостояние("Авторизация", ЭтаФорма);
	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат)
        Или (Не Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
		формаАвторизации.ЗагрузитьПараметрыАвторизации(Кэш);
		УспешнаяАвторизация = формаАвторизации.Авторизоваться();
	КонецЕсли;
	Если УспешнаяАвторизация = Истина Тогда
		сбисПослеАвторизации(УспешнаяАвторизация, СбисДополнительныеПараметры);
	Иначе
		Если Не формаАвторизации.Открыта() Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Результат = формаАвторизации.ОткрытьМодально();
				сбисПослеАвторизации(Результат,СбисДополнительныеПараметры);
			#Иначе
				формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
				формаАвторизации.Открыть();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура сбисПоследняяВерсия(Кэш)
	Отказ = Ложь;
	сбисВерсияНаСервере = Кэш.ОбщиеФункции.сбисПолучитьНомерВерсииОбработкиПоПараметрам(Кэш, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет сохраняемые параметры обработки	
&НаКлиенте
Процедура СбисПолучитьПарам(СбисДополнительныеПараметры=Неопределено) Экспорт
	ЗначПоУмолчанию = Новый Структура;
	ЗначПоУмолчанию.Вставить("Логин","");
	ЗначПоУмолчанию.Вставить("Пароль","");
	ЗначПоУмолчанию.Вставить("Сертификат","");
	ЗначПоУмолчанию.Вставить("ТипПрокси","Автоматически");
	ЗначПоУмолчанию.Вставить("ПроксиЛогин","");
	ЗначПоУмолчанию.Вставить("ПроксиПароль","");
	ЗначПоУмолчанию.Вставить("ПроксиПорт","");
	ЗначПоУмолчанию.Вставить("ПроксиСервер","");
	ЗначПоУмолчанию.Вставить("ЗапомнитьПароль",Ложь);
	ЗначПоУмолчанию.Вставить("ЗапомнитьСертификат",Ложь);
	ЗначПоУмолчанию.Вставить("ВходПоСертификату",Ложь);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице",50);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице1С",50);
	ЗначПоУмолчанию.Вставить("РежимСопоставления",1);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоСумме",0);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоНомеру","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоДате","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоКонтрагенту","По ИНН/КПП");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоОрганизации","Не использовать");
	ЗначПоУмолчанию.Вставить("СопоставлениеПериод","Дата документа");
	ЗначПоУмолчанию.Вставить("СопоставлятьПередЗагрузкой",Истина);
	ЗначПоУмолчанию.Вставить("УстанавливатьОбновленияАвтоматически",Истина);
	ЗначПоУмолчанию.Вставить("КаталогОтладки", "");
	//ЗначПоУмолчанию.Вставить("ОбновлятьСтатусы",Ложь);
	//ЗначПоУмолчанию.Вставить("ОбрабатыватьСлужебные",Ложь);
	ЗначПоУмолчанию.Вставить("ПредВерсия","");
	ЗначПоУмолчанию.Вставить("ОжидаемаяВерсия", "");
	//ЗначПоУмолчанию.Вставить("ДатаПоследнегоЗапросаСтатусов","");
	//ЗначПоУмолчанию.Вставить("ИдентификаторПоследнегоСобытия", "");
	ЗначПоУмолчанию.Вставить("ВариантВыгрузкиОтвПодр", 0);
	ЗначПоУмолчанию.Вставить("КолПакетовВОтправке", 0);
	ЗначПоУмолчанию.Вставить("КаталогНастроек","");
	ЗначПоУмолчанию.Вставить("ИдентификаторыНастроекВСБИС",Новый СписокЗначений);
	ЗначПоУмолчанию.Вставить("ИдентификаторНастроек","");
	ЗначПоУмолчанию.Вставить("СпособОбмена",6); //ExtSDK2
	ЗначПоУмолчанию.Вставить("СпособХраненияНастроек",0);
	ЗначПоУмолчанию.Вставить("КаталогОбмена","");
	ЗначПоУмолчанию.Вставить("УдалятьПрефиксИнформационнойБазы",Ложь);
	ЗначПоУмолчанию.Вставить("УдалятьПользовательскийПрефикс",Ложь);
	ЗначПоУмолчанию.Вставить("РазделПоУмолчанию","Полученные");
	ЗначПоУмолчанию.Вставить("ОтправлятьНоменклатуруСДокументами",Истина);
	ЗначПоУмолчанию.Вставить("ПересчитыватьЦеныПоДанным1С",0);
	ЗначПоУмолчанию.Вставить("ПересчитыватьНДСПоДанным1С",0);
	ЗначПоУмолчанию.Вставить("СпособЗагрузки",0); 
	ЗначПоУмолчанию.Вставить("ПерезаполнятьТолькоНепроведенные",Ложь);
	ЗначПоУмолчанию.Вставить("ИдентификаторСессии","");
	ЗначПоУмолчанию.Вставить("ПрочитаннаяНовость","");
	ЗначПоУмолчанию.Вставить("СостояниеЭД",Ложь);	// alo
	ЗначПоУмолчанию.Вставить("Меркурий",Ложь);	// alo Меркурий
	ЗначПоУмолчанию.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	ЗначПоУмолчанию.Вставить("ШифроватьВыборочно", Ложь);
	ЗначПоУмолчанию.Вставить("АдресСервера", СбисСписокСерверов()[0].Значение);
	ЗначПоУмолчанию.Вставить("НастройкиАвтообновление", Истина);
	ЗначПоУмолчанию.Вставить("ИнтеграцияAPIВызовыНаКлиенте", Ложь);
	ЗначПоУмолчанию.Вставить("СтатусыВГосСистеме", Ложь);
	ЗначПоУмолчанию.Вставить("ВремяОжиданияОтвета", 60);//Время ожидания ответа (для плагина)
	ЗначПоУмолчанию.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов", Ложь);
	ЗначПоУмолчанию.Вставить("РежимЗагрузки", 3); // Загружать только несопоставленные документы 1С
	ЗначПоУмолчанию.Вставить("СпособХраненияМетокСтатусов", 0); // Обновлять статусы в разрезе пользователя СБИС
	ЗначПоУмолчанию.Вставить("СоздаватьШтрихкодыНоменклатуры", Ложь);
	ФильтрыПоРазд = Новый Структура();
	ФильтрыПоРазд.Вставить("Полученные", Новый Структура);
	ФильтрыПоРазд.Вставить("Отправленные", Новый Структура);
	ФильтрыПоРазд.Вставить("Продажа", Новый Структура);
	ФильтрыПоРазд.Вставить("Покупка", Новый Структура);
	ФильтрыПоРазд.Вставить("Задачи", Новый Структура);
	ФильтрыПоРазд.Вставить("Учет", Новый Структура);
	ЗначПоУмолчанию.Вставить("ФильтрыПоРазделам", ФильтрыПоРазд);
	ЗначПоУмолчанию.Вставить("ИспользоватьГенератор", Истина); 
	ЗначПоУмолчанию.Вставить("ИспользоватьНовыйФорматАктаСверки", Ложь);  

	НастройкиКрипто = Новый Структура();
	НастройкиКрипто.Вставить("ИмяПрограммы", "");
	НастройкиКрипто.Вставить("ПутьКПрограмме", "");
	НастройкиКрипто.Вставить("ТипПрограммы", 0);
	НастройкиКрипто.Вставить("ПодписьНаСервере", Ложь);
	ЗначПоУмолчанию.Вставить("НастройкиКриптографии", НастройкиКрипто);
	
	//Если первый запуск происходит на серверной БД с Линуксом
	Если	ЗначениеЗаполнено(Кэш.ПараметрыСистемы)
		И	Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
		И	Кэш.ПараметрыСистемы.Сервер.ЭтоLinux Тогда
		ЗначПоУмолчанию.СпособХраненияНастроек = 1;
	КонецЕсли;
	Если ТипЗнч(Кэш.Парам) = Тип("Структура") Тогда
		Для Каждого Поле Из ЗначПоУмолчанию Цикл
			Если НЕ(Кэш.Парам.Свойство(Поле.Ключ)) Тогда
				#Если Не ТолстыйКлиентОбычноеПриложение Тогда
					Попытка 
						Если	ЗначениеЗаполнено(ЭтаФорма[Поле.Ключ])
							Или (	Не Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
								И		ТипЗнч(Поле.Значение) = Тип("Число")) Тогда
							Кэш.Парам.Вставить(Поле.Ключ,ЭтаФорма[Поле.Ключ]);
							Продолжить;
						КонецЕсли;
					Исключение
					КонецПопытки;
				#КонецЕсли
				Кэш.Парам.Вставить(Поле.Ключ,Поле.Значение);
				Попытка
					ЭтаФорма[Поле.Ключ] = Поле.Значение;
				Исключение
				КонецПопытки;
				Продолжить;
			Иначе
				Попытка
					ЭтаФорма[Поле.Ключ] = Кэш.Парам[Поле.Ключ];
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Кэш.Парам = ЗначПоУмолчанию;
	КонецЕсли;
	Если Кэш.Парам.ВремяОжиданияОтвета = 0 Тогда
		Кэш.Парам.ВремяОжиданияОтвета = ЗначПоУмолчанию["ВремяОжиданияОтвета"];
	КонецЕсли;
	Кэш.Парам.ИспользоватьГенератор = Кэш.Парам.ИспользоватьГенератор = Истина;
	//Отладка при запуске всегда ложь. 
	Кэш.Парам.Вставить("РежимОтладки", Ложь);
	Кэш.Парам.Вставить("ЧтениеНастроекПоТребованию", Истина);
	Кэш.Парам.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	Если Не	СбисДополнительныеПараметры = Неопределено
		И	СбисДополнительныеПараметры.Свойство("Парам") Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры.парам Цикл 
			Кэш.Парам.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск Тогда
		//При первом запуске, установить флаг автообновления ини
		Кэш.Парам.НастройкиАвтообновление = Истина;
		НастройкиАвтообновление = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция сбисПослеАвторизации(Результат, СбисДополнительныеПараметры) Экспорт

	ЕстьИзмененияАккаунта = Ложь;
	Если Результат = Неопределено Тогда
		//Если результат неопределен, то форма авторизации была просто закрыта.
		Кэш.Парам.ЗапомнитьПароль = Ложь;
		Кэш.Парам.ЗапомнитьСертификат = Ложь;
		МодульОбъектаКлиент().СбисЗавершитьРаботу();
		Возврат Неопределено;
	ИначеЕсли Результат = "" Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ИдСессии = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Результат.Свойство("АккаунтИзменился") Тогда
			ЕстьИзмененияАккаунта = Результат.АккаунтИзменился;
		КонецЕсли;
		Результат = Результат.ИдСессии;	 
	КонецЕсли;
			
	Пользователь_До	= Пользователь;
	Попытка
		Кэш.СБИС.МодульОбъектаКлиент.ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ИнфОбОшибке, "сбисПослеАвторизации")); 
	КонецПопытки;
	
	ДопПараметры = Новый Структура("Пользователь", Пользователь);
	СбисОбновитьЗаголовокФормы(Кэш.СБИС, ДопПараметры);
	
	ЕстьИзмененияОбмена			= Не (СпособОбмена			= Кэш.Парам.СпособОбмена);
	ЕстьИзмененияНастроек		= Не (СпособХраненияНастроек= Кэш.Парам.СпособХраненияНастроек);
	ЕстьИзмененияПользователя	= Не (Пользователь_До		= Пользователь) И Не Пользователь_До = "";
	
	Если ЕстьИзмененияОбмена Тогда
		ИзмененияОбмена = Новый Структура("СпособОбмена, СпособОбменаДо", Кэш.Парам.СпособОбмена, СпособОбмена);
		Если СбисДополнительныеПараметры = Неопределено Тогда
			СбисДополнительныеПараметры = Новый Структура();	
		КонецЕсли;
		Если СбисДополнительныеПараметры.Свойство("ИзмененияОбмена") Тогда
			СбисДополнительныеПараметры.ИзмененияОбмена = ИзмененияОбмена;	
		Иначе
			СбисДополнительныеПараметры.Вставить("ИзмененияОбмена", ИзмененияОбмена);	
		КонецЕсли;
	КонецЕсли;
	Если	СбисДополнительныеПараметры.Свойство("ИзмененаФормаНастроек")
		И	СбисДополнительныеПараметры.ИзмененаФормаНастроек Тогда
		ЕстьИзмененияНастроек = Истина;
	КонецЕсли;
	Если ЕстьИзмененияНастроек Тогда
		//был изменен способ хранения настроек. Нужно будет перечитать список доступных конфигураций, если соберёмся в раздел файлов.
		СбисДополнительныеПараметры.Вставить("ИзмененаФормаНастроек", Истина);
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзмененаФормаНастроек",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияПользователя Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияАккаунта Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеАккаунта",		Истина);
	КонецЕсли;

	СпособХраненияНастроек		= Кэш.Парам.СпособХраненияНастроек;
	СпособОбмена				= Кэш.Парам.СпособОбмена;
	КаталогОбмена				= Кэш.Парам.КаталогОбмена;
	ШифроватьВыборочно			= Кэш.Парам.ШифроватьВыборочно;
	КаталогНастроек				= Кэш.Парам.КаталогНастроек;
	ИнтеграцияAPIВызовыНаКлиенте= Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте;
	
	Если	ЕстьИзмененияНастроек
		Или	ЕстьИзмененияПользователя 
		Или ЕстьИзмененияАккаунта Тогда
		СбисДополнительныеПараметры.Вставить("ОбновитьКонтент", Истина);
	КонецЕсли;
	
	ПослеОткрытияЗавершение(СбисДополнительныеПараметры);
	
	Если Кэш.ТекущийСеанс.Свойство("ВыполненПереходНаExtSDK2") И Кэш.ТекущийСеанс.ВыполненПереходНаExtSDK2 = Истина Тогда
		//нужно перезапустить главное окно, но не здесь
		//т.к. форма авторизации не закрыта (закрывается)
		//перезапуск может вызвать повторную авторизацию
		Если Кэш.Парам.ЗапомнитьСертификат ИЛИ Кэш.Парам.ЗапомнитьПароль Тогда
			ПараметрыИнтеграции = Новый Структура("АдресСервера, СпособОбмена, СпособХраненияНастроек, ВремяОжиданияОтвета", Кэш.СБИС.АдресСервера);
			ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Кэш.Парам);
			Кэш.ГлавноеОкно.ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, , Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Устанавливает кэш обмена
&НаКлиенте
Функция	СформироватьСтруктуруКэшСБИС(СбисДополнительныеПараметры) Экспорт
	
	ДанныеВозврата = МодульОбъектаКлиент().НовыйКэшСБИС(СбисДополнительныеПараметры);
	ДопПараметры = Новый Структура("Пользователь", Пользователь);
	СбисОбновитьЗаголовокФормы(ДанныеВозврата, ДопПараметры);
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокФорм()
	СписокФорм = Новый СписокЗначений;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МетаданныеФорм = ЭтотОбъект.Метаданные().Формы;
	#Иначе
		МетаданныеФорм = РеквизитФормыВЗначение("Объект").Метаданные().Формы;
	#КонецЕсли	
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
КонецФункции

&НаКлиенте
Процедура СбисПодготовитьРеестрДлительныхОпераций()
	фрм = сбисПолучитьФорму("ФормаДлительныеОперации",,,ЭтаФорма);
	фрм.ПодготовитьРеестрКРаботе();		
КонецПроцедуры
#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Системное

////////////////////////////////////////////////////
//////////////////////Системное/////////////////////
////////////////////////////////////////////////////

//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме(Обработка,ИмяФормы,ИмяФункции, сбисВладелецФормы = Неопределено) Экспорт 
	Попытка
		Если ИмяФормы = "ФормаГлавноеОкно" Тогда // ToDo Костыль для корректной работы генерируемых кнопок на главном окне в случае открытия обработки из элемента справочника на УФ
			Возврат ЭтаФорма;	
		КонецЕсли;
		фрм = сбисПолучитьФорму(ИмяФормы, Обработка,,сбисВладелецФормы);
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Выполнить("фрм."+ИмяФункции+"();");
			#Иначе
				сбисТест = Вычислить("фрм."+ИмяФункции+"()");
			#КонецЕсли
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", Кэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык)+" ("+ИмяФункции+")") Тогда//функции нет
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	Исключение//форма не найдена
		Возврат Ложь;
	КонецПопытки;
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции	
&НаКлиенте
Функция сбисНайтиФормуФункции(сбисИмяФункции, сбисИмяОсновнойФормы, сбисИмяДополнительнойФормы="",ВходящийКэш="", сбисВладелецФормы = Неопределено) Экспорт
	Если Не ВходящийКэш = "" Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;	
	сбисБезопасноеИмяФункции = Кэш.ОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(сбисИмяФункции);
	//Проверим закэшированное значение
	фрм = Неопределено;
	Если Кэш.ТекущийСеанс.Функции.Свойство(сбисБезопасноеИмяФункции + "_" + сбисИмяОсновнойФормы, фрм) Тогда 
		Возврат фрм;
	КонецЕсли;	
	фрм = сбисНайтиФункциюНаФорме(сбисБезопасноеИмяФункции, сбисИмяОсновнойФормы, сбисВладелецФормы);
	Если	фрм = Ложь
		И	Не ПустаяСтрока(сбисИмяДополнительнойФормы) Тогда
		фрм = сбисНайтиФункциюНаФорме(сбисБезопасноеИмяФункции, сбисИмяДополнительнойФормы, сбисВладелецФормы);
	КонецЕсли;	
	//Закэшируем результат
	Кэш.ТекущийСеанс.Функции.Вставить(сбисБезопасноеИмяФункции + "_" + сбисИмяОсновнойФормы, фрм);	
	Возврат фрм;
КонецФункции

//Вынесен дублирующийся код
&НаКлиенте
Функция сбисНайтиФункциюНаФорме(сбисИмяФункции, сбисИмяФормы, сбисВладелецФормы = Неопределено)
	//Проверим в внешних функциях
	фрм = ?(Кэш.Заплатки = Ложь, Ложь, ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки, сбисИмяФормы, сбисИмяФункции, сбисВладелецФормы));
	Если фрм = Ложь Тогда//Проверим в обработке
		фрм = ПроверитьНаличиеФункцииВФорме(Неопределено, сбисИмяФормы, сбисИмяФункции, сбисВладелецФормы);
	КонецЕсли;	
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции. Работает на Фреш. Постепенно перевести получение форм на новые функции.
//Возможные параметры:
//	ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//  КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//	ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//	ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено. 
&НаКлиенте
Функция СбисНайтиФормуФункцииСеанса(ЛокальныйКэш, СбисИмяФункции, СбисОсновныеФормы, СбисДополнительныеПараметры, Отказ) Экспорт
	Результат = Ложь;
	//Проверим закэшированное значение
	Если Не СбисОсновныеФормы = Неопределено Тогда
		Если ТипЗнч(СбисОсновныеФормы) = Тип("Массив") Тогда
			Для Каждого СбисИмяФормы Из СбисОсновныеФормы Цикл
				Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
				Если Не Результат = Ложь Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисОсновныеФормы, СбисДополнительныеПараметры, Отказ);
		КонецЕсли;
	КонецЕсли;
	//В случае необходимости поиска по нескольким формам отдаем массивом строк
	Если СбисДополнительныеПараметры.Свойство("ВспомогательныеФормы") Тогда
		Для Каждого СбисВспомогательнаяФорма Из СбисДополнительныеПараметры.ВспомогательныеФормы Цикл
			Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисВспомогательнаяФорма, СбисДополнительныеПараметры, Отказ);
			Если Результат = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

//Делает проверку функции на указанной форме с учетом заплаток и возможностью получения либо только в ВФК, или только на в основном коде.	
&НаКлиенте
Функция СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	Результат = Ложь;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВФК")
			Или		СбисДополнительныеПараметры.ПроверятьВФК)
		И	Не ЛокальныйКэш.Заплатки = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Объект1С, Ключ", ЛокальныйКэш.Заплатки, "ВФК"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВО")
			Или		СбисДополнительныеПараметры.ПроверятьВО)
		И	Результат = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Ключ", "ВО"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

//Проверка наличия функции на форме с пробросом ошибок 
&НаКлиенте
Функция СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	СбисКлючФункции = СбисДополнительныеПараметры.Ключ + "_" + СбисИмяФункции + "_" + СбисИмяФормы;
	Если ЛокальныйКэш.ТекущийСеанс.Функции.Свойство(СбисКлючФункции) Тогда
		Возврат ЛокальныйКэш.ТекущийСеанс.Функции[СбисКлючФункции];
	КонецЕсли;
	фрм = СбисПолучитьФормуОбработки(ЛокальныйКэш, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(фрм, "СбисНайтиФункциюНаФорме_2");
	ИначеЕсли Не фрм = Ложь Тогда
		Результат = ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, фрм, СбисИмяФункции);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Если	Не	СбисДополнительныеПараметры.Свойство("КэшироватьФункцию")
			Или	СбисДополнительныеПараметры.КэшироватьФункцию Тогда
		ЛокальныйКэш.ТекущийСеанс.Функции.Вставить(СбисКлючФункции, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, СбисФормаОбработки, СбисИмяФункции)
	//Попытка
	СбисКодЯзыка = ЛокальныйКэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Выполнить("СбисФормаОбработки."+СбисИмяФункции+"();");
		#Иначе
			сбисТест = Вычислить("СбисФормаОбработки."+СбисИмяФункции+"()");
		#КонецЕсли
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", СбисКодЯзыка)+" ("+СбисИмяФункции+")") Тогда//функции нет
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	Возврат СбисФормаОбработки;
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция СбисПолучитьФормуОбработки(ЛокальныйКэш, ИмяФормы, СбисДополнительныеПараметры, Отказ) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;
	СбисДополнительныеПараметры.Свойство("Параметры", СбисПараметрыФормы);
	Если Не СбисДополнительныеПараметры.Свойство("КэшироватьФорму", КэшироватьПолученную) Тогда
		//Для возможности получить форму без её запоминания
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ПолучитьНовую", ПолучитьНовую) Тогда
		//Для возможности получить новую форму не из кэша
		ПолучитьНовую = Ложь;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("Владелец", СбисВладелецФормы) И ИмяФормы <> "ФормаГлавноеОкно" Тогда
		//Попробуем по-умолчанию ставить владельцем главное окно, если не указано обратное.
		СбисВладелецФормы = ЭтаФорма;
	КонецЕсли;	
	Стандартная = Истина;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда
			СбисОбъект1С	= ЭтотОбъект;
			ПолноеИмяФормы	= ИмяФормы;//Имя для кэширования
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = "ВФК." + ИмяФормы;//Кэширование для форм внешних функций
		КонецЕсли;
		БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".", "_");
	#Иначе
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда			
			СбисОбъект1С	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя;
			ПолноеИмяФормы	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя + ЛокальныйКэш.ПараметрыСистемы.Обработка.КлючФорм + ИмяФормы;
			БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".", "_");
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = СбисОбъект1С + ИмяФормы;
			БезопасноеИмяФормы = "ВФК_" + СтрЗаменить(ПолноеИмяФормы, ".", "_");
		КонецЕсли;
	#КонецЕсли
	Если		ПолучитьНовую
		Или	Не	Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		Если		Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(ИмяФормы) <> Неопределено
			Или	Не	Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(ИмяФормы) <> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(ИмяФормы, СбисВладелецФормы);
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						Отказ = Истина;
						Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#КонецЕсли
		Иначе
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	Если КэшироватьПолученную Тогда
		ЛокальныйКэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнениеОтложенныхПроцедур() Экспорт
	Если Кэш = Неопределено Тогда
		Сообщить("Не инициирован кэш. Выполнение отсроченных операций недоступно!");
		Возврат;
	КонецЕсли;
	МодульОбъектаКлиент().ВыполнитьОтложенныеПроцедуры(Кэш);
КонецПроцедуры

&НаСервере
Функция DecodeXmlXdto(СтрокаXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Десериализовать объект из XML
	Возврат НовыйСериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции // DecodeXmlXdto(СтрокаXML)

&НаСервере
Функция EncodeXdtoXml(ОбъектДляСериализации)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.УстановитьСтроку();
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Cериализовать объект в XML
	НовыйСериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДляСериализации);
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции // EncodeXdtoXml(ОбъектДляСериализации)

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Фильтры

////////////////////////////////////////////////////
///////////////////////Фильтры//////////////////////
////////////////////////////////////////////////////

/////////////////////Стандартный////////////////////

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисСохранитьТекущийФильтр(Кэш) Экспорт
	ТекущийФильтр = Новый Структура;
	ТекущийФильтр.Вставить("ФильтрПериод", ФильтрПериод);
	ТекущийФильтр.Вставить("ФильтрДатаНач", ФильтрДатаНач);
	ТекущийФильтр.Вставить("ФильтрДатаКнц", ФильтрДатаКнц);
	ТекущийФильтр.Вставить("ФильтрСостояние", ФильтрСостояние);
	ТекущийФильтр.Вставить("ФильтрКонтрагент", ФильтрКонтрагент);
	ТекущийФильтр.Вставить("ФильтрКонтрагентПодключен", ФильтрКонтрагентПодключен);
	ТекущийФильтр.Вставить("ФильтрКонтрагентСФилиалами", ФильтрКонтрагентСФилиалами);
	ТекущийФильтр.Вставить("ФильтрОрганизация", ФильтрОрганизация);
	ТекущийФильтр.Вставить("ФильтрСтраница", ФильтрСтраница);
	ТекущийФильтр.Вставить("ФильтрОтветственный", ФильтрОтветственный);
	ТекущийФильтр.Вставить("ФильтрТипыДокументов", ФильтрТипыДокументов);
	ТекущийФильтр.Вставить("ФильтрМаска", ФильтрМаска);
	
	//Заполним дополнительные параметры фильтра
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ТекущийФильтр.Вставить("ПараметрыФильтра", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ТекущийФильтр.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат ТекущийФильтр;
КонецФункции

//Функция формирует период прописью	
&НаКлиенте
Функция ФильтрПериодПрописью(ДатНач, ДатКнц)
	Если Год(ДатНач)<>Год(ДатКнц) Тогда
		Возврат Формат(ДатНач, "ДФ=""д ММММ гггг""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ гггг""");
	Иначе
		Если Месяц(ДатНач)<>Месяц(ДатКнц) Тогда
			Возврат Формат(ДатНач, "ДФ=""д ММММ""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " " + Формат(Год(ДатКнц),"ЧГ=0");	
		Иначе
			Если ДатНач=ДатКнц Тогда
				Возврат Формат(ДатКнц, "ДФ=""д ММММ гггг""")
			Иначе
				Возврат строка(День(ДатНач)) + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " "+ Формат(Год(ДатКнц),"ЧГ=0");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

///////////////////Пользователський/////////////////

// Очищает в Кэше значения пользовательских фильтров для текущего раздела	
&НаКлиенте
Функция ОчиститьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ПараметрыУстановки = Новый Структура("ФормаДопФильтра, ДопЭлемент", ФормаДопФильтра);
	Отказ = Ложь;
	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
		ПараметрыУстановки.ДопЭлемент = ДопЭлемент;
		РезультатУстановки = УстановитьЗначениеЭлементаФильтра(Кэш, ПараметрыУстановки, Отказ);
		Если Отказ Тогда
			сбисСообщитьОбОшибке(Кэш, РезультатУстановки);
			Отказ = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//Устанавливает значение для элемента фильтра.
//ЛокальныйКэш
//	Структура инициированного кэша с отвязкой от ГП.
//ПараметрыФильтра
//	Структура с полями "ФормаДопФильтра", "ДопЭлемент" - элемент, возвращаемый формой в списке пользовательских фильтров
//Отказ
//	Булево. Флаг ошибок в процессе установки и возврата структуры ошибки
//Возвращает
//	В случае ошибки, структура описания ошибки.
//	В случае, если это не элемент фильтра - Ложь.
//	В случае успешной установки - Истина;
&НаКлиенте
Функция УстановитьЗначениеЭлементаФильтра(ЛокальныйКэш, ПараметрыФильтра, Отказ) Экспорт
	
	ФормаДопФильтра = ПараметрыФильтра.ФормаДопФильтра;
	ДопЭлемент		= ПараметрыФильтра.ДопЭлемент;
	Попытка
		Если ЛокальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			ДопЭлемент_Значение	= ФормаДопФильтра[ДопЭлемент.Значение];
		Иначе
			ДопЭлемент_Элемент	= ЭтаФорма.ЭлементыФормы[ДопЭлемент.Значение];
			ДопЭлемент_Тип		= ТипЗнч(ДопЭлемент_Элемент);
			Если Не	(	ДопЭлемент_Тип = Тип("ПолеВвода")
					Или	ДопЭлемент_Тип = Тип("ПолеВыбора")
					Или	ДопЭлемент_Тип = Тип("Флажок")) Тогда
				Возврат Ложь;
			КонецЕсли;
			ДопЭлемент_Значение	= ДопЭлемент_Элемент.Значение;
		КонецЕсли;
	Исключение
		СтруктураОшибки = Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка при определении дополнительного элемента фильтра " + ДопЭлемент.Значение + ": " + ОписаниеОшибки());
		Возврат СтруктураОшибки;
	КонецПопытки;
	
	ДопЭлемент_Значение_Тип = ТипЗнч(ДопЭлемент_Значение);
	ПараметрФильтра = "";//По-умолчанию, оставляем строку, как было.
	Если		ДопЭлемент_Значение_Тип = Тип("Дата") Тогда
		ПараметрФильтра = '0001.01.01';
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("Число") Тогда
		ПараметрФильтра = 0;
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("Булево") Тогда
		ПараметрФильтра = Ложь;
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("СписокЗначений") Тогда
		ПараметрФильтра = Новый СписокЗначений;
		ПараметрФильтра.ТипЗначения = ДопЭлемент_Значение.ТипЗначения;//Ограничение типа тоже перенести.
	КонецЕсли;
	
	ЛокальныйКэш.ПараметрыФильтра.Вставить(ДопЭлемент.Значение, ПараметрФильтра);
	Если Не ЛокальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ДопЭлемент_Элемент.Значение = ПараметрФильтра;
	КонецЕсли;
	Возврат Истина;

КонецФункции

// ОФ Показывает на форме элементы пользовательских фильтров	
&НаКлиенте
Функция ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра.Высота = ФормаДопФильтра.ЭлементыФормы.ПанельУстановкиФильтра.Высота;
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Истина;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

// ОФ Скрывает на форме элементы пользовательских фильтров	
&НаКлиенте
Функция СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Ложь;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

// ОФ Записывает в Кэш значения пользовательских фильтров для текущего раздела	
&НаКлиенте
Функция УстановитьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			Если ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВвода") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВыбора") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("Флажок") Тогда
				Кэш.ПараметрыФильтра.Вставить(Элемент.Значение,ЭтаФорма.ЭлементыФормы[Элемент.Значение].Значение);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Диалог

//Процедура вынесена из extSDK для возможности вызова сообщения об ошибке не зависимо, от способа обмена.
//СтруктураОшибки - структура с полями "message, details, code"
&НаКлиенте
Процедура СбисСообщитьОбОшибке(ЛокальныйКэш, СтруктураОшибки, ПараметрыОшибки=Неопределено) Экспорт
	Перем СтатусОшибки;
	Если	ТипЗнч(СтруктураОшибки) = Тип("Структура")
		И	СтруктураОшибки.Свойство("message")
		И	СтруктураОшибки.Свойство("code") Тогда
		МодульОбъектаКлиент().СообщитьСбисИсключение(СтруктураОшибки, ПараметрыОшибки);
	КонецЕсли;
КонецПроцедуры

//Процедура выводит сообщение пользователю без ошибки
&НаКлиенте
Процедура СбисСообщитьПользователю(ПараметрыСообщения, ЛокальныйКэш) Экспорт
	МодульОбъектаКлиент().СбисСообщить(ПараметрыСообщения);
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_РаботаФормы

////////////////////////////////////////////////////
////////////////////Работа Формы////////////////////
////////////////////////////////////////////////////

//////////////////События формы/////////////////////

&НаКлиенте
Процедура ПередЗакрытием(Отказ, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено)
	
	Если ЗавершитьРаботу Тогда
		Возврат;	
	КонецЕсли;     
	
	Отказ = Истина;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		
		Параметр2 = Ложь;
		
	#Иначе
		
		Если Параметр2 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	#КонецЕсли
	
	ОбработчикОписанияОповещения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ЗакрытиеЗавершение", ЭтаФорма);
	
	ТекстВопроса = "Завершить работу в СБИС?";
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикОписанияОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеЗавершение(РезультатДиалога, ДопПараметры = Неопределено) Экспорт
	
	Если Не РезультатДиалога = КодВозвратаДиалога.Да Тогда	
		Возврат;
	КонецЕсли;
	
	МодульОбъектаКлиент().СбисЗавершитьРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	// Начально заполнение всех необходимых для работы объектов	
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеУстановитьРасширениеРаботыСФайлами",ЭтаФорма));
		Иначе
			ПослеУстановитьРасширениеРаботыСФайлами("");
		КонецЕсли;
	#Иначе
		ПослеУстановитьРасширениеРаботыСФайлами("");
	#КонецЕсли	
	
КонецПроцедуры

// Завершение открытия/перезапуска главного окна. Установка настроек, запуск редактора настроек при необходимости.
//
// Параметры:
//  ПараметрыЗавершенияВходящие	 - Струкутра	 -
//		ПовторныйЗапуск - Булево, Истина если окно не закрывалось, а перезапускается.
//		ИзмененаФормаНастроек - Булево, при изменении способа хранения настроек.
//		ОбновитьКонтент - Булево, нужно обновить таблицу реестра документов. Например, произошло изменение пользователя
//		ИзмененияОбмена - Структура, изменился способ обмена со СБИС.
//  ДопПараметры				 - Струкутра	 - резерв под расширение
//
&НаКлиенте
Процедура ПослеОткрытияЗавершение(ПараметрыЗавершенияВходящие=Неопределено, ДопПараметры=Неопределено)
	
	ЭтоПовторныйЗапуск		= Ложь;//При перезапуске не надо запускать некоторые функции.
	НужноОбновитьКонтент	= Истина;//Необходимо перечитать текущий активный раздел
	НужноОткрытьРедакторИни = Ложь;//Проблема с ини. Надо открыть форму раздела, либо обновить её.
	
	Если Не	ПараметрыЗавершенияВходящие = Неопределено Тогда
		Если Не ПараметрыЗавершенияВходящие.Свойство("ПовторныйЗапуск", ЭтоПовторныйЗапуск) Тогда
			ЭтоПовторныйЗапуск		= Ложь;
		КонецЕсли;
		Если Не	ПараметрыЗавершенияВходящие.Свойство("ОбновитьКонтент", НужноОбновитьКонтент) Тогда
			НужноОбновитьКонтент	= Истина
		КонецЕсли;
	КонецЕсли;
	
	НужноОбновитьКонтент = НужноОбновитьКонтент И ЭтоПовторныйЗапуск; //Надо перейти в раздел, а не обновить
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисПолучитьИУстановитьНастройкиВКэш(Новый Структура("ПринудительнаяПроверка, ПродолжитьУстановку", Ложь, Истина), Кэш);	
		НужноОткрытьРедакторИни = Кэш.ФормаНастроекОбщее.Открыта() Или Не Кэш.КэшНастроек.ИниВПорядке Или Кэш.КэшНастроек.ИзмененияВНастройках;
		Если Кэш.КэшНастроек.ПараметрыНастроек.Свойство("Демо") Тогда
			
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.ПослеОткрытияЗавершение");
		СбисСообщитьОбОшибке(Кэш, СбисИсключение, Новый Структура("ФормаВладелец", ЭтаФорма));
		НужноОткрытьРедакторИни = Истина;//Чтобы поправить проблемы;
	КонецПопытки;
	
	//перестроить аккордеон после изменения способа обмена
	Если	ПараметрыЗавершенияВходящие.Свойство("ИзмененияОбмена")
		И	ТипЗнч(ПараметрыЗавершенияВходящие.ИзмененияОбмена) = Тип("Структура") Тогда
		СформироватьСтруктуруАккордеона(Аккордеон, Новый Структура());
	КонецЕсли;
	
	ВсеДокументы	= Ложь;
	ФильтрСтраница	= 1;
	
	Если Не ЭтоПовторныйЗапуск Тогда
		Попытка
			ПараметрыЗапуска = Новый Структура;
			ПараметрыЗапуска.Вставить("АктивнаяВерсия",	Версия);
			ПараметрыЗапуска.Вставить("СтараяВерсия",	Кэш.Парам.ПредВерсия);
			ПараметрыЗапуска.Вставить("СбисПараметры",	Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек));
			
			МодульОбъектаКлиент().ДействияПриСтарте(ПараметрыЗапуска, Кэш);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.ПослеОткрытияЗавершение"), Новый Структура("ФормаВладелец", ЭтаФорма));
		КонецПопытки;
	КонецЕсли;
	
	//Обновим ГО при старте переходом, либо обновив текущий раздел
	//ФормаБлокировкиИнтерфейса = МодульОбъектаКлиент().СбисПолучитьБлокировкуФормы(ЭтаФорма);
	//Если	Не	ФормаБлокировкиИнтерфейса = Неопределено Тогда
	//	МодульОбъектаКлиент().СбисОбновитьБлокировку(ЭтаФорма, ПараметрыОбновить);
	//Иначе
	Если		НужноОткрытьРедакторИни Тогда
		ПараметрыОбновить = Новый Структура
		("ПовторныйЗапуск,	ОбновитьКонтент,		ОткрытьРедакторИни", 
		ЭтоПовторныйЗапуск,	НужноОбновитьКонтент,	НужноОткрытьРедакторИни);
		МодульОбъектаКлиент().ЗапуститьРедакторИни(ПараметрыОбновить);
		Возврат;
	ИначеЕсли	НужноОбновитьКонтент Тогда
		ОбновитьКонтент();
 		СбисСпрятатьСостояние(ЭтаФорма);				
		Возврат;
	Иначе
		ПерейтиВРаздел(СбисПолучитьИмяКнопкиПоРазделу(Кэш.Парам.РазделПоУмолчанию));
	КонецЕсли;
		
	СбисСпрятатьСостояние(ЭтаФорма);				
	ФильтрОбновитьПанель();
	
КонецПроцедуры

////////////////События элементов///////////////////

&НаКлиенте
Процедура ПересчитыватьЦеныПоДанным1СПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитыватьНДСПоДанным1СПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

//Процедура записывает в Кэш измененный параметр	
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент) Экспорт
	ПутьКДаннымФормы			= Сред(Элемент.Имя, Найти(Элемент.Имя, "_")+1);
	Кэш.Парам[ПутьКДаннымФормы] = ЭтаФорма[ПутьКДаннымФормы];
КонецПроцедуры

&НаКлиенте
Процедура сбисПослеНастройкиЭП(РезультатИзменения, ДопПараметры) Экспорт 
	Если РезультатИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	сбисОпределитьФормуРаботысЭП();
КонецПроцедуры

&НаКлиенте
Процедура сбисОпределитьФормуРаботысЭП()
	Если Кэш.Парам.НастройкиКриптографии.ПодписьНаСервере Тогда
		Кэш.Вставить("ФормаЭП",сбисПолучитьФорму("ЭлектроннаяПодписьНаСервере"));
	Иначе
		Кэш.Вставить("ФормаЭП",сбисПолучитьФорму("ЭлектроннаяПодписьНаКлиенте"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица_СервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//alo
	ТекущиеДанныеСтроки = ВыбраннаяСтрока;
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
	КонецЕсли;
	Контекст = Новый структура(ТекущиеДанныеСтроки.Ключ, ТекущиеДанныеСтроки.Команда);
	Контекст.Вставить("Кэш",Кэш);
	Кэш.ОбщиеФункции.РассчитатьЗначение(ТекущиеДанныеСтроки.Ключ,Контекст,Кэш);
КонецПроцедуры

//////////////////////Кнопки////////////////////////

&НаКлиенте
Процедура ВыйтиНажатие(Команда)
	сбисВыйти();
КонецПроцедуры

// Процедура запускает загрузку документов по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьВ1С(Команда)
	
	РезультатЗагрузки = Кэш.ОбщиеФункции.РезультатДействия_Получить(Кэш,Новый Структура("ПредставлениеОперации", "ЗагрузкаДокумента"),Истина);
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Всего = СписокОтмеченныхДокументов.Количество();
	ОбновитьКонтент = Ложь;
	Если Всего>0 Тогда
		фрм = сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
		РезультатЗагрузки = фрм.ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов, Новый Структура("РежимНоменклатуры, РежимДокументов", Кэш.Парам.СпособЗагрузки, Кэш.Парам.РежимЗагрузки));
		Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
			ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
			Кэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
			
			Сообщить("Загружено комплектов "+строка(РезультатЗагрузки.Всего.Выполнено)+" из "+строка(Всего));
			ОбновитьКонтент = Булево(РезультатЗагрузки.Всего.Выполнено);
		Иначе//Если пришли не структура, то ЗагрузитьДокументыВ1С вынесена. Поддержка старых функций
			ОбновитьКонтент = РезультатЗагрузки;
		КонецЕсли;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	Кэш.Удалить("РезультатДействия");
	Если ОбновитьКонтент Тогда
		ОбновитьКонтент();
	КонецЕсли;

КонецПроцедуры

// Открывает помощь на sbis.ru
&НаКлиенте
Процедура НадписьНужнаПомощьНажатие(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul");
КонецПроцедуры

//Нажатие на кнопку обновления обработки
&НаКлиенте
Процедура ОбновитьОбработкуОбщая(Команда)	
	сбисПроверитьНаличиеОбновлений(Новый Структура("Режим, ТекстДиалога", 
													"Ручной",
													"Обновление <ВерсияНаСервере> готово к установке. Продолжить?"));	
КонецПроцедуры

//Процедура открывает форму просмотра документа	
&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон", Кэш);	
	фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);
КонецПроцедуры

//Открывает документы 1С по текущей строке таблицы документов	
&НаКлиенте
Процедура ОткрытьДокумент1С(Кнопка) Экспорт
	ТекущаяСтрока		= Кэш.ТаблДок.ТекущиеДанные;
	сбисДанныеОткрыть	= Новый Структура("Документ1С, Документы1С");
	сбисСписокОткрыть	= Новый Массив;
	ЗаполнитьЗначенияСвойств(сбисДанныеОткрыть, ТекущаяСтрока);
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документ1С) Тогда
		сбисСписокОткрыть.Добавить(сбисДанныеОткрыть.Документ1С);
	КонецЕсли;
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документы1С) Тогда
		Для Каждого СтрокаДокумент1С Из сбисДанныеОткрыть.Документы1С Цикл
			Если Не ЗначениеЗаполнено(СтрокаДокумент1С.Значение) Тогда
				Продолжить;
			КонецЕсли;
			сбисСписокОткрыть.Добавить(СтрокаДокумент1С.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Не сбисСписокОткрыть.Количество() Тогда
		Сообщить("Нет связанных документов 1С");
		Возврат;
	КонецЕсли;
	Для Каждого сбисДокументОткрыть Из сбисСписокОткрыть Цикл
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ОткрытьЗначение(сбисДокументОткрыть);
			#Иначе
				ПоказатьЗначение(,сбисДокументОткрыть);
			#КонецЕсли
		Исключение
			Сообщить(ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		фрм = сбисНайтиФормуФункции("ОткрытьДокументОнлайнПоПакету","ФормаГлавноеОкно","",Кэш);
		фрм.ОткрытьДокументОнлайнПоПакету(ТекущаяСтрока.СоставПакета[0].Значение, Кэш);
	КонецЕсли;
КонецПроцедуры

//Процедура запускает загрузку отчетность по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьОтчетность(Команда)
	СбисОтвет = 1;
	ПараметрыКоманды = Новый Структура;
	Если	ОтметитьВсе 
		И	ЗаписейНаСтранице1С <> "все"
		И	(ФильтрСтраница <> 1 Или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		ТекстВопроса = "Загрузить отчеты только с текущей страницы или все документы списка?";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СбисОтвет = Вопрос(ТекстВопроса, Кнопки);
		#Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьВыбранныеДокументыОтчетности", ЭтаФорма), ТекстВопроса, Кнопки);
			Возврат;
		#КонецЕсли
	КонецЕсли;
	ЗагрузитьВыбранныеДокументыОтчетности(СбисОтвет, ПараметрыКоманды);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительныхОпераций(Команда)
	фрм = сбисПолучитьФорму("ФормаДлительныеОперации",,,ЭтаФорма);
	фрм.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ДоступнаНоваяВерсия(Команда)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиОбновлениеПрошлоУспешно"] Тогда
			ТекстВопроса	= "Завершить работу в СБИС?";
			КнопкиДиалога	= РежимДиалогаВопрос.ДаНет;
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Не забудьте перезапустить 1С:Предприятие для того, чтобы изменения вступили в силу.";
			Ответ	= Вопрос(ТекстВопроса,	КнопкиДиалога);
			ДоступнаНоваяВерсия_ПослеДиалога(Ответ);
			Возврат;
		КонецЕсли;			
	#Иначе
		Если Лев(сбисЭлементФормы(ЭтаФорма,"ВашаВерсияУстарела").Заголовок,25) = "Обновление прошло успешно" Тогда
			ТекстВопроса	= "Завершить работу в СБИС?";
			КнопкиДиалога	= РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДоступнаНоваяВерсия_ПослеДиалога", ЭтаФорма),ТекстВопроса,КнопкиДиалога,,);
			Возврат;
		КонецЕсли;	
	#КонецЕсли	
	
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/history/");
КонецПроцедуры

&НаКлиенте
Процедура ДоступнаНоваяВерсия_ПослеДиалога(Ответ, ДопПараметры = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура сбисИнформацияДляТП(Команда)
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Сохранить информацию для техподдержки в:"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент);
		Разделитель = Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Клиент);
		ПутьККаталогу = ПутьККаталогу+Формат(ТекущаяДата(), "ДФ =гггг_ММ_дд_ЧЧ_мм_сс")+Разделитель;
		СоздатьКаталог(ПутьККаталогу);
		
		Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
			СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
			Если СписокОтмеченныхДокументов.Количество() = 1 Тогда
				Если Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
					Кэш.ОбщиеФункции.СбисСформироватьИнформациюПоДокументам1С(Кэш, ПутьККаталогу, Разделитель, СписокОтмеченныхДокументов[0].Значение.СоставПакета); 
				ИначеЕсли Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					Кэш.ОбщиеФункции.сбисЗаписатьСтруктуруВТекстовыйДокумент(СписокОтмеченныхДокументов[0].Значение.СоставПакета[0].Значение, ТекстДок, "   ", Новый Массив);;
					ТекстДок.Записать(ПутьККаталогу + "СоставПакета.txt"); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Кэш.ОбщиеФункции.СбисСформироватьОбщуюИнформациюДляТП(Кэш, ПутьККаталогу);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыТП(Команда)
	ЗапуститьПриложение("https://sbis.ru/support");
КонецПроцедуры

&НаКлиенте
Процедура ОбращениеТП(Команда)
	ЗапуститьПриложение("https://online.sbis.ru/page/my-claims");
КонецПроцедуры

&НаКлиенте
Процедура РуководствоПользователя(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Элемент) Экспорт    
	
	фрм = СбисПолучитьФорму("ФормаНастройки", , , ЭтаФорма);
	фрм.Показать(Новый Структура("РежимЗапуска, Кэш", "ОбщиеНастройки", Кэш));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуСервисов(Элемент) Экспорт
	
	ФормаНастройки = СбисПолучитьФорму("ФормаНастройки", , , ЭтаФорма);
	ФормаНастройки.Показать(Новый Структура("РежимЗапуска, Кэш", "Сервисы", Кэш));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФайловНастроек(Команда) Экспорт    
	
	МодульОбъектаКлиент().ЗапуститьРедакторИни();
	
КонецПроцедуры

/////////////////Генерируемые кнопки/////////////////

//Функция добавляет кнопку на командную панель главного окна. Вызов функции происходит через поиск в Кэш.МенюРазделов по текущему разделу и идентификатору(имени) кнопки
&НаСервере
Функция СбисДобавитьКнопку(Знач ПараметрыКнопки, Отказ) Экспорт
	Попытка
		Если ПараметрыКнопки.УправляемоеПриложение Тогда
			Если ЭтаФорма.Команды.Найти(ПараметрыКнопки.Имя) = Неопределено Тогда
				НоваяКоманда			= ЭтаФорма.Команды.Добавить(ПараметрыКнопки.Имя);
				НоваяКоманда.Действие	= "сбисВыполнитьКомандуГенерируемойКнопки";//Имя процедуры
				НоваяКоманда.Заголовок	= ПараметрыКнопки.Заголовок;
			КонецЕсли;	
			НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ПараметрыКнопки.Имя,
					                                 Тип("КнопкаФормы"),
													 ЭтаФорма.Элементы[ПараметрыКнопки.Панель]);
			НовыйЭлемент.ИмяКоманды = ПараметрыКнопки.Имя;
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				сбисКнопкиПанели = ЭтаФорма.ЭлементыФормы[ПараметрыКнопки.Панель].Кнопки;
				сбисКнопкиПанели.Добавить(ПараметрыКнопки.Имя, ТипКнопкиКоманднойПанели.Действие, ПараметрыКнопки.Заголовок, Новый Действие("сбисВыполнитьКомандуГенерируемойКнопки"));
			#КонецЕсли
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при добавлении кнопки " + ПараметрыКнопки.Имя + " на форму главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецФункции

//Функция очищает панель кнопок (КО)
&НаСервере
Функция сбисОчиститьПанельКнопок(Знач ПараметрыПанели, Отказ) Экспорт
	
	Попытка
		Если ПараметрыПанели.УправляемоеПриложение Тогда
			ЭлементыУдалить = ЭтаФорма.Элементы[ПараметрыПанели.Имя].ПодчиненныеЭлементы;
			Пока ЭлементыУдалить.Количество() Цикл
				ЭтаФорма.Элементы.Удалить(ЭлементыУдалить[0]);
			КонецЦикла;
		Иначе
			ЭтаФорма.ЭлементыФормы[ПараметрыПанели.Имя].Кнопки.Очистить();
		КонецЕсли;                                                                                                                   
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при удалении кнопок панели " + ПараметрыПанели.Имя + " главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Процедура СбисКомандаПанелиПечать(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	ПараметрыПечати = Новый Структура("Кэш, ВФоне,ФормаВызова", Кэш, Истина, ЭтаФорма);
	СписокДляВыбора = Кэш.ОбщиеФункции.ПолучитьВложенияПакетовНаПечать(СписокОтмеченныхДокументов, ПараметрыПечати);
	РезультатПечати = Кэш.ОбщиеФункции.СбисМассоваяПечать(СписокДляВыбора, ПараметрыПечати);
КонецПроцедуры

//Функция делает вызов в зависимости от того, какая команда из должна быть выполнена
&НаКлиенте
Процедура СбисВыполнитьКомандуГенерируемойКнопки(Команда) Экспорт 
	
	Попытка
		МодульОбъектаКлиент().ВызватьОбработчикКнопки(Команда);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисВыполнитьКомандуГенерируемойКнопки");
		МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
	КонецПопытки;

КонецПроцедуры

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьПрайс(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	Отказ = Ложь;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если		Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат Неопределено;
	ИначеЕсли	Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат Неопределено;
	ИначеЕсли	Не (	ИниНоменклатуры.Свойство("мФайл")
					И	ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования прайса.");
		Возврат Неопределено;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПодготовитьСтруктуруПрайса", "РаботаСДокументами1С");
	//В методе формирования прайса укажем, что ожидаем структуру результата, без записи в файл
	ПараметрыПодготовки = Новый Структура(	"Ини, ДанныеКаталога, ПараметрыПрайса"
											,ИниНоменклатуры.мФайл.Номенклатура
											,Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога)
											,Новый Структура(	"РеквизитСопоставленияНоменклатуры, ТипЦенНоменклатуры,	ДатаЦен, ТипCML, ОжидаемыйРезультат"
																,ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры
																,ТипЦен
																,ДатаЦен
																,"Прайс"
																,"СтруктураФайла"));
																
	МассивФайлов = фрм.ПодготовитьСтруктуруПрайса(Кэш, ПараметрыПодготовки, Отказ);
	
	Если Отказ Тогда
		сбисСообщитьОбОшибке(Кэш, МассивФайлов);
		Возврат Ложь;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПоказатьФорму", "ФормаОтправкиКорреспонденции");	
	фрм.ПоказатьФорму(ЛокальныйКэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceMatchingIn"));
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ОтправитьСогласованиеЦен(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	Отказ = Ложь;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если		Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат Неопределено;
	ИначеЕсли	Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат Неопределено;
	ИначеЕсли	Не (	ИниНоменклатуры.Свойство("мФайл")
					И	ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования прайса.");
		Возврат Неопределено;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПодготовитьСтруктуруПрайса", "РаботаСДокументами1С");
	//В методе формирования прайса укажем, что ожидаем структуру результата, без записи в файл
	ПараметрыПодготовки = Новый Структура(	"Ини, ДанныеКаталога, ПараметрыПрайса"
											,ИниНоменклатуры.мФайл.Номенклатура
											,Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога)
											,Новый Структура(	"РеквизитСопоставленияНоменклатуры, ТипЦенНоменклатуры,	ДатаЦен, ТипCML, ОжидаемыйРезультат, Тип, ВерсияФормата"
																,ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры
																,ТипЦен
																,ДатаЦен
																,"Прайс"
																,"СтруктураФайла"
																,"СогласованиеЦен"
																,"3.01"));
																
	МассивФайлов = фрм.ПодготовитьСтруктуруПрайса(Кэш, ПараметрыПодготовки, Отказ);
	
	Если Отказ Тогда
		сбисСообщитьОбОшибке(Кэш, МассивФайлов);
		Возврат Ложь;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПоказатьФорму", "ФормаОтправкиКорреспонденции");	
	фрм.ПоказатьФорму(ЛокальныйКэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceMatchingIn"));
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьКаталог(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт 
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	// Формирует и отправляет на онлайн каталог товаров
	Если ЛокальныйКэш.Парам.СпособОбмена = 1 Тогда // каталог
		Сообщить("Отправить каталог товаров можно только при способе обмена SDK или API. Способ обмена указывается в разделе Настройки");
		Возврат Неопределено;
	КонецЕсли;
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если НЕ (ИниНоменклатуры.Свойство("мФайл") И ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования каталога.");
		Возврат Неопределено;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ДанныеКаталога = Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога);
	ИниНоменклатура = Новый Структура;
	ЛокальныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ИниНоменклатура, ИниНоменклатуры.мФайл.Номенклатура);
	ПараметрыФормированияКаталога = Новый Структура("РеквизитСопоставленияНоменклатуры", ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры);
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ПараметрыФормированияКаталога.Вставить("ТипЦенНоменклатуры", ТипЦен);
	КонецЕсли;
	КаталогОтправлен = ЛокальныйКэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(ЛокальныйКэш, ДанныеКаталога,ИниНоменклатура,ПараметрыФормированияКаталога);
	Если КаталогОтправлен <> Ложь Тогда
		Сообщить("Каталог товаров успешно отправлен");
	КонецЕсли;
	ОтметитьВсе = Ложь;
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ЗагрузитьСотрудниковВСБИС(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	Ини = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Сотрудники");
	Если Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте сотрудников, которых необходимо загрузить в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Если Не (Ини.Свойство("мФайл") И Ини.мФайл.Свойство("Сотрудники")) Тогда
		Сообщить("Отсутствует настройка для загрузки сотрудников в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Ини = Ини.мФайл.Сотрудники;
	сбисПоказатьСостояние("Формирование данных по сотрудникам", ЭтаФорма);
	фрм	= сбисНайтиФормуФункции("сбисСформироватьДанныеСотрудников","РаботаСДокументами1С");
	ДанныеСотрудников = фрм.сбисСформироватьДанныеСотрудников(ЛокальныйКэш, СписокОтмеченных, Ини);
	сбисПоказатьСостояние("Загрузка сотрудников в СБИС", ЭтаФорма);
	Результат = Истина;
	Отказ = Ложь;
	РезультатОтправки = ЛокальныйКэш.Интеграция.сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ);
	сбисСпрятатьСостояние(ЭтаФорма);
	
	Если Отказ Тогда
		Результат = Ложь;
	КонецЕсли;
	
	РезультатОтправки.НеОтправлено = РезультатОтправки.Ошибок;
	РезультатОтправки.Вставить("ЗаголовкиФормыРезультатов", Новый Структура("Форма, ПоложительныйРезультат, ОтрицательныйРезультат, Объект1С, ТиповыеОшибки", "Результат загрузки", "Загружено", "Не загружено", "Сотрудник" ""));
	Кэш.Вставить("РезультатОтправки", РезультатОтправки);
	фрм = сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
	фрм.ПоказатьРезультатОтправки(Кэш);
	Кэш.Удалить("РезультатОтправки");
	Возврат Результат;
КонецФункции

//////////////////////Прочее////////////////////////

&НаСервере
Функция СбисУстановитьКонтекстноеМеню(ИмяЭлемента, ИмяМеню) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Для Каждого ЭлементМеню Из ЭтаФорма.Элементы[ИмяЭлемента].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			Если Найти(ЭлементМеню.Имя, ИмяМеню) = 1 Тогда 
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Истина);
			Иначе
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Ложь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭтаФорма.ЭлементыФормы[ИмяЭлемента].КонтекстноеМеню=ЭтаФорма.ЭлементыФормы[ИмяМеню];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, ВидимостьЭлемента)
	ЭлементМеню.Видимость = ВидимостьЭлемента;
	Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодЭлемент Из ЭлементМеню.ПодчиненныеЭлементы Цикл
			сбисУстановитьВидимостьЭлементаМеню(ПодЭлемент, ВидимостьЭлемента);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СбисПоказатьЗначение(ЛокальныйКэш, ОбъектСсылкаПоказать) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЛокальныйКэш.СовместимостьМетодов.Объекты1С.ПоказатьЗначение Тогда
			СбисСтрокаВыполнить = "ПоказатьЗначение(,ОбъектСсылкаПоказать)";
		Иначе
			СбисСтрокаВыполнить = "ОткрытьЗначение(ОбъектСсылкаПоказать)";
		КонецЕсли;
		Выполнить(СбисСтрокаВыполнить);
	#Иначе
		ПоказатьЗначение(,ОбъектСсылкаПоказать);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция СбисПолноеИмяКолонки(ТчИмя, КолонкаИмя) Экспорт
	Возврат СтрЗаменить(Кэш.ТекущийСеанс.Интерфейс.ШаблонРеквизитаКолонок, "{%ТЧ%}", ТчИмя) + КолонкаИмя;
КонецФункции

//Процедура запускает отправку документов по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьВыбранныеДокументыОтчетности(Ответ, СбисДополнительныеПараметры) Экспорт
	Перем ИмяРеестра, Ини;
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		Если	Не Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя, ИмяРеестра)
			Или	Не Кэш.Ини.Свойство(ИмяРеестра, Ини) Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.СбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения(СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	СбисДействие = Кэш.ОбщиеФункции.РезультатДействия_Новый(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова, СтатусыДляОбработки", "ЗагрузкаОтчетности", ЭтаФорма, Истина));

	ОписаниеОповещенияРезультат = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ОбработчикРезультатаЗагрузкиОтчетности", ЭтаФорма, Новый Структура("Кэш, РезультатДействия", Кэш, СбисДействие));
	ПараметрыМетода = Новый Структура("СписокДокументов, ОбработчикРезультата, РезультатДействия", СписокОтмеченныхДокументов, ОписаниеОповещенияРезультат, СбисДействие);
	
	фрм = СбисНайтиФормуФункции("ЗагрузитьОтчетность", "Документ_" + ИмяДокумента, "Документ_Шаблон", Кэш);
	фрм.ЗагрузитьОтчетность(Кэш, ПараметрыМетода);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикРезультатаЗагрузкиОтчетности(РезультатЗагрузки, ПараметрыОбработки) Экспорт
	ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
	Кэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
КонецПроцедуры

&НаКлиенте
Процедура СбисОбработкаПрерывания() Экспорт
	ОбработкаПрерыванияПользователя();
КонецПроцедуры

// Процедура устанавливает оформление 2х гиперссылок, предлагающих обновиться
// Параметры:
//	- СледующееДействие (строка):
//									- "Предложить обновление"
//									- "Предложить перезапуск"
//									- "Не требуется"
//	- ВерсияСильноУстарела (булево)
//  - РаботаНаНестабильнойВерсии (булево)
&НаКлиенте
Процедура сбисУстановитьОформлениеГиперссылокОбновления(СледующееДействие, СтатусВерсииПользователя=0) Экспорт
	// ВААл Старая логика. Информация о версии выводилась в элемент формы.
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	Если СледующееДействие = "Не требуется" Тогда
	//		ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Ложь;
	//		Возврат;
	//	КонецЕсли; 
	//	
	//	ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Истина;
	//	Если СледующееДействие = "Предложить обновление" Тогда
	//		Если Число(СтатусВерсииПользователя) = 4 Тогда  
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиКритическиеОшибки"]; // "Версия содержит критические ошибки"
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиВерсияНеСовместима"]; // "Версия не совместима"
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиВашаВерсияУстарела"]; // "Версия устарела"
	//		Иначе
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиДоступнаНоваяВерсия"]; // "Есть новая версия" 
	//		КонецЕсли;
	//	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
	//		ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиОбновлениеПрошлоУспешно"] // "Обновление прошло успешно, перезапустите 1С:Предприятие!"
	//	Иначе
	//		ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Ложь;
	//	КонецЕсли;
	//#Иначе
	//	ЭлементВашаВерсияУстарела		= сбисЭлементФормы(ЭтаФорма, "ВашаВерсияУстарела");
	//	ЭлементОбновитьОбработкуОбщая	= сбисЭлементФормы(ЭтаФорма, "ОбновитьОбработкуОбщая");
	//	Если СледующееДействие = "Предложить обновление" Тогда
	//		ЭлементВашаВерсияУстарела.Видимость 	= Истина;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Истина; 
	//		Если Число(СтатусВерсииПользователя) = 4 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок = "Версия содержит критические ошибки";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Версия не совместима";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Версия устарела";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		Иначе
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Есть новая версия";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(28, 85, 184);
	//		КонецЕсли;
	//	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
	//		ЭлементВашаВерсияУстарела.Видимость 	= Истина;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Ложь;
	//		ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ЭлементВашаВерсияУстарела.Заголовок = "Обновление прошло успешно, перезапустите обработку!";
	//	Иначе
	//		ЭлементВашаВерсияУстарела.Видимость 	= Ложь;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Ложь;
	//	КонецЕсли;
	//#КонецЕсли
	
	ТекстСообщения = "";
	Если СледующееДействие = "Предложить обновление" Тогда 
		Если Число(СтатусВерсииПользователя) = 4 Тогда
			ТекстСообщения = "Версия содержит критические ошибки";
		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
			ТекстСообщения = "Версия не совместима";
		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
			ТекстСообщения = "Версия устарела";
		Иначе
			ТекстСообщения = "Есть новая версия";
		КонецЕсли;
	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
		ТекстСообщения = "Обновление прошло успешно, перезапустите обработку!";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		АргументДействия = Новый Структура(	"Текст, 		ФормаВладелец, 	ЭлементНазначения, 	СтатусСообщения",
											ТекстСообщения, ЭтаФорма, 		"Выход", 			СтатусСообщения.Внимание);
		МодульОбъектаКлиент().СбисСообщить(АргументДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сбисЗадатьВопросПослеОбновления() Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстВопроса = "Установка обновления прошла успешно." + Символы.ПС + "Для завершения обновления необходим  перезапуск 1С.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "Перезапустить 1С:Предприятие сейчас");
		Кнопки.Добавить(2, "Временно продолжить работу на старой версии");
		СбисОтвет = Вопрос(ТекстВопроса, Кнопки, , 1);
		сбисЗадатьВопросПослеОбновленияЗавершение(СбисОтвет);
	#Иначе
		ТекстВопроса = "Установка обновления прошла успешно." + Символы.ПС + "Для завершения обновления необходим  перезапуск обработки.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "Завершить работу в СБИС");
		Кнопки.Добавить(2, "Временно продолжить работу на старой версии");
		ПоказатьВопрос(Новый ОписаниеОповещения("сбисЗадатьВопросПослеОбновленияЗавершение", ЭтаФорма), ТекстВопроса, Кнопки, , 1);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура сбисЗадатьВопросПослеОбновленияЗавершение(Ответ, СбисДополнительныеПараметры = Неопределено) Экспорт
	Если Ответ = 1 Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ЗавершитьРаботуСистемы(Истина, Истина);
		#КонецЕсли
		ЭтаФорма.Закрыть();
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ТекстАргумент = "Для корректной работы обработки необходимо завершить обновление. Перезапустите 1С:Предприятие.";
		#Иначе
			ТекстАргумент = "Для корректной работы обработки необходимо завершить обновление. Перезапустите обработку.";
		#КонецЕсли
		АргументДействия = Новый Структура("Текст, ФормаВладелец, ЭлементНазначения, СтатусСообщения", ТекстАргумент, ЭтаФорма, "Выход", СтатусСообщения.Внимание);
		ОтложенноеДействиеОбновления = МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура(
		"Аргумент,			ИмяПроцедуры,				Модуль,		ДополнительныеПараметры,	Периодичность,	ВызватьСразу,	ИдентификаторДействия,  ЧислоВызовов", 
		АргументДействия,	"СбисСообщитьПользователю",	ЭтаФорма,	Кэш,						60*15,			Ложь, 			"ВывестиСообщениеОНеобходимостиПерезапускаПослеОбновления"));
		Кэш.СБИС.МодульОбъектаКлиент.ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПереключенияАккаунта()
	фрм = сбисПолучитьФорму("ФормаСменыАккаунта");
	фрм.ПользовательСбис = Пользователь;
	ДопПараметры = Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	СбисОписаниеОповещение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисПослеАвторизации", ЭтаФорма, ДопПараметры);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = фрм.Показать(Кэш, Неопределено);
		Если Кэш = Неопределено И Результат = "" Тогда //после выхода закрыли окно авторизации
			Возврат;
		КонецЕсли;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Результат, СбисОписаниеОповещение);
	#Иначе
		фрм.ОписаниеОповещенияОЗакрытии = СбисОписаниеОповещение;
		фрм.Показать(Кэш, Неопределено);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_ПараметрыСистемы

////////////////////////////////////////////////////
//////////////////Параметры системы/////////////////
////////////////////////////////////////////////////

//Структура с описанием текущей системы. Параметры получаются для текущей конфы.
//Вынесено в общее для сбора сразу всех данных на сервере
&НаКлиенте
Функция ПолучитьПараметрыСистемы(Отказ) Экспорт
	
	СистемнаяИнформацияКлиент = Новый СистемнаяИнформация;
	ПараметрыСистемы = Новый Структура("Сервер,Клиент,Конфигурация,Обработка",Новый Структура, Новый Структура, Новый Структура, Новый Структура);
	Попытка
		//Данные о клиенте
		ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	ТипЗнч(ЭтаФорма)=Тип("УправляемаяФорма"));
		ПараметрыСистемы.Клиент.Вставить("ВерсияПриложения",		СистемнаяИнформацияКлиент.ВерсияПриложения);
		ПараметрыСистемы.Клиент.Вставить("ТипОС", 					ТипПлатфтормыКлиент(СистемнаяИнформацияКлиент));
		ПараметрыСистемы.Клиент.Вставить("ЭтоLinux",				НРег(Лев(ПараметрыСистемы.Клиент.ТипОС, 5)) = "linux");
		ПараметрыСистемы.Клиент.Вставить("РежимЗапускаПриложения",	РежимЗапускаПриложения());
		//Данные о конфигурации
		ПараметрыСистемы.Конфигурация.Вставить("URL",		СтрокаСоединенияИнформационнойБазы());
		ПараметрыСистемы.Конфигурация.Вставить("Файловая",	Булево(Найти(ПараметрыСистемы.Конфигурация.URL, "File=")));
		//Данные об обработке
		
#Область include_sys_version
		СбисВерсия = "2.51.5.4";
#КонецОбласти
		
		ВерсияОбработкиКратко = СтрЗаменить(СбисВерсия, ".", Символы.ПС);
		ВерсияОбработкиКратко = СтрПолучитьСтроку(ВерсияОбработкиКратко, 1) + "." + СтрПолучитьСтроку(ВерсияОбработкиКратко, 2);
		ВерсияПлатформыКратко = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
		ВерсияПлатформыКратко = СтрПолучитьСтроку(ВерсияПлатформыКратко, 1) + СтрПолучитьСтроку(ВерсияПлатформыКратко, 2);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ИмяПродуктаСБИС	= "vo2_1c_82_of";
			СбисИмяОбработки = Строка(ЭтаФорма.ОбработкаОбъект);
			СбисПутьКФормам = "";
		#Иначе
			ИмяПродуктаСБИС	= "vo2_1c_83_uf";
			СбисИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, ".", Символы.ПС);
			СбисИмяОбработки = СтрПолучитьСтроку(СбисИмяФормы, 1) + ".";
			Шаг = 2;
			Пока Шаг < СтрЧислоСтрок(СбисИмяФормы) - 1 Цикл
				СбисИмяОбработки = СбисИмяОбработки + СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
				Шаг = Шаг + 1;
			КонецЦикла;
			СбисПутьКФормам = СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
		#КонецЕсли
		ПараметрыСистемы.Обработка.Вставить("Версия",		СбисВерсия);
		ПараметрыСистемы.Обработка.Вставить("ПервыйЗапуск", Не ЗначениеЗаполнено(ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("НоваяВерсия",	СбисНоваяВерсия(ПараметрыСистемы.Обработка.Версия, ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("ПолноеИмя",	СбисИмяОбработки);
		ПараметрыСистемы.Обработка.Вставить("ИмяПродукта",	ИмяПродуктаСБИС);
		ПараметрыСистемы.Обработка.Вставить("КлючФорм",		СбисПутьКФормам);
		ПараметрыСистемы.Обработка.Вставить("КраткаяВерсия","VO" + ВерсияПлатформыКратко + ?(ПараметрыСистемы.Клиент.УправляемоеПриложение, "UF", "OF") + ВерсияОбработкиКратко);

		//Данные о сервере
		ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы);
		ПараметрыСистемы.Обработка.Вставить("ПолнаяВерсия",	"1C" + ПараметрыСистемы.Сервер.ВерсияПриложения + "_VO" + ВерсияОбработкиКратко);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Ошибка определения параметров текущей системы.", ОписаниеОшибки());
	КонецПопытки;
	Попытка
		//Для определения ангийского языка, сделаем заведомо ошибочный вызов и проверим исключение
		СбисТестИсключение = Новый Структура("1");
	Исключение
		СбисОшибка = ОписаниеОшибки();
		Если Найти(СбисОшибка, "calling constructor") Тогда
			ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
		КонецЕсли;
	Конецпопытки;
		
	Возврат	ПараметрыСистемы;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	//На толстом клиенте пока берем системную информацию клиента.
	ПараметрыСистемы.Сервер.Вставить("ТипОС", 			ТипПлатфтормыСервер(СистемнаяИнформация));
	ПараметрыСистемы.Сервер.Вставить("ВерсияПриложения",СистемнаяИнформация.ВерсияПриложения);
	ПараметрыСистемы.Сервер.Вставить("ЭтоLinux",		НРег(Лев(ПараметрыСистемы.Сервер.ТипОС, 5)) = "linux");
	//Получаем системные параметры файла обработки	
	ПараметрыСистемы.Обработка.Вставить("ПолноеИмяОбработки",		сбисПолноеИмяФайла(ПараметрыСистемы));
	ПараметрыСистемы.Обработка.Вставить("РежимИспользования",		ПолучитьРежимИспользованияОбработки(ПараметрыСистемы.Обработка.ПолноеИмяОбработки));
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ЗаписатьПараметрыИнтеграции = Ложь;
		ПараметрыИнтеграции = ХранилищеОбщихНастроек.Загрузить("Integration", "Integration", "Integration", "СБИС");
		Если ПараметрыИнтеграции = Неопределено Тогда
			ПараметрыИнтеграции = Новый Соответствие;
		КонецЕсли;
		УидСистемы = ПараметрыИнтеграции.Получить("integration_uuid");
		Если УидСистемы = Неопределено Тогда
			ЗаписатьПараметрыИнтеграции = Истина;
			УидСистемы = Строка(Новый УникальныйИдентификатор);
			ПараметрыИнтеграции.Вставить("integration_uuid", УидСистемы);
		КонецЕсли;
		Если ЗаписатьПараметрыИнтеграции Тогда
			ХранилищеОбщихНастроек.Сохранить("Integration", "Integration", ПараметрыИнтеграции, "Integration", "СБИС")
		КонецЕсли;
	    УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УидСистемы = "";
	КонецПопытки;
	ПараметрыСистемы.Конфигурация.Вставить("Имя",					Метаданные.Имя);
	ПараметрыСистемы.Конфигурация.Вставить("КраткаяИнформация",		Метаданные.КраткаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("ПодробнаяИнформация",	Метаданные.ПодробнаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("Версия",				Метаданные.Версия);
	ПараметрыСистемы.Конфигурация.Вставить("ВстроенныйЯзык",		"ru");
	ПараметрыСистемы.Конфигурация.Вставить("УИДИнтеграции",			УидСистемы);
	//Для анлгоязычных систем переопределим язык для проверки функций
	Если Найти(Строка(Метаданные), "Metadata") Тогда
		ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
	КонецЕсли;	
	//Для возможности записи в ИдПользователя для способов интеграции SDK2 и Каталог
	ПараметрыСистемы.Клиент.Вставить("ИдПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

КонецПроцедуры

//Возвращает режим использования обработки: Во внешнем файле или в справочнике
&НаСервере
Функция ПолучитьРежимИспользованияОбработки(ПолноеИмяОбработки) Экспорт
		
	Если Прав(ПолноеИмяОбработки, 3) = "epf" Тогда
		РежимИспользования = "Файл внешней обработки";
	Иначе
		РежимИспользования = "Обработка в справочнике внешних обработок";
	КонецЕсли;
	Возврат РежимИспользования;
	
КонецФункции

//Возвращает полное имя файла обработки.
&НаСервере
Функция сбисПолноеИмяФайла(сбисПараметрыСистемы) Экспорт
	Если сбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"")").ИспользуемоеИмяФайла;
	Иначе
		Возврат Вычислить("ИспользуемоеИмяФайла");
	КонецЕсли;	
КонецФункции

//Возвращает строковое представление типа платформы сервера.
&НаСервереБезКонтекста
Функция ТипПлатфтормыСервер(Знач СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция РежимЗапускаПриложения()
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат "ТолстыйКлиентОбычноеПриложение";
	#ИначеЕсли ВебКлиент Тогда
		Возврат "ВебКлиент";
	#ИначеЕсли ТонкийКлиент Тогда
		Возврат "ТонкийКлиент";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат "ТолстыйКлиентУправляемоеПриложение";
	#ИначеЕсли Сервер Тогда
		Возврат "Сервер";	
	#ИначеЕсли ВнешнееСоединение Тогда
		Возврат "ВнешнееСоединение";
	#КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция сбисНоваяВерсия(Знач ВерсияНовая, Знач ВерсияТекущая, Знач ДопПараметры = Неопределено) Экспорт 
	
	Если		Не ЗначениеЗаполнено(ВерсияНовая) Тогда
		Возврат Ложь;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияТекущая) Тогда
		Возврат Истина;
	КонецЕсли;
	Версия1Разделить = СтрЗаменить(ВерсияНовая, ".", Символы.ПС);
	Версия2Разделить = СтрЗаменить(ВерсияТекущая, ".", Символы.ПС);
	Размер = Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	Результат = Ложь;
	Для Индекс = 1 По Размер Цикл
		Число1Сравнить = 0;
		Число2Сравнить = 0;
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = Число(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		КонецЕсли;
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = Число(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		КонецЕсли;
		Если		Число1Сравнить = Число2Сравнить Тогда
			Продолжить;
		ИначеЕсли	Число1Сравнить > Число2Сравнить Тогда
			Результат = Истина;
			Прервать;
		ИначеЕсли	Число1Сравнить < Число2Сравнить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции	

//Возвращает строковое представление типа платформы клиента.
&НаКлиенте
Функция ТипПлатфтормыКлиент(СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_СовместимостьМетодов

////////////////////////////////////////////////////
////////////////Совместимость методов///////////////
////////////////////////////////////////////////////

//Функция заполняет параметры для совместимости вызова изменившихся методов на новых релизах платформы 
&НаКлиенте
Функция СбисСовместимостьМетодов(ЛокальныйКэш, ДопПараметры=Неопределено,Отказ=Ложь) Экспорт
	СбисСооветстветствиеВерсий = сбисСоответствиеВерсийМетодов(ДопПараметры);
	СбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, СбисСооветстветствиеВерсий, Новый Структура("ВспомогательныйРазделитель", "."));
	Возврат СбисСооветстветствиеВерсий;
КонецФункции

&НаКлиенте
Процедура СбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, сбисСоответствиеВерсий, СбисДополнительныеПараметры)
	Для Каждого КлючИЗначение Из сбисСоответствиеВерсий Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			сбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, КлючИЗначение.Значение, СбисДополнительныеПараметры);
			Продолжить;
		КонецЕсли;
		лВерсияАктивации = ЛокальныйКэш.ОбщиеФункции.СериализоватьВерсию(КлючИЗначение.Значение, "Дозаполнить", СбисДополнительныеПараметры);
		СбисСоответствиеВерсий[КлючИЗначение.Ключ] = СбисНоваяВерсия(ЛокальныйКэш.ПараметрыСистемы.Клиент.ВерсияПриложения, лВерсияАктивации);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция СбисСоответствиеВерсийМетодов(ПараметрыОпределения=Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("ПреобразованиеXSL", Новый Структура("ПреобразоватьИзСтроки", "8.3.10"));
	Результат.Вставить("HTTPСоединение",	Новый Структура("ФункцияПолучить, OpenSSL", "8.3", "8.2.16"));
	Результат.Вставить("Объекты1С",			Новый Структура("ПоказатьЗначение", "8.3.3"));
	Результат.Вставить("Аккордеон",			Новый Структура("Аккордеон83", "8.3.15"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ДопОперацииРеестра(Команда)
	Если СписокДопОперацийРеестра.Количество() = 0 Тогда
		Сообщить("Для текущего реестра дополнительные операции не предусмотрены.");
		Возврат;
	КонецЕсли;
	ВыбранныеСтроки = ТаблДокПолучитьВыбранныеСтроки();
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		Сообщить("Не отмечены документы для выполнения операции.");
		Возврат;
	КонецЕсли;
	СбисПараметрыВызова = Новый Структура("Кэш, ВыбранныеСтроки", Кэш, ВыбранныеСтроки);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаДопОперации = сбисПолучитьФорму("ФормаДопОперации");
		ВыбранныйЭлемент = ФормаДопОперации.Показать(Кэш, СписокДопОперацийРеестра);
		ПослеВыбораИзМеню(ВыбранныйЭлемент, СбисПараметрыВызова);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтаФорма, СбисПараметрыВызова);
		ПоказатьВыборИзМеню(Оповещение, СписокДопОперацийРеестра, ЭтаФорма.ТекущийЭлемент);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, ПараметрыВыбора) Экспорт
	Кэш = ПараметрыВыбора.Кэш;
	ВыбранныеСтроки = ПараметрыВыбора.ВыбранныеСтроки;
	// Обработка выбранного элемента
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФункции = ВыбранныйЭлемент.Значение;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","",Кэш);	
	Если фрм = Ложь Тогда
		Сообщить("Не найдена функция "+ИмяФункции+". Проверьте настройки дополнительных операций для текущего реестра документов.");
		Возврат;	
	КонецЕсли;
	Результат = Вычислить("фрм."+ИмяФункции+"(Кэш, ВыбранныеСтроки)");
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДПриИзменении(Элемент)
	// Включает/выключает дублирование статусов в типовые регистры 1С
	Если СостояниеЭД = Истина Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		Отказ = Ложь;
		ПараметрыПодсистемы = Кэш.ОбщиеФункции.сбисИнициироватьПодсистему(Кэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Сообщить("Дублирование статусов в типовые регистры 1С не поддерживается для Вашей конфигурации 1С: "+ПараметрыПодсистемы.details);
			СостояниеЭД = Ложь;
		Иначе
			ПараметрыПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ПараметрыПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДокументы(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;	
	Если ТекущаяСтрока=Неопределено Тогда 
		Возврат;
	Иначе	
		СписокОтмеченныхДокументов = Кэш.ГлавноеОкно.ТаблДокПолучитьВыбранныеСтроки();	
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ВыполнитьПроверкуРасхождений","Документ_Шаблон", "", Кэш);
		РезультатСопоставленияДокументов = фрм.ВыполнитьПроверкуРасхождений(Кэш, СписокОтмеченныхДокументов, Новый Структура());
  	КонецЕсли;
КонецПроцедуры

#КонецОбласти