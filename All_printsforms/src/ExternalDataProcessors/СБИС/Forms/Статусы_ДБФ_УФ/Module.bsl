
#Область include_core_vo2_Статусы_DBF_Переменные

&НаКлиенте
Перем ЛокальныйКэш Экспорт;

#КонецОбласти

#Область include_local_Статусы_DBF_Переменные
#КонецОбласти

#Область include_core_vo2_Статусы_DBF_ВнешнийВызов

&НаКлиенте
Функция УстановитьПараметрыМодуля(ПараметрыУстановки=Неопределено, Кэш)			Экспорт
	ЛокальныйКэш = Кэш;
	УстановитьПараметрыDBF(Кэш);
КонецФункции

//Добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаКлиенте
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат ЗаписатьПараметрыДокументовСБИСНаСервере(ДанныеПоСтатусам);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

//добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаКлиенте
Функция ЗаписатьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС, ДокументСсылка, Ини, КаталогНастроек, ДопПараметры=Неопределено) Экспорт
	Попытка
		Возврат ЗаписатьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

// Для массива документов СБИС ищет по идентификаторам пакетов и вложений документы 1С	
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, ИниКонфигурация, КаталогНастроек) Экспорт	
	Попытка
		ПолучитьТаблицуДокументов1СПоИдВложенияСБИСНаСервере(МассивДокументов, МассивИдентификаторов);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецПроцедуры

// проставляет статусы по идентификаторам пакетов при получении списка изменений	
&НаКлиенте
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	Попытка
		ЗаписатьИзмененияПоДокументам1СНаСервере(МассивДокументов, Ини);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Запись параметров сопоставления недоступна."), ЛокальныйКэш);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, ДополнительныеПараметры) Экспорт
	Отказ = Ложь;
	РезультатЗаполнения = Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;
	ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, Кэш.Парам.КаталогНастроек);
КонецФункции

// удаляет свойства для документа 1С (при удалении сопоставления)
&НаКлиенте
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС, ДокументСсылка, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Удаление параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,ДополнительныеПараметры = Неопределено) Экспорт
	Попытка
		Возврат УдалитьПараметрыДокументаСБИСПарамНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Удаление параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

// функция ищет связанные документы 1С для каждого вложения пакета и заполняет массив служебных вложений	
&НаКлиенте
Функция НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, КэшИни, КаталогНастроек, МассивСлужебных) Экспорт
	Попытка
		Возврат НайтиДокументы1СПоПакетуСБИСНаСервере(ПолныйСоставПакета, КэшИни, МассивСлужебных);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек) Экспорт
	Попытка
		Возврат НайтиДокументы1СПоИдВложенияСБИСНаСервере(Ид, ИдВложения);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

//Возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С 	
&НаКлиенте
Функция ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек, ИмяСвойства, Ини) Экспорт
	Попытка
		Возврат ПрочитатьПараметрыДокументаСБИСНаСервере(ДокументСсылка, ИмяСвойства);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, ИниКонфигурация, КаталогНастроек) Экспорт	
	Попытка
		ПолучитьТаблицуДокументов1СПоИдПакетаСБИСНаСервере(МассивДокументов);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтатусыВТаблицеДокументов1С(МассивДокументов1С, ПараметрыФильтра, Ини, КаталогНастроек) Экспорт
	Попытка
		Возврат ЗаполнитьСтатусыВТаблицеДокументов1СНаСервере(МассивДокументов1С, ПараметрыФильтра);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
		Возврат МассивДокументов1С;
	КонецПопытки;
КонецФункции

#Область include_core_vo2_Статусы_DBF_ВнешнийВызов_Актуальные

&НаКлиенте
Функция СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыСвойства, Кэш) Экспорт
	Попытка
		Возврат ПрочитатьПараметрыДокументаСБИСНаСервере(ПараметрыСвойства.ДокументСсылка, ПараметрыСвойства.Имя);
	Исключение
		СообщитьИсключениеДБФ(Новый Структура("ИнформацияОбОшибке, Сообщение", ИнформацияОбОшибке(), "Чтение параметров сопоставления недоступно."), ЛокальныйКэш);
	КонецПопытки;
КонецФункции

//Функция возвращает параметры сопоставленного документа СБИС - ИД пакета и аккаунта
&НаКлиенте
Функция СбисПрочитатьСведенияОПакете(ПараметрыЧтения, Кэш) Экспорт
	ПараметрыЧтенияСвойства	= Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", ПараметрыЧтения.ДокументСсылка);
	ИдДокументаЗначение		= СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства, Кэш);
	Возврат Новый Структура("ИдДокумента, ИдАккаунта", ИдДокументаЗначение, "");
КонецФункции

#КонецОбласти


#Область include_core_vo2_Статусы_DBF_ВнешнийВызов_РаботаСПодключением

//Добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
&НаСервере
Функция ЗаписатьПараметрыДокументовСБИСНаСервере(ДанныеПоСтатусам)
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		ЗаписатьПараметрыДокументаСБИСНаСервере(Элемент.СтруктураСвойств,Элемент.Документ1С);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ЗаписатьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка)
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");

	//Если ФайлСтатусов.Существует() Тогда
	//Иначе
	//	БД.Execute("Create Table State.dbf (IDPACK char(120), IDINPACK char(120), IDDOC char(240), STATE char(240))");
	//КонецЕсли;
	БД = ПолучитьСоединениеDBF();
	ИдДок = ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from State where State.IDDOC like'"+ИдДок+"%'",БД,2,3);

	Если Recordset.EOF=Ложь Тогда 
	Иначе
		RecordSet.AddNew();
	    RecordSet.Fields("IDDOC").value=ИдДок; 
	КонецЕсли;
    Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		ИмяПоля = ИмяПоляДБФПоИмениСвойства(Свойство.Ключ);
		Recordset.Fields(ИмяПоля).value = Свойство.Значение;
	КонецЦикла;
    RecordSet.Update();
КонецФункции

// Для массива документов СБИС ищет по идентификаторам пакетов и вложений документы 1С	
&НаСервере
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИСНаСервере(МассивДокументов, МассивИдентификаторов)
	БД = ПолучитьСоединениеDBF();
	
	ТаблицаДокументов1С = Новый ТаблицаЗначений;
	ТаблицаДокументов1С.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("ИдВложения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("Ссылка");
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	Для Каждого Элемент Из МассивИдентификаторов Цикл				   
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open("Select * from State where State.IDPACK like'"+Элемент.Ид+"%' and State.IDINPACK like'"+Элемент.ИдВложения+"%'",БД,2,3);
		Если Recordset.EOF=Ложь Тогда 
			ТипИдДок = RecordSet.Fields("IDDOC").value;
			ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			НоваяСтрока = ТаблицаДокументов1С.Добавить();
			НоваяСтрока.Ид = Элемент.Ид;
			НоваяСтрока.ИдВложения = Элемент.ИдВложения;
			НоваяСтрока.Ссылка = СсылкаДок;
		КонецЕсли;
	КонецЦикла;
	//КонецЕсли;
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		Если стр.СоставПакета[0].Значение.Свойство("Вложение") Тогда
			ДокументПроведен=-1;
			Для Каждого Вложение Из стр.СоставПакета[0].Значение.Вложение Цикл
				Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
					
					массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид, ИдВложения", стр.ИдСБИС, Вложение.Идентификатор) ) ;
					Если массивДоков.количество()>0 тогда 
						Документы1С = Новый СписокЗначений;
						Для Каждого Элемент Из массивДоков Цикл
							Документы1С.Добавить(Элемент.Ссылка);
							стр.Документы1С.Добавить(Элемент.Ссылка);
						КонецЦикла;
						Вложение.Вставить("Документы1С", Документы1С);
						стр.Вставить("СуммаДокумента1С", 0);
						стр.Вставить("Дельта", 0);
						ДокументПроведен = ?(ДокументПроведен=-1,сбисИндексКартинкиПоДокументу1С(массивДоков[0].Ссылка), ДокументПроведен);
						стр.Вставить("Проведен", ДокументПроведен);
					Иначе
						Вложение.Вставить("Документы1С",Новый СписокЗначений);
						стр.Вставить("СуммаДокумента1С", 0);
						Если Не стр.Свойство("Проведен") Тогда
							стр.Вставить("Проведен", -1);
						КонецЕсли;
						стр.Вставить("Дельта", 0);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// проставляет статусы по идентификаторам пакетов при получении списка изменений	
&НаСервере
Процедура ЗаписатьИзмененияПоДокументам1СНаСервере(МассивДокументов, Ини)
	БД = ПолучитьСоединениеDBF();
	
	Для Каждого СоставПакета Из МассивДокументов Цикл
		Если СоставПакета.Свойство("Идентификатор") и СоставПакета.Свойство("Состояние") Тогда
			Если СоставПакета.Свойство("Редакция") и СоставПакета.Редакция[0].Актуален = "Нет" Тогда  // на документах 1С проставляем статусы только для актуальных редакций
				Продолжить;
			КонецЕсли;
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select * from State where State.IDPACK like'"+СоставПакета.Идентификатор+"%'",БД,2,3);
			
			Пока Recordset.EOF=Ложь Цикл
				// alo <<
				СоставПакета.вставить("Документы1С",новый списокЗначений);
				
				ТипИдДок = RecordSet.Fields("IDDOC").value;
				ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
				ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
				СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
				Если сбисПриоритетСтатуса(СоставПакета.Состояние.Название) > сбисПриоритетСтатуса(RecordSet.Fields("STATE").value) Тогда
					RecordSet.Fields("STATE").value = СоставПакета.Состояние.Название; 
					RecordSet.Update();
					СоставПакета.Документы1С.Добавить(СсылкаДок);
					// alo >>
				КонецЕсли;
				
				ИмяДокумента = СсылкаДок.Метаданные().Имя;
				//Если Найти(нрег(ИмяДокумента), "фактура")>0 Тогда // в фактуре проставляем дату и способ выставления
				Если Ини.Свойство(ИмяДокумента) и Ини[ИмяДокумента].Свойство("мФайл") Тогда
					Попытка
						Если СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Название = "Подтверждение даты получения" Тогда
							Событие=СоставПакета.Событие[0];
							Для Каждого Элемент Из Ини[ИмяДокумента].мФайл Цикл
								Если Элемент.Значение.Свойство("ЗаполнятьДатуСпособВыставления") и Элемент.Значение.ЗаполнятьДатуСпособВыставления.Значение ="'Истина'" Тогда
									ИмяРеквизитаДатыВыставления = Сред(Элемент.Значение.ДатаВыставления.Значение, Найти(Элемент.Значение.ДатаВыставления.Значение, ".")+1);
									ИмяРеквизитаСпособаВыставления = Сред(Элемент.Значение.СпособВыставления.Значение, Найти(Элемент.Значение.СпособВыставления.Значение, ".")+1);
									ЗначениеСпособаВыставления = Элемент.Значение.СпособВыставления.Вычислить;
									ДокОбъект = СсылкаДок.ПолучитьОбъект();
									ДокОбъект[ИмяРеквизитаДатыВыставления] = Событие.ДатаВремяДокумента;
									ДокОбъект[ИмяРеквизитаСпособаВыставления] = ЗначениеСпособаВыставления;
									ДокОбъект.Записать();
								КонецЕсли;
								Прервать;
							КонецЦикла;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				//КонецЕсли;
				RecordSet.MoveNext();
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

// удаляет свойства для документа 1С (при удалении сопоставления)
&НаСервере
Функция УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС, ДокументСсылка)
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF();
	
	ИдДок = ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open("Select * from State where State.IDDOC like'"+ИдДок+"%'",БД,2,3);
	
	Если Recordset.EOF=Ложь Тогда 
		Recordset.Delete(); 
	КонецЕсли;
	//КонецЕсли;
КонецФункции

&НаСервере
Функция УдалитьПараметрыДокументаСБИСПарамНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка)
	УдалитьПараметрыДокументаСБИСНаСервере(СтруктураПараметровДокументаСБИС,ДокументСсылка);
КонецФункции

&НаСервере
Функция НайтиДокументы1СПоПакетуСБИСНаСервере(ПолныйСоставПакета, КэшИни, МассивСлужебных)
	БД = ПолучитьСоединениеDBF();
	сч = 0;
	Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
			ДанныеДокумента1С = НайтиДокументы1СПоИдВложенияСБИСНаСервере(ПолныйСоставПакета.Идентификатор, Вложение.Идентификатор);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документы1С", Новый СписокЗначений);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документ1СПроведен");
			Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
				ПолныйСоставПакета.Вложение[сч].Документы1С=ДанныеДокумента1С.Ссылки;
				ПолныйСоставПакета.Вложение[сч].Документ1СПроведен=ДанныеДокумента1С.Проведен;
			КонецЕсли;
		Иначе
			МассивСлужебных.Добавить(сч);
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;		
КонецФункции

&НаСервере
Функция НайтиДокументы1СПоИдВложенияСБИСНаСервере(Ид, ИдВложения)
	// Ищет документы 1С По идентификаторам пакета и вложения
	Документы1С = Новый СписокЗначений;
	ЕстьПроведенный = Ложь;
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF();
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open("Select * from State where State.IDPACK like'"+Ид+"%' and State.IDINPACK like'"+ИдВложения+"%'",БД,2,3);
	Пока Recordset.EOF=Ложь Цикл 
		ТипИдДок = RecordSet.Fields("IDDOC").value;
		ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
		ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
		СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
		Документы1С.Добавить(СсылкаДок);
		Попытка    // попытка на случай отправки справочника, а не документа
			Если СсылкаДок.Проведен Тогда
				ЕстьПроведенный = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		RecordSet.MoveNext();
	КонецЦикла;
	//КонецЕсли;
	
	Возврат Новый Структура("Ссылки, Проведен",Документы1С, ЕстьПроведенный);
КонецФункции

&НаСервере
Функция ПрочитатьПараметрыДокументаСБИСНаСервере(ДокументСсылка, ИмяСвойства)
	// возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С 	
	ИмяПоля = ИмяПоляДБФПоИмениСвойства(ИмяСвойства);
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF();
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	ИдДок = ДокументСсылка.Метаданные().Имя+":"+строка(ДокументСсылка.УникальныйИдентификатор());
	Recordset.Open("Select * from State where State.IDDOC='"+ИдДок+"'",БД,2,3);
	Если Recordset.EOF=Ложь Тогда 
		Возврат RecordSet.Fields(ИмяПоля).value;
	КонецЕсли;	
	//КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИСНаСервере(МассивДокументов)
	// Для массива документов СБИС ищет по идентификаторам пакетов документы 1С	
	ТаблицаДокументов1С = Новый ТаблицаЗначений;
	ТаблицаДокументов1С.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ТаблицаДокументов1С.Колонки.Добавить("Ссылка");
	//ФайлСтатусов = Новый Файл(КаталогНастроек+"\State.dbf");
	//Если ФайлСтатусов.Существует() Тогда
	//	БД = Новый COMОбъект("ADODB.Connection");
	//	БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД = ПолучитьСоединениеDBF();
	
	Для Каждого Элемент Из МассивДокументов Цикл				   
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open("Select * from State where State.IDPACK like'"+Элемент.ИдСБИС+"%'",БД,2,3);
		Если Recordset.EOF=Ложь Тогда 
			ТипИдДок = RecordSet.Fields("IDDOC").value;
			ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			НоваяСтрока = ТаблицаДокументов1С.Добавить();
			НоваяСтрока.Ид = Элемент.ИдСБИС;
			НоваяСтрока.Ссылка = СсылкаДок;
		КонецЕсли;
	КонецЦикла;
	
	//КонецЕсли;
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид", стр.ИдСБИС) ) ;
		Если массивДоков.количество()>0 тогда 
			Документы1С = Новый СписокЗначений;
			Для Каждого Элемент Из массивДоков Цикл
				Документы1С.Добавить(Элемент.Ссылка);
			КонецЦикла;
			стр.Вставить("Документы1С", Документы1С);
			Попытка
				стр.Вставить("СуммаДокумента1С", массивДоков[0].Ссылка.СуммаДокумента);
				Дельта = Число(стр.Сумма) - стр.СуммаДокумента1С;
				Дельта = ?(Дельта<0,-Дельта,Дельта);
				стр.Вставить("Дельта", Дельта);
			Исключение
				стр.Вставить("СуммаДокумента1С", 0);
				стр.Вставить("Дельта", 0);
			КонецПопытки;
			стр.Вставить("Проведен", сбисИндексКартинкиПоДокументу1С(массивДоков[0].Ссылка));
		Иначе
			стр.Вставить("Документы1С",Новый СписокЗначений);
			стр.Вставить("СуммаДокумента1С", 0);
			стр.Вставить("Проведен", -1);
			стр.Вставить("Дельта", 0);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтатусыВТаблицеДокументов1СНаСервере(МассивДокументов1С, ПараметрыФильтра)
	// Используется при построении реестров 1С. Проставляет статусы документов и накладывает фильтр по состоянию документов.
	// Используется только в случае хранения статусов в ДБФ, т.к. при хранении в 1С статусы получаем сразу в запросе.
	ОтфильтрованныйМассивДокументов1С = Новый Массив;
	
	БД = ПолучитьСоединениеDBF();
	
	КоличествоДок = МассивДокументов1С.Количество();
	Шаг = 2000;
	Счетчик = 0;
	ТекущееКоличество = 0;
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Документ1С");
	ТаблицаСтатусов.Колонки.Добавить("Статус");
	
	// делаем запросы статусов из ДБФ по партиям для каждых 2000 документов 1С (разбиваем по частям, т.к. при большом количестве документов ругается "слишком сложный запрос")
	Пока ТекущееКоличество< КоличествоДок Цикл
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		sql_str = "Select * from State where State.IDDOC IN(";
		ВремКоличество = Мин(ТекущееКоличество+Шаг, КоличествоДок)-1;
		Для Счетчик=ТекущееКоличество По ВремКоличество Цикл
			ИдДок=МассивДокументов1С[Счетчик].СоставПакета[0].Значение.Метаданные().Имя+":"+строка(МассивДокументов1С[Счетчик].СоставПакета[0].Значение.УникальныйИдентификатор());
			
			sql_str = sql_str+"'"+ИдДок + "', ";	
		КонецЦикла;
		sql_str = Лев(sql_str, СтрДлина(sql_str)-2);
		sql_str = sql_str+")";
		Recordset.Open(sql_str,БД,2,3);
		
		Пока Recordset.EOF=Ложь Цикл 
			НоваяСтр = ТаблицаСтатусов.Добавить();
			ТипИдДок = RecordSet.Fields("IDDOC").value;
			ТипДок = Лев(ТипИдДок, Найти(ТипИдДок, ":")-1);
			ИдДок = СокрЛП(Сред(ТипИдДок, Найти(ТипИдДок, ":")+1));
			СсылкаДок = Документы[ТипДок].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДок));
			НоваяСтр.Документ1С = СсылкаДок;
			НоваяСтр.Статус = RecordSet.Fields("STATE").value;
			RecordSet.MoveNext();
		КонецЦикла;
		ТекущееКоличество = ТекущееКоличество + Шаг;
	КонецЦикла;
	// проставляем статусы в таблице документов 1С, накладываем фильтр по состоянию документа
	Для каждого стр из МассивДокументов1С цикл 
		массивДоков =  ТаблицаСтатусов.найтиСтроки(Новый Структура("Документ1С", стр.Документ1С) ) ;
		Если массивДоков.количество()>0 тогда 
			ИндексКартинки = сбисИндексКартинкиПоСтатусуЭД(массивДоков[0].Статус);
		Иначе
			ИндексКартинки = -1;
		КонецЕсли;
		Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
			(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2 или ИндексКартинки=9)) или
			((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
			(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
			(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
			(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и (ИндексКартинки=7 или ИндексКартинки=8)) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные контрагентом" и ИндексКартинки=7) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Удаленные мной" и ИндексКартинки=8) или // alo
			(ПараметрыФильтра.ФильтрСостояние = "Не отправленные" и ИндексКартинки=-1) Тогда
			Стр.Вставить("Статус", ИндексКартинки);
			ОтфильтрованныйМассивДокументов1С.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	
	//Для Каждого Стр Из МассивДокументов1С Цикл
	//	Статус =  ПрочитатьПараметрыДокументаСБИС(Стр.СоставПакета[0].Значение, КаталогНастроек, "ДокументСБИС_Статус");
	//	ИндексКартинки = сбисИндексКартинкиПоСтатусуЭД(Статус);
	//	Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
	//		(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2)) или
	//		((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
	//		(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
	//		(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
	//		(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Удалено контрагентом" и ИндексКартинки=7) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и ИндексКартинки=8) или
	//		(ПараметрыФильтра.ФильтрСостояние = "Несопоставленные" и ИндексКартинки=-1) Тогда
	//		Стр.Вставить("Статус", ИндексКартинки);
	//		ОтфильтрованныйМассивДокументов1С.Добавить(Стр);
	//	КонецЕсли;
	//КонецЦикла;
	Возврат ОтфильтрованныйМассивДокументов1С;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область include_core_vo2_Статусы_DBF_ПодключениеDBF

&НаКлиенте
Процедура УстановитьПараметрыDBF(Кэш)
	ИниКонфигурация				= Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	КаталогНастроекНаСервере	= Кэш.ОбщиеФункции.РассчитатьЗначение("СтатусыДБФ_КаталогНаСервере",	ИниКонфигурация);
	СтрокаПодключения			= Кэш.ОбщиеФункции.РассчитатьЗначение("СтрокаПодключенияДБФ",			ИниКонфигурация);
	Если КаталогНастроекНаСервере = Неопределено Тогда
		КаталогНастроекНаСервере	= Кэш.Парам.ИдентификаторНастроек;
	КонецЕсли;
    Если СтрокаПодключения = Неопределено Тогда
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + КаталогНастроекНаСервере + ";";
	КонецЕсли;
	ПараметрыСоединения = Новый Структура("Каталог, Строка, ВызывалосьСоздание, Подключено, ТребуетсяПовторныйВызов", КаталогНастроекНаСервере, СтрокаПодключения, Ложь, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьИсключениеДБФ(ПараметрыИсключения, Кэш)
	СбисИсключение = ОбработатьИсключениеДБФ(ПараметрыИсключения, Кэш);
	Если СбисИсключение.code = 717 Тогда
		Кэш.ГлавноеОкно.СбисСообщитьПользователю(Новый Структура("Текст", СбисИсключение.details), Кэш);
	Иначе
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
	КонецЕсли;
КонецПроцедуры

//Обработка ошибки при работе с DBF
&НаКлиенте
Функция  ОбработатьИсключениеДБФ(ПараметрыИсключения, Кэш)
	Перем СбисХелп, СбисСообщение;
	ИнформацияОбОшибке	= ПараметрыИсключения.ИнформацияОбОшибке;
	СбисДитейл			= ПараметрыИсключения.Сообщение;
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
    
	Если Найти(ИнформацияОбОшибке.Описание, "ODBC") Тогда  
		СбисКод			= 776; 
		СбисХелп		= "https://sbis.ru/help/integration/catalog/driver_not_found";
		СбисСообщение	= СбисДитейл;
		СбисДитейл		= ИнформацияОбОшибке.Описание;
	ИначеЕсли ИнформацияОбОшибке.Описание = "Не подключен файл статусов DBF." Тогда
		СбисКод			= 717;
		СбисДитейл		= ИнформацияОбОшибке.Описание + " " + СбисДитейл;
	Иначе
		СбисКод			= 773;
		СбисСообщение	= СбисДитейл;
		СбисДитейл		= ИнформацияОбОшибке.Описание
	КонецЕсли; 
	Возврат Кэш.СБИС.МодульОбъектаКлиент.НовыйСбисИсключение(,	"Статусы_ДБФ.ОбработатьИсключениеДБФ", 
																	СбисКод, СбисСообщение, СбисДитейл,, СбисХелп);	
КонецФункции

// получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново	
&НаСервере
Функция ПолучитьСоединениеDBF()
	Если ПараметрыСоединения = Неопределено Тогда
		ВызватьИсключение("Не установлена форма работы со статусами");
	ИначеЕсли ПараметрыСоединения.Подключено Тогда
#Область include_local_Статусы_DBF_ПодключениеDBF_ХранилищеПолучение
		СтруктураВХранилище = ПолучитьИзВременногоХранилища(ПараметрыСоединения.Хранилище);
		Если Не СтруктураВХранилище = Неопределено Тогда
			Возврат СтруктураВХранилище.БД;
		Иначе
			//Иначе - повтор создания
			ПараметрыСоединения.Подключено = Ложь;
			ПараметрыСоединения.ТребуетсяПовторныйВызов = Истина;
		КонецЕсли;
#КонецОбласти
	ИначеЕсли	ПараметрыСоединения.ВызывалосьСоздание
			И	Не ПараметрыСоединения.ТребуетсяПовторныйВызов Тогда
		//Уже вызывалось, но не подключено
		ВызватьИсключение("Не подключен файл статусов DBF.");
	КонецЕсли;
	ФайлСтатусов	= Новый Файл(ПараметрыСоединения.Каталог+"\State.dbf");
	ПараметрыСоединения.ВызывалосьСоздание = Истина;
	БД				= Новый COMОбъект("ADODB.Connection");
	ПараметрыСоединения.ТребуетсяПовторныйВызов	= Ложь;//После создания объекта, повторно уже не потребуется вызывать. Дальше уже если упадёт, то всё.
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//			   "Data Source=" + КаталогНастроек + ";Extended Properties=""DBASE IV;"";");
	БД.Open(ПараметрыСоединения.Строка);
	Если Не ФайлСтатусов.Существует() Тогда
		БД.Execute("Create Table State.dbf (IDPACK char(120), IDINPACK char(120), IDDOC char(240), STATE char(240))");
	КонецЕсли;
	ПараметрыСоединения.Подключено = Истина;
	
#Область include_local_Статусы_DBF_ПодключениеDBF_ХранилищеЗапись
	сАдресВХранилище = ПоместитьВоВременноеХранилище(Новый Структура("БД", БД), Новый УникальныйИдентификатор());
	ПараметрыСоединения.Вставить("Хранилище", сАдресВХранилище);
#КонецОбласти

	Возврат БД;
КонецФункции

&НаСервере
Процедура  ЗавершитьСоединениеСDBFНаСервере()
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры
	
#КонецОбласти

#Область include_core_vo2_Статусы_DBF_СерверБезКонтекста

//Функция возвращает индекс картинки по состоянию документа 1С
&НаСервереБезКонтекста
Функция СбисИндексКартинкиПоДокументу1С(Документ1С) Экспорт
	Попытка
		Если Документ1С.Проведен Тогда 
			Возврат 0;
		ИначеЕсли Документ1С.ПометкаУдаления Тогда 
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	Исключение
	    Возврат 0;
	КонецПопытки;
КонецФункции

//Функция возвращает индекс картинки по статусу электронного документа	
&НаСервереБезКонтекста
Функция СбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
	Если		Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1    
		Или	СтатусЭД = "10"
		Или	СтатусЭД = "0"	Тогда// Выгружен или загружен на сервер 
		Возврат 0;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отослано приглашение")=1
		Или	СтатусЭД = "2" Тогда// Отправлено приглашение
		Возврат 1;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отправлен")=1
		Или	СтатусЭД = "3"	Тогда// Отправлен
		Возврат 2;
	ИначеЕсли	Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0
		Или	СтатусЭД = "6"	Тогда// Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли	Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1
		Или СтатусЭД = "4"	Тогда// Доставлен
		Возврат 4;
	ИначеЕсли	Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 
		Или	СтатусЭД = "9"	Тогда// Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 
		Или СтатусЭД = "7"	Тогда// Утвержден
		Возврат 6;
	ИначеЕсли	Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 
		Или СтатусЭД = "20"	Тогда// Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	ИначеЕсли Найти(нрег(СтатусЭД), "ожидает подписания")=1 Или СтатусЭД = "23"	Тогда                        // Ожидает подписания
		Возврат 9;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

//Возвращает соответствие названия статуса-DBF
&НаСервереБезКонтекста
Функция ИмяПоляДБФПоИмениСвойства(ИмяСвойства)
	Если ИмяСвойства = "ДокументСБИС_Статус" Тогда
		Возврат "STATE";
	ИначеЕсли ИмяСвойства = "ДокументСБИС_Ид" Тогда
		Возврат "IDPACK";
	ИначеЕсли ИмяСвойства = "ДокументСБИС_ИдВложения" Тогда
		Возврат "IDINPACK";
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция возвращает индекс картинки по статусу электронного документа	
&НаСервереБезКонтекста
функция сбисПриоритетСтатуса(СтатусЭД)
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

//Не поддерживается, заглушка
&НаСервереБезКонтекста
Функция ПолучитьИдДокументаДопСвойства(Знач СсылкаНаОбъект, Знач ДопПараметры) Экспорт
	Возврат Неопределено;
КонецФункции	

//Не поддерживается, заглушка
&НаСервереБезКонтекста
Функция ПрочитатьПараметрыДокументовСБИС(Знач СписокСсылок,Знач МассивСвойств,Знач Конфигурация,Знач ДополнительныеПараметры) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти
