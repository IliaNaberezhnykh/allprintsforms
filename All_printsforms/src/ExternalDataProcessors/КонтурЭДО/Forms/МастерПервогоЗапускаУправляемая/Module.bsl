         
&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем ТипСвязанногоСправочника;

//{	СЕРВИСНЫЕ МЕТОДЫ

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

//}	СЕРВИСНЫЕ МЕТОДЫ


//{	МЕТОДЫ ИНТЕРАКТИВНОЙ РАБОТЫ

&НаКлиенте
Процедура ВывестиСообщениеПользователю(Текст, Поле = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст	= Текст;	
	Сообщение.Поле	= Поле;
	
	Сообщение.Сообщить();	
	
КонецПроцедуры

//}	МЕТОДЫ ИНТЕРАКТИВНОЙ РАБОТЫ


//{ ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПараметрыФормы();
	
	ИнициализироватьАдресаКартинок();
	
	ЗаполнитьДоступныеОрганизацииНаСервере();
	
	ОпределитьМаксимальноеКоличествоШаговНаСервере();
	
	УстановитьСвойстваФормыТаксиНаСервере();
	
	УстановитьЗначенияРеквизитовФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыФормы()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Параметры.Свойство("ПоказатьШагНастройкиОтправкиДокументов", ПоказатьШагНастройкиОтправкиДокументов);
	Параметры.Свойство("ПоказатьНачальнуюСтраницу", ПоказатьНачальнуюСтраницу);
	Параметры.Свойство("ТипАвторизации", ТипАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияРеквизитовФормыНаСервере()
	
	ТипСправочникаОрганизацииПоУмолчанию = ОграничениеТипаОрганизацииПоУмолчанию();
	
КонецПроцедуры

Процедура ИнициализироватьАдресаКартинок()
	
	ЛоготипДД = КартинкаЛоготипДиадок();
	Логотип1С = КартинкаЛоготип1СКрасный();
	
	АдресКартинкиЛоготипДиадок = ПоместитьВоВременноеХранилище(ЛоготипДД, УникальныйИдентификатор);
	АдресКартинкиЛоготип1СКрасный = ПоместитьВоВременноеХранилище(Логотип1С, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ОграничениеТипаОрганизацииПоУмолчанию()
	
	ИмяТипа = ИмяТипаСправочникаОрганизацииПоУмолчанию();
	
	Если ЗначениеЗаполнено(ИмяТипа) Тогда
		
		ТипЗначения = Тип(ИмяТипа);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначения);
		
		ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
	Иначе
		
		ОграничениеТипа = ОграничениеТипа_Неопределено();
		
	КонецЕсли;
	
	Возврат ОграничениеТипа;
	
КонецФункции

&НаСервере
Функция ИмяТипаСправочникаОрганизацииПоУмолчанию()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ИмяСправочника = "Организации";
	
	ИмяТипа = Ядро.Справочники_ТипЗначенияОбъекта(ИмяСправочника);
	
	Возврат ИмяТипа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОграничениеТипа_Неопределено()
	
	Результат = Новый ОписаниеТипов("Неопределено");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БиблиотекаКартинок()
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Результат = ОбработкаОбъект.БиблиотекаКартинок();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КартинкаЛоготипДиадок()
	
	ВсеКартинки = БиблиотекаКартинок();
	
	Возврат ВсеКартинки.КартинкаЛоготипДиадок;
	
КонецФункции

&НаСервере
Функция КартинкаЛоготип1СКрасный()
	
	ВсеКартинки = БиблиотекаКартинок();
	
	Возврат ВсеКартинки.КартинкаЛоготип1СКрасный;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Открытие формы";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), КатегорияМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, Метрика_НазваниеФормы());

	Если НЕ ПоказатьНачальнуюСтраницу Тогда
		ОткрытьСтраницуВыбораОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Закрытие формы";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), КатегорияМетрики, Ложь);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, Метрика_НазваниеФормы());
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Если ПустаяСтрока(ТипАвторизации) Тогда
		
		ИмяСобытия = "Диадок_ОбновитьГлавныйСписок";
		ПараметрыОповещения = Неопределено;
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);
		
	Иначе
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("РежимАвторизации", ТипАвторизации);
		
		ИмяСобытия = "Диадок_АвторизацияВыполнена";
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Диадок_Сохранение_Контрагент" Тогда
		
		ОбработатьОповещениеОСохраненииКонтрагентаНаСервере(Параметр.ID);
		ОбновитьСписокКонтрагентовПоРежиму();
		УдалитьСохраненныйВКэшСписокКонтрагентов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСохраненныйВКэшСписокКонтрагентов()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ПараметрыСписка = Модуль_Ядро.Контрагенты_ПараметрыПолученияСпискаПартнеров(ДанныеТекущейОрганизации);
	
	Модуль_Ядро.Контрагенты_ОчиститьСписок(ПараметрыСписка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОСохраненииКонтрагентаНаСервере(BoxId)
	
	ОбновитьДанныеКонтрагентаНаСервере(BoxId);
	ОбновитьЗаголовкиКнопокРежимовОтображенияКонтрагентовНаСервере();
	
КонецПроцедуры

//} ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ


//{	ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ
          
&НаКлиенте
Процедура НачатьНастройку(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Начать настройку";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ОсновнаяФорма().НачатьПроверкуНеобходимостиОплатыСервиса();
	Модуль_Ядро.Кэш_Поместить("ПроверкаОплатыСервисаВыполненаПриЗапускеМПЗ", Истина);
	
	ОткрытьСтраницуВыбораОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Перейти назад";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Метрика_СтатистикаПереходаНаСтраницу(КатегорияМетрики, ДействиеМетрики);

	НомерШага = НомерШага - 1;
	
	УстановитьТекущуюСтраницуНастройки();
	УстановитьВидимостьСтраницыПодвал();
	
	ОбновитьНадписьНомерШага();
	
КонецПроцедуры

&НаКлиенте
Процедура Дальше(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Перейти дальше";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Метрика_СтатистикаПереходаНаСтраницу(КатегорияМетрики, ДействиеМетрики);

	НомерШага = НомерШага + 1;
	 	    
	ВыполнитьСвязанныеСШагомДействия();

	УстановитьТекущуюСтраницуНастройки();
	УстановитьВидимостьСтраницыПодвал();
	
	ОбновитьНадписьНомерШага();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриступитьКРаботе(Команда)
	
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики = "Приступить к работе";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОтборНастроенныеОрганизации = Новый Структура("Настроена", Истина);
	НастроенныеОрганизации = ДоступныеОрганизации.НайтиСтроки(ОтборНастроенныеОрганизации);
	
	Переменные = Новый Соответствие;
	
	Переменные.Вставить("Количество строк в ТЧ", ДоступныеОрганизации.Количество());
	Переменные.Вставить("Количество настроенных организаций", НастроенныеОрганизации.Количество());
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Закрыть(КодВозвратаДиалога.Да);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьСписокКонтрагентов(Команда)
	
	Контрагенты.Очистить();
	
	ВыполнитьСопоставлениеКонтрагентов();
	
КонецПроцедуры
 
&НаКлиенте
Процедура СброситьСопоставлениеКонтрагентов(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Сбросить автосопоставление";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики);

	ТекстВопроса	= "Очистить сопоставление контрагентов для данной организации?";
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикСброситьСопоставлениеКонтрагентов", ЭтаФорма);
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСброситьСопоставлениеКонтрагентов(Ответ, ОписаниеОповещения) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ОбработатьСбросСопоставленияКонтрагентовНаСервере();
		ОбновитьСписокКонтрагентовПоРежиму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСбросСопоставленияКонтрагентовНаСервере()
	
	СброситьСопоставлениеКонтрагентовНаСервере();
	ОбновитьЗаголовкиКнопокРежимовОтображенияКонтрагентовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимВсеКонтрагенты(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Показать все";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Количество КА ДД",	Контрагенты.Количество());
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Все;
	
	УстановитьЦветКнопокПереключенияРежимов();
	ОбновитьСписокКонтрагентовПоРежиму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимСопоставленныеКонтрагенты(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Показать сопоставленные";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОтборСопоставленные = Новый Структура("Сопоставлен", Истина);
	СопоставленныеКонтрагенты = Контрагенты.НайтиСтроки(ОтборСопоставленные);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Количество КА ДД",	СопоставленныеКонтрагенты.Количество());
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

	ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Сопоставленные;
	
	УстановитьЦветКнопокПереключенияРежимов();
	ОбновитьСписокКонтрагентовПоРежиму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимНесопоставленныеКонтрагенты(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Показать несопоставленные";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОтборНесопоставленные = Новый Структура("Сопоставлен", Ложь);
	НесопоставленныеКонтрагенты = Контрагенты.НайтиСтроки(ОтборНесопоставленные);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Количество КА ДД",	НесопоставленныеКонтрагенты.Количество());
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

	ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Несопоставленные;
	
	УстановитьЦветКнопокПереключенияРежимов();
	ОбновитьСписокКонтрагентовПоРежиму();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакДобавитьКонтрагентаВебНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Перейти к инструкции веба";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики);

	ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83854105");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакДобавитьКонтрагентаМодульНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Перейти к инструкции модуля";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики);

	ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865697");
	
КонецПроцедуры
                           
&НаКлиенте
Процедура ОтправлятьИсходящиеДокументыКонтрагентамПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Отправлять исходящие";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение",	ОтправлятьИсходящиеДокументыКонтрагентам);

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

	УстановитьДоступностьЭлементовВыбораФорматаОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация_НужнаПомощьНажатие(Элемент)
	
	ОткрытьЦентрПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦентрПоддержки()
	
	НазваниеФормы	= Метрика_НазваниеФормы();
	Категория		= Метрика_НазваниеКатегории();
	
	ОсновнаяФорма().ЦентрПоддержки_Открыть(Категория, НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПодробнееОНастройкеПакетовНажатие(Элемент)
	
	Метрика_ПодробнееОНастройкеПакетов();
	
	ПоказатьФормуПодробнееОНастройкеПакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуПодробнееОНастройкеПакетов()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "ПодробнееОНастройкеПакетов");
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ПодробнееОНастройкеПакетов()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= Ядро.Метрика_НазваниеДействий().ОткрытиеФормы;
	
	ИдентификаторПользователя = Ядро.ИдентификаторТекущегоПользователяСервиса();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ИдентификаторПользователя = "Пользователь не авторизован";
	КонецЕсли;
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики
	);
	
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		Неопределено,
		Неопределено
	);

КонецПроцедуры

//{	ОБРАБОТЧИКИ ДоступныеОрганизации
          
&НаКлиенте
Процедура ДоступныеОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ДоступныеОрганизацииИнформацияНастройка" Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Запустить настройку";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекДанные = Элементы.ДоступныеОрганизации.ТекущиеДанные;
	
	Если ТекДанные.Настроена Тогда
		Возврат;
	КонецЕсли;
	    	
	// чтобы был доступен повторный запуск настройки этой же организации,
	// делаем текущей другую ячейку
	Элемент.ТекущийЭлемент = Элементы.ДоступныеОрганизацииКартинкаДД;
          	
	ОбновитьДанныеТекущейОрганизации(ТекДанные);

	Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаСопоставлениеОрганизаций;
	
	НомерШага = 1;
	
	ВыполнитьСвязанныеСШагомДействия();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Номер строки ТЧ",			Элементы.ДоступныеОрганизации.ТекущаяСтрока + 1);
	Переменные.Вставить("Количество строк в ТЧ",	ДоступныеОрганизации.Количество());

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

	УстановитьТекущуюСтраницуНастройки();
	УстановитьВидимостьСтраницыПодвал();
	
	ОбновитьНадписьНомерШага();
	
КонецПроцедуры

//}	ОБРАБОТЧИКИ ДоступныеОрганизации

//{	ОБРАБОТЧИКИ ОрганизацииВ1С

&НаКлиенте
Процедура ОрганизацииВ1СПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЭлементОрганизацииВ1СОрганизация = Элементы.ОрганизацииВ1СОрганизация;
	
	Если ЭлементОрганизацииВ1СОрганизация.ОграничениеТипа = ОграничениеТипа_Неопределено() Тогда
		
		ОсновнаяФорма().ПоказатьВыборТипаДанныхЭлементаСоставногоТипа(ЭлементОрганизацииВ1СОрганизация);
		
	КонецЕсли;

	ОрганизацииВ1СОбновлены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииВ1СПослеУдаления(Элемент)
	
	ОрганизацииВ1СОбновлены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииВ1СОрганизацияПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Редактировать поле";
		
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ОрганизацииВ1СОбновлены = Истина;
	
	Организация1СПриИзмененииНаСервере(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииВ1СОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОрганизацииВ1СОрганизация = Элементы.ОрганизацииВ1СОрганизация;
	
	ОсновнаяФорма().УстановитьОграничениеТипаЭлементаСоставногоТипа(ЭлементОрганизацииВ1СОрганизация, ТипЗнч(ВыбранноеЗначение));
	ОсновнаяФорма().УстановитьВидимостьКнопокЭлементаСоставногоТипа(ЭлементОрганизацииВ1СОрганизация);
	
КонецПроцедуры
          
&НаКлиенте
Процедура ОрганизацииВ1СОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементОрганизацииВ1СОрганизация = Элементы.ОрганизацииВ1СОрганизация;
	
	ЭлементОрганизацииВ1СОрганизация.ОграничениеТипа = ОграничениеТипа_Неопределено();
	
	ОсновнаяФорма().УстановитьВидимостьКнопокЭлементаСоставногоТипа(ЭлементОрганизацииВ1СОрганизация);
	
КонецПроцедуры

//}	ОБРАБОТЧИКИ ОрганизацииВ1С

//} ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ


//{	ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ФОРМЫ
            
&НаСервере
Процедура ЗаполнитьДоступныеОрганизацииНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ВыбранныеОрганизации = ОрганизацииДляМастераПервогоЗапуска();
	
	Для Каждого ВыбраннаяОрганизация Из ВыбранныеОрганизации Цикл
		
		СтрокаДоступныеОрганизации = ДоступныеОрганизации.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДоступныеОрганизации, ВыбраннаяОрганизация);
		
		ЗаполнитьПредставлениеИНН_КППНаСервере(СтрокаДоступныеОрганизации, ВыбраннаяОрганизация);
		
		СтрокаДоступныеОрганизации.КартинкаДД = АдресКартинкиЛоготипДиадок;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает организации из контекста сеанса только с оплаченным доступом
// для возможности их настройки в мастере первого запуска.
//
// Возвращаемое значение: Массив - каждый элемент представляет из себя структуру с
//								   обязательными полями: boxId, Наименование, ИНН, КПП.
//
&НаСервере
Функция ОрганизацииДляМастераПервогоЗапуска()
	
	Результат = Новый Массив;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ОрганизацииКонтекста = Ядро.КонтекстСеанса_СтрокиКонтекста(Ложь);
	
	Для Каждого ОрганизацияКонтекста Из ОрганизацииКонтекста Цикл
		
		ДанныеОрганизации = Новый Структура("boxId, Наименование, ИНН, КПП");
		
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ОрганизацияКонтекста.Значение);
		
		ДанныеОрганизации.Наименование = ОрганизацияКонтекста.Значение.ОрганизацияНаименование;
		
		Результат.Добавить(ДанныеОрганизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОпределитьМаксимальноеКоличествоШаговНаСервере()
	
	ИспользоватьПодключаемыйМодуль = Модуль_ЯдроНаСервере().ОбщиеНастройки_Прочитать("ИспользоватьПодключаемыйМодуль");
	
	Если НЕ ПоказатьШагНастройкиОтправкиДокументов ИЛИ ИспользоватьПодключаемыйМодуль Тогда
		ВсегоШагов = 3;
	Иначе
		ВсегоШагов = 4;
	КонецЕсли;
	
КонецПроцедуры
    
&НаКлиенте
Процедура ОбновитьНадписьНомерШага()
	
	МаксимальноеКоличествоШагов = ВсегоШагов - 1;
	
	Элементы.НадписьВсегоШагов.Заголовок = Формат(НомерШага, "ЧГ=0") + " / " + МаксимальноеКоличествоШагов;
	
КонецПроцедуры
      
&НаКлиенте
Процедура ОткрытьСтраницуВыбораОрганизации()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройка;
	
	УстановитьТекущуюСтраницуНастройки();
	УстановитьВидимостьСтраницыПодвал();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТаксиНаСервере()
	
	Если НЕ НастроитьЭлементыИнтерфейсаКлиентскогоПриложенияДляТакси() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеСвойстваЭлементовТакси = Новый Структура;
	ОбщиеСвойстваЭлементовТакси.Вставить("АвтоМаксимальнаяШирина"	, Ложь);
	ОбщиеСвойстваЭлементовТакси.Вставить("АвтоМаксимальнаяВысота"	, Ложь);
	ОбщиеСвойстваЭлементовТакси.Вставить("Высота"					, 0);
	ОбщиеСвойстваЭлементовТакси.Вставить("Ширина"					, 0);
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	СвойствоАвтоМаксимальнаяВысота = Новый Структура("АвтоМаксимальнаяВысота", Ложь);
	
	СвойствоВертикальноеПоложениеВГруппе = Новый Структура("ВертикальноеПоложениеВГруппе, Высота", ВертикальноеПоложениеЭлемента.Центр, 0);
	
	СвойствоВертикальноеПоложениеПодчиненных = Новый Структура("ВертикальноеПоложениеПодчиненных", ВертикальноеПоложениеЭлемента.Центр);
	
	СвойствоОтображениеПодсказки = Новый Структура("ОтображениеПодсказки", РежимОтображенияПодсказкиКнопка());
	
	// Начальная страница
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьНачальнаяНастройка				, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьВыполнитеНачальныеНастройки	, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.КартинкаНачальная						, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НачальнаяСтраницаКнопкиЛевыйОтступ	, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НачальнаяСтраницаКнопкиПравыйОтступ	, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НачатьНастройку						, ОбщиеСвойстваЭлементовТакси);
	
	// Страница выбора организаций
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьВыберитеОрганизацию		, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьВыберитеОрганизациюПодробно, ОбщиеСвойстваЭлементовТакси);                                  
	
	Элементы.НадписьВыберитеОрганизациюПодробно.Ширина = 70;
	
	ЗаполнитьЗначенияСвойств(Элементы.ДоступныеОрганизации, СвойствоАвтоМаксимальнаяВысота);
	
	// Страница сопоставления организаций
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьСопоставлениеОрганизаций			, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьСопоставлениеОрганизацийПодробно	, ОбщиеСвойстваЭлементовТакси);
	
	Элементы.НадписьСопоставлениеОрганизацийПодробно.Ширина = 70;
	
	ЗаполнитьЗначенияСвойств(Элементы.ДобавитьОрганизацию, ОбщиеСвойстваЭлементовТакси);
	
	ЗаполнитьЗначенияСвойств(Элементы.ОрганизацииВ1С						, СвойствоАвтоМаксимальнаяВысота);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОрганизацияДиадокНаименование	, СвойствоАвтоМаксимальнаяШирина);
	
	ЗаполнитьЗначенияСвойств(Элементы.КартинкаОрганизацияДиадок				, СвойствоВертикальноеПоложениеВГруппе);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОрганизацияДиадокНаименование	, СвойствоВертикальноеПоложениеВГруппе);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОрганизацияДиадокИНН_КПП		, СвойствоВертикальноеПоложениеВГруппе);
	
	// Страница синхронизации контрагентов
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьСопоставлениеКонтрагентов		, ОбщиеСвойстваЭлементовТакси);
	
	ЗаполнитьЗначенияСвойств(Элементы.СтраницаСинхронизацияКонтрагентов		, СвойствоВертикальноеПоложениеПодчиненных);
	ЗаполнитьЗначенияСвойств(Элементы.СтраницаСинхронизацияКонтрагентов		, СвойствоАвтоМаксимальнаяВысота);
	
	Элементы.НадписьЗагружаемКонтрагентов.Ширина = 0;
	
	// Страница сопоставления контрагентов
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьСопоставлениеКонтрагентовПодробно	, ОбщиеСвойстваЭлементовТакси);
	ЗаполнитьЗначенияСвойств(Элементы.СброситьСопоставлениеКонтрагентов			, ОбщиеСвойстваЭлементовТакси);
	
	Элементы.НадписьСопоставлениеКонтрагентовПодробно.Ширина = 70;
	
	// Страница нет контрагентов
	                                
	СвойствоГоризонтальноеПоложениеПодчиненных = Новый Структура("ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр);
	
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаНетКонтрагентовДДЭлементы	, СвойствоВертикальноеПоложениеПодчиненных);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаНетКонтрагентовДДЭлементы	, СвойствоГоризонтальноеПоложениеПодчиненных);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаНетКонтрагентовДДЭлементы	, СвойствоАвтоМаксимальнаяВысота);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаНетКонтрагентовДДЭлементы	, СвойствоАвтоМаксимальнаяШирина);
	
	ЗаполнитьЗначенияСвойств(Элементы.ОбновитьСписокКонтрагентов, ОбщиеСвойстваЭлементовТакси);
	
	// Страница есть контрагенты
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьСопоставлениеКонтрагентовПодробно	, ОбщиеСвойстваЭлементовТакси);
	
	Элементы.НадписьСопоставлениеКонтрагентовПодробно.Ширина = 70;
	
	Элементы.ГруппаКнопкиРежимОтображенияКонтрагентов.РастягиватьПоГоризонтали = Неопределено;
	
	ЗаполнитьЗначенияСвойств(Элементы.ВыбратьРежимВсеКонтрагенты				, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ВыбратьРежимСопоставленныеКонтрагенты		, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ВыбратьРежимНесопоставленныеКонтрагенты	, СвойствоАвтоМаксимальнаяШирина);

	// Страница настроек отправки документов
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОтправкаДокументов					, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьФорматОтправкиСФ_Торг_АктПодробно	, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьФорматОтправкиУПДПодробно			, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОтправкаДокументовПодробно			, СвойствоАвтоМаксимальнаяШирина);
	
	ШрифтArial = Новый Шрифт("Arial", 11);
	
	Элементы.ОтправлятьИсходящиеДокументыКонтрагентам.ШрифтЗаголовка 	= ШрифтArial;
	Элементы.ФорматОтправкиУПД.Шрифт 									= ШрифтArial;
	Элементы.ФорматОтправкиСФ_Торг_Акт.Шрифт 							= ШрифтArial;
	
	Элементы.НадписьФорматОтправкиУПДПодробно.Шрифт 			= ШрифтArial;
	Элементы.НадписьФорматОтправкиСФ_Торг_АктПодробно.Шрифт 	= ШрифтArial;  
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтправлятьИсходящиеДокументыКонтрагентам, СвойствоОтображениеПодсказки);
	
	// Страницы подвала
	
	ЗаполнитьЗначенияСвойств(Элементы.РазделительЭлементовПодвалЦентр	, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.РазделительЭлементовПодвалЛевый	, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.РазделительЭлементовПодвалПравый	, СвойствоАвтоМаксимальнаяШирина);
	
	ШрифтКнопокПодвала = Новый Шрифт("Arial", 12, Истина);
	
	Элементы.ШагиНазад.Шрифт	= ШрифтКнопокПодвала;
	Элементы.ШагиДальше.Шрифт 	= ШрифтКнопокПодвала;
	
	Элементы.ВыборОрганизацииНазад.Шрифт 				= ШрифтКнопокПодвала;
	Элементы.ВыборОрганизацииПриступитьКРаботе.Шрифт 	= ШрифтКнопокПодвала;

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение		 = Новый ПолеКомпоновкиДанных("ДоступныеОрганизации.Настроена"); 
	ЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение	 = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(28, 85, 174));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДоступныеОрганизацииИнформацияНастройка");
	
КонецПроцедуры

&НаСервере
Функция НастроитьЭлементыИнтерфейсаКлиентскогоПриложенияДляТакси()
	
	Возврат Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.3");
	
КонецФункции

&НаСервере
Функция РежимОтображенияПодсказкиКнопка()
	
	Попытка
		// Доступно с 8.3.1
		Результат = Вычислить("ОтображениеПодсказки.Кнопка");
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеИНН_КППНаСервере(СтрокаПриемник, СтрокаИсточник)
	
	СтрокаПриемник.ИНН_КПП = ПредставлениеИннКппДляЭлементаСправочникаНаСервере(СтрокаИсточник.ИНН, СтрокаИсточник.КПП);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеИннКппДляЭлементаСправочникаНаСервере(ИНН, КПП)
	
	Возврат ОбработкаОбъект().ПредставлениеИннКппДляЭлементаСправочника(ИНН, КПП);

КонецФункции
	
&НаКлиенте
Процедура ОбновитьДанныеТекущейОрганизации(ТекДанные)
	
	// организации очищаем всегда
	ОрганизацииВ1С.Очистить();
	
	УстановитьТипЗначенияСвязанногоСправочникаПоУмолчанию();
	
	Если ТекущаяОрганизацияBoxId = ТекДанные.BoxId Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОрганизацияBoxId	= ТекДанные.BoxId;
	
	ОбновитьДанныеТекущейОрганизацииНаСервере();
	
	Контрагенты.Очистить();
	
	ОтправлятьИсходящиеДокументыКонтрагентам = Истина;
	
	ОрганизацииВ1СОбновлены = Ложь;
	
	ФорматОтправки = "УПД";
	
	ОбновитьЭлементыТекущейОрганизации(ТекДанные);
	
	ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Все;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТекущейОрганизацииНаСервере()
	
	Идентификаторы = Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(, ТекущаяОрганизацияBoxId);
	
	ДанныеТекущейОрганизации = Модуль_ЯдроНаСервере().Организации_ЗаполненныеРеквизиты(Идентификаторы);
	
	// принудительно заполняем OrgId для возможности обновления контрагентов (СХ Диадок) 
	СтрокаКонтекста	= Модуль_ЯдроНаСервере().КонтекстСеанса_СтрокаКонтекста(ТекущаяОрганизацияBoxId);
	
	ДанныеТекущейОрганизации.OrgId = СтрокаКонтекста.OrgId;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипЗначенияСвязанногоСправочникаПоУмолчанию()
	
	ЭлементУправления = Элементы.ОрганизацииВ1СОрганизация;
	ЭлементУправления.ОграничениеТипа = ТипСправочникаОрганизацииПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСвязанныеСШагомДействия()
	
	Если НомерШага = ВсегоШагов Тогда
		
		ВыполнитьДействияОкончаниеНастройкиОрганизации();
		
	ИначеЕсли НомерШага = 1 Тогда
		
		ВыполнитьДействияСопоставлениеОрганизаций();

	ИначеЕсли НомерШага = 2 Тогда
		           	
		Отказ = Ложь;

		СохранитьСопоставлениеОрганизаций(Отказ);
		
		Если Отказ Тогда
			НомерШага = 1;
		Иначе
			ВыполнитьДействияСопоставлениеКонтрагентов();
		КонецЕсли;

	ИначеЕсли НомерШага = 3 Тогда
		
		ВыполнитьДействияНастройкаОтправки();
		           	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияСопоставлениеОрганизаций()
	         	
	// если организации 1С заполнены, значит шаг 1 для текущей организации уже пройден
	// и не имеет смысла повторно заполнять данные
	Если ОрганизацииВ1С.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	НайтиПодходящиеОрганизации1СНаСервере();	
	ОбновитьЗаголовокСопоставлениеОрганизацийПодробно();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияСопоставлениеКонтрагентов()
	        	
	// если контрагенты заполнены, значит шаг 2 для текущей организации уже пройден
	// и не имеет смысла повторно заполнять данные
	Если Контрагенты.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаСопоставлениеКонтрагентов;
	
	Элементы.СтраницыКонтрагенты.ТекущаяСтраница = Элементы.СтраницаСинхронизацияКонтрагентов;
	
	ПодключитьОбработчикОжидания("ВыполнитьСопоставлениеКонтрагентов", 0.1, Истина);
	
КонецПроцедуры
       
&НаКлиенте
Процедура ВыполнитьДействияНастройкаОтправки()
	
	УстановитьДоступностьЭлементовВыбораФорматаОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияОкончаниеНастройкиОрганизации()
	
	ВыполнитьДействияОкончаниеНастройкиОрганизацииНаСервере();
	ОбновитьЗаголовкиВыбораОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияОкончаниеНастройкиОрганизацииНаСервере()
	
	СохранитьНастройкуФорматаОтправкиНаСервере();
	ОбновитьПризнакНастройкиОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовкиВыбораОрганизации()
	
	Элементы.НадписьВыберитеОрганизацию.Заголовок = "Настройка выполнена";
	
	НачалоЗаголовка = "Основная настройка ";
	КонецЗаголовка	= " выполнена - можно приступать к работе. " +
					  "Вы можете перейти к настройке других организаций или приступить к работе.";
	
	НастройкаВыполненаПодробно = НачалоЗаголовка + ДанныеТекущейОрганизации.Наименование + КонецЗаголовка;
	
	Элементы.НадписьВыберитеОрганизациюПодробно.Заголовок = НастройкаВыполненаПодробно;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакНастройкиОрганизацииНаСервере()
	
	ОтборОрганизации = Новый Структура("BoxId", ТекущаяОрганизацияBoxId);
	
	СтрокиДоступныеОрганизации = ДоступныеОрганизации.НайтиСтроки(ОтборОрганизации);
	
	Если СтрокиДоступныеОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоступныеОрганизации = СтрокиДоступныеОрганизации[0];
	
	СтрокаДоступныеОрганизации.Настроена = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДанныеВыбранногоКонтрагентаНаСервере(ВыбраннаяСтрока)
	
	ТекСтрока = КонтрагентыПоРежимуОтображения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Идентификаторы		= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(, ТекСтрока.BoxId);
	ДанныеКонтрагента 	= Модуль_ЯдроНаСервере().Контрагенты_ЗаполненныеРеквизиты(Идентификаторы);
	
	Возврат ДанныеКонтрагента;

КонецФункции
      
&НаКлиенте
 Процедура ОбновитьЭлементыТекущейОрганизации(ТекДанные)
	
	ТекущаяОрганизацияИНН_КПП = ТекДанные.ИНН_КПП;
	
	Элементы.НадписьСопоставлениеКонтрагентов.Заголовок = "Шаг 2. Контрагенты " + ДанныеТекущейОрганизации.Наименование;
	Элементы.НадписьОтправкаДокументов.Заголовок		= "Шаг 3. Отправка документов от " + ДанныеТекущейОрганизации.Наименование;
	
	Элементы.НадписьОрганизацияДиадокНаименование.Заголовок	= ДанныеТекущейОрганизации.Наименование;
	Элементы.НадписьОрганизацияДиадокИНН_КПП.Заголовок		= ТекущаяОрганизацияИНН_КПП;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницыПодвал()
	
	Если НомерШага = 0 Тогда
		
		Элементы.СтраницыПодвал.Видимость = Ложь;
		Элементы.НачатьНастройку.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.СтраницыПодвал.Видимость = Истина;
		
		Если НомерШага = ВсегоШагов Тогда
			Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаПодвалВыборОрганизации;
			Элементы.ВыборОрганизацииПриступитьКРаботе.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаПодвалШаги;
			Элементы.ШагиДальше.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуНастройки()
	
	Если НомерШага = 0 ИЛИ НомерШага = ВсегоШагов Тогда
		Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаВыборОрганизации;
	ИначеЕсли НомерШага = 1 Тогда
		Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаСопоставлениеОрганизаций;
	ИначеЕсли НомерШага = 2 Тогда
		Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаСопоставлениеКонтрагентов;
	ИначеЕсли НомерШага = 3 Тогда
		Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаНастройкаОтправкиДокументов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКнопокПереключенияРежимов()
	
	ЦветАктивнойКнопки		= Новый Цвет(255, 255, 255);
	ЦветНеактивнойКнопки	= Новый Цвет(230, 230, 230);
	
	Элементы.ВыбратьРежимВсеКонтрагенты.ЦветФона				= ЦветНеактивнойКнопки;
	Элементы.ВыбратьРежимСопоставленныеКонтрагенты.ЦветФона		= ЦветНеактивнойКнопки;
	Элементы.ВыбратьРежимНесопоставленныеКонтрагенты.ЦветФона	= ЦветНеактивнойКнопки;
	
	РежимыОтображения = РежимыОтображенияКонтрагентов();
	
	Если ТекущийРежимОтображенияКонтрагентов = РежимыОтображения.Все Тогда
		
		Элементы.ВыбратьРежимВсеКонтрагенты.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли ТекущийРежимОтображенияКонтрагентов = РежимыОтображения.Сопоставленные Тогда
		
		Элементы.ВыбратьРежимСопоставленныеКонтрагенты.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли ТекущийРежимОтображенияКонтрагентов = РежимыОтображения.Несопоставленные Тогда
		
		Элементы.ВыбратьРежимНесопоставленныеКонтрагенты.ЦветФона = ЦветАктивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовВыбораФорматаОтправки()
	
	Элементы.ФорматОтправкиУПД.Доступность			= ОтправлятьИсходящиеДокументыКонтрагентам;
	Элементы.ФорматОтправкиСФ_Торг_Акт.Доступность 	= ОтправлятьИсходящиеДокументыКонтрагентам;
	
КонецПроцедуры

//{	СОПОСТАВЛЕНИЕ ОРГАНИЗАЦИЙ

&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Добавить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОрганизацииВ1С.Добавить();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьОгранизацию(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Удалить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	УдалитьОгранизациюНаСервере(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОгранизациюНаСервере(КатегорияМетрики, ДействиеМетрики)
	
	ИдТекСтроки = Элементы.ОрганизацииВ1С.ТекущаяСтрока;

	Если ИдТекСтроки = Неопределено Тогда
		Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, Неопределено);
	Иначе
		ТекДанные = ОрганизацииВ1С.НайтиПоИдентификатору(ИдТекСтроки);
		Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, ТекДанные.Организация);
		ОрганизацииВ1С.Удалить(ТекДанные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Организация1СПриИзмененииНаСервере(КатегорияМетрики, ДействиеМетрики)
	
	ИдТекСтроки = Элементы.ОрганизацииВ1С.ТекущаяСтрока;
	ТекДанные	= ОрганизацииВ1С.НайтиПоИдентификатору(ИдТекСтроки);
	
	ЗаполнитьДанныеОрганизацииНаСервере(ТекДанные, ТекДанные.Организация);
	
	Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, ТекДанные.Организация);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОрганизацииНаСервере(СтрокаОрганизации, Организация)
	
	РеквизитыОрганизации = РеквизитыОрганизацииИБ(Организация);
	
	ЗаполнитьЗначенияСвойств(СтрокаОрганизации, РеквизитыОрганизации);
	
	ЗаполнитьПредставлениеИНН_КППНаСервере(СтрокаОрганизации, СтрокаОрганизации);
	
	СтрокаОрганизации.Картинка1С = АдресКартинкиЛоготип1СКрасный;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыОрганизацииИБ(Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьЗначенияСвойств(Результат, Организация);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НайтиПодходящиеОрганизации1СНаСервере()
	
	НайтиСопоставленныеОрганизацииНаСервере();
	
	// если найдены ранее сопоставленные организации, то они являются подходящими
	Если ОрганизацииВ1С.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайтиПодходящиеОрганизацииПоИНННаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НайтиСопоставленныеОрганизацииНаСервере()
	
	Идентификаторы = Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(, ТекущаяОрганизацияBoxId);
	
	СвязанныеСправочники = Модуль_ЯдроНаСервере().Организации_СопоставленныеВ1С(Идентификаторы);
	
	Для Каждого Организация1С Из СвязанныеСправочники Цикл
		ДобавитьСтрокуОрганизацииВ1СНаСервере(Организация1С.Ссылка);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПодходящиеОрганизацииПоИНННаСервере()
	
	ПодходящиеОрганизации = Модуль_ЯдроНаСервере().Организации_ПодходящиеОрганизации1СПоИНН(ДанныеТекущейОрганизации.ИНН);
	
	Для Каждого ПодходящаяОрганизация Из ПодходящиеОрганизации Цикл
		ДобавитьСтрокуОрганизацииВ1СНаСервере(ПодходящаяОрганизация);		
	КонецЦикла;
	
	ОрганизацииВ1СОбновлены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуОрганизацииВ1СНаСервере(Организация)
	
	СтрокаОрганизацииВ1С = ОрганизацииВ1С.Добавить();
	
	СтрокаОрганизацииВ1С.Организация = Организация;
	
	ЗаполнитьДанныеОрганизацииНаСервере(СтрокаОрганизацииВ1С, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСопоставлениеОрганизаций(Отказ)
	
	ПроверитьЗаполнениеОрганизаций(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	    	
	Если НЕ ОрганизацииВ1СОбновлены Тогда
		Возврат;
	КонецЕсли;

	СопоставленныеОрганизации = ОрганизацииВ1СВМассив();
	
	СохранитьСопоставлениеОрганизацийНаСервере(СопоставленныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Функция ОрганизацииВ1СВМассив()
			
	Результат = Новый Массив;
	
	Для Каждого ОрганизацияВ1С Из ОрганизацииВ1С Цикл
		Результат.Добавить(ОрганизацияВ1С.Организация);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьСопоставлениеОрганизацийНаСервере(СопоставленныеОрганизации)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СвязанныеСправочники", СопоставленныеОрганизации);
	
	Модуль_ЯдроНаСервере().Организации_ОбновлениеРеквизитов(ДанныеТекущейОрганизации, СтруктураРеквизитов);
	
	ОбновитьДанныеТекущейОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОрганизаций(Отказ)
	
	ТекстОшибки = "";
	Поле		= "";
	
	Если ОрганизацииВ1С.Количество() = 0 Тогда
		
		ТекстОшибки = "Укажите организацию 1С";
		Поле		= "ОрганизацииВ1С";
		
	КонецЕсли;
	
	Нпп = 0;
	Для Каждого ОрганизацияВ1С Из ОрганизацииВ1С Цикл
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияВ1С.Организация) Тогда
			
			ТекстОшибки = "Не заполнена организация 1С";
			Поле		= "ОрганизацииВ1С[" + Нпп + "].Организация";
		
			Прервать;
			
		КонецЕсли;
		
		Нпп = Нпп + 1;
		
	КонецЦикла;
	
	ПроверитьДублиОрганизацийНаСервере(ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ВывестиСообщениеПользователю(ТекстОшибки, Поле); 
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Метрика_ЗаписатьЛогОшибок(ТекстОшибки, "Перейти дальше");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиОрганизацийНаСервере(ТекстОшибки)
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииВ1СКопия = ОрганизацииВ1С.Выгрузить();
	
	ДублиОрганизаций = ОбработкаОбъект().НайтиДублиВКолонкеТаблицыЗначений(ОрганизацииВ1СКопия, "Организация");
	
	Если ДублиОрганизаций.Количество() > 0 Тогда
		
		ДублиСтрокой = Модуль_ЯдроНаСервере().СоединитьСтроку(ДублиОрганизаций, ", ");
		
		ТекстОшибки = "Найдены дубли организаций:" + Символы.ПС + ДублиСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСопоставлениеОрганизацийПодробно()
	
	КоличествоНайденныхОрганизаций = ОрганизацииВ1С.Количество();
	
	НачалоЗаголовка = "Организации в Диадоке и 1С нужно связать.";
	
	Если КоличествоНайденныхОрганизаций = 0 Тогда
		
		ЗаголовокНайденоОрганизаций = "Нам не удалось найти организацию в 1С с совпадающим ИНН.";
		ЗаголовокЧтоСделать			= "Сопоставьте организации вручную.";
		
	Иначе
		
		Если КоличествоНайденныхОрганизаций = 1 Тогда
			ЗаголовокНайденоОрганизаций = "Мы нашли одну организацию в 1С с совпадающим ИНН.";
			ЗаголовокЧтоСделать			= "Нажмите ""Дальше"", если все корректно, или измените сопоставление вручную.";
		Иначе
			ЗаголовокНайденоОрганизаций = "Мы нашли несколько организаций в 1С с совпадающим ИНН.";
			ЗаголовокЧтоСделать			= "Нажмите ""Дальше"", если все корректно, или сопоставьте организации вручную.";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокСопоставлениеОрганизацийПодробно = НачалоЗаголовка + " " + ЗаголовокНайденоОрганизаций + " " + ЗаголовокЧтоСделать;
	
	Элементы.НадписьСопоставлениеОрганизацийПодробно.Заголовок = ЗаголовокСопоставлениеОрганизацийПодробно;
	
КонецПроцедуры

//} СОПОСТАВЛЕНИЕ ОРГАНИЗАЦИЙ

//{	СОПОСТАВЛЕНИЕ КОНТРАГЕНТОВ

&НаКлиенте
Процедура ВыполнитьСопоставлениеКонтрагентов()
	         		
	ВыполнитьАвтосопоставлениеКонтрагентовНаСервере();

	Если Контрагенты.Количество() = 0 Тогда
		
		Элементы.СтраницыКонтрагенты.ТекущаяСтраница = Элементы.СтраницаНетКонтрагентовДД;
		
		Возврат;
		
	КонецЕсли;
		
	Элементы.СтраницыКонтрагенты.ТекущаяСтраница = Элементы.СтраницаЕстьКонтрагентыДД;
		
	УстановитьЦветКнопокПереключенияРежимов();
	ОбновитьСписокКонтрагентовПоРежиму();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтосопоставлениеКонтрагентовНаСервере()
	
	Модуль_ЯдроНаСервере = Модуль_ЯдроНаСервере();
	
	УдалитьСохраненныйВКэшСписокКонтрагентов();
	
	Если Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок Тогда
		
		ДобавитьКонтрагентовДляПриглашения = Ложь;
		
		Модуль_ЯдроНаСервере.Контрагенты_ВыполнитьСинхронизацию(ДанныеТекущейОрганизации, ДобавитьКонтрагентовДляПриглашения);
		
	КонецЕсли;
	
	СтатусКонтрагентов = Модуль_ЯдроНаСервере.Перечисление_СтатусыКонтрагентов().ПартнерскиеОтношения;
	
	Модуль_ЯдроНаСервере.Контрагенты_ГрупповоеСопоставлениеV2(ДанныеТекущейОрганизации, СтатусКонтрагентов);
	
	ЗаполнитьСписокКонтрагентовНаСервере();
	
	ОбновитьЗаголовкиКнопокРежимовОтображенияКонтрагентовНаСервере();
	
КонецПроцедуры
    
&НаСервере
Процедура ЗаполнитьСписокКонтрагентовНаСервере()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ПараметрыСписка = Модуль_Ядро.Контрагенты_ПараметрыПолученияСпискаПартнеров(ДанныеТекущейОрганизации);

	КонтрагентыДиадок = Модуль_Ядро.Контрагенты_ЗаполненныйСписок(ПараметрыСписка);
	
	Для Каждого ТекКонтрагентДиадок Из КонтрагентыДиадок Цикл
		    		
		КонтрагентДД = ПредставлениеКонтрагентаДиадок(ТекКонтрагентДиадок); 
		
		СтрокаКонтрагенты = Контрагенты.Добавить();
		
		СтрокаКонтрагенты.КонтрагентДД	= КонтрагентДД;
		СтрокаКонтрагенты.BoxId			= ТекКонтрагентДиадок.ID;
		СтрокаКонтрагенты.Ссылка		= ТекКонтрагентДиадок.Ссылка;
		
		СтрокаКонтрагенты.Контрагент1С	= ПредставлениеКонтрагента1С(ТекКонтрагентДиадок.РеквизитыСвязанныхСправочников);
		СтрокаКонтрагенты.Сопоставлен	= ТекКонтрагентДиадок.РеквизитыСвязанныхСправочников.Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСопоставленияКонтрагентаНаСервере(СтрокаКонтрагенты, Идентификаторы)
		        
	Контрагенты1С = Модуль_ЯдроНаСервере().Контрагенты_СопоставленныеВ1С(Идентификаторы);
	
	СтрокаКонтрагенты.Контрагент1С	= ПредставлениеКонтрагента1С(Контрагенты1С);
	СтрокаКонтрагенты.Сопоставлен	= Контрагенты1С.Количество() > 0;
	
КонецПроцедуры
    
&НаСервере
Функция ПредставлениеКонтрагентаДиадок(КонтрагентДиадок)
	
	Результат = КонтрагентДиадок.Наименование + Символы.ПС 
				+ ПредставлениеИннКппДляЭлементаСправочникаНаСервере(КонтрагентДиадок.ИНН, КонтрагентДиадок.КПП);
					 
	Возврат Результат;
	
КонецФункции
    
&НаСервере
Функция ПредставлениеКонтрагента1С(Контрагенты1С)

	Результат = ОбработкаОбъект().ПредставлениеСвязейВСписке(Контрагенты1С, "Контрагенты");
	
	Если Контрагенты1С.Количество() = 1 Тогда
		
		РеквизитыКонтрагента = РеквизитыОрганизацииИБ(Контрагенты1С[0]);
		
		ИннКппКонтрагента = ПредставлениеИннКппДляЭлементаСправочникаНаСервере(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП);	
		
		Результат = Результат + Символы.ПС + ИннКппКонтрагента;
		
	КонецЕсли;
					 
	Возврат Результат;
	
КонецФункции
    
&НаСервере
Процедура СброситьСопоставлениеКонтрагентовНаСервере()
	
	ОтборКонтрагентов = Новый Структура("Сопоставлен", Истина);
	
	СопоставленныеКонтрагенты = Контрагенты.НайтиСтроки(ОтборКонтрагентов);
	
	НеВыбран = ОбработкаОбъект().ПредставлениеСвязей_НеВыбран();
	
	Для Каждого Контрагент Из СопоставленныеКонтрагенты Цикл
		
		Идентификаторы = Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(Контрагент.Ссылка, Контрагент.BoxId);
		
		Модуль_ЯдроНаСервере().Справочники_ОчиститьСвязанныеСправочники(Идентификаторы, "Контрагенты");
		
		Контрагент.Сопоставлен	= Ложь;
		Контрагент.Контрагент1С = НеВыбран;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокКонтрагентовПоРежиму()
	
	КонтрагентыПоРежимуОтображения.Очистить();
	
	Если ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Все Тогда
		ПодходящиеКонтрагенты = Контрагенты;
	Иначе
		
		Сопоставлен = ТекущийРежимОтображенияКонтрагентов = РежимыОтображенияКонтрагентов().Сопоставленные;
		
		ОтборКонтрагентов = Новый Структура("Сопоставлен", Сопоставлен);
		
		ПодходящиеКонтрагенты = Контрагенты.НайтиСтроки(ОтборКонтрагентов);
		
	КонецЕсли;
	
	Для Каждого ПодходящийКонтрагент Из ПодходящиеКонтрагенты Цикл
		
		СтрокаКонтрагентыПоРежимуОтображения = КонтрагентыПоРежимуОтображения.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагентыПоРежимуОтображения, ПодходящийКонтрагент);
		
		СтрокаКонтрагентыПоРежимуОтображения.КартинкаДД = АдресКартинкиЛоготипДиадок;
		СтрокаКонтрагентыПоРежимуОтображения.Картинка1С = АдресКартинкиЛоготип1СКрасный;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РежимыОтображенияКонтрагентов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Все"				, "Все");
	Результат.Вставить("Сопоставленные"		, "Сопоставленные");
	Результат.Вставить("Несопоставленные"	, "Несопоставленные");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовкиКнопокРежимовОтображенияКонтрагентовНаСервере()
	
	// Все
	ВсегоКонтрагентов = Контрагенты.Количество();
	      	
	ЗаголовокВсе = ЗаголовокКнопкиРежимаОтображенияКонтрагентовНаСервере("Все", ВсегоКонтрагентов);
                 	
	Элементы.ВыбратьРежимВсеКонтрагенты.Заголовок = ЗаголовокВсе;

	// Сопоставленные
	ОтборСопоставленные = Новый Структура("Сопоставлен", Истина);
	
	СопоставленныеКонтрагенты = Контрагенты.НайтиСтроки(ОтборСопоставленные);
	
	ВсегоСопоставлено = СопоставленныеКонтрагенты.Количество();
	
	ЗаголовокСопоставленные	= ЗаголовокКнопкиРежимаОтображенияКонтрагентовНаСервере("Сопоставленные", ВсегоСопоставлено);
		
	Элементы.ВыбратьРежимСопоставленныеКонтрагенты.Заголовок = ЗаголовокСопоставленные;

	// Несопоставленные
	ВсегоНесопоставлено = ВсегоКонтрагентов - ВсегоСопоставлено;
	
	ЗаголовокНесопоставленные = ЗаголовокКнопкиРежимаОтображенияКонтрагентовНаСервере("Несопоставленные", ВсегоНесопоставлено);
	
	Элементы.ВыбратьРежимНесопоставленныеКонтрагенты.Заголовок = ЗаголовокНесопоставленные;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокКнопкиРежимаОтображенияКонтрагентовНаСервере(НачалоЗаголовка, КоличествоКонтрагентов)
	
	Возврат НачалоЗаголовка + " (" + КоличествоКонтрагентов + ")";
	
КонецФункции
          
&НаКлиенте
Процедура КонтрагентыПоРежимуОтображенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Выбрать контрагента";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	СтандартнаяОбработка = Ложь;

	ДанныеКонтрагента = ДанныеВыбранногоКонтрагентаНаСервере(ВыбраннаяСтрока);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID"				, ДанныеКонтрагента.ID);
	ПараметрыФормы.Вставить("ДанныеКонтрагента"	, ДанныеКонтрагента);
	ПараметрыФормы.Вставить("ДанныеОрганизации"	, ДанныеТекущейОрганизации);
	ПараметрыФормы.Вставить("ИмяСправочника"	, "Контрагенты");
	
	ПараметрыФормы.Вставить("ОткрытоИзМастераПервогоЗапуска", Истина);
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("ФормаЭлементаСправочникаУправляемая", ЭтаФорма, ПараметрыФормы);
	
	КоличествоСвязей = Метрика_КоличествоСвязей(ДанныеКонтрагента);

	Переменные = Новый Соответствие;
	Переменные.Вставить("Количество связей", КоличествоСвязей);

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКонтрагентаНаСервере(BoxId)
	
	ОтборКонтрагента = Новый Структура("BoxId", BoxId);
	
	СтрокиКонтрагенты = Контрагенты.НайтиСтроки(ОтборКонтрагента);
	
	Если СтрокиКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтрагенты	= СтрокиКонтрагенты[0];
	Идентификаторы		= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(, BoxId);
	
	ЗаполнитьДанныеСопоставленияКонтрагентаНаСервере(СтрокаКонтрагенты, Идентификаторы);
	
КонецПроцедуры

//} СОПОСТАВЛЕНИЕ КОНТРАГЕНТОВ

//{	НАСТРОЙКА ФОРМАТА ОТПРАВКИ

&НаКлиенте
Процедура ФорматОтправкиУПДПриИзменении(Элемент)
	
	Метрика_ВыбратьТипФормата();
	
КонецПроцедуры


&НаКлиенте
Процедура ФорматОтправкиСФ_Торг_АктПриИзменении(Элемент)
	
	Метрика_ВыбратьТипФормата();

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуФорматаОтправкиНаСервере()
	
	Если ОтправлятьИсходящиеДокументыКонтрагентам Тогда
		Модуль_ЯдроНаСервере().НастройкиДокументов_УстановитьКатегорииПакетовНаОтправку(ДанныеТекущейОрганизации, ФорматОтправки);
	Иначе
		Модуль_ЯдроНаСервере().НастройкиДокументов_ОчиститьКатегорииПакетовНаОтправку(ДанныеТекущейОрганизации);
	КонецЕсли;
	
КонецПроцедуры

//}	НАСТРОЙКА ФОРМАТА ОТПРАВКИ

//}	ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ФОРМЫ


&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Мастер первого запуска";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Модуль_ЯдроНаКлиенте = Модуль_ЯдроНаКлиенте();
	
	НаименованияКатегорий = Модуль_ЯдроНаКлиенте.Метрика_НазваниеКатегории();
	ТекущаяСтраница = Элементы.СтраницыШаги.ТекущаяСтраница;
	СтраницыШаги = Элементы.СтраницыШаги.ПодчиненныеЭлементы;
	
	Если ТекущаяСтраница = СтраницыШаги.СтраницаСопоставлениеОрганизаций Тогда
		
		Результат = НаименованияКатегорий.СопоставлениеОрганизаций;
		
	ИначеЕсли ТекущаяСтраница = СтраницыШаги.СтраницаСопоставлениеКонтрагентов Тогда
		
		Результат = НаименованияКатегорий.ДействияВСпискеКонтрагентов;
		
	Иначе
		
		Результат = НаименованияКатегорий.ДействияВМастере;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_СтатистикаПереходаНаСтраницу(КатегорияМетрики, ДействиеМетрики)

	Переменные = Новый Соответствие;
	
	Если Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницыШаги.ПодчиненныеЭлементы.СтраницаСопоставлениеОрганизаций Тогда
		Переменные.Вставить("Количество связей", ОрганизацииВ1С.Количество());
	ИначеЕсли Элементы.СтраницыШаги.ТекущаяСтраница <> Элементы.СтраницыШаги.ПодчиненныеЭлементы.СтраницаСопоставлениеКонтрагентов Тогда
		Переменные.Вставить("Наименование страницы", Элементы.СтраницыШаги.ТекущаяСтраница.Имя);
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

КонецПроцедуры

&НаСервере
Процедура Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, СвязанныйСправочник)
	
	Переменные = Новый Соответствие;
	
	Если ЗначениеЗаполнено(СвязанныйСправочник) Тогда
		Переменные.Вставить("Тип справочника 1С",	Строка(ТипЗнч(СвязанныйСправочник)));
		Переменные.Вставить("УИД",					СвязанныйСправочник.УникальныйИдентификатор());
	КонецЕсли;
	
	Модуль_ЯдроНаСервере().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);

КонецПроцедуры

&НаСервере
Функция Метрика_КоличествоСвязей(Идентификаторы)
	
	Контрагенты1С = Модуль_ЯдроНаСервере().Контрагенты_СопоставленныеВ1С(Идентификаторы);
	
	Результат = Контрагенты1С.Количество();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ВыбратьТипФормата()

	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Выбрать тип пакета";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение",	ФорматОтправки);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ТекущаяОрганизацияBoxId, КатегорияМетрики, ДействиеМетрики, , Переменные);	

КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьЛогОшибок(ТекстОшибки, Действие)
	
	Категория 		= Метрика_НазваниеКатегории();
	НазваниеФормы 	= Метрика_НазваниеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("BoxID",	ТекущаяОрганизацияBoxId);
	Переменные.Вставить("Причина",	ТекстОшибки);

	Модуль_ЯдроНаКлиенте().Метрика_ЗаписатьЛог(Категория, Действие, НазваниеФормы, Переменные);
	
КонецПроцедуры

