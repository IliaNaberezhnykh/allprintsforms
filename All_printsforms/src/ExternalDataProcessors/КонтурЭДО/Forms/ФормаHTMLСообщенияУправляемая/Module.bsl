
&НаКлиенте
Перем ВременныеФайлыКУдалению;

//{ Сервисные методы

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	АдресОбработки = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ОбщийКонтекстКлиентСервер) Тогда
		Объект.ОбщийКонтекстКлиентСервер.Свойство("АдресОбработкаОбъект", АдресОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОбработки) Тогда
		Результат = ХранилищеОбработки_Прочитать(АдресОбработки);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Результат = РеквизитФормыВЗначение("Объект");
		
		Если ЗначениеЗаполнено(АдресОбработки) Тогда
			ХранилищеОбработки_Поместить(Результат, АдресОбработки)
		КонецЕсли;
		
	Иначе
		
		Результат.ОбщийКонтекстКлиентСервер = Объект.ОбщийКонтекстКлиентСервер;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект обработки из временного хранилища
//
// Параметры:
//  АдресОбработки - Строка - адрес обработки во временном хранилище
// 
// Возвращаемое значение:
//  ОбработкаОбъект - если обект обработки все еще загружен в память
//  Неопределено    - если объект обработки уже уничтожен
//
&НаСервере
Функция ХранилищеОбработки_Прочитать(АдресОбработки)
	
	Результат = Неопределено;
	
	СтруктураОбработки = ПолучитьИзВременногоХранилища(АдресОбработки);
	
	Если ЗначениеЗаполнено(СтруктураОбработки) Тогда
		СтруктураОбработки.Свойство("ОбработкаОбъект", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помещает во временное хранилище объект обработки
//
// Параметры:
//  Обработка      - ОбработкаОбъект - объект обработки;
//  АдресОбработки - Строка          - адрес во временном хранилище;
//
&НаСервере
Процедура ХранилищеОбработки_Поместить(Обработка, АдресОбработки)
	
	СтруктураОбработки = Новый Структура("ОбработкаОбъект", Обработка);
	
	ПоместитьВоВременноеХранилище(СтруктураОбработки, АдресОбработки);
	
КонецПроцедуры

//} Сервисные методы


&НаСервере
Функция Метрики_НаименованиеФормы(Режим)
	
	Если Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
		Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение" Тогда
		
		Результат = "НовоеВВерсии"; 
		
	Иначе
		Результат = Заголовок;
	КонецЕсли;
	
	Возврат Результат;
	 
КонецФункции

&НаСервере
Процедура ИнициализироватьИдентификаторТрассировки()
  
  Метрики_НаименованиеФормы = Метрики_НаименованиеФормы(Режим);
  СтрокаИдентификатора = Строка(Новый УникальныйИдентификатор());
  
  ИдентификаторТрассировки = Метрики_НаименованиеФормы + "_" + СтрокаИдентификатора;
  
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Режим", Режим);
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Если Режим = "НетНужногоДокумента" Тогда
		
		ИнициализироватьФормуНетНужногоДокумента();
		
	ИначеЕсли Режим = "КакПереотправитьДокументСтандарта" Тогда
		
		ИнициализироватьФормуКакПереотправитьДокументСтандарта();
		
	ИначеЕсли Режим = "КакПереотправитьДокументУМ" Тогда
		
		ИнициализироватьФормуКакПереотправитьДокументУМ();
		
	ИначеЕсли Режим = "Переотправка" Тогда
		
		ИнициализироватьФормуПереотправка();
		
	ИначеЕсли Режим = "ОшибкиМЧД" Тогда
		
		ИнициализироватьФормуОшибкиМЧД();
		
	ИначеЕсли Режим = Режим_ОплатаСервиса()
		ИЛИ Режим = Режим_ПредложенияДляПокупки() Тогда
		
		ИнициализироватьФормуПредложенияДляПокупки();
		
	ИначеЕсли Режим = "ОшибкиКЭППриАвторизации" Тогда
		
		ИнициализироватьФормуОшибкиКЭППриАвторизации();
		
	ИначеЕсли Режим = "ОшибкиКЭППриДействии" Тогда
		
		ИнициализироватьФормуОшибкиКЭППриВыполненииДействияЭДО();
		
	ИначеЕсли Режим = Режим_НовогоднееПоздравление() Тогда
		
		ИнициализироватьФормуНовогоднееПоздравление();
		
	ИначеЕсли Режим = "КонтрагентыНеПоддерживаютМЧД" Тогда
		
		ИнициализироватьФормуКонтрагентыНеПоддерживаютМЧД(Параметры);
		
	ИначеЕсли Режим = "ПодробнееОНастройкеПакетов" Тогда
		
		ИнициализироватьФормуПодробнееОНастройкеПакетов();
		
	ИначеЕсли Режим = "ОшибкиГрупповогоСопоставленияКонтрагентов" Тогда
		
		ИнициализироватьФормуОшибокГрупповогоСопоставленияКонтрагентов(Параметры);
		
	ИначеЕсли Режим = "ОшибкиОтправкиПриглашенийКонтрагентам" Тогда
		
		ИнициализироватьФормуОшибокОтправкиПриглашенийКонтрагентам(Параметры);
		
	ИначеЕсли Режим = "ПосмотретьЦепочкуДелегированияДоверенности" Тогда
		
		ИнициализироватьФормуПросмотраЦепочкиДелегированияДоверенности(Параметры);
		
	ИначеЕсли Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
		Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение" Тогда
		
		ИнициализироватьФормуНовоеВВерсииРаботаСКонтрагентами();
		
	ИначеЕсли Режим = "ОповещениеНетНужногоКонтрагента" Тогда
		
		ИнициализироватьФормуНетНужногоКонтрагента();  
		
	ИначеЕсли Режим = "НетНужногоСертификата" Тогда
		
		ИнициализироватьФормуНетНужногоСертификата(Параметры);
		
	ИначеЕсли Режим = "РазъясненияПоСтроке5аУПД970" Тогда
		
		ИнициализироватьФормуРазъясненияПоСтроке5аУПД970(Параметры);

	ИначеЕсли Режим = "СписокОшибок" Тогда
		
		ИнициализироватьФормуСписокОшибок();
		
	Иначе
		
		ИнициализироватьФормуПоУмолчанию(Параметры);
		
	КонецЕсли;
	
	ПодогнатьРазмерФормы(Параметры);
	УстановитьСвойстваФормыТакси();
	
КонецПроцедуры

&НаСервере
Процедура ПодогнатьРазмерФормы(Параметры)
	
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
	ШиринаФормы = 78;
	
	Если Параметры.Свойство("ШиринаФормы") Тогда
		ШиринаФормы = Параметры.ШиринаФормы;
	КонецЕсли;
	
	Если Режим = Режим_НовогоднееПоздравление() Тогда
		
		ЭтаФорма.Ширина = 79;
		ЭтаФорма.Высота = 28;
		
	ИначеЕсли Режим = "ОповещениеНетНужногоКонтрагента" Тогда
		
		ЭтаФорма.Ширина = ШиринаФормы;
		
		ИспользуетсяПодсистемаДиадок = Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
		
		Если ИспользуетсяПодсистемаДиадок Тогда
			ЭтаФорма.Высота = 32;
		Иначе
			ЭтаФорма.Высота = 28;
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.Ширина = ШиринаФормы;
		ЭтаФорма.Высота = 28;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	СвойствоГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
	ЗаполнитьЗначенияСвойств(Элементы.ПродолжитьБезМЧД, СвойствоГоризонтальноеПоложениеВГруппе);
	
	СвойствоПодсказкаВвода = Новый Структура("ПодсказкаВвода");
	СвойствоПодсказкаВвода.ПодсказкаВвода = "Организация";
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоОрганизации, СвойствоПодсказкаВвода);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНетНужногоДокумента()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLПредставлениеСпискаПричинОтсутствияДокумента();
	
	Заголовок = "Не появляется документ на отправку";
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНетНужногоКонтрагента()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстовыеДанныеФормы = ОбработкаОбъект.HTMLПредставлениеСпискаПричинОтсутствияКонтрагента();
	
	Заголовок = ЗаголовокНетНужногоКонтрагента();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуПодробнееОНастройкеПакетов()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLПодробнееОНастройкеПакетов();
	
	Заголовок = ЗаголовокПодробнееОНастройкеПакетов();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНовогоднееПоздравление()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстовыеДанныеФормы = ОбработкаОбъект.HTMLНовогоднееПоздравление();
	
	Заголовок = ЗаголовокНовогоднееПоздравление();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуКонтрагентыНеПоддерживаютМЧД(Параметры)
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLКонтрагентыНеПоддерживаютМЧД(Параметры.ОшибкиПроверокМЧД);
	
	Заголовок = ЗаголовокКонтрагентыНеПоддерживаютМЧД();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуОшибокГрупповогоСопоставленияКонтрагентов(Параметры)
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLОшибкиГрупповогоСопоставленияКонтрагентов(Параметры.ДетальныеДанные);
	
	Заголовок = ЗаголовокОшибкиГрупповогоСопоставленияКонтрагентов();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуОшибокОтправкиПриглашенийКонтрагентам(Параметры)
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLОшибкиОтправкиПриглашенийКонтрагентам(Параметры.ДетальныеДанные);
	
	Заголовок = ЗаголовокОшибкиОтправкиПриглашенийКонтрагентам();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуКакПереотправитьДокументСтандарта()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLПодсказкаКакПереотправитьДокументСтандарта();
	
	Заголовок = ЗаголовокКакПереотправитьДокумент();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуКакПереотправитьДокументУМ()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLПодсказкаКакПереотправитьДокументУМ();
	
	Заголовок = ЗаголовокКакПереотправитьДокумент();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНовоеВВерсииРаботаСКонтрагентами()
	
	ИнициализироватьИдентификаторТрассировки();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекстовыеДанныеФормы = ОбработкаОбъект.HTMLНовоеВВерсииРаботаСКонтрагентами();
	
	Заголовок = ЗаголовокНовоеВВерсииРаботаСКонтрагентами();
	ТекстHTML = ТекстовыеДанныеФормы;
	
	Элементы.БольшеНеПоказывать.Видимость = Истина;
	
	Метрика_НовоеВВерсииРаботаСКонтрагентами_ОткрытиеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуНетНужногоСертификата(Параметры)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстовыеДанныеФормы = ОбработкаОбъект.HTMLТекст_НетНужногоСертификата();
	
	Заголовок = ЗаголовокНетНужногоСертификата();
	ТекстHTML = ТекстовыеДанныеФормы;
	
	АдресДополнительныеПараметры = ПоместитьВоВременноеХранилище(Параметры.ДополнительныеПараметры, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуРазъясненияПоСтроке5аУПД970(Параметры)
	
	ОбработкаОбъект = ОбработкаОбъект();
	ТекстовыеДанныеФормы = ОбработкаОбъект.HTMLТекст_РазъясненияПоСтроке5аУПД970();
	
	ЭтаФорма.Заголовок = ЗаголовокРазъясненияПоСтроке5аУПД970();
	ЭтаФорма.ТекстHTML = ТекстовыеДанныеФормы;
	
	Элементы.БольшеНеПоказывать.Видимость = Истина;
	
	ИнициализироватьИдентификаторТрассировки();
	Метрика_РазъясненияПоСтроке5аУПД970_ОткрытиеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуСписокОшибок()
	
	Ядро = Модуль_ЯдроНаСервере();
	СписокОшибок = Ядро.СписокОшибок();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстовыеДанныеФормы = ОбработкаОбъект.СписокОшибок_HTML(СписокОшибок);
	
	Заголовок = ЗаголовокСписокОшибок();
	ТекстHTML = ТекстовыеДанныеФормы;
	
	АдресДополнительныеПараметры = ПоместитьВоВременноеХранилище(СписокОшибок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакПереотправитьДокумент()
	
	Возврат "Как переотправить документ";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПодробнееОНастройкеПакетов()
	
	Возврат НСтр("ru = 'Подробнее о настройке пакетов'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокНовогоднееПоздравление()
	
	Возврат НСтр("ru = 'Поздравление'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокНовоеВВерсииРаботаСКонтрагентами()
	
	Возврат НСтр("ru = 'Обновление раздела с контрагентами'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКонтрагентыНеПоддерживаютМЧД()
	
	Возврат НСтр("ru = 'Оператор контрагента не поддерживает передачу МЧД'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОшибкиГрупповогоСопоставленияКонтрагентов()
	
	Возврат НСтр("ru = 'Дубли контрагентов'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОшибкиОтправкиПриглашенийКонтрагентам()
	
	Возврат НСтр("ru = 'Отправка приглашений'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПодсказкаСостояниеОтношенийКонтрагентов()
	
	Возврат НСтр("ru = 'Статус отношений'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокНетНужногоСертификата()
	
	Возврат НСтр("ru = 'Авторизация по сертификату'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокРазъясненияПоСтроке5аУПД970()
	
	Возврат НСтр("ru = 'Заполнение печатной формы'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСписокОшибок()
	
	Возврат НСтр("ru = 'Служебные сообщения'");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуПереотправка()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.HTMLПодсказкаПереотправка();
	
	Заголовок = ЗаголовокПереотправка();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПереотправка()
	
	Возврат "Переотправить документ";
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуОшибкиМЧД()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.МЧД_HTMLТекст_ТекстУведомленияПослеПроверкиМЧДПоУмолчанию(Параметры.ОшибкиПроверкиМЧД);
	
	Заголовок = ЗаголовокОшибкиМЧД();
	ТекстHTML = ТекстовыеДанныеФормы;
	
	Элементы.БольшеНеПоказывать.Видимость = Истина;
	Элементы.ПродолжитьБезМЧД.Видимость = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОшибкиМЧД()
	
	Возврат НСтр("ru = 'Настройка доверенности'");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуОшибкиКЭППриАвторизации()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.КЭП_HTMLТекст_ТекстАвторизованныеСертификатыНеКЭП(Параметры.СписокОшибокКЭП);
	
	Заголовок = ЗаголовокОшибкиКЭППриАвторизации();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОшибкиКЭППриАвторизации()
	
	Возврат НСтр("ru = 'Сертификат не является квалифицированным'");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуОшибкиКЭППриВыполненииДействияЭДО()
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.КЭП_HTMLТекст_ТекстСертификатыНеКЭП(Параметры.СписокОшибокКЭП);
	
	Заголовок = ЗаголовокОшибкиКЭППриВыполненииДействияЭДО();
	ТекстHTML = ТекстовыеДанныеФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОшибкиКЭППриВыполненииДействияЭДО()
	
	Возврат НСтр("ru = 'Служебные сообщения'");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуПредложенияДляПокупки()
	
	Заголовок = ЗаголовокПредложенийДляПокупки();
	Элементы.ГруппаОтборОрганизации.Видимость = Истина;
	
	Если Режим = Режим_ОплатаСервиса() Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаСервере();
		ЗаблокированныеОрганизации = Модуль_Ядро.ЗаблокированныеОрганизации_Массив(Истина);
		
		ОтборПоЗаблокированнымОрганизациям = Новый Массив;
		
		Для Каждого ОписаниеЗаблокированнойОрганизации Из ЗаблокированныеОрганизации Цикл
			ОтборПоЗаблокированнымОрганизациям.Добавить(ОписаниеЗаблокированнойОрганизации.BoxId);
		КонецЦикла;
		
		Метрика_ЗаписатьЛог_ОплатаСервиса();
		
	КонецЕсли;
	
	АдресДополнительныеПараметры = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СформироватьСтраницуHTMLПредложенияДляПокупки(ОтборПоЗаблокированнымОрганизациям);
	ЗаполнитьСписокВыбораОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтраницуHTMLПредложенияДляПокупки(ОтборПоОрганизациям = Неопределено)
	
	Если ОтборПоОрганизациям = Неопределено Тогда
		
		ОтборПоОрганизациям = Новый Массив;
		
		Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
			ОтборПоОрганизациям.Добавить(ОтборПоОрганизации);
		КонецЕсли;
		
	КонецЕсли;
	
	ТолькоДляЗаблокированных = (Режим = Режим_ОплатаСервиса());
	
	ТекстHTML = ОбработкаОбъект().HTMLПредложенияДляПокупки_HTMLСтраница(АдресДополнительныеПараметры,
																		ОтборПоОрганизациям,
																		ТолькоДляЗаблокированных);
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстHTML;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПредложенийДляПокупки()
	
	Возврат НСтр("ru = 'Оплата сервиса Диадок'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокВыбораОрганизации()
	
	СписокДляОтбора = Элементы.ОтборПоОрганизации.СписокВыбора;
	
	ОписаниеПредложенийДляПокупки = ПолучитьИзВременногоХранилища(АдресДополнительныеПараметры);
	
	ТолькоДляЗаблокированных = (Режим = Режим_ОплатаСервиса());
	
	Для Каждого ОписаниеПредложенияДляПокупки Из ОписаниеПредложенийДляПокупки Цикл
		
		Если ТолькоДляЗаблокированных
			И НЕ ОписаниеПредложенияДляПокупки.ТребуетсяПодпискаНаМодуль Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокДляОтбора.НайтиПоЗначению(ОписаниеПредложенияДляПокупки.BoxId) = Неопределено Тогда
		
			НовыйЭлемент = СписокДляОтбора.Добавить();
			НовыйЭлемент.Значение = ОписаниеПредложенияДляПокупки.BoxId;
			НовыйЭлемент.Представление = ОписаниеПредложенияДляПокупки.Наименование;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	СформироватьСтраницуHTMLПредложенияДляПокупки();
	
	Метрика_ОтборПоОрганизацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОтборПоОрганизацииПриИзменении()
	
	Если НЕ ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики	= "Отбор по организации";
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ОтборПоОрганизации, КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СформироватьСтраницуHTMLПредложенияДляПокупки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокНетНужногоКонтрагента()
	
	Возврат НСтр("ru = 'Не отображается контрагент'");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФормуПоУмолчанию(ПараметрыФормы)
	
	ЗаголовокФормы			 = Неопределено;
	ТекстСообщения			 = Неопределено;
	ТекстДляКопирования		 = Неопределено;
	ДополнительныеПараметры	 = Неопределено;
	
	ПараметрыФормы.Свойство("ЗаголовокФормы"			, ЗаголовокФормы);
	ПараметрыФормы.Свойство("ТекстСообщения"			, ТекстСообщения);
	ПараметрыФормы.Свойство("ТекстДляКопирования"		, ТекстДляКопирования);
	ПараметрыФормы.Свойство("ДополнительныеПараметры"	, ДополнительныеПараметры);
	
	Если ПараметрыФормы.Свойство("ПоказатьКнопкуСкопировать") Тогда
	
		Элементы.СкопироватьСодержимоеПоля.Видимость = Истина;
		
		НовыйЗаголовокКнопкиСкопировать = Неопределено;
		
		Если ПараметрыФормы.Свойство("ЗаголовокКнопкиСкопировать", НовыйЗаголовокКнопкиСкопировать) 
			И ЗначениеЗаполнено(НовыйЗаголовокКнопкиСкопировать) Тогда
			
			Элементы.СкопироватьСодержимоеПоля.Заголовок = НовыйЗаголовокКнопкиСкопировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для УФ
	Если ПараметрыФормы.Свойство("ДополнительныеПараметры") Тогда
		
		АдресДополнительныеПараметры = ПоместитьВоВременноеХранилище(ПараметрыФормы.ДополнительныеПараметры, УникальныйИдентификатор);
		Если ТипЗнч(ПараметрыФормы.ДополнительныеПараметры) = Тип("Структура") Тогда
			Параметры.ДополнительныеПараметрыФормы = ПараметрыФормы.ДополнительныеПараметры;
		КонецЕсли; 
		
	КонецЕсли;
	
	Заголовок = ЗаголовокФормы;
	ТекстHTML = ТекстСообщения;
	//ЭлементыФормы.ТекстHTML.УстановитьТекст(ТекстСообщения); // Для ОФ
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресСсылки = Неопределено;
	ДополнительныеПараметры = Неопределено;
	
	ДанныеСобытия.Свойство("href", АдресСсылки);
	
	Если ЗначениеЗаполнено(АдресСсылки) Тогда
		
		Метрика_ПереходПоСсылке(АдресСсылки);
		
		Если ЗначениеЗаполнено(АдресДополнительныеПараметры) Тогда
			ДополнительныеПараметры = ПолучитьИзВременногоХранилища(АдресДополнительныеПараметры);
		КонецЕсли;
		
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСсылки, ДополнительныеПараметры, ЭтаФорма);
		
		Если ЭтоОповещениеИЗакрытиеФормы(АдресСсылки) Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОповещениеИЗакрытиеФормы(Знач АдресСсылки)
	
	АдресСсылки = НРег(АдресСсылки);
	
	Результат = Найти(АдресСсылки, "alertandclose:") > 0;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Метрика_ПриОткрытии();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Режим_ОплатаСервиса()
	
	Возврат "ОплатаСервиса";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Режим_ПредложенияДляПокупки()
	
	Возврат "ПредложенияДляПокупки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Режим_НовогоднееПоздравление()
	
	Возврат "НовогоднееПоздравление";
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Метрика_ПриЗакрытии();
	
	Если Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
		Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение" Тогда
		
		Метрики_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Истина Тогда
		СохранитьНастройку_БольшеНеПоказывать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Диадок_Сохранение_Контрагент" Тогда
		
		УдалитьСохраненныйВКэшСписокКонтрагентов(Параметр)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСохраненныйВКэшСписокКонтрагентов(Параметр)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ПараметрыСписка = Модуль_Ядро.Контрагенты_ПараметрыПолученияСпискаПартнеров(Параметр.ДанныеОрганизации);
	
	Модуль_Ядро.Контрагенты_ОчиститьСписок(ПараметрыСписка);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуПросмотраЦепочкиДелегированияДоверенности(Параметры)
	
	Ядро = Модуль_ЯдроНаСервере();
	ТекстовыеДанныеФормы = Ядро.МЧД_ЦепочкаДелегированияДоверенности_HTML(Параметры.ОписаниеСобытияМЧД);
	
	Заголовок = ЗаголовокПромотрЦепочкиДелегированияДоверенности();
	ТекстHTML = ТекстовыеДанныеФормы;
	ПредставлениеТекущегоДокумента = Параметры.ПредставлениеТекущегоДокумента;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПромотрЦепочкиДелегированияДоверенности()
	
	Возврат НСтр("ru = 'Цепочка доверенностей'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ РАБОТА С КОМПОНЕНТОЙ

&НаКлиенте
Процедура ОбработчикОповещения_ОчиститьСписокОшибок(П1, П2) Экспорт
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.СписокОшибок_Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ПоказатьРасшифровкуСпискаОшибок(УказательНаРасшифровку, СписокОшибок) Экспорт
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ВидыДействий = Ядро.СписокОшибок_Перечисление_ВидыДействийСпискаОшибок();
	ЧастиУказателя = Ядро.РазделитьСтроку(УказательНаРасшифровку, "/", Ложь);
	ИндексРасшифровки = Число(ЧастиУказателя[ЧастиУказателя.ВГраница()]);
	
	ТекущийСписок = СписокОшибок;
	
	Для Сч = 0 По ЧастиУказателя.ВГраница() - 1 Цикл
		
		ИндексСтроки = Число(ЧастиУказателя[Сч]);
		СтрокаСообщения = ТекущийСписок[ИндексСтроки];
		ТекущийСписок = СтрокаСообщения.Строки;
		
	КонецЦикла;
	
	Расшифровка = СтрокаСообщения.Расшифровка[ИндексРасшифровки];
	
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Расшифровка.Действие;
	ПараметрыРасшифровки = Расшифровка.Параметры;
	
	Если Действие = ВидыДействий.ОткрытьФормуОбработки Тогда
		
		ИмяНовойФормы = Ядро.СвойствоСтруктуры(ПараметрыРасшифровки, "ИмяФормы");
		ПараметрыФормы = Ядро.СвойствоСтруктуры(ПараметрыРасшифровки, "ПараметрыФормы");
		
		ОсновнаяФорма().мОткрытьФорму(ИмяНовойФормы, ПараметрыФормы);
		
	ИначеЕсли Действие = ВидыДействий.ОткрытьФорму Тогда
		
		ИмяНовойФормы = Ядро.СвойствоСтруктуры(ПараметрыРасшифровки, "ИмяФормы");
		ПараметрыФормы = Ядро.СвойствоСтруктуры(ПараметрыРасшифровки, "ПараметрыФормы");
		
		ОткрытьФорму(ИмяНовойФормы, ПараметрыФормы);
		
	ИначеЕсли Действие = ВидыДействий.ПоказатьЗначение Тогда
		
		//ПоказатьЗначение(, ПараметрыРасшифровки);
		
	ИначеЕсли Действие = ВидыДействий.ВыполнитьОповещение Тогда
		
		ОбработчикОповещения = ПараметрыРасшифровки.ОбработчикОповещения;
		РезультатОповещения = ПараметрыРасшифровки.РезультатОповещения;
		
		ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения(ОбработчикОповещения, ЭтаФорма);
		
		ОсновнаяФорма().ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, РезультатОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОткрытьФормуНастроекМЧД(П1, П2) Экспорт
	
	НазваниеФормы		 = Метрика_НазваниеФормы();
	КатегорияМетрики	 = Метрика_НазваниеКатегории();
	КлючНазванияФормы	 = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	ДействиеМетрики		 = Метрика_ВозможныеДействия().НастроитьМчдВМодуле;
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, "Нажатие кнопки", НазваниеФормы);
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики);
	
	ОсновнаяФорма().НачатьОткрытиеФормыСпискаДоверенностей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОткрытьФормуЗаполненияПолномочийПодписанта(ПараметрыФормы, ДополнительныеПараметры = Неопределено) Экспорт

	НазваниеФормы		= Метрика_НазваниеФормы();
	КатегорияМетрики	= Метрика_ВозможныеКатегории().ПолномочияПодписанта;
	КлючНазванияФормы	= Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	ДействиеМетрики		= Метрика_ВозможныеДействия().Заполнить;
	НазваниеКнопки		= Метрика_ВозможныеДействия().НажатиеКнопки;
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, НазваниеКнопки, НазваниеФормы);
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики);
		
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("РедактированиеПолномочийУправляемая", ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОткрытьФормуСпискаКонтрагентов(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Организация = Неопределено;
	
	Платформа = Модуль_Платформа();
	Платформа.Контрагенты_ПоказатьСписокКонтрагентов(Организация);
	
КонецПроцедуры

// Обработчик открытия ЦП из ссылок формы html сообщения
//
// Параметры:
//  РежимОткрытияЦП			- Строка, Неопределено - см. Ядро.ЦП_РежимыОткрытияЦП()
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_ОткрытьЦентрПоддержки(РежимОткрытияЦП = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НазваниеФормы	= Метрика_НазваниеФормы();
	Категория		= Метрика_ВозможныеКатегории().ЦентрПоддержки;
	
	ОсновнаяФорма().ЦентрПоддержки_Открыть(Категория, НазваниеФормы, РежимОткрытияЦП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ОтправитьEmail(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НазваниеФормы	= Метрика_НазваниеФормы();
	Категория		= Метрика_НазваниеКатегории();
	ДействиеМетрики	= Метрика_ВозможныеДействия().НаписатьПисьмоВТехподдержку;
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, Категория, ДействиеМетрики);
	
	ПропуститьВыборОрганизации = Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(ДополнительныеПараметры, "ПропуститьВыборОрганизацииДляЧатаИEmail", Ложь);
	
	Если ПропуститьВыборОрганизации Тогда
		ВыбранныйЭлемент = Новый Структура("Значение");
		ОсновнаяФорма().ОтправитьEmailПродолжение(ВыбранныйЭлемент, Категория);
	Иначе
		ОсновнаяФорма().Обработчик_ОтправитьEmail(Результат, Категория);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ПереходКЛендингу(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Метрики_ЗаписатьНажатие_ПереходКЛендингу();
	
	АдресСсылкиДляПерехода = АдресСтраницыНовогоднееПоздравление();
	ДопПараметры = Неопределено;
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.ОповеститьИлиПерейтиПоСсылке(АдресСсылкиДляПерехода, ДопПараметры, ЭтаФорма);
	
КонецПроцедуры

// Обработчик открытия сайта ФНС для проверки доверенности из ссылок формы html сообщения
//
// Параметры:
//  Результат			- Строка - см. Ядро.Новый_ПараметрыГиперссылкиПроверкиМЧД()
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_ПроверитьДоверенностьНаСайтеФНС(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДопПараметры = Неопределено;
		ПараметрыГиперссылкиПроверкиМЧД = Модуль_ЯдроНаКлиенте().ДесериализоватьПараметрыГиперссылки(Результат);
		
		АдресСсылки = ПараметрыГиперссылкиПроверкиМЧД.АдресСсылки;
		ИдентификаторМЧД = ПараметрыГиперссылкиПроверкиМЧД.ИдентификаторМЧД;
		
		Метрика_ДобавитьПоведение_НажатиеПроверитьДоверенностьНаСайтеФНС();
		Метрика_ДобавитьСтатистику_НажатиеПроверитьДоверенностьНаСайтеФНС(ИдентификаторМЧД);
		
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСсылки, ДопПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик скачивания файлов доверенности из ссылок формы html сообщения
//
// Параметры:
//  Результат			- Строка - см. Ядро.Новый_ПараметрыГиперссылкиСкачатьФайлыДоверенности()
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_СкачатьФайлыДоверенности(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПараметрыГиперссылкиСкачатьФайлыДоверенности = Модуль_ЯдроНаКлиенте().ДесериализоватьПараметрыГиперссылки(Результат);
		ИдентификаторМЧД = ПараметрыГиперссылкиСкачатьФайлыДоверенности.ИдентификаторМЧД;
		
		Метрика_ДобавитьПоведение_НажатиеСкачатьФайлыДоверенности();
		Метрика_ДобавитьСтатистику_НажатиеСкачатьФайлыДоверенности(ИдентификаторМЧД);
		
		ПараметрыСкачиванияФайловМЧД = Новый Структура;
		ПараметрыСкачиванияФайловМЧД.Вставить("ПредставлениеТекущегоДокумента", ПредставлениеТекущегоДокумента);
		ПараметрыСкачиванияФайловМЧД.Вставить("ПараметрыГиперссылки", Результат);
		
		ОсновнаяФорма().ОбработатьНажатиеГиперссылкиСкачатьФайлыМЧД(ПараметрыСкачиванияФайловМЧД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ОткрытьСсылкуСервисаПредложений(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаПоискаИндекса = "raw_id=";
		
		Если Лев(Результат, СтрДлина(СтрокаПоискаИндекса)) = СтрокаПоискаИндекса Тогда
			
			ИндексСтроки = Число(СтрЗаменить(Результат, СтрокаПоискаИндекса, ""));
			ОписаниеПредложенияДляПокупки = ДополнительныеПараметры.Получить(ИндексСтроки);
			
			Если ЗначениеЗаполнено(ОписаниеПредложенияДляПокупки.Ссылка) Тогда
				АдресСылкиДляПерехода = ОписаниеПредложенияДляПокупки.Ссылка;
			Иначе
				АдресСылкиДляПерехода = АдресСтраницыЗаявкиНаОплату();
			КонецЕсли;
			
			ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСылкиДляПерехода, ДополнительныеПараметры, ЭтаФорма);
			
			Метрика_ОткрытьСсылкуСервисаПредложений(ОписаниеПредложенияДляПокупки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ОткрытьСсылкуРазъясненияПоСтроке5аУПД970(Результат = Неопределено,
																	 ДополнительныеПараметры = Неопределено) Экспорт
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	АдресаИнтернетРесурсов = Модуль_Ядро.Перечисление_АдресаИнтернетРесурсов();
	АдресСсылкиДляПерехода = АдресаИнтернетРесурсов.РазъясненияПоСтроке5аУПД970;
	
	ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСсылкиДляПерехода, ДополнительныеПараметры, ЭтаФорма);
	
	Метрика_ОткрытьСсылкуРазъясненияПоСтроке5аУПД970();
	
КонецПроцедуры

&НаКлиенте
Функция АдресСтраницыЗаявкиНаОплату()
	
	Возврат "https://www.diadoc.ru/order-1c";
	
КонецФункции

&НаКлиенте
Функция АдресСтраницыНовогоднееПоздравление()
	
	Возврат "https://kontur-lp.ru/diadoc-ny-2025";
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьСтраницу(Страница)
	
	Попытка
		Страница.parentWindow.focus();
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеНаСтранице(Страница, ИмяЭлемента, Значение)
	
	Попытка
		Страница.getElementByID(ИмяЭлемента).value = Значение;
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСодержимоеПоля(Команда)
	
	РезультатКопирования = Новый Структура;
	РезультатКопирования.Вставить("ЕстьОшибки", Ложь);
	РезультатКопирования.Вставить("ОписаниеОшибки", "");
	
	Попытка
		РезультатКопирования.ЕстьОшибки = НЕ ПоместитьТекстВБуферОбмена(ТекстДляКопирования);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатКопирования.ОписаниеОшибки = ПредставлениеОшибки;
		
		Метрика_ЗаписатьОшибку(ПредставлениеОшибки, Метрика_НазваниеКатегории(), Метрика_ВозможныеДействия().Скопировать, "НеизвестнаяОшибка");
		
	КонецПопытки;
	
	Если Элементы.СкопироватьСодержимоеПоля.Заголовок = "Скопировать данные сертификата" Тогда
		ОбработатьДействиеКопированияСодержимогоПоляСертификата(РезультатКопирования);	
	Иначе
		ОбработатьДействиеКопированияСодержимогоПоля(РезультатКопирования);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеКопированияСодержимогоПоля(РезультатКопирования)
	
	ТекстЗаголовка = "Диадок";
	
	Если РезультатКопирования.ЕстьОшибки Тогда
		ТекстПредупреждения = 
		"Не удалось скопировать данные. Скопируйте информацию вручную:
		|
		|  1. Щелкните мышкой по полю с информацией.
		|  2. Нажмите Ctrl+A.
		|  3. Нажмите Ctrl+C.
		|  4. Вставьте информацию с помощью клавиш Ctrl+V.";
	Иначе
		ТекстПредупреждения = "Информация скопирована. Вставьте данные с помощью клавиш Ctrl+V.";	
	КонецЕсли;
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения,, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеКопированияСодержимогоПоляСертификата(РезультатКопирования)
	
	Метрика_СкопироватьДанныеСертификата();
	
	Если РезультатКопирования.ЕстьОшибки Тогда
		
		Метрика_ЗаписатьОшибку(РезультатКопирования.ОписаниеОшибки, Метрика_НазваниеКатегории(), Метрика_ВозможныеДействия().Скопировать, "НеизвестнаяОшибка");
		
		ТекстПредупреждения = ТекстПредупрежденияОбОшибкеКопированияДанныхСертификата();
		ТекстЗаголовка = "Не удалось скопировать данные";
		
		Метрика_ЗаписатьОшибку(ТекстПредупреждения,Метрика_НазваниеКатегории(), Метрика_ВозможныеДействия().Скопировать, "НеУдалосьСкопировать");
		
	Иначе
		ТекстПредупреждения = ТекстПредупрежденияОбУспешномКопированииДанныхСертификата();
		ТекстЗаголовка = "Данные сертификата скопированы";	
		
	КонецЕсли;
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения,, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезМЧД(Команда)
	
	НазваниеФормы = Метрика_НазваниеФормы();
	КлючНазванияФормы = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	ДействиеМетрики = Метрика_ВозможныеДействия().ПродолжитьБезМЧД;
	КатегорияМетрики = Метрика_НазваниеКатегории();
	НазваниеМетки = "Нажать кнопку";
	ЛокальныйTraceId = КлючНазванияФормы + "_" + Новый УникальныйИдентификатор;
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, НазваниеМетки, НазваниеФормы, ЛокальныйTraceId);
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики,,,, ЛокальныйTraceId);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры


&НаКлиенте
Функция ПоместитьТекстВБуферОбмена(Текст)
	
	htmlfile = Новый ComОбъект("htmlfile");
	Результат = htmlfile.ParentWIndow.ClipboardData.SetData("Text", Текст);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекстПредупрежденияОбУспешномКопированииДанныхСертификата()
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Вставьте в письмо или чат с помощью клавиш'; en = 'Вставьте в письмо или чат с помощью клавиш'"));
	Подстроки.Добавить(НСтр("ru = 'Ctrl + V для отправки в Техподдержку.'; en = 'Ctrl + V для отправки в Техподдержку.'"));
	
	Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекстПредупрежденияОбОшибкеКопированияДанныхСертификата()
	
	Результат = НСтр("ru = 'Скопируйте данные сертификата вручную'; en = 'Скопируйте данные сертификата вручную'");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Метрики

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	ВозможныеНазванияФорм	 = Метрика_ВозможныеНазванияФорм();
	НазваниеФормы			 = Метрика_НазваниеФормы();
	ВозможныеКатегории		 = Метрика_ВозможныеКатегории();
	
	Результат = ВозможныеКатегории.Неопределено;
	
	Если НазваниеФормы = ВозможныеНазванияФорм.ПродлениеОбслуживания Тогда
		Результат = ВозможныеКатегории.ОнлайнСчета;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.ОплатаСервиса Тогда
		Результат = ВозможныеКатегории.ОнлайнПродажи;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.УведомлениеСменаФормата Тогда
		Результат = ВозможныеКатегории.УведомлениеОСменеФормата;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.НетНужногоСертификата Тогда
		Результат = ВозможныеКатегории.ПереходПоСсылке;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.ДанныеПоСертификату Тогда
		Результат = ВозможныеКатегории.ПоСертификату;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.ИнструкцияНастройкаДоверенности Тогда
		Результат = ВозможныеКатегории.УведомлениеОМЧД;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.НеПоявляетсяДокументНаОтправку Тогда
		Результат = ВозможныеКатегории.НетНужногоДокумента;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.КакПереотправитьДокумент Тогда
		Результат = ВозможныеКатегории.КакПереотправитьДокумент;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.Переотправка Тогда
		Результат = ВозможныеКатегории.Переотправка;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.Поздравление Тогда
		Результат = ВозможныеКатегории.ПоздравлениеКлиентов;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.ПодробнееОНастройкеПакетов Тогда
		Результат = ВозможныеКатегории.ДействияВМастере;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.ОбновлениеРазделаСКонтрагентами Тогда
		Результат = ВозможныеКатегории.ОбновлениеРазделаСКонтрагентами;
	ИначеЕсли НазваниеФормы = ВозможныеНазванияФорм.НетНужногоКонтрагента Тогда
		Результат = ВозможныеКатегории.ОбновлениеРазделаСКонтрагентами;
КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	ВозможныеНазванияФорм = Метрика_ВозможныеНазванияФорм();
	
	Результат = ВозможныеНазванияФорм.Неопределено;
	
	Если Найти(Заголовок, "Продление и обслуживание сервиса Диадок") > 0 Тогда
		Результат = ВозможныеНазванияФорм.ПродлениеОбслуживания;
	ИначеЕсли Найти(Заголовок, "Оплата сервиса Диадок") > 0 Тогда
		Результат = ВозможныеНазванияФорм.ОплатаСервиса;
	ИначеЕсли Найти(Заголовок, "Смена формата корректировочных документов") > 0 Тогда
		Результат = ВозможныеНазванияФорм.УведомлениеСменаФормата;
	ИначеЕсли Найти(Заголовок, "Авторизация по сертификату") > 0 Тогда
		Результат = ВозможныеНазванияФорм.НетНужногоСертификата;
	ИначеЕсли Найти(Заголовок, "Данные сертификата") > 0 Тогда
		Результат = ВозможныеНазванияФорм.ДанныеПоСертификату;
	ИначеЕсли Найти(Заголовок, "Настройка доверенности") > 0 Тогда
		Результат = ВозможныеНазванияФорм.ИнструкцияНастройкаДоверенности;
	ИначеЕсли Найти(Заголовок, "Не появляется документ на отправку") > 0 Тогда
		Результат = ВозможныеНазванияФорм.НеПоявляетсяДокументНаОтправку;
	ИначеЕсли Найти(Заголовок, "Служебные сообщения") > 0 Тогда
		Результат = ВозможныеНазванияФорм.СлужебныеСообщения;
	ИначеЕсли Найти(Заголовок, ЗаголовокКакПереотправитьДокумент()) > 0 Тогда
		Результат = ВозможныеНазванияФорм.КакПереотправитьДокумент;
	ИначеЕсли Найти(Заголовок, ЗаголовокПереотправка()) > 0 Тогда
		Результат = ВозможныеНазванияФорм.Переотправка;
	ИначеЕсли Найти(Заголовок, ЗаголовокКонтрагентыНеПоддерживаютМЧД()) > 0 Тогда
		Результат = ВозможныеНазванияФорм.КонтрагентыНеПоддерживаютМЧД;
	ИначеЕсли Найти(Заголовок, ЗаголовокПодробнееОНастройкеПакетов()) > 0 Тогда
		Результат = ВозможныеНазванияФорм.ПодробнееОНастройкеПакетов;
	ИначеЕсли Найти(Заголовок, ЗаголовокПромотрЦепочкиДелегированияДоверенности()) > 0 Тогда
		Результат = ВозможныеНазванияФорм.ЦепочкаДоверенностей;
	ИначеЕсли Найти(Заголовок, "Обновление раздела с контрагентами") > 0 Тогда
		Результат = ВозможныеНазванияФорм.ОбновлениеРазделаСКонтрагентами;
	ИначеЕсли Найти(Заголовок, "Не отображается контрагент") > 0 Тогда
		Результат = ВозможныеНазванияФорм.НетНужногоКонтрагента;
	КонецЕсли;
	
	Если Режим = Режим_НовогоднееПоздравление() Тогда
		Результат = ВозможныеНазванияФорм.Поздравление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ВозможныеДействия()

	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеДействий();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ВозможныеКатегории()
	
	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеКатегории();
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция Метрика_ВозможныеНазванияФорм()
	
	Результат = Новый Структура;
	Результат.Вставить("Неопределено"				, "Не определено");
	Результат.Вставить("ПродлениеОбслуживания"		, "Продление обслуживания");
	Результат.Вставить("ОплатаСервиса"				, "Оплата сервиса");
	Результат.Вставить("УведомлениеСменаФормата"	, "Уведомление о смене формата");
	Результат.Вставить("НетНужногоСертификата"		, "Нет нужного сертификата");
	Результат.Вставить("ДанныеПоСертификату"		, "Данные сертификата");
	Результат.Вставить("СлужебныеСообщения"			, "Служебные сообщения");
	
	Результат.Вставить("ИнструкцияНастройкаДоверенности"	, "Инструкция настройка доверенности");
	Результат.Вставить("НеПоявляетсяДокументНаОтправку"		, "Не появляется документ на отправку");
	Результат.Вставить("КакПереотправитьДокумент"			, Метрика_НазваниеФормыКакПереотправитьДокумент());
	Результат.Вставить("Переотправка"						, Метрика_Переотправка());
	Результат.Вставить("Поздравление"						, "Поздравление");
	Результат.Вставить("КонтрагентыНеПоддерживаютМЧД"		, "Оператор контрагента не поддерживает МЧД");
	Результат.Вставить("НетНужногоКонтрагента"				, "Не отображается контрагент");
	
	Результат.Вставить("ПодробнееОНастройкеПакетов"			, Метрика_ПодробнееОНастройкеПакетов());
	Результат.Вставить("ЦепочкаДоверенностей"				, "МЧД_ЦепочкаДоверенностей");
	Результат.Вставить("ОбновлениеРазделаСКонтрагентами"	, "ОбновлениеРазделаСКонтрагентами");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеФормыКакПереотправитьДокумент()
	
	Возврат "Как переотправить документ";
	
КонецФункции

&НаКлиенте
Функция Метрика_Переотправка()
	
	Возврат "Переотправить документ";
	
КонецФункции

&НаКлиенте
Функция Метрика_ПодробнееОНастройкеПакетов()
	
	Возврат "Подробнее о настройке пакетов";
	
КонецФункции

&НаКлиенте
Функция Метрика_КлючНазванияФормыПоПредставлению(Представление)

	Результат = Представление;
	
	НазванияФорм = Метрика_ВозможныеНазванияФорм();
	Для каждого КлючЗначение Из НазванияФорм Цикл
		Если КлючЗначение.Значение = Представление Тогда
			Результат = КлючЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ПереходКЛендингу()
	
	НазваниеФормы = Метрика_НазваниеФормы();
	КатегорияМетрики = Метрика_НазваниеКатегории();
	КлючНазванияФормы = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	ДействиеМетрики = Метрика_ВозможныеДействия().ПереходНаЛендинг;
	НазваниеКнопки = Метрика_ВозможныеДействия().НажатиеСсылки;
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(
		КлючНазванияФормы,
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеКнопки,
		НазваниеФормы);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ЗаписатьОшибку(ТекстОшибки, Категория, Действие, ИдентификаторОшибки)
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Идентификатор ошибки"	, ИдентификаторОшибки);
	Метрика_ДополнитьДаннымиСертификата(ДопПеременные);
	
	КонтекстСеансаЗаполнен = Модуль_ЯдроНаКлиенте().КонтекстСеанса_ЕстьСтроки();
	Если КонтекстСеансаЗаполнен Тогда
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьОшибку_ПоКонтексту(Категория, Действие, ТекстОшибки, ДопПеременные);
	Иначе
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьОшибку_ДляОрганизации("", Категория, Действие, ТекстОшибки, ДопПеременные);
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура Метрика_ПриЗакрытии()
	
	НазваниеФормы			 = Метрика_НазваниеФормы();
	ВозможныеНазванияФорм	 = Метрика_ВозможныеНазванияФорм();
	ДействиеМетрики			 = Метрика_ВозможныеДействия().ЗакрытиеФормы;
	
	Если НазваниеФормы = ВозможныеНазванияФорм.НетНужногоСертификата
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ДанныеПоСертификату
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ИнструкцияНастройкаДоверенности
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.Поздравление
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.НетНужногоКонтрагента
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ПодробнееОНастройкеПакетов Тогда
		
		КатегорияМетрики	 = Метрика_НазваниеКатегории();
		
		ДопПеременные = Новый Соответствие;
		
		Если НазваниеФормы = ВозможныеНазванияФорм.ДанныеПоСертификату Тогда
			Метрика_ДополнитьДаннымиСертификата(ДопПеременные);
		КонецЕсли; 
		КлючНазванияФормы = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
		
		Метрика_ДобавитьПоведение_ДействиеСФормой(КлючНазванияФормы, КатегорияМетрики, Ложь, , НазваниеФормы);
		Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПеременные)
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Метрика_ПриОткрытии()
	
	TraceId = Модуль_ЯдроНаКлиенте().TraceId();
	
	НазваниеФормы			 = Метрика_НазваниеФормы();
	ВозможныеНазванияФорм	 = Метрика_ВозможныеНазванияФорм();
	ДействиеМетрики			 = Метрика_ВозможныеДействия().ОткрытиеФормы;
	КатегорияМетрики		 = Метрика_НазваниеКатегории();
	КлючНазванияФормы		 = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	
	Метрика_ДобавитьПоведение_ДействиеСФормой(КлючНазванияФормы, КатегорияМетрики, Истина, , НазваниеФормы);
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики)
	
КонецПроцедуры 

&НаКлиенте
Процедура Метрика_ПереходПоСсылке(АдресСсылки)
	
	НазваниеФормы = Метрика_НазваниеФормы();
	ВозможныеНазванияФорм = Метрика_ВозможныеНазванияФорм();
	
	Если НазваниеФормы = ВозможныеНазванияФорм.НетНужногоСертификата
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ИнструкцияНастройкаДоверенности
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.НеПоявляетсяДокументНаОтправку
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.КакПереотправитьДокумент
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.Переотправка
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.НетНужногоКонтрагента
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ПодробнееОНастройкеПакетов
		ИЛИ НазваниеФормы = ВозможныеНазванияФорм.ОбновлениеРазделаСКонтрагентами Тогда
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		ВозможныеДействия = Метрика_ВозможныеДействия();
		ДействиеМетрики = "";
		АдресаИнтернетРесурсов = Ядро.Перечисление_АдресаИнтернетРесурсов();
		
		Если АдресСсылки = АдресаИнтернетРесурсов.СправкаУстановкаСертификата Тогда
			ДействиеМетрики = ВозможныеДействия.Установить;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.СправкаСкопироватьСертификат Тогда
			ДействиеМетрики = ВозможныеДействия.Скопировать;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.СтраницаСервисныйЦентр Тогда
			ДействиеМетрики = ВозможныеДействия.Продлить;
		ИначеЕсли Найти(АдресСсылки, "ОтправитьEmail") Тогда
			ДействиеМетрики = ВозможныеДействия.НаписатьПисьмоВТехподдержку;
		ИначеЕсли Найти(АдресСсылки, "ОткрытьЦентрПоддержки") Тогда
			ДействиеМетрики = ВозможныеДействия.ЗадатьВопросОнлайнКонсультанту;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.МЧДПодробнееОбИзменениях Тогда
			ДействиеМетрики = ВозможныеДействия.ПодробнееОбИзменениях;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.МЧДВыпуститьНовую Тогда
			ДействиеМетрики = ВозможныеДействия.ВыпуститьНовуюМЧД;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.МЧДЗагрузитьВВебе Тогда
			ДействиеМетрики = ВозможныеДействия.ЗагрузитьВДиадоке;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ДокументУжеБылОтправлен Тогда
			ДействиеМетрики = ВозможныеДействия.КакПроверитьОтправленныеДокументы;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_НеправильноНастроеныФильтры Тогда
			ДействиеМетрики = ВозможныеДействия.КакНастроитьФильтры;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ПосмотретьВсеПричины Тогда
			ДействиеМетрики = ВозможныеДействия.ПосмотретьВсеПричины;
		ИначеЕсли Найти(АдресСсылки, "ОткрытьФормуСпискаКонтрагентов") Тогда
			ДействиеМетрики = ВозможныеДействия.СопоставитьКонтрагента;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ОтвязатьДокумент Тогда
			ДействиеМетрики = ВозможныеДействия.ОтвязатьДокумент;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ПерезаполнитьПакет Тогда
			ДействиеМетрики = ВозможныеДействия.ПерезаполнитьПакет;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ОтличияОтМодуляСтандарт Тогда
			ДействиеМетрики = ВозможныеДействия.ПосмотретьОтличияОтМодуляСтандарт;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ПереотправитьДокументИзКарточки Тогда
			ДействиеМетрики = ВозможныеДействия.ПереотправитьДокументИзКарточки;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ГрупповаяПереотправка Тогда
			ДействиеМетрики = ВозможныеДействия.ГрупповаяПереотправка;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_ИндивидуальныеНастройки Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииПоКонтрагентам
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_РасширенныеНастройки Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииПоОрганизации
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.ИнструкцияПоНастройкеКонтрагентов Тогда
			ДействиеМетрики = ВозможныеДействия.ИнструкцииПоНастройкеКА;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_НеОбновленСписокКонтрагентов Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииНеОбновленСписокКонтрагентов;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_НеПолученыИзмененияИзДиадок Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииНеПолученыИзмененияИзДиадок;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_СсылкаКонтрагентВИномСписке Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииКонтрагентВИномСписке;
		ИначеЕсли АдресСсылки = АдресаИнтернетРесурсов.Инструкция_СсылкаНеВыбранаОрганизация Тогда
			ДействиеМетрики = ВозможныеДействия.ОткрытиеИнструкцииНеВыбранаОрганизация;
		Иначе
			Возврат;
		КонецЕсли;
		
		КатегорияМетрики = Метрика_НазваниеКатегории();
		ДопПараметры = Новый Соответствие;
		ДопПараметры.Вставить("Имя ссылки", АдресСсылки);
		КлючНазванияФормы = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
		
		Если Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
			Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение"
			Или Режим = "ОповещениеНетНужногоКонтрагента" Тогда
			
			Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, "Нажать ссылку", НазваниеФормы, ИдентификаторТрассировки);
			Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПараметры, , ИдентификаторТрассировки);
			
		Иначе
			
			Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы);
			Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_СкопироватьДанныеСертификата()
	
	НазваниеФормы			 = Метрика_НазваниеФормы();
	ВозможныеНазванияФорм	 = Метрика_ВозможныеНазванияФорм();
	
	Если НазваниеФормы = ВозможныеНазванияФорм.ДанныеПоСертификату Тогда
	
		КатегорияМетрики = Метрика_НазваниеКатегории();
		ДействиеМетрики = Метрика_ВозможныеДействия().Скопировать;
		
		ДопПеременные = Новый Соответствие;
		Метрика_ДополнитьДаннымиСертификата(ДопПеременные);
		КлючНазванияФормы = Метрика_КлючНазванияФормыПоПредставлению(НазваниеФормы);
	
		Метрика_ДобавитьПоведение_НажатиеКнопки(КлючНазванияФормы, КатегорияМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы);
		Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПеременные)
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДополнитьДаннымиСертификата(ДопПеременные)
	
	ДопПеременные.Вставить("Отпечаток"				, Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Параметры.ДополнительныеПараметрыФормы, "ОтпечатокСертификата", ""));
	ДопПеременные.Вставить("СрокДействия"			, Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Параметры.ДополнительныеПараметрыФормы, "СрокДействия", ""));
	
КонецПроцедуры

&НаСервере
Процедура Метрика_ЗаписатьЛог_ОплатаСервиса()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ВозможныеКатегории = Ядро.Метрика_НазваниеКатегории();
	ВозможныеДействия = Ядро.Метрика_НазваниеДействий();
	
	КатегорияМетрики = ВозможныеКатегории.ОнлайнПродажи;
	ДействиеМетрики = ВозможныеДействия.ОткрытиеФормы;
	
	ТекстОшибки = Метрика_ТекстОшибки_НетОплатыАПИ();
	
	МассивОрганизаций = Ядро.ЗаблокированныеОрганизации_Массив();
	
	Для Каждого ОрганизацияБезОплаты Из МассивОрганизаций Цикл
		
		BoxId = ОрганизацияБезОплаты.BoxId;
		
		Ядро.Метрика_ДобавитьОшибку_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики, ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ТекстОшибки_НетОплатыАПИ()
	Возврат "Нет оплаты АПИ";
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС()
	
	Возврат "Проверить доверенность на сайте ФНС";
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеНажатиеСкачатьФайлыДоверенности()
	
	Возврат "Скачать доверенность";
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, НазваниеКатегории, НазваниеКнопки, НазваниеМетки = "", ПредставлениеМетрики = "", ЛокальныйTraceId = "") 

	Если НЕ ЗначениеЗаполнено(ЛокальныйTraceId) Тогда
		ЛокальныйTraceId = TraceId;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, НазваниеКатегории, НазваниеКнопки, НазваниеМетки, ПредставлениеМетрики, ЛокальныйTraceId);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, Метка = Неопределено, ДопПеременные = Неопределено, ПредставлениеМетрики = "", ЛокальныйTraceId = "")
	
	Если НЕ ЗначениеЗаполнено(ЛокальныйTraceId) Тогда
		ЛокальныйTraceId = TraceId;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, Метка, ДопПеременные, ПредставлениеМетрики, ЛокальныйTraceId)
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, НазваниеКатегории, Открытие = Истина, НазваниеМетки = "", ПредставлениеМетрики = "", ЛокальныйTraceId = "")
	
	Если НЕ ЗначениеЗаполнено(ЛокальныйTraceId) Тогда
		ЛокальныйTraceId = TraceId;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, НазваниеКатегории, Открытие, НазваниеМетки, ПредставлениеМетрики, ЛокальныйTraceId)
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеПроверитьДоверенностьНаСайтеФНС()
	
	КатегорияМетрики		= Метрика_ВозможныеКатегории().ДействиеСДоверенностьюНаФормеЦепочки;
	ДействиеМетрики			= Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС();
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "МЧД_ЦепочкаДоверенностей";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеПроверитьДоверенностьНаСайтеФНС(ИдентификаторМЧД)
	
	КатегорияМетрики	= Метрика_ВозможныеКатегории().ДействиеСДоверенностьюНаФормеЦепочки;
	ДействиеМетрики		= Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС();
	МеткаМетрики		= "";
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Рег. номер МЧД", ИдентификаторМЧД);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		Метрика_НазваниеФормы()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеСкачатьФайлыДоверенности()
	
	КатегорияМетрики		= Метрика_ВозможныеКатегории().ДействиеСДоверенностьюНаФормеЦепочки;
	ДействиеМетрики			= Метрика_ДействиеНажатиеСкачатьФайлыДоверенности();
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "МЧД_ЦепочкаДоверенностей";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеСкачатьФайлыДоверенности(ИдентификаторМЧД)
	
	КатегорияМетрики	= Метрика_ВозможныеКатегории().ДействиеСДоверенностьюНаФормеЦепочки;
	ДействиеМетрики		= Метрика_ДействиеНажатиеСкачатьФайлыДоверенности();
	МеткаМетрики		= "";
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Рег. номер МЧД", ИдентификаторМЧД);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		Метрика_НазваниеФормы()
	);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, ДопПеременные = Неопределено)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
		КатегорияМетрики,
		ДействиеМетрики,
		,
		ДопПеременные
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьПоведение(КатегорияМетрики, ДействиеМетрики, Представление, Метка)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ЗаписатьПоведение(
		КатегорияМетрики,
		ДействиеМетрики,
		Представление,
		Метка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать()
	
	КатегорияМетрики		= "ОбновлениеРазделаСКонтрагентами";
	ДействиеМетрики			= "БольшеНеПоказывать";
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "НовоеВВерсии";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики,
		ИдентификаторТрассировки
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистику_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать()
	
	КатегорияМетрики	= "ОбновлениеРазделаСКонтрагентами";
	ДействиеМетрики		= "БольшеНеПоказывать";
	МеткаМетрики		= "";
	Представление		= "";
	
	Если БольшеНеПоказывать Тогда
		ПредставлениеБольшеНеПоказыва = "True";
	Иначе
		ПредставлениеБольшеНеПоказыва = "False";
	КонецЕсли;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ПредставлениеБольшеНеПоказыва);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		Метрика_НазваниеФормы(),
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистику_НетНужногоКонтрагента_ОткрытиеФормы()
	
	КатегорияМетрики	= "НетНужногоКонтрагента";
	ДействиеМетрики		= "ОткрытиеФормы";
	МеткаМетрики		= "Нажать ссылку";
	Представление		= "ОсновнаяФорма";
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		,
		Метрика_НазваниеФормы(),
		ИдентификаторТрассировки	
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_НетНужногоКонтрагента_ОткрытиеФормы()
	
	Метрика_ЗаписатьСтатистику_НетНужногоКонтрагента_ОткрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы()
	
	КатегорияМетрики		= "ОбновлениеРазделаСКонтрагентами";
	ДействиеМетрики			= "ЗакрытиеФормы";
	НазваниеМетки			= "Нажать ссылку";
	ПредставлениеМетрики	= "НовоеВВерсии";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики,
		ИдентификаторТрассировки
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистику_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы()
	
	КатегорияМетрики	= "ОбновлениеРазделаСКонтрагентами";
	ДействиеМетрики		= "ЗакрытиеФормы";
	МеткаМетрики		= "Нажать ссылку";
	Представление		= "НовоеВВерсии";
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		,
		Метрика_НазваниеФормы(),
		ИдентификаторТрассировки
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы()
	
	Метрика_ЗаписатьНажатие_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы();
	Метрика_ЗаписатьСтатистику_НовоеВВерсииРаботаСКонтрагентами_ЗакрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_НетНужногоКонтрагента_ЗакрытиеФормы()
	
	КатегорияМетрики		= "НетНужногоКонтрагента";
	ДействиеМетрики			= "ЗакрытиеФормы";
	НазваниеМетки			= "Нажать ссылку";
	ПредставлениеМетрики	= "НетНужногоКонтрагента";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики,
		ИдентификаторТрассировки
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистику_НетНужногоКонтрагента_ЗакрытиеФормы()
	
	КатегорияМетрики	= "НетНужногоКонтрагента";
	ДействиеМетрики		= "ЗакрытиеФормы";
	МеткаМетрики		= "Нажать ссылку";
	Представление		= "НетНужногоКонтрагента";
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		,
		Метрика_НазваниеФормы(),
		ИдентификаторТрассировки
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_НетНужногоКонтрагента_ЗакрытиеФормы()
	
	Метрика_ЗаписатьНажатие_НетНужногоКонтрагента_ЗакрытиеФормы();
	Метрика_ЗаписатьСтатистику_НетНужногоКонтрагента_ЗакрытиеФормы();
	
КонецПроцедуры

&НаСервере
Процедура Метрика_РазъясненияПоСтроке5аУПД970_ОткрытиеФормы()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ВозможныеКатегории = Модуль_Ядро.Метрика_НазваниеКатегории();
	ВозможныеДействия = Модуль_Ядро.Метрика_НазваниеДействий();
	
	КатегорияМетрики = ВозможныеКатегории.УведомлениеСтрока5а970;
	ДействиеМетрики = ВозможныеДействия.ОткрытиеФормы;
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		,
		,
		,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОткрытьСсылкуРазъясненияПоСтроке5аУПД970()
	
	ВозможныеКатегории = Метрика_ВозможныеКатегории();
	ВозможныеДействия = Метрика_ВозможныеДействия();
	
	КатегорияМетрики = ВозможныеКатегории.УведомлениеСтрока5а970;
	ДействиеМетрики	= ВозможныеДействия.ПодробнееОбИзменениях;
	НазваниеФормы = ЗаголовокРазъясненияПоСтроке5аУПД970();
	НазваниеМетки = "Нажать гиперссылку";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		,
		ИдентификаторТрассировки);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		,
		,
		,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОткрытьСсылкуСервисаПредложений(ОписаниеПредложенияДляПокупки)
	
	BoxId = ОписаниеПредложенияДляПокупки.BoxId;
	ПредложениеДляПокупки = ОписаниеПредложенияДляПокупки.ПредложениеДляПокупки;
	
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики	= ОписаниеПредложенияДляПокупки.ПредставлениеДействия;
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("AccountId", ОписаниеПредложенияДляПокупки.ЛицевойСчет);
	Переменные.Вставить("ReasonForOffer", ПредложениеДляПокупки.ОснованиеПредложения);
	Переменные.Вставить("Activity", ПредложениеДляПокупки.Тип);
	Переменные.Вставить("ScenarioId", ПредложениеДляПокупки.Сценарий);
	
	Если ЗначениеЗаполнено(ПредложениеДляПокупки.ПодпискаПродления) Тогда
		Переменные.Вставить("EntitytId", ПредложениеДляПокупки.ПодпискаПродления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредложениеДляПокупки.Тариф) Тогда
		Переменные.Вставить("TariffId", ПредложениеДляПокупки.Тариф);
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики, ,Переменные);
	
КонецПроцедуры

&НаСервере
Процедура Метрика_НовоеВВерсииРаботаСКонтрагентами_ОткрытиеФормы()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ВозможныеКатегории = Ядро.Метрика_НазваниеКатегории();
	ВозможныеДействия = Ядро.Метрика_НазваниеДействий();
	
	КатегорияМетрики = ВозможныеКатегории.ОбновлениеРазделаСКонтрагентами;
	ДействиеМетрики = ВозможныеДействия.ОткрытиеФормы;
	МеткаМетрики = "Нажать ссылку";
	Представление = ЗаголовокНовоеВВерсииРаботаСКонтрагентами();
	
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		,
		Представление,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать()
		
		Метрика_ЗаписатьНажатие_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать(); 
		Метрика_ЗаписатьСтатистику_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки элементов формы
&НаСервере
Процедура СохранитьНастройку_БольшеНеПоказыватьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Режим = "ОшибкиМЧД" Тогда
		
		ОбработкаОбъект.НастройкиПользователяУстановить_НеПоказыватьПредупрежденияПоМЧД(БольшеНеПоказывать);
		
	ИначеЕсли Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
		Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение" Тогда
		
		ОбработкаОбъект.НастройкиПользователяУстановить_БольшеНеПоказыватьИзмененияВРазделеКонтрагентов(Режим, БольшеНеПоказывать);
		
	ИначеЕсли Режим = "РазъясненияПоСтроке5аУПД970" Тогда
		
		ОбработкаОбъект.НастройкиПользователяУстановить_НеПоказыватьРазъясненияПоСтроке5аУПД970(БольшеНеПоказывать);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку_БольшеНеПоказывать()
	
	Если БольшеНеПоказывать Тогда
		
		СохранитьНастройку_БольшеНеПоказыватьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БольшеНеПоказыватьПриИзменении(Элемент)
	
	Если Режим = "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты" 
		Или Режим = "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение" Тогда
		Метрики_НовоеВВерсииРаботаСКонтрагентами_БольшеНеПоказывать();
	КонецЕсли;
	
КонецПроцедуры
