
&НаСервере
Перем ОбработкаОбъект;

//{	СЕРВИСНЫЕ МЕТОДЫ

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

//}	СЕРВИСНЫЕ МЕТОДЫ


//{ ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОбщийКонтекст();
	
	Модуль_ЯдроНаСервере().СписокОшибок_Очистить();
	
	НастройкиПрокси = Параметры.НастройкиПрокси;
	
	УстановитьСвойстваФормыТакси();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), Метрика_НазваниеКатегории());

	ПодключитьОбработчикОжидания("ВыполнитьДиагностикуСоединения", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы = Ложь)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), Метрика_НазваниеКатегории(), Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	// ГоризонтальноеПоложениеВГруппе = Право
	
	СвойствоГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
	
	ЗаполнитьЗначенияСвойств(Элементы.Скопировать, СвойствоГоризонтальноеПоложениеВГруппе);
	
	// ВертикальноеПоложениеВГруппе = Центр
	
	СвойствоВертикальноеПоложениеВГруппе = Новый Структура("ВертикальноеПоложениеВГруппе", ВертикальноеПоложениеЭлемента.Центр);
	
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаИнформация, СвойствоВертикальноеПоложениеВГруппе);
	
	// АвтоМаксимальнаяШирина = Ложь
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	
	ЗаполнитьЗначенияСвойств(Элементы.НадписьИнформация, СвойствоАвтоМаксимальнаяШирина);
	
КонецПроцедуры

//} ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ


//{	ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ
          
&НаКлиенте
Процедура Скопировать(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Скопировать";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	Попытка
		
		Успех = ПоместитьТекстВБуферОбмена(РезультатДиагностики);
		
	Исключение
		
		ТекстПредупреждения	= ТекстПредупрежденияОбОшибкеКопирования();
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения,, "ВНИМАНИЕ");
		
	КонецПопытки;
	
КонецПроцедуры

//} ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ


//**********************************************
//{		СЕРВИСНЫЕ ФУНКЦИИ

&НаСервере
Процедура УстановитьОбщийКонтекст()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДиагностикуСоединения()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	URL = Ядро.ОбщийКонтекст_Прочитать("АдресDiadocAPI");
	
	Результат = Ядро.ВнешниеСервисы_ДиагностикаСоединения(URL, НастройкиПрокси);
	
	РезультатДиагностики = Результат.ЖурналДиагностики;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатДиагностики;
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьТекстВБуферОбмена(Текст)
	
	htmlfile = Новый ComОбъект("htmlfile");
	Результат = htmlfile.ParentWIndow.ClipboardData.SetData("Text", Текст);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекстПредупрежденияОбОшибкеКопирования()
	
	Подстроки = Новый Массив;
	
	Строка = НСтр("ru = 'Не удалось скопировать техническую информацию!'; en = 'Не удалось скопировать техническую информацию!'");
	Подстроки.Добавить(Строка);
	
	Строка = НСтр("ru = 'Скопируйте информацию вручную:'; en = 'Скопируйте информацию вручную:'");
	Подстроки.Добавить(Строка);
	
	Строка = НСтр("ru = '1. Щёлкните мышкой по окну с данными журнала диагностики.'; en = '1. Щёлкните мышкой по окну с данными журнала диагностики.'");
	Подстроки.Добавить(Строка);
	
	Строка = НСтр("ru = '2. Нажмите Ctrl+A.'; en = '2. Нажмите Ctrl+A.'");
	Подстроки.Добавить(Строка);
	
	Строка = НСтр("ru = '3. Нажмите Ctrl+C.'; en = '3. Нажмите Ctrl+C.'");
	Подстроки.Добавить(Строка);
	
	Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

//}		СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Журнал диагностики";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Возврат "Настройка соединения";
	
КонецФункции

