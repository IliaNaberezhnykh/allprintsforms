
&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем ВременныеФайлыКУдалению;

&НаКлиенте
Перем ВидыДокументовДляПодписания;

//{ Сервисные методы

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущейФормы()
	
	Возврат "ФормаПакета";
	
КонецФункции

//} Сервисные методы


//{ СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НазваниеФормы()
	
	Если Направление = Направление().Входящее Тогда
		СтрокаНаправление = "Входящий ";
	ИначеЕсли Направление = Направление().Исходящее И ПакетОтправлен Тогда
		СтрокаНаправление = "Исходящий ";
	ИначеЕсли Направление = Направление().Исходящее И НЕ ПакетОтправлен Тогда
		СтрокаНаправление = "Пакет на отправку";	
	КонецЕсли;	

	Если Пакет.Шаблон Тогда
		СтрокаПакет = "пакет-шаблон";
	ИначеЕсли ПакетОтправлен Тогда
		СтрокаПакет = "пакет";
	КонецЕсли;
	
	Результат = СтрокаНаправление + СтрокаПакет;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Направление()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Исходящее",	"Исходящее");
	Результат.Вставить("Входящее",	"Входящее");
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегорииПоНаправлению()
	
	Результат = "";
	
	Если Направление = Направление().Входящее Тогда
		Результат = "Действие во входящих";
	ИначеЕсли Направление = Направление().Исходящее И ПакетОтправлен Тогда
		Результат = "Действие в исходящих";
	ИначеЕсли Направление = Направление().Исходящее И НЕ ПакетОтправлен Тогда
		Результат = "Действия в пакете на отправку";	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Результат = "";
	
	Если РежимФормы = РежимыФормыПакета().СозданиеНовогоПакета Тогда
		Результат = "Загрузка документа";
	ИначеЕсли Направление = Направление().Входящее Тогда
		Результат = "Входящий пакет";
	ИначеЕсли Направление = Направление().Исходящее И ПакетОтправлен Тогда
		Результат = "Исходящий пакет";
	ИначеЕсли Направление = Направление().Исходящее И НЕ ПакетОтправлен Тогда
		Результат = "Пакет на отправку";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеКатегории();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазванияДействий()
	
	ОсновнаяФорма = ОсновнаяФорма();
	Результат = ОсновнаяФорма.Метрика_НазваниеДействий();
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС()
	Возврат "Проверить доверенность на сайте ФНС";
КонецФункции

&НаКлиенте
Процедура Метрика_СтатистикаДляОрганизации(Категория, Действие, ДопПеременные = Неопределено, ПредставлениеМетрики = "")
	
	Если ДанныеОрганизации <> Неопределено Тогда
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, Категория, Действие, , ДопПеременные, ПредставлениеМетрики);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_СтатистикаДляОрганизацииСИдентификаторомУчетногоДокументаПакета(Категория, Действие, ДопПеременные = Неопределено, ПредставлениеМетрики = "")
	
	Если ЗначениеЗаполнено(Пакет.ДокументУчета) Тогда
		
		Если ДопПеременные = Неопределено Тогда
			ДопПеременные = Новый Соответствие;
		КонецЕсли;
		
		ИдентификаторДокумента1С = Пакет.ДокументУчета.УникальныйИдентификатор();
		
		ДопПеременные.Вставить("doc1CId", СокрЛП(ИдентификаторДокумента1С));
		
	КонецЕсли;
	
	Метрика_СтатистикаДляОрганизации(Категория, Действие, ДопПеременные, ПредставлениеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеПроверитьДоверенностьНаСайтеФНС()
	
	КатегорияМетрики		= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики			= Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС();
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "Доверенности документа";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеПроверитьДоверенностьНаСайтеФНС(СтатусПроверкиМЧД)
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики		= Метрика_ДействиеНажатиеПроверитьДоверенностьНаСайтеФНС();
	МеткаМетрики		= "";
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Статус проверки МЧД", СтатусПроверкиМЧД);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(
			ДанныеОрганизации.ID,
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные,
			Метрика_НазваниеФормы()
		);
		
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ТипДокументаНеформализованный()
	Возврат "Nonformalized";
КонецФункции

//} СлужебныеПроцедурыИФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Ядро = Модуль_ЯдроНаСервере();
	РежимОтображенияДокументов = Параметры.РежимОтображенияДокументов;
	РежимФормы = Параметры.РежимФормы;
	СтрокаСписка = Параметры.СтрокаСписка;
	
	ВыбранныеФайлы = Новый Структура("ИменаФайлов", Параметры.ВыбранныеФайлы);
	ОтключитьПревьюНеформализованного = Ядро.ОбщиеНастройки_Прочитать("ОтключитьПревьюНеформализованного");
	МаксКоличествоДокументовMessageToPost = Ядро.Пакеты_МаксКоличествоДокументовMessageToPost();
	
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ Ядро.ПриложениеСтаршеВерсии("8.3.22") Тогда
		ПриложениеПоддерживаетПросмотрДокументовPDF = Истина;
		ДобавитьРеквизитДокументPDF();
	КонецЕсли;
	
	#КонецЕсли
	
	Ядро.СписокОшибок_Очистить();
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.Входящие Тогда
		Направление = Направление().Входящее;
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения.Исходящие
		ИЛИ РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		Направление = Направление().Исходящее;
	КонецЕсли;
	
	ЗаполнитьСписокПолуформализованныхТиповДокументов();
	
	Если РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		Пакет = Ядро.Пакеты_НовыйИсходящийПакет();
		ИдентификаторТекущегоДокумента = Неопределено;
	ИначеЕсли РежимФормы = РежимыФормыПакета().СозданиеНовогоПакета Тогда
		Пакет = Ядро.Пакеты_НовыйИсходящийПакет(Параметры.Организация, Параметры.Контрагент);
		ИдентификаторТекущегоДокумента = Неопределено;
	Иначе
		Пакет = Ядро.Пакеты_ПодготовитьПакет(СтрокаСписка, Ложь);
		ИдентификаторТекущегоДокумента = СтрокаСписка.DocumentId;
	КонецЕсли;
	
	УстановитьТекущийДокументПакета(Пакет, ИдентификаторТекущегоДокумента);
	
	ПакетОтправлен = Ядро.Пакеты_ПакетОтправлен(Пакет);
	
	Если НЕ РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		ЗаполнитьФормуПоДаннымПакета();
		
		ОбработкаОбъект().ЗаполнитьДополнительныеКнопкиИзПодключаемогоМодуля(
			ЭтаФорма,
			РежимОтображенияДокументов,
			Элементы.ДополнительныеДействия
		);
	КонецЕсли;
	
	УстановитьСвойстваФормыТакси();
	
	УстановитьСвойстваЭлемента_ДокументыПакетаПерезаполнитьИсходящий();
	
	ПроверитьНеобходимостьРазъясненияПоСтроке5аУПД970();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитДокументPDF()
	
	НовыйРеквизит = Новый РеквизитФормы("ДокументPDF",Новый ОписаниеТипов("ДокументPDF"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	НовыйЭлемент = Элементы.Добавить("ПолеPDFДокумента", Тип("ПолеФормы"), Элементы.ГруппаДокументPDF);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеPDFДокумента;
	НовыйЭлемент.ПутьКДанным = "ДокументPDF";	
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийДокументПакета(Пакет, ИдентификаторТекущегоДокумента = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторТекущегоДокумента) Тогда	
		
		Для Каждого ТекДанныеДокумента Из Пакет.Документы Цикл
			Если ТекДанныеДокумента.Идентификаторы.DocumentId = ИдентификаторТекущегоДокумента Тогда
				ТекущийДокумент = ТекДанныеДокумента;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Пакет.Документы.Количество() > 0 Тогда
		ТекущийДокумент = Пакет.Документы[0];
	Иначе 
		Ядро = Модуль_ЯдроНаСервере();
		ТипДокумента = ТипДокументаНеформализованный();
		ТекущийДокумент = Ядро.Пакеты_НовыйДокумент(Пакет, ТипДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыУчастниковДО()
	
	ЗаполнитьЭлементОтправителяУчастникаДО();
	ЗаполнитьЭлементПолучателяУчастникаДО();
	
КонецПроцедуры	 

&НаСервере
Процедура ЗаполнитьЭлементОтправителяУчастникаДО()
	
	Если Направление = Направление().Исходящее Тогда
		УчастникЭДО	 = Пакет.Отправитель;
	Иначе
		УчастникЭДО	 = Пакет.Получатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчастникЭДО.BoxID) Тогда
		Возврат;	
	КонецЕсли; 
	
	ИдентификаторыОрганизации 	= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(УчастникЭДО.ОрганизацияЭДО, УчастникЭДО.BoxID);
	ДанныеОрганизации			= Модуль_ЯдроНаСервере().Организации_ЗаполненныеРеквизиты(ИдентификаторыОрганизации);
	Организация	 				= ДанныеОрганизации.Наименование;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЭлементПолучателяУчастникаДО()
	
	Если Направление = Направление().Исходящее Тогда
		УчастникЭДО	 = Пакет.Получатель;	
	Иначе
		УчастникЭДО	 = Пакет.Отправитель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчастникЭДО.BoxID) Тогда
		Возврат;	
	КонецЕсли; 
	
	ИдентификаторыКонтрагента 	= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(УчастникЭДО.ОрганизацияЭДО, УчастникЭДО.BoxID);
	ДанныеКонтрагента			= Модуль_ЯдроНаСервере().Контрагенты_ЗаполненныеРеквизиты(ИдентификаторыКонтрагента);
	Контрагент	 				= ДанныеКонтрагента.Наименование;
	ЗаполнитьПризнакКонтрагентПоддерживаетМЧД();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакКонтрагентПоддерживаетМЧД()
	
	КонтрагентПоддерживаетМЧД = Истина;
	
	ИдентификаторЯщика = Пакет.Идентификаторы.BoxId;
	Если НЕ ЗначениеЗаполнено(ИдентификаторЯщика) Тогда
		Возврат;
	КонецЕсли;
	
	Ядро		 = Модуль_ЯдроНаСервере();
	ТребуетсяМЧД = Ядро.МЧД_ТребуетсяДоверенность(ИдентификаторЯщика);
	Если НЕ ТребуетсяМЧД Тогда
		Возврат;
	КонецЕсли;

	УчастникЭДО = Ядро.Документы_Контрагент(Пакет);
	Если ЗначениеЗаполнено(УчастникЭДО.FNSParticipantId) Тогда
		
		КонтрагентПоддерживаетМЧД = Ядро.МЧД_ОператорЭДОПоддерживаетДоверенности(
			ИдентификаторЯщика,
			УчастникЭДО.FNSParticipantId
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыПодразделенийУчастниковДО()
	
	Если Пакет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = Пакет.Отправитель;
	Получатель = Пакет.Получатель;
	
	Если НЕ ЗначениеЗаполнено(Отправитель.BoxID)
		И НЕ ЗначениеЗаполнено(Получатель.BoxID) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Направление = Направление().Исходящее Тогда
		
		ИдентификаторыПодразделениеОрганизации = Новый_ИдентификаторыСправочника(Отправитель.Подразделение, Отправитель.DepartmentId);
		ИдентификаторыПодразделениеКонтрагента = Новый_ИдентификаторыСправочника(Получатель.Подразделение, Получатель.DepartmentId);
		
	Иначе
		
		ИдентификаторыПодразделениеОрганизации = Новый_ИдентификаторыСправочника(Получатель.Подразделение, Получатель.DepartmentId);
		ИдентификаторыПодразделениеКонтрагента = Новый_ИдентификаторыСправочника(Отправитель.Подразделение, Отправитель.DepartmentId);
		
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ДанныеПодразделенияОрганизации = Ядро.Подразделения_ЗаполненныеРеквизиты(ИдентификаторыПодразделениеОрганизации, ДанныеОрганизации);
	ДанныеПодразделенияКонтрагента = Ядро.Подразделения_ЗаполненныеРеквизиты(ИдентификаторыПодразделениеКонтрагента, ДанныеКонтрагента, Ложь);
	
	ПодразделениеОрганизации = ДанныеПодразделенияОрганизации.Наименование;
	ПодразделениеКонтрагента = ДанныеПодразделенияКонтрагента.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы.ИменаФайлов) Тогда
		
		ФайлыДляДобавления = ДоступныеФайлыДляДобавленияВПакет(ВыбранныеФайлы.ИменаФайлов);
		ОбработатьФайлыДляДобавленияВПакет(ФайлыДляДобавления);
		
	КонецЕсли;
	
	Если РежимФормы = РежимыФормыПакета().ОтображениеПакета
		Или РежимФормы = РежимыФормыПакета().СозданиеНовогоПакета Тогда
		
		Отбор		= Новый Структура("Ключ", ТекущийДокумент.Ключ);
		СтрокиТЧ	= ДокументыПакета.НайтиСтроки(Отбор);
		
		Если ЗначениеЗаполнено(СтрокиТЧ) Тогда
			Элементы.ДокументыПакета.ТекущаяСтрока = СтрокиТЧ[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		РасшифроватьТекущийДокумент();
		ОбновитьОтображениеДокумента();
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
	ПоказатьФормуРазъясненияПоСтроке5аУПД970();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФункцийТарифа()
	
	Ядро = Модуль_ЯдроНаСервере();
	ЕстьОграниченияПоТарифу = Ядро.ЕстьОграниченияПоТарифу();
	ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу)
	
	ОтключитьВключитьПередатьНаСогласование(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьПередатьПоМаршруту(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьПередатьНаСогласованиеПакет(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьПередатьПоМаршрутуПакет(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьЗаблокированныйПакет(ЕстьОграниченияПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьПередатьНаСогласованиеПакет(ЕстьОграниченияПоТарифу)
	
	Элементы.ПередатьНаСогласованиеПакет.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПередатьНаСогласованиеПакетЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьПередатьНаСогласование(ЕстьОграниченияПоТарифу)
	
	Элементы.ПередатьНаСогласование.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПередатьНаСогласованиеЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьПередатьПоМаршрутуПакет(ЕстьОграниченияПоТарифу)
	
	Элементы.ПередатьПоМаршрутуПакет.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПередатьПоМаршрутуПакетЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьПередатьПоМаршруту(ЕстьОграниченияПоТарифу)
	
	Элементы.ПередатьПоМаршруту.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПередатьПоМаршрутуЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьЗаблокированныйПакет(ЕстьОграниченияПоТарифу)
	
	Элементы.ЗаблокированныйПакет.Доступность = НЕ ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	
	ЗаполнитьЗначенияСвойств(Элементы.ПредставлениеДокумента,	СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.Организация,				СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.Контрагент,				СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ПодразделениеОрганизации,	СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ПодразделениеКонтрагента,	СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьПредставлениеУчетногоДокумента, СвойствоАвтоМаксимальнаяШирина);
	
	СвойствоЦветФона = Новый Структура("ЦветФона", Новый Цвет(255, 237, 166));
	ЗаполнитьЗначенияСвойств(Элементы.ПодсказкаСозданияДокументаИзШаблона, СвойствоЦветФона);
	
	СвойствоЦветФона = Новый Структура("ЦветФона", Новый Цвет(242, 242, 242));
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаДокументовПакета, СвойствоЦветФона);
	
	СвойствоВертикальноеПоложение = Новый Структура("ВертикальноеПоложениеВГруппе", ВертикальноеПоложениеЭлемента.Центр);
	ЗаполнитьЗначенияСвойств(Элементы.ИндикаторСтатуса, СвойствоВертикальноеПоложение);
	
	СвойствоВертикальноеПоложение = Новый Структура("ВертикальноеПоложениеВГруппе", ВертикальноеПоложениеЭлемента.Низ);
	ЗаполнитьЗначенияСвойств(Элементы.СтатусДокумента, СвойствоВертикальноеПоложение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлемента_ДокументыПакетаПерезаполнитьИсходящий()
	
	НаправлениеПакета = Направление();
	
	ЭтоИсходящийПакет = (
		Направление = НаправлениеПакета.Исходящее
		И ПакетОтправлен
	);
	
	ЗаголовокЭлемента = НСтр("ru='Перезаполнить пакет'");
	ТекстПодсказки = "Перезаполнить исходящий пакет";
	
	Если ЭтоИсходящийПакет Тогда
		ЗаголовокЭлемента = НСтр("ru='Переотправить'");
		ТекстПодсказки = "Отправить документ повторно";
	КонецЕсли;
	
	Элементы.ДокументыПакетаПерезаполнитьИсходящий.Заголовок = ЗаголовокЭлемента;
	ЭтаФорма.Команды["ПерезаполнитьИсходящий"].Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если ТекущийДокумент.Тип.Формализованный
			И НЕ ЭтоФормализованныйАктСверки405(ТекущийДокумент.Тип.ТипКонтента) Тогда
			
			НачатьПроверкуРеквизитовДокументаУчета(ВыбранноеЗначение);
			
		Иначе
			
			УстановитьСвязьСУчетнымДокументом(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Для вызовов из ПМ, на пример при кастомном заполнении/создании документов по кнопке
	Если ИмяСобытия = "Диадок_ФормаПакета_Обновить" Тогда
		мИдентификаторы	= Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Параметр, "Идентификаторы");
		мLetterId		= Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(мИдентификаторы, "LetterId");
		
		Если Пакет.Идентификаторы.LetterId = мLetterId Тогда
			ОбновитьФорму(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Попытка
		
		Если ВременныеФайлыКУдалению <> Неопределено Тогда
			
			Для Каждого ВременныйФайл Из ВременныеФайлыКУдалению Цикл
				УдалитьФайлы(ВременныйФайл);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		Ядро.Ошибка_Обработать("ОшибкаУдаленияФайла", ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПроизвольнойКнопки(Команда)
	
	ИмяКнопкиВПМ = СтрЗаменить(Команда.Имя, "НажатиеДополнительнойКнопки_", "");
	
	ВыделенныеСтроки = Новый Массив;
	ВыделенныеСтроки.Добавить(СтрокаСписка);
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ИмяФормы", ИмяТекущейФормы());
	ПараметрыПМ.Вставить("ИмяКнопки", ИмяКнопкиВПМ);
	ПараметрыПМ.Вставить("Пакет", Пакет);
	ПараметрыПМ.Вставить("Документ", ТекущийДокумент);
	ПараметрыПМ.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОсновнаяФорма().НажатиеДополнительнойКнопки(ПараметрыПМ);
	
	Пакет= ПараметрыПМ.Пакет;
	ТекущийДокумент = ПараметрыПМ.Документ;
	
	ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	ОбновитьОтображениеДокумента();
	
	Если НЕ ПакетОтправлен Тогда
		
		Если ТекущийДокумент.Тип.Формализованный Тогда
			ЗаполнитьФормализованныйКонтентXMLНаСервере(ТекущийДокумент);
		КонецЕсли;
		
		ОбработанныеДокументы = Новый Массив;
		ОбработанныеДокументы.Добавить(ТекущийДокумент);
		ОбновитьДокументыПакета(ОбработанныеДокументы);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьРазъясненияПоСтроке5аУПД970()
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	ПоказатьРазъясненияПоСтроке5аУПД970 =
		НЕ ОбработкаОбъект.НастройкиПользователяПрочитать_НеПоказыватьРазъясненияПоСтроке5аУПД970();
		
	Если ПоказатьРазъясненияПоСтроке5аУПД970 Тогда
		ПоказатьРазъясненияПоСтроке5аУПД970 = ПакетСодержитУПД970();
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПоказатьФормуРазъясненияПоСтроке5аУПД970()
	
	Если НЕ ПоказатьРазъясненияПоСтроке5аУПД970 Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОднократно = Истина;
	Интервал = 0.1;
	
	ПодключитьОбработчикОжидания("ОбработчикОткрытияФормыРазъясненияПоСтроке5аУПД970", Интервал, ВыполнитьОднократно);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытияФормыРазъясненияПоСтроке5аУПД970()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "РазъясненияПоСтроке5аУПД970");
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.ОткрытьФормуДиадокМодально("ФормаHTMLСообщенияУправляемая", ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПакетСодержитУПД970()
	
	Результат = Ложь;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Контент_utd970 = Модуль_Ядро.ТипКонтента_utd970();
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		Если Документ.Тип.ТипКонтента = Контент_utd970 Тогда
			
			ЭтоУПД = Модуль_Ядро.Документы_ЭтоУниверсальныйПередаточныйДокумент(Документ.Тип);
			
			Если ЭтоУПД Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//{	ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ
          
&НаСервере
Процедура ЗаполнитьФормуПоДаннымПакета()
	
	ИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор;
	
	ПоместитьДвоичныеДанныеПакетаВоВременноеХранилищеНаСервере(ИдентификаторФормы);
	
	ЗаполнитьЭлементыУчастниковДО();
	ЗаполнитьЭлементыПодразделенийУчастниковДО();
	ЗаполнитьДокументыПакетаНаСервере();
	ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	ЗаполнитьСписокОшибокКЭПНаСервере();
	
КонецПроцедуры

// Заполнение формы по текущему документу

&НаКлиенте
Функция ДокументПакета(Ключ)
	
	Результат = Модуль_ЯдроНаКлиенте().МассивСтруктур_Найти(Пакет.Документы, Ключ, "Ключ");	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДокументыПакетаПриАктивизацииСтроки(Элемент)
	
	ОбновитьФорму = Ложь;
	ТекущиеДанныеПакета = Элементы.ДокументыПакета.ТекущиеДанные;
	
	Если ТекущиеДанныеПакета = Неопределено Тогда
		
		ОбновитьФорму = Истина;
		
		ТекущийДокумент = Неопределено;
		
	Иначе
		
		Если ТекущийДокумент = Неопределено Или ТекущийДокумент.Ключ <> ТекущиеДанныеПакета.Ключ Тогда
			
			ОбновитьФорму = Истина;
			ТекущийДокумент = ДокументПакета(ТекущиеДанныеПакета.Ключ);
			
			РасшифроватьТекущийДокумент();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьФорму Тогда
		
		Если НЕ ПакетОтправлен Тогда
			ЗаполнитьМетаданныеТекущегоДокумента();
		КонецЕсли;
		
		ЗаполнитьФормуПоТекущемуДокументуНаСервере();
		ОбновитьОтображениеДокумента();
		ЗаполнитьИсториюПоДокументу();
		УстановитьВидимостьЭлементовФормы();
		ЗаполнитьЭлементыПодразделенийУчастниковДО();
		ГруппаСодержаниеДокументаПриСменеСтраницы(Элементы.ГруппаСодержаниеДокумента, "")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоТекущемуДокументуНаСервере()
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ТекущийДокумент.Идентификаторы;
	
	СсылкаНаДокумент = Идентификаторы.ДокументЭДО;
	LetterId = Идентификаторы.LetterId;
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент)
		ИЛИ ЗначениеЗаполнено(LetterId) Тогда
		
		Документ = Модуль_ЯдроНаСервере().ХранениеДанных_ДанныеДокумента(Идентификаторы);
		Модуль_ЯдроНаСервере().Документы_ЗаполнитьХранилищеКонтента(Документ);
		
		Документ.Ключ = ТекущийДокумент.Ключ;
		Документ.Тип = ТекущийДокумент.Тип;
		Документ.Метаданные = ТекущийДокумент.Метаданные;
		
		КонтентОтвета = Неопределено;
		
		Если ТекущийДокумент.СлужебнаяИнформация.Свойство("КонтентОтвета", КонтентОтвета) Тогда
			Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", КонтентОтвета);
		КонецЕсли;
		
		ТекущийДокумент = Документ;
		
		ТекущийДокумент.Заблокирован = Пакет.Заблокирован;
		
	КонецЕсли;
	
	ТипСтруктура = ТекущийДокумент.Тип;
	РезультатАнализа = ТекущийДокумент.РезультатАнализа;
	
	Если Направление = Направление().Входящее
		И НЕ Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок Тогда
		ДокументВ1С = Модуль_ЯдроНаСервере().ХранениеДанных_СопоставленныйДокументВ1С(ТекущийДокумент.Идентификаторы);
	Иначе
		ДокументВ1С = ТекущийДокумент.ДокументУчета;
	КонецЕсли;
	
	Тип = ТипСтруктура.ТипДокумента;
	ТипКонтента = ТипСтруктура.ТипКонтента;
	ФункцияДокумента = ТипСтруктура.ФункцияДокумента;
	
	ТекстОшибки = РезультатАнализа.ТекстОшибки;
	ТекстТребуемыеДействия = РезультатАнализа.ТребуемоеДействиеВ1С
		+ ?(ЗначениеЗаполнено(РезультатАнализа.ТребуемоеДействиеВ1С) И ЗначениеЗаполнено(РезультатАнализа.ТребуемоеДействиеВДД), " / ", "")
		+ РезультатАнализа.ТребуемоеДействиеВДД;
	ТребуемыеДействия = ?(ЗначениеЗаполнено(ТекстТребуемыеДействия), "Требуется: ", "")
		+ ТекстТребуемыеДействия;
	ЗаблокированныйПакет = Пакет.Заблокирован;
	
	Если Направление = Направление().Входящее Тогда
		ПравилаСопоставленияЭДО = Модуль_ЯдроНаСервере().Документы_ПравилаСопоставления(ТекущийДокумент);
	КонецЕсли;
	
	ПодготовитьОтветныйТитул();
	
	ЗаполнитьЭлементыПодразделенийУчастниковДО();
	ЗаполнитьКонтекстноеМенюДокументовПакета();
	ОбновитьПредставленияДокументовДляФормыПакета();
	СформироватьHTMLОшибкиДокумента();
	ЗаполнитьПредставлениеУчетногоДокумента(ЭтаФорма);
	УстановитьВидимостьКартинкаОшибкиМЧД();
	УстановитьВидимостьКартинкаСтатусПКФНСКритичность();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтветныйТитул()
	
	Если Направление = Направление().Исходящее Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормализованныйАктСверки405(ТипКонтента) Тогда
		
		СформироватьОтветныйТитулФормализованногоАктаСверки();
		
	КонецЕсли;
	
	ЗаполнитьОшибкиОтветногоТитула();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтветныйТитулФормализованногоАктаСверки()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Если Ядро.Документы_МожноСформироватьОтветныйТитулФормализованногоАктаСверки(ТекущийДокумент) Тогда
		
		ЗаполнитьТаблицуОтветногоТитулаАктаСверки = Истина;
		
		Ядро.Документы_ЗаполнитьОтветныйТитулФормализованногоАктаСверки(
			ТекущийДокумент,
			ЗаполнитьТаблицуОтветногоТитулаАктаСверки
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОшибкиОтветногоТитула()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ОшибкиОтветногоТитула = Ядро.Документы_ОшибкиВалидацииОтветногоТитула(ТекущийДокумент);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ключ", Строка(ТекущийДокумент.Ключ));
	
	ТекущиеДанныеПакета = ДокументыПакета.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанныеПакета.Количество() > 0 Тогда
		
		ЗаполнитьОшибкиДокумента(
			ТекущиеДанныеПакета[0],
			ОшибкиОтветногоТитула
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтекстноеМенюДокументовПакета()
	
	ФорматДокумента	= Тип
					+ ?(Тип <> ТипКонтента И ЗначениеЗаполнено(ТипКонтента), " / " + ТипКонтента, "")
					+ ?(ЗначениеЗаполнено(ФункцияДокумента), " (" + ФункцияДокумента + ")", "");
	
	Элементы.ДокументыПакетаКонтекстноеМенюОткрытьДанныеДокумента.Заголовок = ФорматДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияДокументовДляФормыПакета()
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ключ", Документ.Ключ);
		
		СтрокиТЧ = ДокументыПакета.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиТЧ.Количество() > 0 Тогда
			
			СтрокаТЧ = СтрокиТЧ[0];
			
			СтрокаТЧ.Представление = Модуль_ЯдроНаСервере().Документы_ПредставлениеДокумента(Документ, Ложь, Ложь);
			
			ЭтоТекущийДокумент = ?(ЗначениеЗаполнено(СтрокаТЧ.DocumentId),
								СтрокаТЧ.DocumentId = ТекущийДокумент.Идентификаторы.DocumentId,
								СтрокаТЧ.Ключ = ТекущийДокумент.Ключ);
			
			Если ЭтоТекущийДокумент Тогда
				
				ПредставлениеДокумента = Модуль_ЯдроНаСервере().Документы_ПредставлениеДокумента(ТекущийДокумент, Ложь, Ложь);
				
				Элементы.СтатусДокумента.Заголовок = СокрЛП(ТекущийДокумент.Статусы.Статус + "   " + ТекущийДокумент.Статусы.ДополнительныйСтатус);
				Элементы.ИндикаторСтатуса.ЦветТекста = ЦветМаркераСтатуса(ТекущийДокумент);
				
				ОбновитьСуммыДокумента(ТекущийДокумент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыДокумента(Документ)
	
	Элементы.Сумма.Заголовок	= "";
	Элементы.Валюта.Заголовок	= "";
	Элементы.СуммаНДС.Заголовок = "";
	
	Сумма		= Документ.Реквизиты.Сумма;
	СуммаНДС	= Документ.Реквизиты.СуммаНДС;
	
	Если ЗначениеЗаполнено(Сумма) 
		ИЛИ ЗначениеЗаполнено(СуммаНДС) Тогда
		
		ПредставлениеСумма = Формат(Сумма, "ЧДЦ=2; ЧРГ=; ЧН=0");
		Валюта = Модуль_ЯдроНаСервере().Документы_ПредставлениеДокумента_Валюта(Документ);
		
		Элементы.Сумма.Заголовок	= ПредставлениеСумма;
		Элементы.Валюта.Заголовок	= Валюта;
		
		Если ЗначениеЗаполнено(СуммаНДС) Тогда
			
			ПредставлениеСуммаНДС = Формат(СуммаНДС, "ЧДЦ=2; ЧРГ=");
			Элементы.СуммаНДС.Заголовок = "НДС " + ПредставлениеСуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЦветМаркераСтатуса(Документ)
	
	Результат = Новый Цвет();
	
	Если ЗначениеЗаполнено(Документ.Статусы.Статус)
		ИЛИ ЗначениеЗаполнено(Документ.Статусы.ДополнительныйСтатус) Тогда
		
		Если Модуль_ЯдроНаСервере().Документы_СтатусОшибочногоДействия(Документ) Тогда
			Результат = Новый Цвет(246, 103, 103);
		ИначеЕсли Модуль_ЯдроНаСервере().Документы_СтатусТребуетДействия(Документ) Тогда
			Результат = Новый Цвет(255, 185, 18);
		ИначеЕсли Модуль_ЯдроНаСервере().Документы_СтатусОжидаетДействия(Документ) Тогда
			Результат = Новый Цвет(209, 209, 209);
		Иначе
			Результат = Новый Цвет(47, 212, 187);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьHTMLОшибкиДокумента()
	
	ОшибкиHTML = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ключ", Строка(ТекущийДокумент.Ключ));
	
	ТекущиеДанныеПакета = ДокументыПакета.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанныеПакета.Количество() > 0 Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаСервере();
		
		МассивОшибок = ТекущиеДанныеПакета[0].ОшибкиДокумента.ВыгрузитьЗначения();
		
		Если ЗначениеЗаполнено(МассивОшибок) Тогда
			ОшибкиHTML = Модуль_Ядро.Документы_ОшибкиВалидации_HTML(МассивОшибок);
		КонецЕсли;
		
		Модуль_Ядро.Конвертация970_ДополнитьТекстHTMLОшибкамиКонвертации(
			ОшибкиHTML,
			ТекущийДокумент);
		
	КонецЕсли;
	
	УстановитьВидимостьОшибокДокумента(ОшибкиHTML);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОшибокДокумента(ОшибкиHTML)
	
	ОшибкиДокументаHTML = ОшибкиHTML;
	
	Элементы.ГруппаОшибки.Видимость = (ОшибкиHTML <> Неопределено);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьОтображениеДокумента()
	
	Элементы.ГруппаТабличныйДокумент.Видимость	= Ложь;
	Элементы.ГруппаHTML.Видимость				= Ложь;
	Элементы.ГруппаДокументPDF.Видимость		= Ложь;
	Элементы.ГруппаБезПечатнойФормы.Видимость	= Ложь;
	
	Если ТекущийДокумент = Неопределено
		Или НеизвестныйТипТекущегоДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоPDF = ТекущийДокументВФорматеPDF();
	
	ТабДок = ПечатнаяФормаТекущегоДокумента();
	
	Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
		
		ОтобразитьДокументВПолеТабличногоДокумента(ТабДок);
		
	ИначеЕсли ЭтоPDF И ПриложениеПоддерживаетПросмотрДокументовPDF Тогда
		
		ОтобразитьДокументВПолеPDFДокумента();
		
	ИначеЕсли ЭтоPDF И НЕ ОтключитьПревьюНеформализованного Тогда
		
		ОтобразитьДокументВПолеHTMLДокумента();
		
	Иначе 
		
		Элементы.ГруппаБезПечатнойФормы.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция НеизвестныйТипТекущегоДокумента()
	
	Возврат (ТекущийДокумент.Тип.ТипДокумента = "");
	
КонецФункции

&НаКлиенте
Функция ТекущийДокументВФорматеPDF()
	
	Если ТекущийДокумент.Метаданные.Свойство("FileName") Тогда
		ИмяФайла = ТекущийДокумент.Метаданные.FileName;
	Иначе
		ИмяФайла = ТекущийДокумент.ИмяФайла;
	КонецЕсли;
	
	Возврат (Прав(ИмяФайла, 4) = ".pdf");
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьДокументВПолеHTMLДокумента()
	
	Элементы.ГруппаHTML.Видимость = Истина;
	СформироватьHTMLПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДокументВПолеPDFДокумента()
	
	Перем ХранилищеКонтента;
	
	Элементы.ГруппаДокументPDF.Видимость = Истина;

	#Если НЕ ВебКлиент Тогда
		
		ТекущийДокумент.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
		
		Если ХранилищеКонтента <> Неопределено Тогда
			
			Если ЭтоАдресВременногоХранилища(ХранилищеКонтента.Данные) Тогда
				ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(ХранилищеКонтента.Данные);
			Иначе
				ДвоичныеДанныеДокумента = ХранилищеКонтента.Данные;
			КонецЕсли;
			
			Поток = Вычислить("ДвоичныеДанныеДокумента.ОткрытьПотокДляЧтения()");
			
			Выполнить("ДокументPDF.Прочитать(Поток)");
			
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДокументВПолеТабличногоДокумента(ТабДок)
	
	Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
	ПечатнаяФормаДокумента = ТабДок;
	
КонецПроцедуры

&НаСервере
Функция ПечатнаяФормаТекущегоДокумента()
	
	Результат = Неопределено;
	
	Попытка
		Результат = Модуль_ЯдроНаСервере().Документы_ПечатнаяФорма(ТекущийДокумент);
	Исключение
		Сообщить("Не удалось визуализировать печатную форму документа по причине:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьHTMLПредставление()

	#Если ВебКлиент Тогда
		
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, "Не подключено расширение для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
		Возврат;
	КонецЕсли;
	
	#КонецЕсли
	
	ИмяВременногоФайла = СохранитьФайлПакетаНаДиск();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ПоказатьЗаглушкуАктаСверки = Направление = Направление().Входящее
								И Ядро.ЭтоАктСверкиИзСервисаВзаиморасчеты(ТекущийДокумент);
	
	HTMLПредставлениеФайла = HTMLПредставлениеФайлаНаСервере(
		ИмяВременногоФайла,
		ОтключитьПревьюНеформализованного,
		ПоказатьЗаглушкуАктаСверки
	);
	
	ДобавитьВременныйФайлКУдалению(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Функция HTMLПредставлениеФайлаНаСервере(ИмяВременногоФайла, ОтключитьПревьюНеформализованного, ПоказатьЗаглушкуАктаСверки)
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Результат = ОбработкаОбъект.HTMLПредставлениеФайла(
		ИмяВременногоФайла,
		ОтключитьПревьюНеформализованного,
		ПоказатьЗаглушкуАктаСверки
	);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СохранитьФайлПакетаНаДиск() 
	
	Перем ХранилищеКонтента;
	
	Результат = Неопределено;
	
	ТекущийДокумент.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
	
	Если ХранилищеКонтента <> Неопределено Тогда
		
		ДвоичныеДанные 	= ХранилищеКонтента.Данные;
		ИмяФайла 		= ХранилищеКонтента.ИмяФайла;
		
		Если ДвоичныеДанные <> Неопределено Тогда
			Результат = ОсновнаяФорма().СохранитьДвоичныеДанныеВоВременныйФайл(ДвоичныеДанные, ИмяФайла);
		КонецЕсли;

	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсториюПоДокументу()
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияДокументаHTML = "";
	
	Если ЗначениеЗаполнено(ТекущийДокумент.Идентификаторы.DocumentId) Тогда
		ЗаполнитьИсториюПоДокументуВызовСервера();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПоДокументуВызовСервера()
	
	Ядро = Модуль_ЯдроНаСервере();
	ОбработкаОбъект = ОбработкаОбъект();
	
	ИсторияДО = Ядро.Документы_ИсторияДО(ТекущийДокумент.Идентификаторы);
	
	ИсторияДокументаHTML = ОбработкаОбъект.HTMLИсторияДокументооборота(ИсторияДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоверенностиПоДокументу()
	
	ДоверенностиДокументаHTML = "";
	
	Если ЗначениеЗаполнено(ТекущийДокумент.Идентификаторы.DocumentId) Тогда
		ЗаполнитьДоверенностиПоДокументуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоверенностиПоДокументуНаСервере()
	
	Если ПустаяСтрока(АдресВХранилищеСобытияМЧД) Тогда
		АдресВХранилищеСобытияМЧД = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ДоверенностиДокументаHTML = ОбработкаОбъект().Документы_СформироватьHTMLСтраницуСобытийМЧД(ТекущийДокумент.Идентификаторы, АдресВХранилищеСобытияМЧД);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы() Экспорт
	
	Если РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		
		УстановитьВидимостьЭлементовФормы_ДобавлениеДокументовСДиска();
		УстановитьВидимостьКнопокКоманднойПанелиДокументовПакета();
		
	Иначе
		
		УстановитьВидимостьЭлементовФормы_ОтображениеПакета();
		
		УстановитьВидимостьКнопокКоманднойПанелиДокумента();
		УстановитьВидимостьКнопокКоманднойПанелиДокументовПакета();
		УстановитьВидимостьПодсказкиСозданияДокументаИзШаблона();
		УстановитьВидимостьЭлементовОтраженияДокументаВУчете(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьДоступностьФункцийТарифа();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы_ДобавлениеДокументовСДиска()
	
	Элементы.ГруппаШапкаПакета.Видимость = Ложь;
	Элементы.ГруппаОписаниеИПодсказка.Видимость = Ложь;
	Элементы.ГруппаСтатусы.Видимость = Ложь;
	Элементы.ГруппаУчетныйДокумент.Видимость = Ложь;
	Элементы.ГруппаКомандыДокумента.Видимость = Ложь;
	Элементы.ДекорацияКоличествоДокументовВПакете.Видимость = Ложь;
	Элементы.ГруппаИсторияПоДокументу.Видимость = Ложь;
	Элементы.ГруппаДоверенностиПоДокументу.Видимость = Ложь;
	Элементы.ГруппаСуммы.Видимость = Ложь;
	
	Элементы.ДокументыПакетаПерезаполнитьИсходящий.Видимость = Ложь;
	
	ЕстьДокументыПакета = ДокументыПакета.Количество() > 0;
	
	Элементы.ГруппаМетаданныеДокумента.Видимость = ЕстьДокументыПакета;
	Элементы.ГруппаНетДокументовПакета.Видимость = НЕ ЕстьДокументыПакета;
	Элементы.ГруппаНетДокументовПакета.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	УстановитьВидимостьДобавленияДокументовВПакеты();
	УстановитьВидимостьМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы_ОтображениеПакета()
	
	ЭтоВходящийПакет	= (Направление = "Входящее");
	ЭтоИсходящийПакет	= (Направление = "Исходящее");
	
	РежимыОтображения = РежимыОтображения();
	
	Если ЭтоВходящийПакет Тогда
		
		Элементы.ПодразделениеКонтрагента.Доступность = Ложь;
		
		Элементы.ДокументыПакета.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
	ИначеЕсли ЭтоИсходящийПакет И РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		
		УстановитьДоступностьПодписанияИсходящего(); 
		
		Элементы.ГруппаДоверенностиПоДокументу.Видимость = Ложь;
		
	ИначеЕсли ЭтоИсходящийПакет И РежимОтображенияДокументов = РежимыОтображения.Исходящие Тогда
		
		УстановитьДоступностьПодписанияИсходящего();
		
	КонецЕсли;
	
	Если ЭтоИсходящийПакет Тогда
		Элементы.АннулироватьШаблон.Заголовок = "Отозвать";
	Иначе
		Элементы.АннулироватьШаблон.Заголовок = "Отклонить";
	КонецЕсли;
	
	Элементы.ГруппаИсторияПоДокументу.Видимость		= ПакетОтправлен;
	Элементы.ПередатьВПодразделение.Видимость		= ПакетОтправлен;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Элементы.ТребуемыеДействия.Гиперссылка = Истина;
		Элементы.ТребуемыеДействия.ЦветТекста  = WebЦвета.Красный;
	Иначе
		Элементы.ТребуемыеДействия.Гиперссылка = Ложь;
		Элементы.ТребуемыеДействия.ЦветТекста  = WebЦвета.ТемноСиний;
	КонецЕсли;
	
	Если Пакет.Шаблон Тогда
		Элементы.СохранитьДокументооборот.Видимость = Ложь;
		Элементы.ГруппаИсторияПоДокументу.Заголовок = "История по шаблону";
	КонецЕсли;
	
	Элементы.ПодразделениеОрганизации.КнопкаВыбора	= НЕ ПакетОтправлен;
	Элементы.ПодразделениеОрганизации.КнопкаОчистки	= НЕ ПакетОтправлен;
	Элементы.ПодразделениеКонтрагента.КнопкаВыбора	= НЕ ПакетОтправлен;
	Элементы.ПодразделениеКонтрагента.КнопкаОчистки	= НЕ ПакетОтправлен;
	
	Элементы.Организация.ТолькоПросмотр              = ПакетОтправлен;
	Элементы.Контрагент.ТолькоПросмотр               = ПакетОтправлен Или Не ЗначениеЗаполнено(Организация);
	Элементы.ПодразделениеОрганизации.ТолькоПросмотр = ПакетОтправлен Или Не ЗначениеЗаполнено(Организация);
	Элементы.ПодразделениеКонтрагента.ТолькоПросмотр = ПакетОтправлен Или Не ЗначениеЗаполнено(Контрагент);
	
	
	МожноОтправитьЧерезПромежуточногоПолучателя = МожноОтправитьЧерезПромежуточногоПолучателя();
	
	Элементы.ИспользоватьПромежуточногоПолучателя.Видимость	= МожноОтправитьЧерезПромежуточногоПолучателя;
	
	УстановитьВидимостьПромежуточногоПолучателя();
	
	МожноОтправитьЗакрытыйПакет = МожноОтправитьЗакрытыйПакет();
	
	ЗашифрованныйПакет = Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ЗашифрованныйПакет", Ложь);
	
	Если НЕ ПакетОтправлен И ЗашифрованныйПакет Тогда
		ЗаблокированныйПакет = Ложь; // Отправка закрытых зашифрованных пакетов не поддерживается.
	КонецЕсли;
	
	Элементы.ЗаблокированныйПакет.Видимость		= МожноОтправитьЗакрытыйПакет И НЕ ЗашифрованныйПакет;
	Элементы.ГруппаЗакрытыйПакет.Видимость		= ЗаблокированныйПакет И НЕ МожноОтправитьЗакрытыйПакет;
	Элементы.ГруппаЗашифрованныйПакет.Видимость	= ЗашифрованныйПакет;
	
	РежимОтображенияСМетаданными = (РежимОтображенияДокументов = РежимыОтображения.ДляОтправки 
	ИЛИ (РежимОтображенияДокументов = РежимыОтображения.Исходящие И НЕ ПакетОтправлен));
	
	ОтображатьМетаданныеДокумента = РежимОтображенияСМетаданными
	И Элементы.ТипДокумента.СписокВыбора.НайтиПоЗначению(Тип) <> Неопределено
	И ДокументВ1С = Неопределено;
	
	ЕстьДокументыПакета = ДокументыПакета.Количество() > 0;
	
	Элементы.ГруппаСуммы.Видимость					= ЕстьДокументыПакета И НЕ ОтображатьМетаданныеДокумента И ВидимостьСуммы();
	Элементы.ГруппаУчетныйДокумент.Видимость		= ЕстьДокументыПакета И НЕ ОтображатьМетаданныеДокумента;
	Элементы.ГруппаКомандыДокумента.Видимость		= ЕстьДокументыПакета И НЕ ОтображатьМетаданныеДокумента;
	Элементы.ГруппаМетаданныеДокумента.Видимость	= ЕстьДокументыПакета И ОтображатьМетаданныеДокумента;
	
	Если ОтображатьМетаданныеДокумента Тогда 
		УстановитьВидимостьМетаданных();
	КонецЕсли;
	
	Элементы.ПредставлениеДокумента.Видимость		= ЕстьДокументыПакета;
	Элементы.ГруппаНетДокументовПакета.Видимость	= НЕ ЕстьДокументыПакета;
	
	Если НЕ Модуль_ЯдроНаКлиенте().ПриложениеСтаршеВерсии("8.3.7") Тогда
		
		Если ЕстьДокументыПакета Тогда
			Элементы.ГруппаОписаниеДокумента.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
		Иначе	
			Элементы.ГруппаОписаниеДокумента.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПакетОтправлен Тогда
		
		СтатусыЗаполнены = ЗначениеЗаполнено(ТекущийДокумент.Статусы.Статус) 
		ИЛИ ЗначениеЗаполнено(ТекущийДокумент.Статусы.ДополнительныйСтатус);
		
		Элементы.ГруппаСтатусыЗаполнены.Видимость = СтатусыЗаполнены;
		Элементы.ГруппаСтатусыНеЗаполнены.Видимость = НЕ СтатусыЗаполнены;
		
	Иначе
		Элементы.ГруппаСтатусы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКартинкаОшибкиМЧД()
	
	Если КартинкаОшибкиМЧД = Неопределено Тогда
		КартинкаОшибкиМЧД = Элементы.ГруппаДоверенностиПоДокументу.Картинка;
	КонецЕсли;
	
	УровниКритичности		 = Модуль_ЯдроНаСервере().Контракт_УровниКритичностиСтатусаДокумента();
	ЕстьОшибкаПроверкиМЧД	 = ТекущийДокумент.Статусы.СтатусМЧДКритичность = УровниКритичности.Error;
	
	Если ЕстьОшибкаПроверкиМЧД Тогда
		Элементы.ГруппаДоверенностиПоДокументу.Картинка = КартинкаОшибкиМЧД;
	Иначе
		Элементы.ГруппаДоверенностиПоДокументу.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКартинкаСтатусПКФНСКритичность()
	
	Если КартинкаОшибка = Неопределено Тогда
		КартинкаОшибка = Элементы.ГруппаИсторияПоДокументу.Картинка;
	КонецЕсли;
	
	УровниКритичности = Модуль_ЯдроНаСервере().Контракт_УровниКритичностиСтатусаДокумента();
	СтатусПКФНСКритичность = (ТекущийДокумент.Статусы.СтатусПКФНСКритичность = УровниКритичности.Error 
						ИЛИ ТекущийДокумент.Статусы.СтатусПКФНСКритичность = УровниКритичности.Warning);
	
	Если СтатусПКФНСКритичность Тогда
		Элементы.ГруппаИсторияПоДокументу.Картинка = КартинкаОшибка;
	Иначе
		Элементы.ГруппаИсторияПоДокументу.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПромежуточногоПолучателя()
	
	ОтобразитьПромежуточногоПолучателя = ИспользоватьПромежуточногоПолучателя ИЛИ ЗначениеЗаполнено(ДополнительныйПолучатель);
	
	Элементы.ПромежуточныйПолучатель.Видимость					= ОтобразитьПромежуточногоПолучателя;
	Элементы.ПодразделениеПромежуточногоПолучателя.Видимость	= ОтобразитьПромежуточногоПолучателя;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьМетаданных()
	
	Элементы.ГруппаНеформализованный.Видимость 		= ВидимостьГруппаНеформализованный();
	Элементы.ГруппаАктСверки.Видимость				= ВидимостьГруппаАктСверки();
	Элементы.ГруппаТорговыйДокумент.Видимость		= ВидимостьГруппаТорговыйДокумент();
	Элементы.ГруппаДоговор.Видимость				= ВидимостьГруппаДоговор();
	Элементы.ГруппаСоглашениеКДоговору.Видимость	= ВидимостьГруппаСоглашениеКДоговору();
	
	Элементы.ЗапроситьПодписьКонтрагента.Видимость	= ВидимостьЗапроситьПодписьКонтрагента();
	
	Элементы.Договор_ЦенаДоговора.Доступность		= НЕ МетаданныеЦенаДоговораНеУказана;
	Элементы.ТорговыйДокумент_СуммаНДС.Доступность	= НЕ МетаданныеБезНДС;
		
КонецПроцедуры

&НаКлиенте
Функция ВидимостьГруппаНеформализованный()
	
	Результат = Тип = "Nonformalized";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьГруппаАктСверки()
	
	Результат = Тип = "ReconciliationAct"
			ИЛИ Тип = "PriceListAgreement" 
			ИЛИ Тип = "CertificateRegistry" 
			ИЛИ Тип = "ServiceDetails";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьГруппаТорговыйДокумент()
	
	Результат = Тип = "AcceptanceCertificate" 
			ИЛИ Тип = "ProformaInvoice" 
			ИЛИ Тип = "Torg12";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьГруппаДоговор()
	
	Результат = Тип = "Contract";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьГруппаСоглашениеКДоговору()
	
	Результат = Тип = "SupplementaryAgreement";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьЗапроситьПодписьКонтрагента()
	
	Результат = Тип = "Nonformalized" 
			ИЛИ Тип = "AcceptanceCertificate"
			ИЛИ Тип = "PriceListAgreement" 
			ИЛИ Тип = "CertificateRegistry";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВидимостьСуммы()
	
	Результат = ЗначениеЗаполнено(Элементы.Сумма.Заголовок)
				ИЛИ ЗначениеЗаполнено(Элементы.Валюта.Заголовок)
				ИЛИ ЗначениеЗаполнено(Элементы.СуммаНДС.Заголовок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		НовыйЗаголовокФормы = ЗаголовокФормы_ДобавлениеДокументовСДиска();
		НовоеКоличествоДокументовВПакете = "";
	Иначе
		НовыйЗаголовокФормы = ЗаголовокФормы_ОтображениеПакета();
		НовоеКоличествоДокументовВПакете = КоличествоДокументовВПакете_ОтображениеПакета();
	КонецЕсли;
	
	ЭтаФорма.Заголовок = НовыйЗаголовокФормы;
	Элементы.ДекорацияКоличествоДокументовВПакете.Заголовок = НовоеКоличествоДокументовВПакете;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокФормы_ДобавлениеДокументовСДиска()
	
	КолДок = ДокументыПакета.Количество();
	
	Результат = "Количество документов: " + КолДок;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокФормы_ОтображениеПакета()
	
	Название = НазваниеФормы();
	КолДок	 = ДокументыПакета.Количество();
	
	Если КолДок = 1 Тогда
		СтрДокумента = " документа";
	Иначе
		СтрДокумента = " документов";
	КонецЕсли;
	
	Результат = Название + " из " + КолДок + СтрДокумента;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КоличествоДокументовВПакете_ОтображениеПакета()
	
	КолДок = ДокументыПакета.Количество();
	
	Если КолДок = 1 Тогда
		СтрБудутОтправлены = "Будет отправлен ";
	Иначе
		СтрБудутОтправлены = "Будут отправлены ";
	КонецЕсли;
	
	Если КолДок = 1 Тогда
		СтрДокумента = " документ";	
	ИначеЕсли КолДок = 0 ИЛИ КолДок >= 5 Тогда
		СтрДокумента = " документов";
	Иначе
		СтрДокумента = " документа";
	КонецЕсли;
	
	Результат = ?(ПакетОтправлен, "", СтрБудутОтправлены) + КолДок + СтрДокумента + " в пакете:";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанелиДокумента()
	
	Если ТекущийДокумент = Неопределено Тогда
		
		Элементы.ГруппаКомандыПакета.Видимость = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ГруппаКомандыПакета.Видимость = Истина;
	
	ЭтоВходящийПакет				= (Направление = "Входящее");
	ИспользуетсяПодсистемаДиадок	= Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ДоступныеДействия = Ядро.Документы_ДоступныеДействия(ТекущийДокумент);
	
	Элементы.КнопкаПодписатьВходящий.Видимость            = ДоступныеДействия.ПодписатьВходящий;
	Элементы.КнопкаОтказатьВЗапросеПодписи.Видимость      = ДоступныеДействия.ОтказВЗапросеПодписи;
	Элементы.КнопкаНастроитьПараметрыПодписания.Видимость = ДоступныеДействия.НастроитьПараметрыПодписания;
	Элементы.КнопкаЗаполнитьДопСведения.Видимость		  = ДоступныеДействия.ЗаполнитьДопСведения;
	Элементы.КнопкаОтказатьВПодписи.Видимость             = ДоступныеДействия.ОтказатьВПодписи;
	Элементы.КнопкаОтправитьИсходящий.Видимость           = ДоступныеДействия.Отправить;
	Элементы.КнопкаОтправитьШаблон.Видимость              = ДоступныеДействия.ОтправитьШаблон;
	Элементы.КнопкаПодписатьИОтправитьИсходящий.Видимость = ДоступныеДействия.ПодписатьИОтправить;
	Элементы.КнопкаЗапроситьУточнение.Видимость           = ДоступныеДействия.ЗапроситьУточнение;
	Элементы.Аннулировать.Видимость                       = ДоступныеДействия.Аннулировать;
	Элементы.ОтказатьВАннулировании.Видимость             = ДоступныеДействия.ОтказатьВАннулировании;
	Элементы.АннулироватьШаблон.Видимость                 = ДоступныеДействия.АннулироватьШаблон;
	Элементы.КнопкаПодписатьИсходящий.Видимость			  = ДоступныеДействия.ПодписатьИсходящий И ИспользуетсяПодсистемаДиадок;
	
	Если ПакетОтправлен Тогда
		
		Элементы.ГруппаСогласованиеПакета.Видимость		= Ложь;
		
		Элементы.ПередатьНаСогласование.Видимость			= ДоступныеДействия.ПередатьНаСогласование;
		Элементы.ПередатьНаПодпись.Видимость				= ДоступныеДействия.ПередатьНаПодпись;
		Элементы.ПередатьПоМаршруту.Видимость				= ДоступныеДействия.ПередатьПоМаршруту;
		Элементы.Согласовать.Видимость						= ДоступныеДействия.Согласование;
		Элементы.ОтказатьВСогласовании.Видимость			= ДоступныеДействия.ОтказВСогласовании;
		Элементы.ГруппаСогласованиеПередать.Видимость		= ДоступныеДействия.ПередатьНаСогласование
															Или ДоступныеДействия.ПередатьНаПодпись
															Или ДоступныеДействия.ПередатьПоМаршруту;
		Элементы.ГруппаСогласованиеВердикт.Видимость		= ДоступныеДействия.Согласование
															Или ДоступныеДействия.ОтказВСогласовании;
		Элементы.ГруппаСогласование.Видимость				= Элементы.ГруппаСогласованиеПередать.Видимость
															Или Элементы.ГруппаСогласованиеВердикт.Видимость;
	Иначе
		
		Элементы.ГруппаСогласование.Видимость				= Ложь;
		
		Элементы.ПередатьНаСогласованиеПакет.Видимость		= ДоступныеДействия.ПередатьНаСогласование;
		Элементы.ПередатьНаПодписьПакет.Видимость			= ДоступныеДействия.ПередатьНаПодпись;
		Элементы.ПередатьПоМаршрутуПакет.Видимость			= ДоступныеДействия.ПередатьПоМаршруту;
		Элементы.СогласоватьПакет.Видимость					= ДоступныеДействия.Согласование;
		Элементы.ОтказатьВСогласованииПакет.Видимость		= ДоступныеДействия.ОтказВСогласовании;
		Элементы.ГруппаСогласованиеПередатьПакет.Видимость	= ДоступныеДействия.ПередатьНаСогласование
															Или ДоступныеДействия.ПередатьНаПодпись
															Или ДоступныеДействия.ПередатьПоМаршруту;
		Элементы.ГруппаСогласованиеВердиктПакета.Видимость	= ДоступныеДействия.Согласование
															Или ДоступныеДействия.ОтказВСогласовании;
		Элементы.ГруппаСогласованиеПакета.Видимость			= Элементы.ГруппаСогласованиеПередатьПакет.Видимость
															Или Элементы.ГруппаСогласованиеВердиктПакета.Видимость;
	КонецЕсли;
	
	ХранилищеКонтента = Неопределено;
	
	ТекущийДокумент.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
	
	ПоказатьСохранениеНаДиск = Ложь;
	
	Если ЗначениеЗаполнено(ХранилищеКонтента) Тогда
		ПоказатьСохранениеНаДиск = (ТипЗнч(ХранилищеКонтента.Данные) = Тип("ДвоичныеДанные"))
									Или ЭтоАдресВременногоХранилища(ХранилищеКонтента.Данные);
	КонецЕсли;
	
	Элементы.КнопкаПолучитьПечатнуюФорму.Видимость = ПакетОтправлен;
	Элементы.КнопкаПерейтиВДиадок.Видимость        = ПакетОтправлен;
	Элементы.СохранитьДокументНаДиск.Видимость     = ПоказатьСохранениеНаДиск;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанелиДокументовПакета()
	
	Элементы.ДокументыПакетаПерезаполнитьИсходящий.Видимость = Ложь;
	Элементы.ДокументыПакетаДобавитьПроизвольныйФайлИсходящий.Видимость = Ложь;
	Элементы.ДокументыПакетаУдалитьФайлИсходящий.Видимость = Ложь;
	Элементы.ГиперссылкаКакПереотправитьДокументУМ.Видимость = Ложь;
	
	Если Направление = Направление().Исходящее Тогда
		
		Если ЗначениеЗаполнено(Пакет.ИдентификаторВида) Тогда
			Элементы.ДокументыПакетаПерезаполнитьИсходящий.Видимость = Истина;
			Элементы.ГиперссылкаКакПереотправитьДокументУМ.Видимость = ПакетОтправлен;
		КонецЕсли;
		
		Если НЕ ПакетОтправлен И НЕ Пакет.Шаблон Тогда
			
			Элементы.ДокументыПакетаДобавитьПроизвольныйФайлИсходящий.Видимость = Истина;
			
			Если ДокументыПакета.Количество() > 0 Тогда
				Элементы.ДокументыПакетаУдалитьФайлИсходящий.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовОтраженияДокументаВУчете(Форма)
	
	ЭтоВходящийПакет = (Форма.Направление = Направление().Входящее);
	ЭтоШаблон = Форма.Пакет.Шаблон;
	
	ЭлементыФормы = Форма.Элементы;
	
	ДокументСопоставлен = ЗначениеЗаполнено(Форма.ДокументВ1С);
	ЭтотПакетОтправлен = Форма.ПакетОтправлен;
	
	ДокументОтправленЧерезМодульСтандарт = Не ЗначениеЗаполнено(Форма.Пакет.ИдентификаторВида);
	МожноРазорватьСвязьСДокументовУчета = ДокументСопоставлен И ЭтотПакетОтправлен И ДокументОтправленЧерезМодульСтандарт;
	
	ЭлементыФормы.ОтвязатьДокумент.Видимость = МожноРазорватьСвязьСДокументовУчета;
	
	ВидимостьПодсказкиПереотправкаДокументаСтандарта = (Форма.Направление = Направление().Исходящее)
														И МожноРазорватьСвязьСДокументовУчета;
	
	ЭлементыФормы.ГиперссылкаКакПереотправитьДокументСтандарта.Видимость = ВидимостьПодсказкиПереотправкаДокументаСтандарта;
	
	ДоступноОтражениеВУчете = ЭтоВходящийПакет И Не ЭтоШаблон;
	Если Не ДоступноОтражениеВУчете Тогда
		ЭлементыФормы.ГруппаКомандыОтразитьВУчете.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.НадписьПредставлениеУчетногоДокумента.Видимость = ДокументСопоставлен;
	ЭлементыФормы.ОтвязатьДокумент.Видимость = ДокументСопоставлен;
	
	ЭлементыФормы.СоздатьДокумент.Видимость = Не ДокументСопоставлен;
	ЭлементыФормы.ПодменюСопоставить.Видимость = Не ДокументСопоставлен;
	
	Если ЭтоФормализованныйАктСверки405(Форма.ТекущийДокумент.Тип.ТипКонтента)
		И Форма.Направление = Направление().Входящее
		И МожноРазорватьСвязьСДокументовУчета Тогда
		
		ЭлементыФормы.ОбновитьРезультатСверки.Видимость = Истина;
		
	Иначе
		ЭлементыФормы.ОбновитьРезультатСверки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПодписанияИсходящего()
	
	ОтправкаБольшогоПакета = ЭтоБольшойПакет();
	
	ИменаКнопокДляНастройки = Новый Массив;
	ИменаКнопокДляНастройки.Добавить("КнопкаПодписатьИсходящий");
	ИменаКнопокДляНастройки.Добавить("КнопкаОтправитьИсходящий");
	
	Для Каждого ИмяКнопка Из ИменаКнопокДляНастройки Цикл
		
		Кнопка = Элементы[ИмяКнопка]; 
		Кнопка.Доступность = НЕ ОтправкаБольшогоПакета;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДобавленияДокументовВПакеты()
	
	Если РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		КнопкаВидна = ДокументыПакета.Количество() > 0;
	Иначе
		КнопкаВидна = Ложь;
	КонецЕсли;
	
	Элементы.ДобавитьДокументыСДискаВВыбранныеПакеты.Видимость = КнопкаВидна;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПодсказкиСозданияДокументаИзШаблона()
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыДокументовЭДО = Модуль_ЯдроНаКлиенте().Перечисление_СтатусыДокументов();
	СтатусДокумента		 = ТекущийДокумент.Статусы.Статус;
	
	Если СтатусДокумента = СтатусыДокументовЭДО.ТребуетсяСоздатьДокумент Тогда
		ВидимостьПодсказки = Истина;
	Иначе
		ВидимостьПодсказки = Ложь;
	КонецЕсли;
	
	Элементы.ПодсказкаСозданияДокументаИзШаблона.Видимость = ВидимостьПодсказки;
	
КонецПроцедуры

&НаКлиенте
Функция МожноОтправитьЗакрытыйПакет()
	
	Результат = Истина;
	
	Если ПакетОтправлен Или Пакет.Шаблон Тогда
		Результат = Ложь;
	Иначе
		
		СтрокаКонтекста = Модуль_ЯдроНаКлиенте().КонтекстСеанса_СтрокаКонтекста(Пакет.Идентификаторы.BoxId, Ложь);
		
		Если СтрокаКонтекста = Неопределено Тогда
			Результат = Ложь;
		Иначе
			Результат = СтрокаКонтекста.ДополнительныеФункции.РазрешенаОтправкаЗаблокированныхПакетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МожноОтправитьЧерезПромежуточногоПолучателя()
	
	Результат = Истина;
	
	Если ПакетОтправлен Или Пакет.Шаблон Тогда
		Результат = Ложь;
	Иначе
		
		СтрокаКонтекста = Модуль_ЯдроНаКлиенте().КонтекстСеанса_СтрокаКонтекста(Пакет.Идентификаторы.BoxId, Ложь);
		
		Если СтрокаКонтекста = Неопределено Тогда
			Результат = Ложь;
		Иначе
			Результат = СтрокаКонтекста.ДополнительныеФункции.РазрешенаОтправкаЧерезПромежуточногоПолучателя;
		КонецЕсли;
		
	КонецЕсли;
	
	//временно пока не будет включена фича полностью
	Результат = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьФорму(ДанныеДляОбработки = Неопределено) Экспорт
	
	Если ДанныеДляОбработки <> Неопределено Тогда
		
		Если ТипЗнч(ДанныеДляОбработки) = Тип("Массив") Тогда
			
			Для Каждого ОбработанныйПакет Из ДанныеДляОбработки Цикл
				
				ОбновитьДокументыПакета(ОбработанныйПакет.Документы);
				
			КонецЦикла;
			
		Иначе
			
			ОбновитьДокументыПакета(ДанныеДляОбработки.Документы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	ОбновитьОтображениеДокумента();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

// Обработчики реквизитов формы

&НаКлиенте
Процедура ИспользоватьПромежуточногоПолучателяПриИзменении(Элемент)
	
	УстановитьВидимостьПромежуточногоПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Организация";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбораИзСписка", Истина);
	
	ДополнительныеПараметры =  Новый Структура;
	ДополнительныеПараметры.Вставить("КатегорияМетрики",	КатегорияМетрики);
	ДополнительныеПараметры.Вставить("ДействиеМетрики",		ДействиеМетрики);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ОрганизацияНачалоВыбораЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("Организации_ФормаСпискаУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбораЗавершение(ВыбраннаяОрганизация, ДополнительныеПараметры) Экспорт 
	
	Если ВыбраннаяОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации			= ВыбраннаяОрганизация;
	Организация					= ВыбраннаяОрганизация.Наименование;
	Контрагент					= Неопределено;
	ПодразделениеКонтрагента	= Неопределено;
	
	ОрганизацияПослеВыбораНаСервере(ДанныеОрганизации);
	УстановитьПодразделениеНаСервере("Отправитель", ДанныеПодразделенияОрганизации);
	ЗаполнитьСписокОшибокКЭПНаСервере();

	УстановитьВидимостьЭлементовФормы();
	УстановитьЗаголовокФормы();
	
	КатегорияМетрики	= ДополнительныеПараметры.КатегорияМетрики;
	ДействиеМетрики		= ДополнительныеПараметры.ДействиеМетрики;

	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПослеВыбораНаСервере(ДанныеОрганизации)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Пакет.Отправитель = Модуль_Ядро.Организации_ЗаполнитьУчастникаДО(ДанныеОрганизации);
	
	УстановитьОсновноеПодразделениеОрганизации();
	Модуль_Ядро.Пакеты_ЗаполнитьНеобходимостьШифрованияДокументов(Пакет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьОчисткуОрганизацииНаСервере();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОчисткуОрганизацииНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Пакет.Отправитель = Ядро.Контракт_УчастникДокументооборота();
	Пакет.Получатель = Ядро.Контракт_УчастникДокументооборота();
	
	Пакет.СлужебнаяИнформация.Вставить("ЗашифрованныйПакет", Ложь);
	
	ДанныеОрганизации = Неопределено;
	Организация = Неопределено;
	ДанныеПодразделенияОрганизации = Неопределено;
	ПодразделениеОрганизации = Неопределено;
	
	ДанныеКонтрагента = Неопределено;
	Контрагент = Неопределено;
	ДанныеПодразделенияКонтрагента = Неопределено;
	ПодразделениеКонтрагента = Неопределено;
	
	ОбновитьДляДокументовУчастниковЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID",					ДанныеОрганизации.ID);
		ПараметрыФормы.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
		ПараметрыФормы.Вставить("ИмяСправочника",		"Организации");
		ПараметрыФормы.Вставить("Объект",				Объект);
		
		ИмяОткрываемойФормы = ОсновнаяФорма().ПутьКФормам + "ФормаЭлементаСправочникаУправляемая";
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики = "Контрагент";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	СтандартнаяОбработка = Ложь;
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"КонтрагентНачалоВыбораЗавершение",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.Контрагенты_ВыбратьКонтрагента(
		ДанныеОрганизации.ID,
		ЭтаФорма,
		ОписаниеОповещения
	);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(ВыбранныйКонтрагент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйКонтрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = ВыбранныйКонтрагент;
	Контрагент = ВыбранныйКонтрагент.Наименование;
	
	ОбработатьВыборКонтрагентаНаСервере();
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборКонтрагентаНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Пакет.Получатель = Ядро.Контрагенты_ЗаполнитьУчастникаДО(ДанныеКонтрагента, ДанныеОрганизации);
	
	УстановитьОсновноеПодразделениеКонтрагента();
	УстановитьПодразделениеНаСервере("Получатель", ДанныеПодразделенияКонтрагента);
	
	Ядро.Пакеты_ЗаполнитьНеобходимостьШифрованияДокументов(Пакет);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьОчисткуКонтрагентаНаСервере();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОчисткуКонтрагентаНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Пакет.Получатель = Ядро.Контракт_УчастникДокументооборота();
	
	Пакет.СлужебнаяИнформация.Вставить("ЗашифрованныйПакет", Ложь);
	
	ДанныеКонтрагента = Неопределено;
	Контрагент = Неопределено;
	ДанныеПодразделенияКонтрагента = Неопределено;
	ПодразделениеКонтрагента = Неопределено;
	
	ОбновитьДляДокументовУчастниковЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID",					ДанныеКонтрагента.ID);
		ПараметрыФормы.Вставить("ДанныеКонтрагента",	ДанныеКонтрагента);
		ПараметрыФормы.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
		ПараметрыФормы.Вставить("ИмяСправочника",		"Контрагенты");
		ПараметрыФормы.Вставить("Объект",				Объект);
		
		ИмяОткрываемойФормы = ОсновнаяФорма().ПутьКФормам + "ФормаЭлементаСправочникаУправляемая";
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Подразделение организации";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	СтандартнаяОбработка = Ложь;
	НачатьВыборПодразделения("Отправитель");
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПодразделениеНаСервере("Отправитель", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID",					ДанныеПодразделенияОрганизации.ID);
		ПараметрыФормы.Вставить("ДанныеПодразделения",	ДанныеПодразделенияОрганизации);
		ПараметрыФормы.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
		ПараметрыФормы.Вставить("ИмяСправочника",		"ПодразделенияОрганизаций");
		ПараметрыФормы.Вставить("Объект",				Объект);
		
		ИмяОткрываемойФормы = ОсновнаяФорма().ПутьКФормам + "ФормаЭлементаСправочникаУправляемая";
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Подразделение контрагента";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	СтандартнаяОбработка = Ложь;
	НачатьВыборПодразделения("Получатель");
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПодразделениеНаСервере("Получатель", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПодразделениеКонтрагента) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID",					ДанныеПодразделенияКонтрагента.ID);
		ПараметрыФормы.Вставить("ДанныеПодразделения",	ДанныеПодразделенияКонтрагента);
		ПараметрыФормы.Вставить("ДанныеКонтрагента",	ДанныеКонтрагента);
		ПараметрыФормы.Вставить("ИмяСправочника",		"ПодразделенияКонтрагентов");
		ПараметрыФормы.Вставить("Объект",				Объект);
		
		ИмяОткрываемойФормы = ОсновнаяФорма().ПутьКФормам + "ФормаЭлементаСправочникаУправляемая";
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПодразделения(ВидУчастникаДО)
	
	ПараметрыФормы = ПараметрыФормыПодразделения(ВидУчастникаДО);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ОбработкаВыбораПодразделения", ЭтаФорма, ВидУчастникаДО);
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("Подразделения_ФормаСпискаУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыПодразделения(ВидУчастникаДО)
	
	Результат = Новый Структура;
	
	Если ВидУчастникаДО = "Отправитель" Тогда
		Результат.Вставить("ДанныеВладельца",	ДанныеОрганизации);
		Результат.Вставить("ДанныеОрганизации",	Неопределено);
	Иначе
		Результат.Вставить("ДанныеВладельца",	ДанныеКонтрагента);
		Результат.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
	КонецЕсли;
	
	Результат.Вставить("Объект", Объект);
	
	Возврат Результат;	
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбораПодразделения(ДанныеПодразделения = Неопределено, ВидУчастникаДО = Неопределено) Экспорт
	
	Если ДанныеПодразделения <> Неопределено Тогда
		УстановитьПодразделениеНаСервере(ВидУчастникаДО, ДанныеПодразделения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодразделениеНаСервере(ВидУчастникаДО, Знач ДанныеПодразделения)
	
	Если ДанныеПодразделения = Неопределено Тогда
	
		Если ВидУчастникаДО = "Получатель" Тогда
			ДанныеПодразделенияКонтрагента	= Неопределено; 
			ПодразделениеКонтрагента		= Неопределено;
		ИначеЕсли ВидУчастникаДО = "Отправитель" Тогда
			ДанныеПодразделенияОрганизации	= Неопределено;
			ПодразделениеОрганизации		= Неопределено;
		КонецЕсли;
		
		Пакет[ВидУчастникаДО].Подразделение	= Неопределено;
		Пакет[ВидУчастникаДО].DepartmentId	= "";
		
	Иначе
		
		Если ВидУчастникаДО = "Получатель" Тогда
			ДанныеПодразделенияКонтрагента	= ДанныеПодразделения; 
			ПодразделениеКонтрагента		= ДанныеПодразделения.Наименование;
		ИначеЕсли ВидУчастникаДО = "Отправитель" Тогда
			ДанныеПодразделенияОрганизации	= ДанныеПодразделения;
			ПодразделениеОрганизации		= ДанныеПодразделения.Наименование;
		КонецЕсли;
		
		Пакет[ВидУчастникаДО].Подразделение	= ДанныеПодразделения.Ссылка;
		Пакет[ВидУчастникаДО].DepartmentId	= ДанныеПодразделения.Id;
	
	КонецЕсли;
	
	ОбновитьДляДокументовУчастниковЭДО();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеПодразделениеОрганизации()
	
	ИдентификаторыПодразделения		= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(, ДанныеОрганизации.ID_ОсновноеПодразделение);
	ДанныеПодразделенияОрганизации	= Модуль_ЯдроНаСервере().Подразделения_ЗаполненныеРеквизиты(ИдентификаторыПодразделения, ДанныеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновноеПодразделениеКонтрагента()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ИдентификаторыПодразделения = Ядро.Новый_ИдентификаторыСправочника(, ДанныеКонтрагента.ID_ОсновноеПодразделение);
	ДанныеПодразделенияКонтрагента = Ядро.Подразделения_ЗаполненныеРеквизиты(ИдентификаторыПодразделения, ДанныеКонтрагента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияДокументаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	АдресСсылки = Неопределено;
	ДопПараметры = Неопределено;
	
	ДанныеСобытия.Свойство("href", АдресСсылки);
	
	ЗаписатьМетрикиИсторииДокумента(ДанныеСобытия);
	
	Если ЗначениеЗаполнено(АдресСсылки) Тогда
		// BSLLS:UnusedLocalVariables-off
		СтандартнаяОбработка = Ложь;
		// BSLLS:UnusedLocalVariables-on
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСсылки, ДопПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМетрикиИсторииДокумента(Знач ДанныеСобытия)
	
	АдресСсылки = Неопределено;
	ДанныеСобытия.Свойство("href", АдресСсылки);
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Перечисление_АдресаИнтернетРесурсов = Модуль_Ядро.Перечисление_АдресаИнтернетРесурсов();
	ИнструкцияПоПрослеживаемымТоварам = Перечисление_АдресаИнтернетРесурсов.ИнструкцияПоПрослеживаемымТоварам;
	
	Попытка
		НажатиеНаДопИнформацию =
			ДанныеСобытия.Element.tagName = "SUMMARY";
	Исключение
		// BSLLS:UnusedLocalVariable-off
		Ошибка = ИнформацияОбОшибке();
		// BSLLS:UnusedLocalVariable-on
	КонецПопытки;
	
	Если НажатиеНаДопИнформацию Тогда
		
		Метрика_ЗаписатьНажатие_РаскрытиеБлокаДопИнформации();
		Метрика_ДобавитьСтатистику_РаскрытиеБлокаДопИнформации();
		
	КонецЕсли;
	
	Если АдресСсылки = ИнструкцияПоПрослеживаемымТоварам Тогда
		
		Метрика_ЗаписатьНажатие_ИнструкцияПоПрослеживаемымТоварам();
		Метрика_ДобавитьСтатистику_ИнструкцияПоПрослеживаемымТоварам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностиДокументаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыГиперссылкиПроверкиМЧД = Неопределено;
	ДопПараметры = Неопределено;
	
	ДанныеСобытия.Свойство("href", ПараметрыГиперссылкиПроверкиМЧД);
	
	Если ЗначениеЗаполнено(ПараметрыГиперссылкиПроверкиМЧД) Тогда
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(ПараметрыГиперссылкиПроверкиМЧД, ДопПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ПоказатьСведенияОДоверенности(ИдентификаторМЧД)
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики	= Метрика_НазванияДействий().ПосмотретьДоверенность;
	ПредставлениеМетрики = "Доверенности документа";
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Рег.номер МЧД", ИдентификаторМЧД);
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
			ДанныеОрганизации.ID,
			КатегорияМетрики,
			ДействиеМетрики,
			,
			Переменные,
			НазваниеФормы
		);
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики,
		,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Функция HTMLСобытияМЧД_ПараметрыСсылкиHTML(СсылкаHTML)
	
	Результат = Новый Соответствие;
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КоллекцияПараметров = Модуль_Ядро.РазделитьСтроку(СсылкаHTML, "&");
	Для Каждого ПараметрСтрокой Из КоллекцияПараметров Цикл
		ИмяЗначениеПараметра = Модуль_Ядро.РазделитьСтроку(ПараметрСтрокой, "=");
	    Результат.Вставить(ИмяЗначениеПараметра[0], ИмяЗначениеПараметра[1]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция HTMLСобытияМЧД_ПолучитьДанныеСобытия(ИндексСтроки, АдресХранилища)

	СобытияМЧД = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеСобытияМЧД = СобытияМЧД.Получить(Число(ИндексСтроки));
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из СобытияМЧД.Колонки Цикл
		Результат.Вставить(Колонка.Имя, ДанныеСобытияМЧД[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Функция HTMLСобытияМЧД_ПолучитьДанныеСобытияПоСсылке(СсылкаHTML, АдресХранилища)

	ПараметрыСсылки = HTMLСобытияМЧД_ПараметрыСсылкиHTML(СсылкаHTML);
	ИндексСтроки = ПараметрыСсылки.Получить("raw_id");
	Результат = HTMLСобытияМЧД_ПолучитьДанныеСобытия(ИндексСтроки, АдресХранилища);
	
	Возврат Результат;	
	
КонецФункции

// Обработчик открытия сайта ФНС для проверки доверенности из ссылок страницы доверенностей по документу
//
// Параметры:
//  Результат			- Строка - например, alert:<ИмяПроцедурыОбработчика>?ИмяПараметра1=ЗначениеПараметра1&ИмяПараметра2=ЗначениеПараметра2
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_ПроверитьДоверенностьНаСайтеФНС(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПараметрыСсылки = HTMLСобытияМЧД_ПараметрыСсылкиHTML(Результат);
		
		АдресСсылки = ПараметрыСсылки.Получить("url");
		ИндексСтроки = ПараметрыСсылки.Получить("raw_id");
		
		ДанныеСобытияМЧД = HTMLСобытияМЧД_ПолучитьДанныеСобытия(ИндексСтроки, АдресВХранилищеСобытияМЧД);
		
		МодульЯдро = Модуль_ЯдроНаКлиенте();
		
		ИдентификаторДоверенности = МодульЯдро.СвойствоСтруктуры(ДанныеСобытияМЧД.ИнформацияОДоверенности, "Идентификатор", """");
		ДоверительИНН = МодульЯдро.СвойствоСтруктуры(ДанныеСобытияМЧД.ИнформацияОДоверенности.Доверитель, "ИНН", """");
		ПредставительИНН = МодульЯдро.СвойствоСтруктуры(ДанныеСобытияМЧД.ИнформацияОДоверенности.Представитель, "ИНН", """");
		
		АдресПроверкиМЧД = МодульЯдро.Общее_ПодставитьПараметрыВСтроку(
			"%1?guid=%2&innP=%3&innR=%4",
			АдресСсылки,
			ИдентификаторДоверенности,
			ДоверительИНН,
			ПредставительИНН);
		
		Метрика_ДобавитьПоведение_НажатиеПроверитьДоверенностьНаСайтеФНС();
		Метрика_ДобавитьСтатистику_НажатиеПроверитьДоверенностьНаСайтеФНС(ДанныеСобытияМЧД.ОписанияПроверокМЧД);
		
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресПроверкиМЧД, ДополнительныеПараметры, ЭтаФорма);

	КонецЕсли;
	
КонецПроцедуры

// Обработчик открытия формы HTML со сведениями о МЧД
//
// Параметры:
//  Результат			- Строка - например, alert:<ИмяПроцедурыОбработчика>?ИмяПараметра1=ЗначениеПараметра1&ИмяПараметра2=ЗначениеПараметра2
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_ПосмотретьПолномочияМЧД(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
				
		ДанныеСобытияМЧД = HTMLСобытияМЧД_ПолучитьДанныеСобытияПоСсылке(Результат, АдресВХранилищеСобытияМЧД);
		
		Если ЗначениеЗаполнено(ДанныеСобытияМЧД.ИнформацияОДоверенности) Тогда
			ОсновнаяФорма().МЧД_ПоказатьСведенияОДоверенности(ДанныеСобытияМЧД.ИнформацияОДоверенности, ЭтаФорма);
			Метрика_ПоказатьСведенияОДоверенности(ДанныеСобытияМЧД.ИнформацияОДоверенности.Идентификатор);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
                             
// Обработчик скачивания файлов доверенности из ссылок страницы доверенностей по документу
//
// Параметры:
//  Результат			- Строка - например, alert:<ИмяПроцедурыОбработчика>?ИмяПараметра1=ЗначениеПараметра1&ИмяПараметра2=ЗначениеПараметра2
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_СкачатьФайлыДоверенности(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
	
		Метрика_ДобавитьПоведение_НажатиеСкачатьФайлыДоверенности();
		Метрика_ДобавитьСтатистику_НажатиеСкачатьФайлыДоверенности();

		ДанныеСобытияМЧД = HTMLСобытияМЧД_ПолучитьДанныеСобытияПоСсылке(Результат, АдресВХранилищеСобытияМЧД);
		
		Если ЗначениеЗаполнено(ДанныеСобытияМЧД) Тогда
			
			ПараметрыСкачиванияФайловМЧД = Новый Структура;
			ПараметрыСкачиванияФайловМЧД.Вставить("ПредставлениеТекущегоДокумента", ПредставлениеТекущегоДокумента());
			ПараметрыСкачиванияФайловМЧД.Вставить("ПараметрыГиперссылки", ДанныеСобытияМЧД);
			
			ОсновнаяФорма().ОбработатьНажатиеГиперссылкиСкачатьФайлыМЧД(ПараметрыСкачиванияФайловМЧД);

		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик открытия списка цепочки делегирования доверенности из ссылок страницы доверенностей по документу
//
// Параметры:
//  Результат			- Строка - например, alert:<ИмяПроцедурыОбработчика>?ИмяПараметра1=ЗначениеПараметра1&ИмяПараметра2=ЗначениеПараметра2
//  ДополнительныеПараметры
//
&НаКлиенте
Процедура ОбработатьНажатие_ПосмотретьЦепочкуДелегированияДоверенности(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Метрика_ДобавитьПоведение_НажатиеПосмотретьЦепочкуДелегированияДоверенности();
		Метрика_ДобавитьСтатистику_НажатиеПосмотретьЦепочкуДелегированияДоверенности();
		
		ДанныеСобытияМЧД = HTMLСобытияМЧД_ПолучитьДанныеСобытияПоСсылке(Результат, АдресВХранилищеСобытияМЧД);
		
		Если ЗначениеЗаполнено(ДанныеСобытияМЧД) Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Режим", "ПосмотретьЦепочкуДелегированияДоверенности");
			ПараметрыОткрытияФормы.Вставить("ОписаниеСобытияМЧД", ДанныеСобытияМЧД);
			ПараметрыОткрытияФормы.Вставить("ПредставлениеТекущегоДокумента", ПредставлениеТекущегоДокумента());
			ПараметрыОткрытияФормы.Вставить("ШиринаФормы", 100);
			
			ОсновнаяФорма().ОткрытьФормуДиадокМодально(
				"ФормаHTMLСообщенияУправляемая",
				ЭтаФорма,
				ПараметрыОткрытияФормы
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеТекущегоДокумента()
	
	Результат = ДокументыПакета[Элементы.ДокументыПакета.ТекущаяСтрока].Представление;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеСкачатьФайлыДоверенности()
	
	КатегорияМетрики		= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики			= Метрика_ДействиеНажатиеСкачатьФайлыДоверенности();
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "Доверенности документа";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеСкачатьФайлыДоверенности()
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики		= Метрика_ДействиеНажатиеСкачатьФайлыДоверенности();
	МеткаМетрики		= "";
	Переменные			= Неопределено;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(
			ДанныеОрганизации.ID,
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные,
			Метрика_НазваниеФормы()
		);
		
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеПосмотретьЦепочкуДелегированияДоверенности()
	
	КатегорияМетрики		= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики			= Метрика_ДействиеНажатиеПосмотретьЦепочкуМЧД();
	НазваниеМетки			= "Нажать кнопку";
	ПредставлениеМетрики	= "Доверенности документа";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики,
		НазваниеМетки,
		ПредставлениеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеПосмотретьЦепочкуДелегированияДоверенности()
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДействиеСДоверенностью;
	ДействиеМетрики		= Метрика_ДействиеНажатиеПосмотретьЦепочкуМЧД();
	МеткаМетрики		= "";
	Переменные			= Неопределено;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		Метрика_НазваниеФормы()
	);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ДействиеНажатиеСкачатьФайлыДоверенности()
	
	Возврат "Скачать доверенность";
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеНажатиеПосмотретьЦепочкуМЧД()
	
	Возврат "Посмотреть цепочку МЧД";
	
КонецФункции

// Обработчик оповещения сохранения файла детализации по статусу ЦРПТ 
//
// Параметры:
//	EntityId 		- Строка 		- идентификатор события
//	ДопПараметры 	- Неопределено 	- не используется
//
&НаКлиенте
Процедура Обработчик_СохранитьДетализацию(EntityId, ДопПараметры) Экспорт
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ИмяДокумента = Ядро.Документы_ПредставлениеДокументаДляСохранения(ТекущийДокумент);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок = "Укажите файл, в который нужно сохранить детализацию";
	ДиалогВыбора.Фильтр = "Текстовый файл UTF-8 (*.txt)|*.txt";
	ДиалогВыбора.ПолноеИмяФайла = "Детализация - " + ИмяДокумента + ".txt";
	
	Если НЕ ДиалогВыбора.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Ядро.Документы_ДвоичныеДанныеEntity(
		ТекущийДокумент.Идентификаторы.BoxId,
		ТекущийДокумент.Идентификаторы.LetterId,
		EntityId
	);
	
	Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		
		Попытка
			Файл = Новый Файл(ДиалогВыбора.ПолноеИмяФайла);
			СоздатьКаталог(Файл.Путь);
			ДвоичныеДанные.Записать(ДиалогВыбора.ПолноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		Сообщить(НСтр("ru = 'Не удалось получить файл детализации'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Действия контекстного меню документов пакета

&НаКлиенте
Процедура ОткрытьДанныеДокумента(Элемент)
	
	СсылкаНаДокумент = ТекущийДокумент.Идентификаторы.ДокументЭДО;
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ОсновнаяФорма().ПоказатьЗначениеПереопределенная(СсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСохраненныйОтвет(Команда)
	
	ТекстПредупреждения = Неопределено;
	КонтентОтвета = Неопределено;
	Если ТекущийДокумент.СлужебнаяИнформация.Свойство("КонтентОтвета", КонтентОтвета) Тогда
		
		Если ТипЗнч(КонтентОтвета) = Тип("ДвоичныеДанные") Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайлаПереопределенная("xml");
			КонтентОтвета.Записать(ИмяВременногоФайла);
			ЗапуститьПриложение(ИмяВременногоФайла,, Истина);
			УдалитьФайлы(ИмяВременногоФайла);
		ИначеЕсли ТипЗнч(КонтентОтвета) = Тип("Структура") Тогда
			СписокДанныхОтвета = СохраненныйОтветВСписокЗначений(КонтентОтвета);
			ОсновнаяФорма().ПоказатьЗначениеПереопределенная(СписокДанныхОтвета);
		Иначе
			ТекстПредупреждения = "Сохранен ответ недопустимого типа";
		КонецЕсли;
		
	Иначе
		ТекстПредупреждения = "Сохраненный ответ отсутствует";
	КонецЕсли;
	
	Если ТекстПредупреждения <> Неопределено Тогда
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяВременногоФайлаПереопределенная(Расширение)
	
	Результат = "";
	
	#Если ВебКлиент Тогда
		
		Каталог = КаталогВременныхФайлов();
		НовоеИмяФайла = Строка(Новый УникальныйИдентификатор) + "." + Расширение;
		Результат = Каталог + НовоеИмяФайла;	
		
	#Иначе
		
		Результат = ПолучитьИмяВременногоФайла(Расширение);
		
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СохраненныйОтветВСписокЗначений(КонтентОтвета)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Элемент из КонтентОтвета Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Для Каждого ЭлементВложенный из Элемент.Значение Цикл
				Результат.Добавить(Элемент.Ключ + " - " + ЭлементВложенный.Ключ + ": " + ЭлементВложенный.Значение);
			КонецЦикла;
		Иначе
			Результат.Добавить(Элемент.Ключ + ": " + Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИнформацию(Элемент)
	
	ИнформацияОПакете = СформироватьИнформациюОПакете();
	
	ИнформацияОПакете.ТолькоПросмотр = Истина;
	
	ИнформацияОПакете.Показать("Информация о пакете");
	
КонецПроцедуры

&НаСервере
Функция СформироватьИнформациюОПакете()
	
	Результат = ОбработкаОбъект().СформироватьИнформациюОПакете(Пакет);
	
	Возврат Результат;
	
КонецФункции

// Действия подменю Диадок

&НаКлиенте
Процедура ПерейтиВДиадок(Элемент)
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики = "Перейти в Диадок";
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ГиперссылкаНаДокумент = Ядро.Документы_СсылкаВБраузере(ТекущийДокумент);
	
	Если ЗначениеЗаполнено(ГиперссылкаНаДокумент) Тогда
		ЗапуститьПриложение(ГиперссылкаНаДокумент);
	КонецЕсли;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПечатнуюФорму(Элемент)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().СкачиваниеДокументов;
	ДействиеМетрики		= "Получить печатную форму";

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ОсновнаяФорма().ПолучитьПечатнуюФормуСервераДиадок(ТекущийДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументНаДиск(Команда)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	КатегорияМетрики = ОсновнаяФорма.Метрика_НазваниеКатегории().СкачиваниеДокументов;
	ДействиеМетрики = "Скачать документы";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_СкачиваниеДокументов(ДействиеМетрики, ТекущийДокумент);
	
	ИмяВременногоФайла = СохранитьФайлПакетаНаДиск();
	ИмяФайла = ТекущийДокумент.Документооборот.ХранилищеКонтента.ИмяФайла;
	
	ОсновнаяФорма.Обработчик_КопироватьФайл(ИмяВременногоФайла, ИмяФайла);
	
	ДобавитьВременныйФайлКУдалению(ИмяВременногоФайла);
	
КонецПроцедуры


// Действия на страницах

&НаКлиенте
Процедура ГруппаСодержаниеДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраница = Элементы.ГруппаСодержаниеДокумента.ТекущаяСтраница;
	
	КатегорияМетрики				= Метрика_НазваниеКатегорииПоНаправлению();
	Метрика_ВозможныеДействия		= ОсновнаяФорма().Метрика_НазваниеДействий();
	НазваниеФормы					= Метрика_НазваниеФормы();
	
	Если ТекущаяСтраница = Элементы.ГруппаИсторияПоДокументу Тогда
		
		ДействиеМетрики = Метрика_ВозможныеДействия.ИсторияПоДокументу;
		ЗаполнитьИсториюПоДокументу();
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДоверенностиПоДокументу Тогда
		
		ДействиеМетрики = Метрика_ВозможныеДействия.Доверенности;
		ЗаполнитьДоверенностиПоДокументу();
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПечатнаяФорма Тогда
		
		ДействиеМетрики = Метрика_ВозможныеДействия.ПечатнаяФорма;
		
	КонецЕсли;
	
	ДопПараметры = Новый Соответствие;
	ДопПараметры.Вставить("Имя вкладки", ТекущаяСтраница.Заголовок);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы);
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, ДопПараметры, НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLПредставлениеФайлаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресСсылки = Неопределено;
	
	ДанныеСобытия.Свойство("href", АдресСсылки);
	
	ХранилищеКонтента = Неопределено;
	
	ТекущийДокумент.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
	
	Если ХранилищеКонтента <> Неопределено Тогда
		ИмяФайла = ХранилищеКонтента.ИмяФайла;
	Иначе
		ИмяФайла = ТекущийДокумент.ИмяФайла;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(АдресСсылки) Тогда
		ОсновнаяФорма().ОповеститьИлиПерейтиПоСсылке(АдресСсылки, ИмяФайла, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиДокументаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресСсылки = Неопределено;
	
	ДанныеСобытия.Свойство("href", АдресСсылки);
	
	Если ЗначениеЗаполнено(АдресСсылки) Тогда
		
		Если Найти(АдресСсылки, "ИНСТРУКЦИЯКАКЗАПОЛНИТЬОСНОВАНИЕ") > 0 Тогда
			
			ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865688");
			
		ИначеЕсли Найти(АдресСсылки, "ИНСТРУКЦИЯКАКЗАПОЛНИТЬГТД") > 0 Тогда
			
			ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865678");
			
		ИначеЕсли Найти(АдресСсылки, "https://") = 0 Тогда
			
			//На 8.2.19 href может иметь вид e1c://filev/C/base/СПРАВОЧНИК.КОНТРАГЕНТЫ:22F75233-F1AF-11E6-B215-448500D3D235
			ПозицияРазделителя = Найти(АдресСсылки, "/");
			
			Пока ПозицияРазделителя > 0 Цикл
				АдресСсылки = Прав(АдресСсылки, СтрДлина(АдресСсылки) - ПозицияРазделителя);
				ПозицияРазделителя = Найти(АдресСсылки, "/");
			КонецЦикла;
			
			СсылкаНаЭлементДанных = Документы_СсылкаНаЭлементДанныхИзГиперссылки(АдресСсылки);
			
			Если СсылкаНаЭлементДанных <> Неопределено Тогда
				ОсновнаяФорма().ПоказатьЗначениеПереопределенная(СсылкаНаЭлементДанных);
			КонецЕсли;
			
		Иначе
			ЗапуститьПриложение(АдресСсылки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Документы_СсылкаНаЭлементДанныхИзГиперссылки(Знач ТекстГиперссылки)
	
	Результат = Неопределено;
	
	ВидМетаданных = Неопределено;
	
	Если Лев(ТекстГиперссылки, 11) = "СПРАВОЧНИК." Тогда
		ГруппаМетаданных = Справочники;
		ТекстГиперссылки = Сред(ТекстГиперссылки, 12);
	ИначеЕсли Лев(ТекстГиперссылки, 9) = "ДОКУМЕНТ." Тогда
		ГруппаМетаданных = Документы;
		ТекстГиперссылки = Сред(ТекстГиперссылки, 10);
	КонецЕсли;
	
	Если ГруппаМетаданных = Неопределено Тогда
		Возврат Результат; // не удалось вычислить ссылку
	КонецЕсли;
	
	ПодгруппаМетаданных = Лев(ТекстГиперссылки, СтрДлина(ТекстГиперссылки) - 37); // конкретный вид справочника/документа.
	ГуидСтрокой = Прав(ТекстГиперссылки, 36);
	Гуид = Новый УникальныйИдентификатор(ГуидСтрокой);
	
	Результат = ГруппаМетаданных[ПодгруппаМетаданных].ПолучитьСсылку(Гуид);
	
	Возврат Результат;
	
КонецФункции


// Сохранение документооборота

&НаКлиенте
Процедура КнопкаСохранитьДокументооборот(Команда)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеФормы = Метрика_НазваниеФормы();
	ДействиеМетрики = "Сохранить Документооборот";
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы, 
		КатегорияМетрики, 
		ДействиеМетрики
	);
	
	СохранитьДокументооборот();
	
	Метрика_СтатистикаДляОрганизации(
		КатегорияМетрики, 
		ДействиеМетрики
	);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументооборот()
	
	#Если ВебКлиент Тогда
		
		Сообщить("Сохранение документооборота в файл не поддерживается в веб-клиенте");
		
	#Иначе
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		ИмяДокумента = Ядро.Документы_ПредставлениеДокументаДляСохранения(ТекущийДокумент);
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбора.Заголовок = "Укажите файл, в который нужно сохранить документооборот";
		ДиалогВыбора.Фильтр = "ZIP архив (*.zip)|*.zip";
		ДиалогВыбора.ПолноеИмяФайла = ИмяДокумента + ".zip";
		
		Если НЕ ДиалогВыбора.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайлаАрхива = ДиалогВыбора.ПолноеИмяФайла;
		
		АрхивДокументооборота = Ядро.Сохранение_ПолучитьАрхивДокументооборота(ТекущийДокумент.Идентификаторы);
		
		Если АрхивДокументооборота = Неопределено Тогда
			Сообщить("Не удалось получить архив документооборота с сервера");
		Иначе
			
			Попытка
				АрхивДокументооборота.Записать(ИмяФайлаАрхива);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры


// Дополнительные обработчики формы

&НаКлиенте
Процедура РазделительКартинкаНажатие(Элемент)
	
	ОткрывашкаНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрывашкаНажатие()
	
	ОтображатьДокументыПакета = Элементы.ГруппаДокументовПакета.Видимость;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДействиеСПанелью;
	ДействиеМетрики		= ?(ОтображатьДокументыПакета, "Свернуть панель", "Развернуть панель");
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	Элементы.РазделительКартинка1.Видимость		= ОтображатьДокументыПакета;	
	Элементы.РазделительКартинка2.Видимость		= НЕ ОтображатьДокументыПакета;
	Элементы.ГруппаДокументовПакета.Видимость	= НЕ ОтображатьДокументыПакета;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	

КонецПроцедуры

&НаКлиенте
Процедура ТребуемыеДействияНажатие(Элемент)
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстОшибки, , "Ошибки анализа документа");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокированныйПакетПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Закрытый пакет";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	Пакет.Заблокирован				= ЗаблокированныйПакет;
	ТекущийДокумент.Заблокирован	= ЗаблокированныйПакет;
	
	Для Каждого Документ Из Пакет.Документы Цикл
		Документ.Заблокирован = ЗаблокированныйПакет;
	КонецЦикла;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Закрытый пакет", ЗаблокированныйПакет);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

//} ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ


//{ ЗАПОЛНЕНИЕ ПАКЕТА

&НаСервере
Процедура ЗаполнитьДокументыПакетаНаСервере() Экспорт
	
	ЭтоВходящийПакет = (Пакет.Направление = Направление().Входящее);
	
	ДокументыПакета.Очистить();
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		СтрокаТЧ = ДокументыПакета.Добавить();
		СтрокаТЧ.DocumentId = Документ.Идентификаторы.DocumentId;
		СтрокаТЧ.Ключ = Документ.Ключ;
		
		Если НЕ ЭтоВходящийПакет Тогда
			
			Ядро = Модуль_ЯдроНаСервере();
			
			ОшибкиВалидации = Ядро.Документы_ОшибкиВалидацииДокумента(Документ);
			
			ЗаполнитьОшибкиДокумента(СтрокаТЧ, ОшибкиВалидации);
			
		КонецЕсли;
		
		Документ.СлужебнаяИнформация.Свойство("Контент", СтрокаТЧ.Контент);
		СтрокаТЧ.Контент = Модуль_ЯдроНаСервере().КопияКоллекцииЗначений(СтрокаТЧ.Контент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОшибкиДокумента(Документ, ОшибкиВалидации)
	
	Если ТипЗнч(ОшибкиВалидации) = Тип("СписокЗначений") Тогда
		Документ.ОшибкиДокумента = ОшибкиВалидации;
	Иначе
		Документ.ОшибкиДокумента.ЗагрузитьЗначения(ОшибкиВалидации);
	КонецЕсли;
	
	Документ.ЕстьОшибки = ЗначениеЗаполнено(ОшибкиВалидации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроизвольныйФайлИсходящий(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Добавить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ФайлыДляДобавления = ВыбратьФайлыДляДобавленияВПакет();
	
	ОбработатьФайлыДляДобавленияВПакет(ФайлыДляДобавления);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСКомпьютера(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Загрузить с компьютера";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ФайлыДляДобавления = ВыбратьФайлыДляДобавленияВПакет();
	
	ОбработатьФайлыДляДобавленияВПакет(ФайлыДляДобавления);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайлыДляДобавленияВПакет() 
	
	Результат = Новый Массив;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок			= "Выберите файл";
	Диалог.ПолноеИмяФайла		= ""; 
	Диалог.Фильтр				= НСтр("ru = 'Все файлы(*.*)|*.*'"); 
    Диалог.МножественныйВыбор	= Истина;
	
	Если Диалог.Выбрать() Тогда
		Результат = ДоступныеФайлыДляДобавленияВПакет(Диалог.ВыбранныеФайлы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДоступныеФайлыДляДобавленияВПакет(ВыбранныеФайлыДляДобавленияВПакет)
	
	Результат = Новый Массив;
	
	масБольшиеФайлы = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранныеФайлыДляДобавленияВПакет Цикл
		
		ФайлДанных = Новый Файл(ЭлементМассива);
		
		Если ФайлДанных.Размер() > (5 * 1024 * 1024) Тогда
			масБольшиеФайлы.Добавить(ФайлДанных);
		Иначе
			Результат.Добавить(ФайлДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если масБольшиеФайлы.Количество() > 0 Тогда
		
		стрПредупреждения = "Размер отправляемого файла не должен превышать 5 Мб.
							|Невозможно добавить следующие файлы:";
							
		Для каждого БольшойФайл Из масБольшиеФайлы Цикл
			стрПредупреждения = стрПредупреждения + "
								|- " + БольшойФайл.Имя;
		КонецЦикла;		
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, стрПредупреждения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьФайлыДляДобавленияВПакет(ФайлыДляДобавления)
	
	Для Каждого ФайлДанных Из ФайлыДляДобавления Цикл
		
		ДополнительныеПараметры = Новый Структура("Имя", ФайлДанных.Имя);
		
		#Если ВебКлиент Тогда
						
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикСозданияДвоичныхДанныхПроизвольныхФайлов", ЭтаФорма, ДополнительныеПараметры);
			НачатьСозданиеДвоичныхДанныхИзФайла(ОписаниеОповещения, ФайлДанных.ПолноеИмя);
			
		#Иначе
			
			Попытка
				ДвоичныеДанныеФайла	= Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя);
			Исключение
				Сообщить("Не удалось добавить в пакет файл: " + ФайлДанных.ПолноеИмя + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбработчикСозданияДвоичныхДанныхПроизвольныхФайлов(ДвоичныеДанныеФайла, ДополнительныеПараметры);
			
		#КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСозданияДвоичныхДанныхПроизвольныхФайлов(ДвоичныеДанныеФайла, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.Имя;
	ДобавитьФайлВПакет(ДвоичныеДанныеФайла, ИмяФайла);
	
	Если РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска Тогда
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ИдентификаторФормы = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		ПоместитьДвоичныеДанныеПакетаВоВременноеХранилищеНаСервере(ИдентификаторФормы);
		
	Иначе
		
		ПоместитьДвоичныеДанныеПакетаВоВременноеХранилище();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВПакет(ДвоичныеДанныеФайла, ИмяФайла) 
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Документ = Ядро.Пакеты_НовыйДокумент(Пакет, "Nonformalized");
	
	ХранилищеКонтента = Документ.Документооборот.ХранилищеКонтента;
	
	ХранилищеКонтента.Данные	= ДвоичныеДанныеФайла;
	ХранилищеКонтента.ИмяФайла	= ИмяФайла;
	Документ.ИмяФайла			= ИмяФайла;
	
	Документ.Метаданные.Вставить("FileName", ИмяФайла);
	
	Пакет.Документы.Добавить(Документ);
	
	ТекДанные = ДокументыПакета.Добавить();
	ТекДанные.Представление	= Документ.ИмяФайла;
	ТекДанные.Ключ			= Документ.Ключ;
	
	Документ.СлужебнаяИнформация.ПараметрыОтправки.ЗашифрованныйПакет = Ядро.СвойствоСтруктуры(Пакет.СлужебнаяИнформация,
																												"ЗашифрованныйПакет",
																												Ложь);
	УстановитьДоступностьПодписанияИсходящего();
	УстановитьЗаголовокФормы();
	УстановитьВидимостьМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлИсходящий(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Убрать";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущиеДанные = Элементы.ДокументыПакета.ТекущиеДанные;
	УдалитьФайлИсходящегоПакета(ТекущиеДанные);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлИсходящегоПакета(ТекущиеДанные) 
	
	Если ТекущиеДанные <> Неопределено Тогда
		 
		ДокументПакета	= Пакет.Документы[ДокументыПакета.Индекс(ТекущиеДанные)];
		ДокументЭДО		= ДокументПакета.Идентификаторы.ДокументЭДО;
		
		Если ЗначениеЗаполнено(ДокументЭДО) Тогда
			
			Если НЕ Пакет.СлужебнаяИнформация.Свойство("ПараметрыПереотправки") Тогда
				Пакет.СлужебнаяИнформация.Вставить("ПараметрыПереотправки", Новый Структура);
			КонецЕсли;
			
			Пакет.СлужебнаяИнформация.ПараметрыПереотправки.Вставить("ВыполнитьУдалениеНеактуальныхДокументовПакета", Истина);
			
		КонецЕсли;
		
		Пакет.Документы.Удалить(ДокументыПакета.Индекс(ТекущиеДанные));
		ДокументыПакета.Удалить(ТекущиеДанные);
		
		УстановитьДоступностьПодписанияИсходящего();
		
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры


// Перезаполнение пакета

&НаКлиенте
Процедура ПерезаполнитьИсходящий(Команда)
	
	ВыполнитьПерезаполнениеПакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПерезаполнениеПакета()
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= ?(ПакетОтправлен, "Перезаполнить и отправить", "Перезаполнить");
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетОтправлен И ЕстьДоступныеДляАннулированияДокументы() Тогда //форма была изначально открыта для отправленного пакета
		
		ТекстВопроса		= НСтр("ru = 'Запросить аннулирование ранее отправленного документа?'");
		Режим				= РежимДиалогаВопрос.ДаНетОтмена;
		КнопкаПоУмолчанию	= КодВозвратаДиалога.Да;
		Оповещение			= ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикПерезаполненияИсходящегоПакета", ЭтаФорма, Параметры);
		ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим,, КнопкаПоУмолчанию);
		
	Иначе
		ОбработчикПерезаполненияИсходящегоПакета(КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьДоступныеДляАннулированияДокументы()
	
	Если Направление = Направление().Исходящее Тогда
		ДокументыДляОбработки = ПолучитьДокументыПакета();
	Иначе
		ДокументыДляОбработки = Пакет.Документы;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ДействияЭДО = Ядро.Перечисление_ДействияЭДО();
	
	ДоступныеДанныеДляОбработки = Ядро.Документы_ДоступныеДляАннулированияДокументы(
		ДокументыДляОбработки,
		ДействияЭДО.Аннулировать
	);
	
	Результат = ДоступныеДанныеДляОбработки.Количество() > 0;
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Функция ПолучитьДокументыПакета()
	
	Результат	= Новый Массив;
	Ядро		= Модуль_ЯдроНаСервере();
	
	Для Каждого ТекДокумент Из Пакет.Документы Цикл
		
		Идентификаторы = ТекДокумент.Идентификаторы;
		
		СсылкаНаДокумент	= Идентификаторы.ДокументЭДО;
		LetterId			= Идентификаторы.LetterId;
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент)
			ИЛИ ЗначениеЗаполнено(LetterId) Тогда
			
			Документ = Ядро.ХранениеДанных_ДанныеДокумента(Идентификаторы);
			Ядро.Документы_ЗаполнитьХранилищеКонтента(Документ);
			
			Документ.Ключ			= ТекДокумент.Ключ;
			Документ.Тип			= ТекДокумент.Тип;
			Документ.Метаданные		= ТекДокумент.Метаданные;
			Документ.Заблокирован	= Пакет.Заблокирован;
			
			Результат.Добавить(Документ);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикПерезаполненияИсходящегоПакета(КодОтвета = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		
		ДействияЭДО = Модуль_ЯдроНаКлиенте().Перечисление_ДействияЭДО();
		АннулироватьВсеДокументыПакета = Истина;
		ДоступнаПереотправкаПакета = Ложь;
		ИмяПроцедурыОповещения = "ОбработчикПерезаполненияИсходящегоПакетаЗавершение";
		
		АннулироватьОтказатьВАннулировании(ДействияЭДО.Аннулировать, АннулироватьВсеДокументыПакета, ДоступнаПереотправкаПакета, ИмяПроцедурыОповещения);
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Нет Тогда
		
		ОбработчикПерезаполненияИсходящегоПакетаЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияИсходящегоПакетаЗавершение(Результат = Неопределено, ПараметрыОбработки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОбработки) Тогда
		ОповеститьОбИзмененииПакетаПоДокументам(ПараметрыОбработки.ДанныеДляОбработки);
		ОсновнаяФорма().УведомитьОбУспешномВыполненииОперации(ПараметрыОбработки);
		
		ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	КонецЕсли;
	
	ПерезаполнитьИсходящийПакет();
	
	Если Пакет.Документы.Количество() > 0 Тогда
		ТекущийДокумент = Пакет.Документы[0];
	КонецЕсли;
	
	ЗаполнитьФормуПоДаннымПакета();
	ОбновитьОтображениеДокумента();
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИсходящийПакет()
	
	ПроверитьЗаполнитьИдентификаторОтправленногоПакета();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ПерезаполненныйПакет = Ядро.СписокДокументов_ОбновитьДанныеСтрокиПакетаНаОтправку(СтрокаСписка);
	
	Если ПерезаполненныйПакет = Неопределено Тогда
		
		ЕстьОшибкиВалидации = ВыполнитьВалидациюПереотправляемогоПакета(СтрокаСписка);
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		Если ЕстьОшибкиВалидации Тогда
			
			ОсновнаяФорма.ОткрытьФормуСпискаОшибок();
			
		Иначе
			
			ОписаниеОповещения = Неопределено;
			ТекстПредупреждения = НСтр("ru='Не удалось переотправить пакет документов'");
			Таймаут = 0;
			Заголовок = "Переотправка пакета документов";
			
			ОсновнаяФорма.ПоказатьПредупреждениеПереопределенная(
				ОписаниеОповещения,
				ТекстПредупреждения,
				Таймаут,
				Заголовок
			);
			
		КонецЕсли;
		
	Иначе
		
		Пакет = ПерезаполненныйПакет;
		
		ЗаполнитьПараметрыПереотправки();
		
		ПакетОтправлен = Ложь;
		
		КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
		ДействиеМетрики = ?(ПакетОтправлен, "Перезаполнить и отправить", "Перезаполнить");
		
		Метрика_СтатистикаДляОрганизацииСИдентификаторомУчетногоДокументаПакета(КатегорияМетрики, ДействиеМетрики);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьВалидациюПереотправляемогоПакета(СтрокаСписка)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.СписокДокументов_ВалидацияПереотправляемогоПакета(СтрокаСписка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыПереотправки()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторОтправленногоПакета) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыПереотправки = Пакет.СлужебнаяИнформация.ПараметрыПереотправки;
	ПараметрыПереотправки.ПереотправляемыйПакет = ИдентификаторОтправленногоПакета;
	
	Если НЕ ПакетОтправлен Тогда
		
		ПараметрыПереотправки.ВыполнитьУдалениеНеактуальныхДокументовПакета = Истина;
		
		Если ЗначениеЗаполнено(ИдентификаторОтправленногоПакета.ПакетЭДО) Тогда
			
			Пакет.Идентификаторы.ПакетЭДО = ИдентификаторОтправленногоПакета.ПакетЭДО;
			СтрокаСписка.Пакет = ИдентификаторОтправленногоПакета.ПакетЭДО;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнитьИдентификаторОтправленногоПакета()
	
	Если ЗначениеЗаполнено(Пакет.Идентификаторы.ПакетЭДО) ИЛИ ПакетОтправлен Тогда
		
		ИдентификаторОтправленногоПакета = Пакет.Идентификаторы;
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторОтправленногоПакета) Тогда
		
		СтрокаСписка.Пакет = ИдентификаторОтправленногоПакета.ПакетЭДО;
		СтрокаСписка.LetterId = ИдентификаторОтправленногоПакета.LetterId;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыСДискаВВыбранныеПакеты(Команда)
	
	ДанныеЗаполнены = ДанныеИсходящегоПакетаЗаполнены();
	
	Если ДанныеЗаполнены Тогда
		Метрика_ДобавитьДокументыСДискаВВыбранныеПакеты();
		
		Закрыть(Пакет.Документы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьДокументыСДискаВВыбранныеПакеты()
	
	КатегорияМетрики		= "Добавление документа в пакет";
	ДействиеМетрики			= "Добавить в выбранные пакеты";
	КоличествоДокументов	= Пакет.Документы.Количество();
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Количество документов", КоличествоДокументов);
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		Неопределено,
		ДопПеременные
	);

КонецПроцедуры

//} ЗАПОЛНЕНИЕ ПАКЕТА


//{ ПОДПИСАНИЕ И ОТПРАВКА

// Исходящие документы

&НаКлиенте
Процедура ПодписатьИсходящий(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Только подписать";
	КоличествоДанных	= Пакет.Документы.Количество();
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнены = ДанныеИсходящегоПакетаЗаполнены();
	
	Если ДанныеЗаполнены Тогда
		
		ПакетПодписан = ПодписатьИсходящийПакет();
		
		Если ПакетПодписан Тогда
			СохранитьИсходящийПакет();
			ОповеститьОбИзмененииПакета();
			Состояние("Пакет подписан");
		КонецЕсли;
		
		Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодписатьИсходящийПакет()
	
	Результат = Ложь;
	
	ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет);
	
	ПакетГотовКПодписанию = Пакет_ГотовКПодписаниюНаСервере(Пакет);
	
	Если ПакетГотовКПодписанию Тогда
		
		Ядро = Модуль_ЯдроНаКлиенте();
		Ядро.Пакеты_ПодписатьПакетНаОтправку(Пакет);
		
		ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
		УстановитьВидимостьЭлементовФормы();
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Пакет_ГотовКПодписаниюНаСервере(Пакет)
	
	Ядро = Модуль_ЯдроНаСервере();
	Результат = Ядро.Пакеты_ПередПодписаниемПакетаНаОтправку(Пакет);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СохранитьИсходящийПакет()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Результат = Ядро.Пакеты_Сохранить(Пакет);
	
	ТекущийДокумент.Идентификаторы.ПакетЭДО = Результат;
	
	УстановитьВидимостьЭлементовФормы();
	
	Если ЗначениеЗаполнено(Пакет.ИдентификаторВида) Тогда
		ОсновнаяФорма().Элементы.СписокДокументов.ТекущиеДанные.Пакет = СтрокаСписка.Пакет;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьИсходящий(Команда)
	
	ДанныеЗаполнены = ДанныеИсходящегоПакетаЗаполнены();
	
	Если ДанныеЗаполнены Тогда
		
		КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
		ДействиеМетрики		= "Отправить";
		КоличествоДанных	= Пакет.Документы.Количество();
		Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
		
		Если НЕ Пакет.Шаблон Тогда
			
			Для Каждого ТекДокумент Из Пакет.Документы Цикл
				
				ДвоичныеДанныеПодписи = ТекДокумент.Документооборот.ХранилищеКонтента.Подпись.ДанныеПодписи;
				
				Если НЕ ЗначениеЗаполнено(ДвоичныеДанныеПодписи) Тогда
					ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, "Необходимо подписать документы отправляемого пакета!");
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПакетОтправлен = ВыполнитьОтправкуИсходящегоПакета();
		
		Если ПакетОтправлен Тогда
			Состояние("Пакет отправлен");
		Иначе
			Действие = ОсновнаяФорма().ДействияЭДО().Отправить;
			ОсновнаяФорма().ПоказатьОшибкиОбработкиДанных(Действие, ЭтаФорма);
		КонецЕсли;
		
		Метрика_СтатистикаДляОрганизацииСИдентификаторомУчетногоДокументаПакета(КатегорияМетрики, ДействиеМетрики);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьИсходящий(Команда)

	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Подписать и отправить";
	КоличествоДанных	= Пакет.Документы.Количество();
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		ДанныеЗаполнены = ДанныеИсходящегоПакетаЗаполнены();
	Иначе
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнены Тогда
		
		Оповещение = ОсновнаяФорма().НовыйОписаниеОповещения("ПослеВыбораМЧД", ЭтаФорма);
		
		ИдентификаторЯщика = Пакет.Идентификаторы.BoxId;
		
		Если ОсновнаяФорма().ТребуетсяМЧД(ИдентификаторЯщика) Тогда
			
			ДоступныеДействияЭДО = Модуль_ЯдроНаКлиенте().Перечисление_ДействияЭДО();
			КатегорияМетрикиДокумента = Метрика_НазваниеКатегорииПоНаправлению();
			
			ПараметрыОткрытияФормы = ОсновнаяФорма().ПараметрыФормыВыбораМЧД(
				"Подписание и отправка",
				"Подписать и отправить",
				ИдентификаторЯщика,
				ДоступныеДействияЭДО.ПодписатьИОтправить,
				КатегорияМетрикиДокумента,
				КонтрагентПоддерживаетМЧД);
			
			ОсновнаяФорма().ОткрытьФормуВыбораДоверенности(Оповещение, ПараметрыОткрытияФормы);
			
		Иначе
			
			РезультатВыбораМЧД = ОсновнаяФорма().РезультатВыбораМЧД(Истина, Неопределено);
			ОсновнаяФорма().ВыполнитьОбработкуОповещенияПереопределенная(Оповещение, РезультатВыбораМЧД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодписаниеИОтправкуИсходящегоПакета()
	
	ПакетОтправлен = Ложь;
	
	ПакетПодготовлен = ПакетПодготовленДляОтправкиНаСервере();
	
	Если ПакетПодготовлен Тогда
		
		ПакетПодписан = ПодписатьИсходящийПакет();
		
		Если ПакетПодписан Тогда
			ПакетОтправлен = ВыполнитьОтправкуИсходящегоПакета();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкаКонтроляДублированияОтправки() Тогда
		ПредложитьОтправитьПакетПовторно();
	Иначе
		ОбработатьРезультатОтправкиПакета(ПакетОтправлен);
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики = "Подписать и отправить";
	
	Метрика_СтатистикаДляОрганизацииСИдентификаторомУчетногоДокументаПакета(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаСервере
Функция ПакетПодготовленДляОтправкиНаСервере()
	
	Если ЭтоБольшойПакет() Тогда
		
		ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет);
		
		Ядро = Модуль_ЯдроНаСервере();
		
		Результат = Ядро.Пакеты_ПодготовитьОтправкуБольшогоПакета(Пакет);
		
	Иначе
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоБольшойПакет()
	
	Результат = Пакет.Документы.Количество() > МаксКоличествоДокументовMessageToPost;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуИсходящегоПакетаНаСервере()
	
	Результат = Ложь;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Модуль_Ядро.Пакеты_ВалидацияДокументов(Пакет);
	ОшибкиОтправки = Модуль_Ядро.СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ОшибкиОтправки");
	
	Если Не ЗначениеЗаполнено(ОшибкиОтправки) Тогда
		
		ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет);
		
		Результат = Модуль_Ядро.Пакеты_ОтправитьИСохранить(Пакет);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьОтправкуИсходящегоПакета()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ОшибкиОтправки = Модуль_Ядро.СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ОшибкиОтправки");
	
	Если ЗначениеЗаполнено(ОшибкиОтправки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ВыполнитьОтправкуИсходящегоПакетаНаСервере();
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	
	ОповеститьОбИзмененииПакета();
	
	Если Результат Тогда
		Закрыть();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОтправкиПакета(ПакетОтправлен)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Действие = ОсновнаяФорма.ДействияЭДО().ПодписатьИОтправить;
	
	Если ПакетОтправлен Тогда
		ОсновнаяФорма.Пакеты_ВыполнитьОчисткуУстаревшихПодготовленных(Действие);
		Состояние("Пакет подписан и отправлен");
	Иначе
		ОсновнаяФорма.ПоказатьОшибкиОбработкиДанных(Действие, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодписания(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("АдресЯщика", ТекущийДокумент.Идентификаторы.BoxId);
	ПараметрыОткрытия.Вставить("ТипКонтента", ТекущийДокумент.Тип.ТипКонтента);
	ПараметрыОткрытия.Вставить("ПокупательПродавец", "Продавец");
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияРедактированиеПолномочий",
		ЭтаФорма
	);
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"РедактированиеПолномочийУправляемая",
		ЭтаФорма,
		ПараметрыОткрытия,
		Оповещение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияРедактированиеПолномочий(ПолномочияПодписанта, ДополнительныеПараметры) Экспорт
	
	Если ПолномочияПодписанта = Неопределено
		Или ПакетОтправлен Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПерезаполнениеПакета();
	
КонецПроцедуры

// Обработчик открытия формы редактирования дополнительных сведений в формализованном контенте 
//
// Для формы редактирования дополнительных сведений передаются параметры: 
//	ДопСведенияНеизменяемые	- сведения, которые были сформированы автоматически в ПМ
//	ДопСведенияИзменяемые	- сведения, которые были добавлены вручную из формы пакета
//
&НаКлиенте
Процедура ЗаполнитьДополнительныеСведения(Команда)
	
	Метрика_ЗаписатьНажатие_ЗаполнитьДополнительныеСведения();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ключ", Строка(ТекущийДокумент.Ключ));
	
	ТекущиеДанныеПакета = ДокументыПакета.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанныеПакета.Количество() > 0 Тогда
		
		ДопСведенияТекущие		= ДопСведенияКонтента(ТекущийДокумент.СлужебнаяИнформация.Контент);
		ДопСведенияНеизменяемые	= ДопСведенияКонтента(ТекущиеДанныеПакета[0].Контент);
		ДопСведенияИзменяемые	= Новый Массив;
		
		КлючиДопСведений = "Key, Value";
		
		Для Индекс = 0 По ДопСведенияТекущие.ВГраница() Цикл
			
			Если Индекс > ДопСведенияНеизменяемые.ВГраница() Тогда 
			
				ДопСведение = Новый Структура(КлючиДопСведений);
				ЗаполнитьЗначенияСвойств(ДопСведение, ДопСведенияТекущие[Индекс]);
				ДопСведенияИзменяемые.Добавить(ДопСведение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДопСведенияНеизменяемые",	ДопСведенияНеизменяемые);
		ПараметрыФормы.Вставить("ДопСведенияИзменяемые",	ДопСведенияИзменяемые);
		
		ОписаниеЗакрытияФормы = ОсновнаяФорма().НовыйОписаниеОповещения("ЗаполнитьДополнительныеСведенияПослеЗакрытия", ЭтаФорма);
		
		ОсновнаяФорма().ОткрытьФормуДиадокМодально("ДополнительныеСведенияУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеЗакрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеСведенияПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		УстановитьДопСведенияКонтента(ТекущийДокумент.СлужебнаяИнформация.Контент, РезультатЗакрытия);
		
		ЗаполнитьФормуПоТекущемуДокументуНаСервере();
		ОбновитьОтображениеДокумента();
		
		ЗаполнитьФормализованныйКонтентXMLНаСервере(ТекущийДокумент);
		
		ОбработанныеДокументы = Новый Массив;
		ОбработанныеДокументы.Добавить(ТекущийДокумент);
		ОбновитьДокументыПакета(ОбработанныеДокументы);
		
		Метрика_ЗаполнитьДополнительныеСведения(РезультатЗакрытия.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДопСведенияКонтента(Контент)
	
	Если Контент.Свойство("AdditionalInfoId") 
		И Контент.AdditionalInfoId.Свойство("StructedAdditionalInfos") Тогда
		
		Результат = Контент.AdditionalInfoId.StructedAdditionalInfos;
		
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДопСведенияКонтента(Контент, ДопСведения)
	
	Если Контент.Свойство("AdditionalInfoId") 
		И Контент.AdditionalInfoId.Свойство("StructedAdditionalInfos") Тогда
		
		Контент.AdditionalInfoId.StructedAdditionalInfos = ДопСведения;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормализованныйКонтентXMLНаСервере(Документ)
	
	Модуль_ЯдроНаСервере().Документы_ЗаполнитьФормализованныйКонтентXML(Документ, Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ключ", Строка(Документ.Ключ));
	
	ТекущиеДанныеПакета = ДокументыПакета.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанныеПакета.Количество() > 0 Тогда
		
		СтрокаТЧ = ТекущиеДанныеПакета[0];
		
		ОшибкиВалидации = Модуль_ЯдроНаСервере().Документы_ОшибкиВалидацииДокумента(Документ);
		СтрокаТЧ.ОшибкиДокумента.ЗагрузитьЗначения(ОшибкиВалидации);
		СтрокаТЧ.ЕстьОшибки = ЗначениеЗаполнено(ОшибкиВалидации);
		
	КонецЕсли;
	
	СформироватьHTMLОшибкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_ЗаполнитьДополнительныеСведения()
	
	НазваниеДействий	= ОсновнаяФорма().Метрика_НазваниеДействий();
	
	НазваниеФормы		= Метрика_НазваниеФормы();
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= НазваниеДействий.ЗаполнитьДопСведения;
	СобытиеМетрики		= НазваниеДействий.НажатиеКнопки;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, СобытиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаполнитьДополнительныеСведения(КоличествоДопСведений)
	
	НазваниеДействий	= ОсновнаяФорма().Метрика_НазваниеДействий();
	
	НазваниеФормы		= Метрика_НазваниеФормы();
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= НазваниеДействий.ЗаполнитьДопСведения;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Количество", КоличествоДопСведений);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, ДопПеременные);
	
КонецПроцедуры

// Валидация исходящих документов

&НаКлиенте
Функция ДанныеИсходящегоПакетаЗаполнены()
	
	Результат = Истина;
	
	Если Пакет.Документы.Количество() = 0 Тогда
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, "В пакете нет документов!");
		Результат = Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокументыПакета Цикл
		
		Документ = ДокументПакета(СтрокаТЧ.Ключ);
		
		Если НЕ ЗначениеЗаполнено(Документ.ИдентификаторВида) Тогда
			
			ОшибкиВалидации = ВалидацияМетаданныхДокумента(Документ);
			
			СтрокаТЧ.ОшибкиДокумента.ЗагрузитьЗначения(ОшибкиВалидации);
			СтрокаТЧ.ЕстьОшибки = ЗначениеЗаполнено(ОшибкиВалидации);
			
			Если СтрокаТЧ.Ключ = ТекущийДокумент.Ключ Тогда
				СформироватьHTMLОшибкиДокумента();
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Результат И НЕ СтрокаТЧ.ЕстьОшибки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВалидацияМетаданныхДокумента(Документ)
	
	Результат = Новый Массив;
	
	ТипДокумента = Документ.Тип.ТипДокумента;
	
	ПроверяемыеМетаданные = Новый Структура;
	
	Если 	ТипДокумента = "AcceptanceCertificate"
		ИЛИ ТипДокумента = "Torg12"
		ИЛИ ТипДокумента = "ReconciliationAct"
		ИЛИ ТипДокумента = "ProformaInvoice"
		ИЛИ ТипДокумента = "SupplementaryAgreement"
		ИЛИ ТипДокумента = "PriceListAgreement"
		ИЛИ ТипДокумента = "ServiceDetails"
		ИЛИ ТипДокумента = "CertificateRegistry"
		ИЛИ ТипДокумента = "Contract" Тогда
		
		ПроверяемыеМетаданные.Вставить("DocumentNumber",	"номер документа"	);
		ПроверяемыеМетаданные.Вставить("DocumentDate",		"дату документа"	);
		
	КонецЕсли;
	
	Если ТипДокумента = "SupplementaryAgreement" Тогда
		ПроверяемыеМетаданные.Вставить("ContractDocumentNumber",	"номер договора");
		ПроверяемыеМетаданные.Вставить("ContractDocumentDate",		"дату договора");
	КонецЕсли;
	
	Если ТипДокумента = "Contract" И НЕ МетаданныеЦенаДоговораНеУказана Тогда
		ПроверяемыеМетаданные.Вставить("ContractPrice", "цену");
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПроверяемыеМетаданные Цикл 
		
		Значение		= Документ.Метаданные[КлючИЗначение.Ключ];
		Представление	= КлючИЗначение.Значение;
		
		ПроверитьФорматПоля(Результат, Значение, Представление, Истина);
		
	КонецЦикла;
	
	Если	ТипДокумента = "AcceptanceCertificate"
		ИЛИ ТипДокумента = "Torg12" Тогда
		
		ПроверитьФорматПоля(Результат, Документ.Метаданные.Grounds, "Основание", , , 500);
		
	КонецЕсли;
	
	ПроверитьФорматПоля(Результат, Документ.Комментарий, "Комментарий", , , 5000);
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ПроверитьФорматПоля(СписокОшибок, Значение, Представление = "", Обязательность = Ложь, МинимальнаяДлина = 0, МаксимальнаяДлина = 0)
	
	ТекстОшибки = ОшибкаФорматаПоля(Значение, Представление, Обязательность, МинимальнаяДлина, МаксимальнаяДлина);
	ДобавитьОшибкуВалидации(СписокОшибок, ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Функция ОшибкаФорматаПоля(Знач Значение, Представление = "", Обязательность = Ложь, МинимальнаяДлина = 0, МаксимальнаяДлина = 0)
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		Если Обязательность Тогда
			Результат = "Укажите " + Нрег(Представление);
		КонецЕсли;	
		
	ИначеЕсли СтрДлина(Значение) < МинимальнаяДлина Тогда
		
		Результат = Представление + " не может быть короче " + МинимальнаяДлина + " символов";
		
	ИначеЕсли СтрДлина(Значение) > МаксимальнаяДлина И МаксимальнаяДлина > 0 Тогда
		
		Результат = Представление + " не может быть длиннее " + МаксимальнаяДлина + " символов";
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОшибкуВалидации(СписокОшибок, ТекстОшибки)
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		КлючиОписанияОшибки = "ТекстОшибки, Обрамление";
		
		ОписаниеОшибки = Новый Структура(КлючиОписанияОшибки, "", "h3");
		СписокОшибок.Добавить(ОписаниеОшибки);
		
		ОписаниеОшибки = Новый Структура(КлючиОписанияОшибки, ТекстОшибки);
		СписокОшибок.Добавить(ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры


// Входящие документы

&НаКлиенте
Процедура Подписать(Команда)
	
	Если ЗаблокированныйПакет Тогда
		ДокументыДляОбработки = Пакет.Документы;
	Иначе
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ТекущийДокумент);
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики = "Подписать";
	КоличествоДанных = ДокументыДляОбработки.Количество();
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Вердикт = Ядро.Перечисление_ВариантыОтветаПоДокументу().Подписать;
	Действие = ОсновнаяФорма().ДействияЭДО().ПодписатьВходящий;
	ДокументыДляПодписания = Ядро.Документы_ДоступныеДляПодписанияВходящие(ДокументыДляОбработки, Действие);
	ВидыДокументовДляПодписания = Ядро.Документы_ВидыДокументовДляПодписания(ДокументыДляПодписания);
	
	BoxId = Пакет.Идентификаторы.BoxId;
	
	ПодписатьВходящий(BoxId);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьВходящий(BoxId)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЯщика",		BoxId);
	ПараметрыФормы.Вставить("ДатаДокумента",	ТекущийДокумент.Реквизиты.Дата);
	ПараметрыФормы.Вставить("ИдентификаторыДокумента",	ТекущийДокумент.Идентификаторы);
	ПараметрыФормы.Вставить("КонтрагентПоддерживаетМЧД", КонтрагентПоддерживаетМЧД);
	ПараметрыФормы.Вставить("КонтентОтвета", Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(ТекущийДокумент.СлужебнаяИнформация, "КонтентОтвета"));
	
	Для Каждого ВидДокументаПакета Из ВидыДокументовДляПодписания Цикл 
	
		ПараметрыФормы.Вставить("ТипДокумента",	ВидДокументаПакета.Значение.ТипДокумента);
		ПараметрыФормы.Вставить("ТипКонтента", 	ВидДокументаПакета.Значение.ТипКонтента);	
		
		ОписаниеЗакрытияФормы = ОсновнаяФорма().НовыйОписаниеОповещения("ПодписьОтказПодписиПослеЗакрытия", ЭтаФорма);
		Попытка
			ОсновнаяФорма().ОткрытьФормуДиадокМодально("ТитулПокупателяУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеЗакрытияФормы);
		Исключение
			ОсновнаяФорма().ВывестиСообщениеПользователю("Не удалось подписать " + ВидДокументаПакета.Значение.ТипДокумента,, ЭтаФорма);
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПодписи(Команда)
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики = "Отказать контрагенту в подписи";
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Вердикт = Ядро.Перечисление_ВариантыОтветаПоДокументу().ОтказатьВПодписи;
	
	BoxId = Пакет.Идентификаторы.BoxId;
	
	ОтказатьВПодписиВходящего(BoxId);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПодписиВходящего(BoxId) 
	
	ПредставлениеПодписанта = Модуль_ЯдроНаКлиенте().Подписант_ПредставлениеПодписанта(BoxId);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеПодписанта"	, ПредставлениеПодписанта);
	ПараметрыФормы.Вставить("АдресЯщика"				, BoxId);
	ПараметрыФормы.Вставить("ИдентификаторыДокумента"	, ТекущийДокумент.Идентификаторы);
	ПараметрыФормы.Вставить("КонтрагентПоддерживаетМЧД"	, КонтрагентПоддерживаетМЧД);
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма().НовыйОписаниеОповещения("ПодписьОтказПодписиПослеЗакрытия", ЭтаФорма);
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("ФормаОтветаПоДокументуУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеЗакрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьОтказПодписиПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет);
		ПодписьОтказПодписиОтправитьОтвет(РезультатЗакрытия, ДополнительныеПараметры);
	Иначе
		Вердикт = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодписьОтказПодписиОтправитьОтвет(РезультатЗакрытия, ДополнительныеПараметры)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	КонтрактМЧД = Ядро.СвойствоСтруктуры(РезультатЗакрытия.ДополнительныеПараметры, "КонтрактМЧД");
	ОбработанныеДокументы = СохранитьКонтентОтветаНаСервере(РезультатЗакрытия, КонтрактМЧД);
	ОбновитьДокументыПакета(ОбработанныеДокументы);
	
	ВариантыОтветаПоДокументу = Ядро.Перечисление_ВариантыОтветаПоДокументу();
	
	Если Вердикт = ВариантыОтветаПоДокументу.Подписать Тогда
		
		BoxId = Пакет.Идентификаторы.BoxId;
		ДопПараметрыЗакрытия = РезультатЗакрытия.ДополнительныеПараметры;
		ВидыДокументовДляПодписания.Удалить(BoxId + "_" + ДопПараметрыЗакрытия.ТипДокумента + "_" + ДопПараметрыЗакрытия.ТипКонтента);
		
	КонецЕсли;
	
	Если Вердикт = ВариантыОтветаПоДокументу.ОтказатьВПодписи
		ИЛИ Вердикт = ВариантыОтветаПоДокументу.Подписать И ВидыДокументовДляПодписания.Количество() = 0 Тогда // заполнили все виды титулов
		ОтправитьОтвет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьКонтентОтветаНаСервере(КонтентОтвета, КонтрактМЧД)
	
	Результат = Новый Массив;
	
	Если ЗаблокированныйПакет Тогда
		
		Для Каждого Документ Из Пакет.Документы Цикл
			
			СохранитьОтветВДокументПакета = Ложь;
			
			ТребуетсяПодпись = Найти(Документ.Статусы.Статус, "Требуется подпись") > 0;
			
			ЭтоСФ = Модуль_ЯдроНаСервере().Документы_ЭтоСФ(Документ);
							
			ВариантыОтветаПоДокументу = Модуль_ЯдроНаСервере().Перечисление_ВариантыОтветаПоДокументу();

			Если Вердикт = ВариантыОтветаПоДокументу.ОтказатьВПодписи
				И ТребуетсяПодпись Тогда
				
				СохранитьОтветВДокументПакета = Истина;
				
			ИначеЕсли Вердикт = ВариантыОтветаПоДокументу.Подписать
				И ТребуетсяПодпись
				И Документ.Тип.ТипДокумента = КонтентОтвета.ДополнительныеПараметры.ТипДокумента
				И Документ.Тип.ТипКонтента = КонтентОтвета.ДополнительныеПараметры.ТипКонтента Тогда
				
				СохранитьОтветВДокументПакета = Истина;
				
			ИначеЕсли Вердикт = ВариантыОтветаПоДокументу.ЗапроситьУточнение
				И ЭтоСФ Тогда
				
				СохранитьОтветВДокументПакета = Истина;
				
			КонецЕсли;
			
			Если СохранитьОтветВДокументПакета Тогда
				Документы_ЗаполнитьИнформациюОтправителяАктаСверки(ТекущийДокумент, Вердикт, КонтентОтвета);
				Модуль_ЯдроНаСервере().Документы_ЗаполнитьОтветПоДокументу(Документ, Вердикт, КонтентОтвета);
				Документы_ЗаполнитьМЧД(ТекущийДокумент, КонтрактМЧД);
				Результат.Добавить(Документ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Документы_ЗаполнитьИнформациюОтправителяАктаСверки(ТекущийДокумент, Вердикт, КонтентОтвета);
		Модуль_ЯдроНаСервере().Документы_ЗаполнитьОтветПоДокументу(ТекущийДокумент, Вердикт, КонтентОтвета);
		Документы_ЗаполнитьМЧД(ТекущийДокумент, КонтрактМЧД);
		Результат.Добавить(ТекущийДокумент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьОтвет()
	
	Если ЗаблокированныйПакет Тогда
		ДокументыДляОбработки = Пакет.Документы;
	Иначе
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ТекущийДокумент);
	КонецЕсли;
	
	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	ОбработанныеДокументы = МодульЯдро.Документы_ВыполнитьДействиеСДокументами(ДокументыДляОбработки);
	ОбновитьДокументыПакета(ОбработанныеДокументы);
	
	Если Вердикт = "Подписать" Тогда
		Действие = "ПодписатьВходящий";
	Иначе
		Действие = Вердикт;
	КонецЕсли;
	
	ИдентификаторЯщика = Пакет.Идентификаторы.BoxId;
	
	ПараметрыОбработки = ОсновнаяФорма().Новый_ПараметрыГрупповойОбработки(
			ДокументыДляОбработки,
			Действие,
			Неопределено,
			Неопределено,
			ЭтаФорма,
			ИдентификаторЯщика);
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Если ОбработанныеДокументы.Количество() > 0 Тогда
		ЗавершениеВыполненияОперации( , ПараметрыОбработки);
		ОбновитьОтображениеДокумента();
		УстановитьВидимостьЭлементовФормы();
	Иначе
		ОсновнаяФорма.ПоказатьОшибкиОбработкиДанных(Действие, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыПакета(ОбработанныеДокументы)
	
	Для Каждого Документ Из ОбработанныеДокументы Цикл
		
		Для сч = 0 По Пакет.Документы.ВГраница() Цикл
			
			Если Пакет.Документы[сч].Ключ = Документ.Ключ Тогда
				Пакет.Документы[сч] = Документ;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущийДокумент.Ключ = Документ.Ключ Тогда
			ТекущийДокумент = Документ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьУточнение(Команда)
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Вердикт = Ядро.Перечисление_ВариантыОтветаПоДокументу().ЗапроситьУточнение;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыФормы = ОсновнаяФорма.ПараметрыФормыВвода();
	ПараметрыФормы.Заголовок				 = "Запрос на уточнение";
	ПараметрыФормы.ТекстСообщения			 = "Комментарий по уточнению";
	ПараметрыФормы.ТекстКнопкиВыполнить		 = "Запросить уточнение";
	ПараметрыФормы.РежимПароля				 = Ложь;
	ПараметрыФормы.ВозможноПустоеЗначение	 = Ложь;
	ПараметрыФормы.ИдентификаторЯщика		 = Пакет.Идентификаторы.BoxId;
	ПараметрыФормы.ИдентификаторыДокумента	 = ТекущийДокумент.Идентификаторы;
	ПараметрыФормы.Действие					 = ОсновнаяФорма.ДействияЭДО().ЗапроситьУточнение;
	ПараметрыФормы.КатегорияМетрикиДокумента = Метрика_НазваниеКатегорииПоНаправлению();
	ПараметрыФормы.КонтрагентПоддерживаетМЧД = КонтрагентПоддерживаетМЧД;
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения("ОбработчикЗавершенияЗапросаУточнения", ЭтаФорма);
	ОсновнаяФорма.ОткрытьФормуДиадокМодально("ФормаВводаУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗавершенияЗапросаУточнения(РезультатУточнения, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(РезультатУточнения) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий		= РезультатУточнения.Комментарий;
	КонтрактМЧД		= РезультатУточнения.КонтрактМЧД;
	
	ОбработанныеДокументы = СохранитьКонтентОтветаНаСервере(Комментарий, КонтрактМЧД);
	ОбновитьДокументыПакета(ОбработанныеДокументы);
	ОтправитьОтвет();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОтправкаПакетаПовторно(ОтправитьПовторно)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Переотправка;
	ДействиеМетрики = СокрЛП(ОтправитьПовторно);
	КоличествоДокументов = Пакет.Документы.Количество();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Количество документов", КоличествоДокументов);
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
	
КонецПроцедуры

//} ПОДПИСАНИЕ И ОТПРАВКА


//{ АННУЛИРОВАНИЕ

&НаКлиенте
Процедура Аннулировать(Элемент)
	
	ДействиеАннулировать = ДействиеАннулировать();
	АннулироватьВсеДокументыПакета = Ложь;
	ИмяПроцедурыОповещения = "АннулироватьОтказатьВАннулированииЗавершение";
	
	Если Направление = Направление().Исходящее
		И ЗначениеЗаполнено(Пакет.ИдентификаторВида) Тогда
		
		ДоступнаПереотправкаПакета = Истина;
	Иначе
		ДоступнаПереотправкаПакета = Ложь;
	КонецЕсли;
	
	АннулироватьОтказатьВАннулировании(ДействиеАннулировать, АннулироватьВсеДокументыПакета, ДоступнаПереотправкаПакета, ИмяПроцедурыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВАннулировании(Элемент)
	
	АннулироватьВсеДокументыПакета = Ложь;
	ДоступнаПереотправкаПакета = Ложь;
	ИмяПроцедурыОповещения = "АннулироватьОтказатьВАннулированииЗавершение";
	
	АннулироватьОтказатьВАннулировании("ОтказатьВАннулировании", АннулироватьВсеДокументыПакета, ДоступнаПереотправкаПакета, ИмяПроцедурыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьОтказатьВАннулировании(Действие, АннулироватьВсеДокументыПакета, ДоступнаПереотправкаПакета, ИмяПроцедурыОповещения)

	Если ЗаблокированныйПакет
		ИЛИ АннулироватьВсеДокументыПакета Тогда
		
		Если Направление = Направление().Исходящее Тогда
			ДанныеДляОбработки = ПолучитьДокументыПакета();
		Иначе
			ДанныеДляОбработки = Пакет.Документы;
		КонецЕсли;	
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ДанныеДляОбработки.Добавить(ТекущийДокумент);
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики	 = ОсновнаяФорма().Метрика_НазваниеДействияАннулирования(Действие);
	КоличествоДанных = ДанныеДляОбработки.Количество();
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
	
	Отказ = Ложь;
	ПроверитьДоступностьВыполненияДействияЭДО(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЯщика = Пакет.Идентификаторы.BoxId;
	
	ПараметрыОбработки = ОсновнаяФорма().Новый_ПараметрыГрупповойОбработки(
		ДанныеДляОбработки,
		Действие,
		КатегорияМетрики,
		ДействиеМетрики,
		ЭтаФорма,
		ИдентификаторЯщика,
		КонтрагентПоддерживаетМЧД
	);
	
	ПараметрыОбработки.Вставить("ДоступнаПереотправкаПакета", ДоступнаПереотправкаПакета);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения(ИмяПроцедурыОповещения, ЭтаФорма, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОсновнаяФорма().ОбработатьДействиеПоАннулированию(, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьОтказатьВАннулированииЗавершение(Результат = Неопределено, ПараметрыОбработки) Экспорт
	
	ОповеститьОбИзмененииПакетаПоДокументам(ПараметрыОбработки.ДанныеДляОбработки);
	ОсновнаяФорма().УведомитьОбУспешномВыполненииОперации(ПараметрыОбработки);
	
	ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	УстановитьВидимостьЭлементовФормы();
	
	ДоступнаПереотправкаПакета = ПараметрыОбработки.ДоступнаПереотправкаПакета;
	
	Если ДоступнаПереотправкаПакета И ЕстьДоступныеДляАннулированияДокументы() Тогда
		ДоступнаПереотправкаПакета = Ложь;
	КонецЕсли;
	
	Если ДоступнаПереотправкаПакета Тогда
		ПредложитьПереотправитьПакет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьШаблон(Команда)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Действие = Ядро.Перечисление_ДействияЭДО().АннулироватьШаблон;
	
	МассивДокументов = Ядро.Документы_ДоступныеДляАннулированияДокументы(Пакет.Документы, Действие);
	
	Если Не ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = Направление().Исходящее Тогда
		ТекстКнопки = "Отозвать";
		ЗаголовокФормы = "Отзыв пакета-шаблона";
	Иначе
		ТекстКнопки = "Отклонить";
		ЗаголовокФормы = "Отклонение пакета-шаблона";
	КонецЕсли;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыФормы = ОсновнаяФорма.ПараметрыФормыВвода();
	ПараметрыФормы.Заголовок = ЗаголовокФормы;
	ПараметрыФормы.ТекстКнопкиВыполнить= ТекстКнопки;
	ПараметрыФормы.ВозможноПустоеЗначение = Истина;
	
	Обработчик = ОсновнаяФорма.НовыйОписаниеОповещения("АннулироватьШаблонПослеВводаКомментария", ЭтаФорма, МассивДокументов);
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально("ФормаВводаУправляемая", ЭтаФорма, ПараметрыФормы, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьШаблонПослеВводаКомментария(РезультатАннулирования, МассивДокументов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатАннулирования) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий		= РезультатАннулирования.Комментарий;
	
	Для Каждого Документ Из МассивДокументов Цикл
		Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", Комментарий);
	КонецЦикла;
	
	ОсновнаяФорма().ДополнитьДокументыСведениямиМЧДНаКлиенте(МассивДокументов, РезультатАннулирования.КонтрактМЧД);
	
	Действие = Модуль_ЯдроНаКлиенте().Перечисление_ДействияЭДО().АннулироватьШаблон;
	
	ОбработанныеДокументы = Модуль_ЯдроНаКлиенте().Документы_ВыполнитьДействиеСДокументами(МассивДокументов, Действие);
	
	ОбновитьДокументыПакета(ОбработанныеДокументы);
	
	ЗаполнитьФормуПоТекущемуДокументуНаСервере();
	
	ОбновитьОтображениеДокумента();
	
	УстановитьВидимостьЭлементовФормы();
	
	ОповеститьОбИзмененииПакета();
	
КонецПроцедуры

//} АННУЛИРОВАНИЕ


//{ СОГЛАСОВАНИЕ

&НаКлиенте
Процедура ПередатьНаСогласование(Команда)
	
	НачатьПроцессСогласования("ПередатьНаСогласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьНаПодпись(Команда)
	
	НачатьПроцессСогласования("ПередатьНаПодпись");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьПоМаршруту(Команда)
	
	НачатьПроцессСогласования("ПередатьПоМаршруту");
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	НачатьПроцессСогласования("Согласование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	НачатьПроцессСогласования("ОтказВСогласовании");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВЗапросеПодписи(Команда)
	
	НачатьПроцессСогласования("ОтказВЗапросеПодписи");
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроцессСогласования(РежимФормыСогласования)
	
	РежимыОтображения = РежимыОтображения();
	МодульЯдро = Модуль_ЯдроНаКлиенте();
	ОсновнаяФорма = ОсновнаяФорма();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		
		МодульЯдро.Пакеты_ЗаполнитьРеквизитыДокументов(Пакет);
		
		ДанныеЗаполнены = ДанныеИсходящегоПакетаЗаполнены();
		
	Иначе
		
		ДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	Если ДанныеЗаполнены Тогда
		
		ДанныеДляОбработки = Новый Массив;
		
		Если ПакетОтправлен Тогда
			
			Если ЗаблокированныйПакет Тогда
				ДанныеДляОбработки = Пакет.Документы;
			Иначе
				ДанныеДляОбработки = Новый Массив;
				ДанныеДляОбработки.Добавить(ТекущийДокумент);
			КонецЕсли;
			
		Иначе
			ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет);
			ДанныеДляОбработки.Добавить(Пакет);
		КонецЕсли;
		
		КатегорияМетрики = Метрика_НазваниеКатегорииПоНаправлению();
		ДействиеМетрики = ОсновнаяФорма.Метрика_НазваниеДействияМаршрутизации(РежимФормыСогласования);
		КоличествоДанных = ДанныеДляОбработки.Количество();
		Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
		
		ПараметрыОбработки = ОсновнаяФорма.Новый_ПараметрыГрупповойОбработки(
				ДанныеДляОбработки,
				РежимФормыСогласования,
				КатегорияМетрики,
				ДействиеМетрики,
				ЭтаФорма);
		
		ПараметрыОбработки.Вставить("BoxId", Пакет.Идентификаторы.BoxId);
		ПараметрыОбработки.Вставить("ДокументыОтправлены", ПакетОтправлен);
		
		ОсновнаяФорма.ОбработатьДействиеПоМаршрутизации( , ПараметрыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

//} СОГЛАСОВАНИЕ


//{ СОЗДАНИЕ И СОПОСТАВЛЕНИЕ

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУчетногоДокумента(Форма)
	
	ДокументУчетаПредставление = "";
	
	Если ЗначениеЗаполнено(Форма.ДокументВ1С) Тогда
		ДокументУчетаПредставление = ПредставлениеУчетногоДокумента(Форма.ДокументВ1С);
	КонецЕсли;
	
	Форма.Элементы.НадписьПредставлениеУчетногоДокумента.Заголовок = ДокументУчетаПредставление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеМетрикиСоздать()
	Возврат "Создать";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеМетрикиСопоставитьАвтоматически()
	Возврат "Сопоставить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеМетрикиСопоставитьВручную()
	Возврат "Выбор";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеМетрикиОтвязать()
	Возврат "Отвязать";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеМетрикиВыбратьВид()
	Возврат "Выбрать вид";
КонецФункции

&НаКлиенте
Функция КатегорияМетрикиСопоставлениеДокументов()
	
	Результат = ОсновнаяФорма().Метрика_НазваниеКатегории().СопоставлениеДокументов;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КатегорияМетрикиСозданиеДокументов()
	
	Результат = ОсновнаяФорма().Метрика_НазваниеКатегории().СозданиеДокументов;
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_ИнструкцияПоПрослеживаемымТоварам()
	
	КатегорияМетрики = Метрика_ДействиеВИсторииДокумента();
	ДействиеМетрики = Метрика_ДействиеНаЖатиеНаСсылкуИнструкцияПоПрослеживаемымТоварам();
	МеткаМетрики = Метрика_МеткаНажатиеНаСсылкуИнструкцияПоПрослеживаемымТоварам();
	НазваниеФормыИсторияДокумента = Метрика_ИмяФормыИсторияПоДокументу();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормыИсторияДокумента,
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ИнструкцияПоПрослеживаемымТоварам()
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеФормыИсторияДокумента = Метрика_ИмяФормыИсторияПоДокументу();
	КатегорияМетрики = Метрика_ДействиеВИсторииДокумента();
	ДействиеМетрики = Метрика_ДействиеНаЖатиеНаСсылкуИнструкцияПоПрослеживаемымТоварам();
	МеткаМетрики = "";
	Переменные = Неопределено;
	
	Модуль_ЯдроНаКлиенте = Модуль_ЯдроНаКлиенте();
	Модуль_ЯдроНаКлиенте.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		НазваниеФормыИсторияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_РаскрытиеБлокаДопИнформации()
	
	КатегорияМетрики = Метрика_ДействиеВИсторииДокумента();
	ДействиеМетрики = Метрика_НажатиеНаРаскрываемыйБлокТекста();
	МеткаМетрики = Метрика_МеткаНажатиеНаРаскрываемыйБлокТекста();
	НазваниеФормыИсторияДокумента = Метрика_ИмяФормыИсторияПоДокументу();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормыИсторияДокумента,
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_РаскрытиеБлокаДопИнформации()
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеФормыИсторияДокумента = Метрика_ИмяФормыИсторияПоДокументу();
	КатегорияМетрики = Метрика_ДействиеВИсторииДокумента();
	ДействиеМетрики = Метрика_НажатиеНаРаскрываемыйБлокТекста();
	МеткаМетрики = "";
	Переменные = Неопределено;
	
	Модуль_ЯдроНаКлиенте = Модуль_ЯдроНаКлиенте();
	Модуль_ЯдроНаКлиенте.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		ДействиеМетрики,
		МеткаМетрики,
		Переменные,
		НазваниеФормыИсторияДокумента);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НажатиеНаРаскрываемыйБлокТекста()
	
	Результат = "Нажатие на раскрываемый блок текста";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеВИсторииДокумента()
	
	Результат = "Действие в истории документа";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_МеткаНажатиеНаРаскрываемыйБлокТекста()
	
	Результат = "Нажать на раскрываемый блок текста: ""Дополнительная информация""";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеНаЖатиеНаСсылкуИнструкцияПоПрослеживаемымТоварам()
	
	Результат = "Открытие ""Что делать?"" прослеживаемости";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_МеткаНажатиеНаСсылкуИнструкцияПоПрослеживаемымТоварам()
	
	Результат = "Нажать на гиперссылку ""Что делать?"" в раскрываемом блоке прослеживаемости";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ИмяФормыИсторияПоДокументу()
	
	Результат = "История по документу";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_НачатьСозданиеДокументов()
	
	КатегорияМетрики = КатегорияМетрикиСозданиеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиСоздать();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_ВыбратьВидСоздаваемогоДокумента()
	
	КатегорияМетрики = КатегорияМетрикиСозданиеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиВыбратьВид();
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_СопоставитьДокументыАвтоматически()
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиСопоставитьАвтоматически();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_СопоставитьДокументыВручную()
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиСопоставитьВручную();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьНажатие_ОтменитьСопоставлениеДокументов()
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиОтвязать();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных = 1)
	
	НазваниеФормыДляМетрики = Метрика_НазваниеФормы();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_МассовоеДействиеНажатиеКнопки(НазваниеФормыДляМетрики,
		КатегорияМетрики,
		ДействиеМетрики,
		КоличествоДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики)
	
	НазваниеФормыДляМетрики = Метрика_НазваниеФормы();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормыДляМетрики,
		КатегорияМетрики,
		ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	
	Метрика_ЗаписатьНажатие_НачатьСозданиеДокументов();
	
	Если ИспользоватьФормуСозданияДокументов() Тогда
		ПоказатьФормуСозданияДокументовУчета();
	Иначе
		СоздатьДокумент();
		УстановитьВидимостьЭлементовОтраженияДокументаВУчете(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИспользоватьФормуСозданияДокументов()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Результат = Ядро.ПодключаемыйМодуль_ИспользоватьФормуСозданияДокументов();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСозданияДокументовУчета()
	
	ДанныеДляОбработки = Новый Массив;
	ДанныеДляОбработки.Добавить(ТекущийДокумент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ДанныеДляОбработки", ДанныеДляОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаВыполнения", ЭтаФорма);
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыСозданияДокументов",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ГлавнаяФорма.ОткрытьФормуДиадокМодально(
		"СозданиеДокументовУчетаУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияДокументов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ГлавнаяФорма = ОсновнаяФорма();
	ГлавнаяФорма.ПослеЗакрытияФормыСозданияДокументов(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент()
	
	ДанныеДляОбработки = Новый Массив;
	ДанныеДляОбработки.Добавить(ТекущийДокумент);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ПравилаСоздания = Ядро.Документы_СписокТиповДокументовДляСоздания(ТекущийДокумент);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаВыполнения", ЭтаФорма);
	ДополнительныеПараметры.Вставить("СписокТиповДокументовДляСоздания", ПравилаСоздания);
	
	ГлавнаяФорма = ОсновнаяФорма();
	Действие = ГлавнаяФорма.ДействияЭДО().СоздатьДокумент;
	КатегорияМетрики = КатегорияМетрикиСозданиеДокументов();
	ДействиеМетрики	 = ДействиеМетрикиСоздать();
	
	ПараметрыОбработки = ГлавнаяФорма.Новый_ПараметрыГрупповойОбработки(
		ДанныеДляОбработки,
		Действие,
		КатегорияМетрики,
		ДействиеМетрики,
		ЭтаФорма
	);
	
	ПараметрыОбработки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПослеВыбораОперации = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеВыбора_СоздатьДокумент",
		ЭтаФорма,
		ПараметрыОбработки
	);
	
	Если Не ЗначениеЗаполнено(ПравилаСоздания) Тогда 
		
		ИдентификаторОперации = Неопределено;
		СоздатьДокументПоВыбранномуТипу(ИдентификаторОперации, ПараметрыОбработки);
		
	ИначеЕсли ПравилаСоздания.Количество() = 1 Тогда 
		
		Метрика_ЗаписатьНажатие_ВыбратьВидСоздаваемогоДокумента();
		
		ВыбранныйЭлемент = ПравилаСоздания[0];
		ГлавнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(ПослеВыбораОперации, ВыбранныйЭлемент);
		
	Иначе
		
		Метрика_ЗаписатьНажатие_ВыбратьВидСоздаваемогоДокумента();
		
		ЗаголовокВыбораВидаДокумента = НСтр("ru = 'Выберите вид документа для создания'");
		
		ГлавнаяФорма.ПоказатьВыборЭлемента(
			ПравилаСоздания,
			ПослеВыбораОперации,
			ЗаголовокВыбораВидаДокумента
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбора_СоздатьДокумент(ВыбранныйЭлемент, ПараметрыОбработки) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторОперации = ВыбранныйЭлемент.Значение;
	СоздатьДокументПоВыбранномуТипу(ИдентификаторОперации, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоВыбранномуТипу(ИдентификаторОперации, ПараметрыОбработки)
	
	Если ИдентификаторОперации <> Неопределено Тогда
		
		КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
		ДействиеМетрики		= ДействиеМетрикиВыбратьВид();
		
		Переменные = Новый Соответствие;
		Переменные.Вставить("Вид", ИдентификаторОперации);
		
		Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
		
	КонецЕсли;
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	Если ИспользоватьФормуСозданияДокументов() Тогда
		ГлавнаяФорма.ОбработатьСоздатьДокументыВерсия2(ПараметрыОбработки);
	Иначе
		ПараметрыОбработки.ДополнительныеПараметры.Вставить("ИдентификаторОперации", ИдентификаторОперации);
		ГлавнаяФорма.ОбработатьСоздатьДокументы(, ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьДокументАвтоматическиНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	ДокументВ1С = Ядро.Документы_СопоставитьДокумент(ТекущийДокумент);
	Ядро.Метрика_ДобавитьСтатистику_СопоставлениеДокументов(ТекущийДокумент, ДействиеМетрикиСопоставитьАвтоматически());
	
	ТекущийДокумент.ДокументУчета = ДокументВ1С;
	ЗаполнитьПредставлениеУчетногоДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДокументАвтоматически(Команда)
	
	Метрика_ЗаписатьНажатие_СопоставитьДокументыАвтоматически();
	
	СопоставитьДокументАвтоматическиНаСервере();
	
	УстановитьВидимостьЭлементовОтраженияДокументаВУчете(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ДокументВ1С) Тогда
		ОповеститьОбИзмененииПакета();
		ОбновитьРезультатСверкиФормализованногоАктаСверки();
	Иначе
		
		ГлавнаяФорма = ОсновнаяФорма();
		Действие = ГлавнаяФорма.ДействияЭДО().СопоставитьДокумент;
		ГлавнаяФорма.ПоказатьОшибкиОбработкиДанных(Действие, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДокументВручную(Команда)
	
	Метрика_ЗаписатьНажатие_СопоставитьДокументыВручную();
	
	НачатьВыборДокументаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьДокумент(Команда)
	
	Метрика_ЗаписатьНажатие_ОтменитьСопоставлениеДокументов();
	
	РазорватьСвязьСДокументомНаСервере();
	ОповеститьОбИзмененииПакета();
	ОбновитьРезультатСверкиФормализованногоАктаСверки();
	
КонецПроцедуры

&НаСервере
Процедура РазорватьСвязьСДокументомНаСервере()
	
	ДокументВ1С = Неопределено;
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.Документы_ОтвязатьДокумент(ТекущийДокумент.Идентификаторы);
	Ядро.Пакеты_ОтвязатьПакетОтДокументаУчета(Пакет.Идентификаторы);
	Ядро.Метрика_ДобавитьСтатистику_СопоставлениеДокументов(ТекущийДокумент, ДействиеМетрикиОтвязать());
	
	ТекущийДокумент.ДокументУчета = ДокументВ1С;
	ЗаполнитьПредставлениеУчетногоДокумента(ЭтаФорма);
	УстановитьВидимостьЭлементовОтраженияДокументаВУчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСУчетнымДокументом(СсылкаНаОбъект)
	
	УстановитьСвязьСДокументомНаСервере(СсылкаНаОбъект);
	ОповеститьОбИзмененииПакета();
	ОбновитьРезультатСверкиФормализованногоАктаСверки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьСДокументомНаСервере(СсылкаНаОбъект)
	
	ДокументВ1С = СсылкаНаОбъект;
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.Документы_УстановитьСвязьСДокументом(ТекущийДокумент.Идентификаторы, СсылкаНаОбъект);
	Ядро.Документы_ОбновитьКомментарийДокументаУчета(ТекущийДокумент);
	Ядро.Метрика_ДобавитьСтатистику_СопоставлениеДокументов(ТекущийДокумент, ДействиеМетрикиСопоставитьВручную());
	
	ТекущийДокумент.ДокументУчета = СсылкаНаОбъект;
	ЗаполнитьПредставлениеУчетногоДокумента(ЭтаФорма);
	УстановитьВидимостьЭлементовОтраженияДокументаВУчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СписокВыбораТиповДокументовУчета()
	
	СписокВыбора = Новый СписокЗначений;
	
	ДобавитьПредопределенныеТипыДокументовУчета(СписокВыбора);
	ДобавитьПроизвольныеТипыДокументовУчета(СписокВыбора);
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредопределенныеТипыДокументовУчета(СписокВыбора)
	
	Если Не ЗначениеЗаполнено(ПравилаСопоставленияЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Правило Из ПравилаСопоставленияЭДО Цикл
		СписокВыбора.Добавить(Правило.Значение, Правило.Значение.СинонимМетаданных);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроизвольныеТипыДокументовУчета(СписокВыбора)
	
	СписокВыбора.Добавить(
		ПравилоСопоставленияПроизвольныйДокумент(),
		"[Выбрать вид документа]"
	);
	
	СписокВыбора.Добавить(
		ПравилоСопоставленияПроизвольныйСправочник(), 
		"[Выбрать вид справочника]"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборДокументаУчета()
	
	СписокВыбора = СписокВыбораТиповДокументовУчета();
	
	ГлавнаяФорма = ОсновнаяФорма();
	Обработчик = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПродолжитьВыборДокументаУчетаПослеВыбораТипа",
		ЭтаФорма
	);
	
	ГлавнаяФорма.ПоказатьВыборЭлемента(
		СписокВыбора,
		Обработчик, 
		НСтр("ru = 'Выберите тип документа учета'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыборДокументаУчетаПослеВыбораТипа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ВыбранныйЭлемент.Значение;
	
	Если Правило = ПравилоСопоставленияПроизвольныйДокумент()
		Или Правило = ПравилоСопоставленияПроизвольныйСправочник() Тогда
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		ПравилаСопоставленияЭДО = Ядро.Документы_ПравилаСопоставленияПоВидуМетаданных(Правило);
		НачатьВыборДокументаУчета();
		
	Иначе
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
		ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ДокументВ1С);
		ПараметрыФормыВыбора.Вставить("Отбор", Правило.Отбор);
		
		ИмяФормыВыбора = Правило.ИмяМетаданных + ".ФормаВыбора";
		
		ОткрытьФормуВыбораДокументаУчета(ИмяФормыВыбора, ПараметрыФормыВыбора, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаУчета(ИмяФормы, Параметры, Владелец)
	
	ОсновнаяФорма().смв().смв_ОткрытьФорму(ИмяФормы, Параметры, Владелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУчетныйДокумент()
	
	Если Не ЗначениеЗаполнено(ДокументВ1С) Тогда
		Возврат;
	КонецЕсли;
	
	ГлавнаяФорма = ОсновнаяФорма();
	ГлавнаяФорма.ПоказатьЗначениеПереопределенная(ДокументВ1С);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПредставлениеУчетногоДокументаНажатие(Элемент)
	
	ПоказатьУчетныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуРеквизитовДокументаУчета(ДокументУчета)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	РеквизитыДокументаУчета = Ядро.Документы_Сопоставление_ПолучитьРеквизитыДляПроверки(ДокументУчета);
	
	ЕстьОтличия = ЕстьОтличияВРеквизитахДокумента(РеквизитыДокументаУчета);
	
	Если ЕстьОтличия Тогда
		
		ЗадатьВопросОбОбновленииРеквизитовУчетногоДокумента(ДокументУчета, РеквизитыДокументаУчета);
		
	Иначе
		
		УстановитьСвязьСУчетнымДокументом(ДокументУчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст вопроса об отличиях реквизитов в документе
// Параметры:
//  ПредставлениеДокумента - Строка - Представление документа для которого задается вопрос
//  РеквизитыИСоответствие - Структура - Коллекция в которой находятся реквизиты и их соответствия
//  	- СоответствиеРеквизитов - Структура - соответствия между реквизитами ЭД и реквизитами учетного документа
//  	- РеквизитыДокументаЭД - Структура - реквизиты электронного документа
//  	- РеквизитыДокументаУчета - Структура - реквизиты документа учета
//
// Возвращаемое значение:
//  ТекстВопроса - Строка - Текст вопроса с отличающимися реквизитами
&НаКлиенте
Функция ТекстВопросаОбОбновленииРеквизитов(ПредставлениеДокументаЛокально, РеквизитыДокументаУчета)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ТекстВопроса = НСтр("ru = 'Значения реквизитов ""%1"" отличаются от данных электронного документа:'");
	ТекстВопроса = Ядро.Общее_ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеДокументаЛокально);
	
	ШаблонСтрокиОтличий = НСтр("ru = '%1 входящего документа: %2; %1 электронного документа: %3'");
	
	Если РеквизитыДокументаУчета.Дата <> ТекущийДокумент.Реквизиты.Дата Тогда
		
		ТекстОтличия = Ядро.Общее_ПодставитьПараметрыВСтроку(ШаблонСтрокиОтличий
				, "Дата"
				, Формат(РеквизитыДокументаУчета.Дата, "ДФ=dd.MM.yyyy; ДП=-")
				, Формат(ТекущийДокумент.Реквизиты.Дата, "ДФ=dd.MM.yyyy; ДП=-"));
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстОтличия;
		
	КонецЕсли;
	
	Если РеквизитыДокументаУчета.Номер <> ТекущийДокумент.Реквизиты.Номер Тогда
		
		ТекстОтличия = Ядро.Общее_ПодставитьПараметрыВСтроку(ШаблонСтрокиОтличий
				, "Номер"
				, РеквизитыДокументаУчета.Номер
				, ТекущийДокумент.Реквизиты.Номер);
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстОтличия;
		
	КонецЕсли;
	
	ТекстВопроса = ТекстВопроса + Символы.ПС + "Обновить реквизиты?";
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОбОбновленииРеквизитовУчетногоДокумента(ДокументУчета, РеквизитыДокументаУчета)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументУчета", ДокументУчета);
	
	ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ЗавершитьУстановкуСвязиСЭлектроннымДокументом",
			ЭтаФорма,
			ПараметрыОповещения
		);
	
	ПредставлениеДокументаЛокально = ПредставлениеУчетногоДокумента(ДокументУчета);
	
	ТекстВопроса = ТекстВопросаОбОбновленииРеквизитов(
			ПредставлениеДокументаЛокально,
			РеквизитыДокументаУчета);
	
	Режим = РежимДиалогаВопрос.ДаНетОтмена;
	КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(ОповещениеОЗавершении, ТекстВопроса, Режим, , КнопкаПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтличияВРеквизитахДокумента(РеквизитыДокументаУчета)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыДокументаУчета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыДокументаУчета.Номер <> ТекущийДокумент.Реквизиты.Номер
		ИЛИ РеквизитыДокументаУчета.Дата <> ТекущийДокумент.Реквизиты.Дата Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьУстановкуСвязиСЭлектроннымДокументом(Результат, ПараметрыОбработчика) Экспорт
	
	ДокументУчета = ПараметрыОбработчика.ДокументУчета;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Метрика_НажатиеКнопки_НеОбновлятьРеквизитыУчетногоДокумента(ДокументУчета);
		
		УстановитьСвязьСУчетнымДокументом(ДокументУчета);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Метрика_НажатиеКнопки_ОбновитьРеквизитыУчетногоДокумента(ДокументУчета);
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		Ядро.Документы_Сопоставление_ОбновитьРеквизитыУчетногоДокумента(
			ДокументУчета,
			ТекущийДокумент.Реквизиты.Номер,
			ТекущийДокумент.Реквизиты.Дата
		);
		
		УстановитьСвязьСУчетнымДокументом(ДокументУчета);
		
	ИначеЕсли Результат = Неопределено
		ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		
		Метрика_НажатиеКнопки_ОтменитьСопоставлениеДокументов(ДокументУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПравилоСопоставленияПроизвольныйСправочник()
	Возврат "Справочники";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПравилоСопоставленияПроизвольныйДокумент()
	Возврат "Документы";
КонецФункции

&НаКлиенте
Процедура Метрика_НажатиеКнопки_ОбновитьРеквизитыУчетногоДокумента(ДокументУчета)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Метрика_НазваниеДействий = Ядро.Метрика_НазваниеДействий();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Тип документа", ТекущийДокумент.Тип.ТипДокумента);
	Переменные.Вставить("Тип документа 1С", Строка(ТипЗнч(ДокументУчета)));
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики = Метрика_НазваниеДействий.ИзменениеРеквизитов;
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеКнопки_НеОбновлятьРеквизитыУчетногоДокумента(ДокументУчета)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Метрика_НазваниеДействий = Ядро.Метрика_НазваниеДействий();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Тип документа", ТекущийДокумент.Тип.ТипДокумента);
	Переменные.Вставить("Тип документа 1С", Строка(ТипЗнч(ДокументУчета)));
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики = Метрика_НазваниеДействий.ОтказОтИзмененияРеквизитов;
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеКнопки_ОтменитьСопоставлениеДокументов(ДокументУчета)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Метрика_НазваниеДействий = Ядро.Метрика_НазваниеДействий();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Тип документа", ТекущийДокумент.Тип.ТипДокумента);
	Переменные.Вставить("Тип документа 1С", Строка(ТипЗнч(ДокументУчета)));
	
	КатегорияМетрики = КатегорияМетрикиСопоставлениеДокументов();
	ДействиеМетрики = Метрика_НазваниеДействий.ОтказОтСопоставления;
	
	Метрика_НажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультатСверкиФормализованногоАктаСверки()
	
	Если НЕ ЭтоФормализованныйАктСверки405(ТекущийДокумент.Тип.ТипКонтента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = Направление().Исходящее Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент.СлужебнаяИнформация.Вставить("КонтентОтвета", Неопределено);
	
	Если ЗначениеЗаполнено(ДокументВ1С) Тогда
		
		СформироватьОтветныйТитулФормализованногоАктаСверки();
		
		ЗаполнитьОшибкиОтветногоТитула();
		
		СформироватьHTMLОшибкиДокумента();
		
	КонецЕсли;
	
	ОбновитьОтображениеДокумента();
	
КонецПроцедуры

//} СОЗДАНИЕ И СОПОСТАВЛЕНИЕ


//{ ДОБАВЛЕНИЕ ДОКУМЕНТОВ

&НаСервере
Функция ЗаполнитьСписокПолуформализованныхТиповДокументов()

	СписокВыбора = Элементы.ТипДокумента.СписокВыбора;
	
	СписокВыбора.Добавить("Nonformalized",			"Неформализованный");
	СписокВыбора.Добавить("AcceptanceCertificate",	"Акт выполненных работ");
	СписокВыбора.Добавить("ReconciliationAct",		"Акт сверки");
	СписокВыбора.Добавить("ServiceDetails",			"Детализация");
	СписокВыбора.Добавить("Contract",				"Договор");
	СписокВыбора.Добавить("SupplementaryAgreement",	"Доп. соглашение к договору");
	СписокВыбора.Добавить("Torg12",					"Накладная");
	СписокВыбора.Добавить("PriceListAgreement",		"Протокол согласования цены");
	СписокВыбора.Добавить("CertificateRegistry",	"Реестр сертификатов");
	СписокВыбора.Добавить("ProformaInvoice",		"Счет на оплату");
	
	Возврат СписокВыбора;

КонецФункции			

&НаКлиенте
Процедура ЗаполнитьМетаданныеТекущегоДокумента()
	
	Перем ПараметрыОтправки;
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ТекущийДокумент.Метаданные;
	
	МетаданныеДокумента.Свойство("DocumentDate", МетаданныеДата);
	МетаданныеДокумента.Свойство("ContractDocumentDate", МетаданныеДатаДоговора);
	МетаданныеДокумента.Свойство("DocumentNumber", МетаданныеНомер);
	МетаданныеДокумента.Свойство("ContractDocumentNumber", МетаданныеНомерДоговора);
	МетаданныеДокумента.Свойство("Grounds", МетаданныеОснование);
	МетаданныеДокумента.Свойство("TotalVat", МетаданныеСуммаНДС);
	МетаданныеДокумента.Свойство("TotalSum", МетаданныеСуммаСНДС);
	МетаданныеДокумента.Свойство("ContractType", МетаданныеТипДоговора);
	МетаданныеДокумента.Свойство("ContractPrice", МетаданныеЦенаДоговора);
	
	МетаданныеЦенаДоговораНеУказана = НЕ ЗначениеЗаполнено(МетаданныеЦенаДоговора);
	МетаданныеБезНДС = НЕ ЗначениеЗаполнено(МетаданныеСуммаНДС);
	
	МетаданныеКомментарий = ТекущийДокумент.Комментарий;
	
	Если ТекущийДокумент.СлужебнаяИнформация.Свойство("ПараметрыОтправки", ПараметрыОтправки) Тогда
		МетаданныеЗапроситьПодпись = ПараметрыОтправки.ЗапрашиватьОтветнуюПодпись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики = "Выбрать тип";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
		Тип = "Nonformalized";
	КонецЕсли;
	
	УстановитьВидимостьМетаданных();
	
	Документ = Ядро.Пакеты_НовыйДокумент(Пакет, Тип);
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Тип = Документ.Тип;
	ТекущийДокумент.Метаданные = Документ.Метаданные;
	
	Если ТекущийДокумент.Метаданные.Свойство("FileName") Тогда
		ТекущийДокумент.Метаданные.FileName = ТекущийДокумент.ИмяФайла;
	КонецЕсли;
	
	МетаданныеНомерПриИзменении(Неопределено);
	МетаданныеДатаПриИзменении(Неопределено);
	
	МетаданныеДатаДоговора = Неопределено;
	МетаданныеНомерДоговора = Неопределено;
	МетаданныеОснование = Неопределено;
	МетаданныеСуммаНДС = Неопределено;
	МетаданныеСуммаСНДС = Неопределено;
	МетаданныеТипДоговора = Неопределено;
	МетаданныеЦенаДоговора = Неопределено;
	МетаданныеЦенаДоговораНеУказана = Истина;
	МетаданныеБезНДС = Истина;
	
	МетаданныеЗапроситьПодпись = Тип = "AcceptanceCertificate"
								ИЛИ Тип = "PriceListAgreement";
	
	ТекущийДокумент.СлужебнаяИнформация.ПараметрыОтправки.ЗапрашиватьОтветнуюПодпись = МетаданныеЗапроситьПодпись;
	
	ДопПеременные = Новый Структура;
	ДопПеременные.Вставить("Тип", Тип);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, ДопПеременные);
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеКомментарийПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Комментарий";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Комментарий = МетаданныеКомментарий;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеЗапроситьПодписьПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Запросить подпись контрагента";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.СлужебнаяИнформация.ПараметрыОтправки.ЗапрашиватьОтветнуюПодпись = МетаданныеЗапроситьПодпись;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Запросить подпись контрагента", МетаданныеЗапроситьПодпись);
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики, Переменные);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеНомерПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Номер";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.DocumentNumber = МетаданныеНомер;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеДатаПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Дата";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.DocumentDate = МетаданныеДата;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеОснованиеПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Основание";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.Grounds = МетаданныеОснование;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеСуммаСНДСПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ДобавлениеДокументаВПакет;
	ДействиеМетрики		= "Сумма с НДС";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.TotalSum = МетаданныеСуммаСНДС;
	
	Метрика_СтатистикаДляОрганизации(КатегорияМетрики, ДействиеМетрики);	
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеСуммаНДСПриИзменении(Элемент)
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.TotalVat = МетаданныеСуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеЦенаДоговораПриИзменении(Элемент)
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.ContractPrice = МетаданныеЦенаДоговора;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеТипДоговораПриИзменении(Элемент)
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.ContractType = МетаданныеТипДоговора;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеНомерДоговораПриИзменении(Элемент)
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.ContractDocumentNumber = МетаданныеНомерДоговора;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеДатаДоговораПриИзменении(Элемент)
	
	ТекущийДокумент = ДокументПакета(ТекущийДокумент.Ключ);
	ТекущийДокумент.Метаданные.ContractDocumentDate = МетаданныеДатаДоговора;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеБезНДСПриИзменении(Элемент)
	
	Если МетаданныеБезНДС Тогда
		МетаданныеСуммаНДС = 0;
		МетаданныеСуммаНДСПриИзменении(Неопределено);
	КонецЕсли;
	
	Элементы.ТорговыйДокумент_СуммаНДС.Доступность = НЕ МетаданныеБезНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеЦенаДоговораНеУказанаПриИзменении(Элемент)
	
	Если МетаданныеЦенаДоговораНеУказана Тогда
		МетаданныеЦенаДоговора = 0;
		МетаданныеЦенаДоговораПриИзменении(Неопределено);
	КонецЕсли;
	
	Элементы.Договор_ЦенаДоговора.Доступность			= НЕ МетаданныеЦенаДоговораНеУказана;
	Элементы.Договор_ЦенаДоговора.ОтметкаНезаполненного	= НЕ МетаданныеЦенаДоговораНеУказана;
	
КонецПроцедуры

//} ДОБАВЛЕНИЕ ДОКУМЕНТОВ


//{ ПРОЧИЕ ДЕЙСТВИЯ

&НаКлиенте
Процедура ПередатьВПодразделение(Команда)
	
	Если ЗаблокированныйПакет Тогда
		ДанныеДляОбработки = Пакет.Документы;
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ДанныеДляОбработки.Добавить(ТекущийДокумент);
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииПоНаправлению();
	ДействиеМетрики		= "Передать в подразделение";
	КоличествоДанных	= ДанныеДляОбработки.Количество();
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных);
	
	Действие = ОсновнаяФорма().ДействияЭДО().ПередатьВПодразделение;
	
	ПараметрыОбработки = ОсновнаяФорма().Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики, ЭтаФорма);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ЗавершениеВыполненияОперации", ЭтаФорма, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОсновнаяФорма().ОбработатьПередатьВПодразделение(, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменССерверомДиадокаНажатие(Элемент)
	
	Закрыть();
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().ОбменССервером;
	ДействиеМетрики		= "Обмен с сервером";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОсновнаяФорма().ВыполнитьОбменССерверомСФормойПрогресса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВДругойПрограмме(Команда)
	
	ИмяВременногоФайла	= СохранитьФайлПакетаНаДиск();
	ИмяФайла			= ТекущийДокумент.ИмяФайла;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ОсновнаяФорма().Обработчик_ОткрытьФайл(ИмяВременногоФайла, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакПереотправитьДокументСтандартаНажатие(Элемент)
	
	Метрика_КакПереотправитьДокумент();
	
	ПоказатьФормуКакПереотправитьДокументСтандарта();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакПереотправитьДокументУМНажатие(Элемент)
	
	Метрика_КакПереотправитьДокумент();
	
	ПоказатьФормуКакПереотправитьДокументУМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуКакПереотправитьДокументСтандарта()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "КакПереотправитьДокументСтандарта");
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы
	);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуКакПереотправитьДокументУМ()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "КакПереотправитьДокументУМ");
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы
	);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_КакПереотправитьДокумент()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	КатегорияМетрики	= Ядро.Метрика_НазваниеКатегории().КакПереотправитьДокумент;
	ДействиеМетрики		= Ядро.Метрика_НазваниеДействий().ОткрытиеПомощника;
	
	ИдентификаторПользователя = Ядро.ИдентификаторТекущегоПользователяСервиса();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ИдентификаторПользователя = "Пользователь не авторизован";
	КонецЕсли;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("UserID", ИдентификаторПользователя);
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		Неопределено,
		ДопПеременные
	);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультатСверки(Команда)
	
	ЗаполнитьПредставлениеУчетногоДокумента(ЭтаФорма);
	ОбновитьРезультатСверкиФормализованногоАктаСверки();
	
КонецПроцедуры

//} ПРОЧИЕ ДЕЙСТВИЯ


//{ СЛУЖЕБНЫЕ ФУНКЦИИ

// Получает значения реквизитов, которые требуются для формирования
// пользовательского представления этого объекта.
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - Объект, представление которого нужно сформировать.
// 
// Возвращаемое значение:
//  Структура - поля для формирования представления объекта:
//    * СистемноеПредставление - Строка - Системное представление объекта.
//    * Проведен - Булево - Истина, если документ проведен.
//    * ПометкаУдаления - Булево - Истина, если объект помечен на удаление.
//    * ПроведениеРазрешено - Булево - Истина, если это документ, который может быть проведен.
//
&НаСервереБезКонтекста
Функция ПоляПредставленияУчетногоДокумента(СсылкаНаОбъект)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Т.Ссылка) КАК СистемноеПредставление,
	|	Т.ПометкаУдаления КАК ПометкаУдаления,
	|	&ВыражениеПроведен КАК Проведен
	|ИЗ
	|	&ПолноеИмяТаблицы КАК Т
	|ГДЕ
	|	Т.Ссылка = &СсылкаНаОбъект";
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта);
	
	Если ЭтоДокумент Тогда
		ПроведениеРазрешено = (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
		ВыражениеПроведен = "Т.Проведен";
	Иначе
		ПроведениеРазрешено = Ложь;
		ВыражениеПроведен = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", МетаданныеОбъекта.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПроведен", ВыражениеПроведен);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Результат.Вставить("СистемноеПредставление", Выборка.СистемноеПредставление);
	Результат.Вставить("ПроведениеРазрешено", ПроведениеРазрешено);
	Результат.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
	Результат.Вставить("Проведен", Выборка.Проведен);
	
	Возврат Результат;
	
КонецФункции

// Формирует представление документа с учетом его состояния проведения и пометки удаления.
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект, для которого нужно сформировать представление.
// 
// Возвращаемое значение:
//  Строка - представление объекта.
//
// Пример:
//  ПредставлениеУчетногоДокумента(ДокументСсылка) = "Приходная накладная 1 от 02.03.2021 (не проведен)"
//  ПредставлениеУчетногоДокумента(СправочникСсылка) = "<Наименование элемента> (удален)"
//
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУчетногоДокумента(СсылкаНаОбъект)
	
	РеквизитыОбъекта = ПоляПредставленияУчетногоДокумента(СсылкаНаОбъект);
	
	Если РеквизитыОбъекта.ПометкаУдаления Тогда
		СостояниеОбъекта = НСтр("ru='(удален)'");
	ИначеЕсли РеквизитыОбъекта.ПроведениеРазрешено
		И Не РеквизитыОбъекта.Проведен Тогда
		СостояниеОбъекта = НСтр("ru='(не проведен)'");
	Иначе
		СостояниеОбъекта = "";
	КонецЕсли;
	
	Результат = СокрЛП(РеквизитыОбъекта.СистемноеПредставление);
	Если ЗначениеЗаполнено(СостояниеОбъекта)
		И Найти(Результат, СостояниеОбъекта) = 0 Тогда
		Результат = Результат + " " + СостояниеОбъекта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДвоичныеДанныеДокумента(ДвоичныеДанныеИлиАдрес)
	
	Если ТипЗнч(ДвоичныеДанныеИлиАдрес) = Тип("ДвоичныеДанные") Тогда
		Результат = ДвоичныеДанныеИлиАдрес;
		
	ИначеЕсли ЭтоАдресВременногоХранилища(ДвоичныеДанныеИлиАдрес) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДвоичныеДанныеИлиАдрес);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоместитьДвоичныеДанныеПакетаВоВременноеХранилище()
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		ХранилищеКонтента = Неопределено;
		Документ.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
		
		Если ХранилищеКонтента <> Неопределено
			И ЗначениеЗаполнено(ХранилищеКонтента.Данные)
			И ТипЗнч(ХранилищеКонтента.Данные) = Тип("ДвоичныеДанные") Тогда
			
			АдресВХ = ПоместитьВоВременноеХранилище(ХранилищеКонтента.Данные, ЭтаФорма.УникальныйИдентификатор);
			ХранилищеКонтента.Данные = АдресВХ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДвоичныеДанныеПакетаВоВременноеХранилищеНаСервере(ИдентификаторФормы) Экспорт
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		ХранилищеКонтента = Неопределено;
		Документ.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
		
		Если ХранилищеКонтента <> Неопределено
			И ЗначениеЗаполнено(ХранилищеКонтента.Данные)
			И ТипЗнч(ХранилищеКонтента.Данные) = Тип("ДвоичныеДанные") Тогда
			
			АдресВХ = ПоместитьВоВременноеХранилище(ХранилищеКонтента.Данные, ИдентификаторФормы);
			ХранилищеКонтента.Данные = АдресВХ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьДвоичныеДанныеПакетаИзВременногоХранилища(Пакет)
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		ХранилищеКонтента = Неопределено;
		Документ.Документооборот.Свойство("ХранилищеКонтента", ХранилищеКонтента);
		
		Если ХранилищеКонтента <> Неопределено Тогда
			ХранилищеКонтента.Данные = ДвоичныеДанныеДокумента(ХранилищеКонтента.Данные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДляДокументовУчастниковЭДО()
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пакет.Отправитель.BoxId) Тогда
		
		Ядро = Модуль_ЯдроНаСервере();
		
		BoxId = Ядро.АдресЯщикаВИдентификатор(Пакет.Отправитель.BoxId);
		
	Иначе
		
		BoxId = "";
		
	КонецЕсли;
	
	Пакет.Идентификаторы.BoxId = BoxId;
	
	Для Каждого Документ Из Пакет.Документы Цикл
		
		ЗаполнитьЗначенияСвойств(Документ.Отправитель, Пакет.Отправитель);
		ЗаполнитьЗначенияСвойств(Документ.Получатель, Пакет.Получатель);
		Документ.Идентификаторы.BoxId = BoxId;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ТекущийДокумент.Отправитель, Пакет.Отправитель);
	ЗаполнитьЗначенияСвойств(ТекущийДокумент.Получатель, Пакет.Получатель);
	ТекущийДокумент.Идентификаторы.BoxId = BoxId;
	ЗаполнитьПризнакКонтрагентПоддерживаетМЧД();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьТекущийДокумент()
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов <> РежимыОтображения.ДляОтправки
		И ПакетОтправлен Тогда
		
		ОтправлятьРезультатПроверкиПодписи = Направление = Направление().Входящее;
		ХранилищеКонтента = Модуль_ЯдроНаКлиенте().Документы_Расшифровать(ТекущийДокумент.Идентификаторы, ОтправлятьРезультатПроверкиПодписи);
		
		Если ХранилищеКонтента = Неопределено Тогда
			
			Ядро = Модуль_ЯдроНаКлиенте();
			
			ХранилищеКонтента = Ядро.ХранениеДанных_ДанныеХранилища(ТекущийДокумент.Идентификаторы, "ХранилищеКонтента");
			
			Для сц = 0 По Пакет.Документы.ВГраница() Цикл
				
				Если Пакет.Документы[сц].Ключ = ТекущийДокумент.Ключ Тогда
					
					Пакет.Документы[сц] = ТекущийДокумент;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийДокумент.Документооборот.Вставить("ХранилищеКонтента", ХранилищеКонтента);
		
	КонецЕсли;
	
КонецПроцедуры

//Обрабатывает выполнение групповой операции
//
//Параметры:
//  Результат - Неопределено - результат выполнения оповещения
//  ПараметрыОбработки - Структура - см. ОсновнаяФорма().Новый_ПараметрыГрупповойОбработки()
//
&НаКлиенте
Процедура ЗавершениеВыполненияОперации(Результат = Неопределено, ПараметрыОбработки) Экспорт
	
	ОповеститьОбИзмененииПакетаПоДокументам(ПараметрыОбработки.ДанныеДляОбработки);
	ОсновнаяФорма().УведомитьОбУспешномВыполненииОперации(ПараметрыОбработки);
	
	Попытка
		ЗаполнитьФормуПоТекущемуДокументуНаСервере();
		УстановитьВидимостьЭлементовФормы();
	Исключение
		УстановитьТолькоПросмотр();
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотр()

	ЭтаФорма.Доступность	= Ложь;
	
	Элементы.ДокументыПакетаПерезаполнитьИсходящий.Доступность	= Ложь;
	Элементы.ОтвязатьДокумент.Доступность						= Ложь;
	Элементы.ГруппаШапкаПакета.Доступность						= Ложь;
	Элементы.Группа5.Доступность								= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииПакета() Экспорт

	Если РежимОтображенияДокументов = ОсновнаяФорма().РежимОтображенияДокументов Тогда
		
		Если ЭтоПереотправка() Тогда
			
			ОповеститьОбИзмененииПакетаПоДокументам(Пакет.Документы);
			
			ПереотправляемыйПакет = Пакет.СлужебнаяИнформация.ПараметрыПереотправки.ПереотправляемыйПакет;
			
			ИдентификаторыПакетов = Новый Массив;
			ИдентификаторыПакетов.Добавить(ПереотправляемыйПакет);
			
			Ядро = Модуль_ЯдроНаКлиенте();
			
			ДокументыПереотправляемогоПакета = Ядро.Пакеты_ДокументыПакетов(ИдентификаторыПакетов);
			ОповеститьОбИзмененииПакетаПоДокументам(ДокументыПереотправляемогоПакета);
			
		Иначе
			
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(ТекущийДокумент);
			
			ОповеститьОбИзмененииПакетаПоДокументам(МассивДокументов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииПакетаПоДокументам(МассивДокументов)
	
	Для каждого Документ Из МассивДокументов Цикл
		
		ОтборПоПакету = ПараметрыДляОбновленияСписка(
			Документ.Идентификаторы,
			Документ.ДокументУчета
		);
		
		Если ЗначениеЗаполнено(ОтборПоПакету.DocumentID) 
			И ЗначениеЗаполнено(ОтборПоПакету.LetterID) Тогда
			
			ОсновнаяФорма = ОсновнаяФорма();
			
			ИмяСобытия = "Диадок_ОбновитьГлавныйСписок";
			ПараметрыОповещения = ОтборПоПакету;
			ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
			
			Оповестить(
				ИмяСобытия,
				ПараметрыОповещения,
				ИсточникОповещения
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДляОбновленияСписка(Идентификаторы, ДокументУчета)

	ОтборПоПакету	= Новый Структура("BoxID, LetterID, DocumentID, ИдентификаторПакета");
	ЗаполнитьЗначенияСвойств(ОтборПоПакету, Идентификаторы);
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		
		ОтборПоПакету.ИдентификаторПакета = СтрокаСписка.Ключ;
		
	Иначе
		
		Если ЗначениеЗаполнено(Идентификаторы.LetterId) Тогда
			ОтборПоПакету.ИдентификаторПакета = Идентификаторы.LetterId;
		ИначеЕсли ЗначениеЗаполнено(ДокументУчета) Тогда
			ОтборПоПакету.ИдентификаторПакета = ДокументУчета.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтборПоПакету;
	
КонецФункции

&НаКлиенте
Функция ЭтоПереотправка()

	Результат = Ложь;
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ПараметрыПереотправки = Модуль_Ядро.СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ПараметрыПереотправки");
	
	Если ЗначениеЗаполнено(ПараметрыПереотправки) Тогда
		
		ПереотправляемыйПакет = Модуль_Ядро.СвойствоСтруктуры(ПараметрыПереотправки, "ПереотправляемыйПакет");
		
		Если ЗначениеЗаполнено(ПереотправляемыйПакет) Тогда
		
			Результат = ЗначениеЗаполнено(ПереотправляемыйПакет.BoxId) 
			И ЗначениеЗаполнено(ПереотправляемыйПакет.LetterId);
		
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РежимыОтображения() 
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДляОтправки",	"ОтправкаПакетов");
	Результат.Вставить("Исходящие",		"ОтправленныеДокументы");
	Результат.Вставить("Входящие",		"ПолученныеДокументы");
	
	Возврат Результат
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимыФормыПакета()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СозданиеНовогоПакета", "СозданиеНовогоПакета");
	Результат.Вставить("ОтображениеПакета", "ОтображениеПакета");
	Результат.Вставить("ДобавлениеДокументовСДиска", "ДобавлениеДокументовСДиска");
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Функция ЕстьОшибкаКонтроляДублированияОтправки()
	
	Результат = Ложь;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Результат = Ядро.СписокОшибок_ЕстьОшибкаКонтроляДублированияОтправки();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьОтправитьПакетПовторно()
	
	Оповещение = ОсновнаяФорма().НовыйОписаниеОповещения("ПослеПредложенияОтправкиПакетаПовторно", ЭтаФорма);
	ТекстВопроса = "Этот пакет уже был отправлен ранее. Хотите отправить его повторно?";
	Режим			= РежимДиалогаВопрос.ДаНет;
	КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим,, КнопкаПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПредложенияОтправкиПакетаПовторно(Результат, ДополнительныеПараметры) Экспорт
	
	Метрика_ОтправкаПакетаПовторно(Результат);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Пакет.СлужебнаяИнформация.Вставить("OperationId", Неопределено);
		
		ПакетОтправлен = ВыполнитьОтправкуИсходящегоПакета();
		
		ОбработатьРезультатОтправкиПакета(ПакетОтправлен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьИнформациюОтправителяАктаСверки(ТекущийДокумент, Вердикт, КонтентОтвета)
	
	ВариантыОтветаПоДокументу = Модуль_ЯдроНаСервере().Перечисление_ВариантыОтветаПоДокументу();
	
	Если Вердикт <> ВариантыОтветаПоДокументу.Подписать Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоФормализованныйАктСверки405(ТекущийДокумент.Тип.ТипКонтента) Тогда
		Возврат;
	КонецЕсли;
	
	IdentityInfoSender = КонтентОтвета.ReconciliationAct.IdentityInfoSender;
	
	IdentityInfoSender.BaseIdFile = СтрЗаменить(ТекущийДокумент.Метаданные.FileName, ".xml", "");
	IdentityInfoSender.DateFileInfoSender = ТекущийДокумент.СлужебнаяИнформация.Контент.DateCreateFile;
	IdentityInfoSender.TimeFileInfoSender = ТекущийДокумент.СлужебнаяИнформация.Контент.TimeCreateFile;
	IdentityInfoSender.SignSender = ТекущийДокумент.Документооборот.ХранилищеКонтента.Подпись.ДанныеПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВременныйФайлКУдалению(ИмяВременногоФайла)
	
	Если ВременныеФайлыКУдалению = Неопределено Тогда
		ВременныеФайлыКУдалению = Новый Массив;
	КонецЕсли;
	
	ВременныеФайлыКУдалению.Добавить(ИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормализованныйАктСверки405(ТипКонтента) Экспорт
	
	Возврат Нрег(ТипКонтента) = "reconciliationact405";
	
КонецФункции

&НаКлиенте
Функция ДействиеАннулировать()
	
	ДействияЭДО = Модуль_ЯдроНаКлиенте().Перечисление_ДействияЭДО();
	Результат = ДействияЭДО.Аннулировать;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьПереотправитьПакет()
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыПодтвержденияПереотправкиПакета",
		ЭтаФорма
	);
	
	ГлавнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаПодтвержденияПереотправкиДокументаУправляемая",
		ЭтаФорма,
		,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПодтвержденияПереотправкиПакета(РезультатЗакрытия, ПараметрыОбработки) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		ВыполнитьПерезаполнениеПакета();
	КонецЕсли;
	
КонецПроцедуры

//} СЛУЖЕБНЫЕ ФУНКЦИИ

//{	МЧД

&НаКлиенте
Процедура ПослеВыбораМЧД(РезультатВыбораМЧД, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатВыбораМЧД) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешитьДействие = РезультатВыбораМЧД.РазрешитьДействие;
	
	Если РазрешитьДействие = Истина Тогда
		ОсновнаяФорма().ДополнитьДокументыСведениямиМЧДНаКлиенте(Пакет.Документы, РезультатВыбораМЧД.КонтрактМЧД);
		ПродолжитьПодписаниеИОтправкуИсходящегоПакета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьМЧД(Документ, КонтрактМЧД)
	
	Документ.СлужебнаяИнформация.Вставить("КонтрактМЧД", КонтрактМЧД);
	
КонецПроцедуры	

//}	МЧД

//{	КЭП

// Выполняет проверку на КЭП для переданного действия ЭДО и BoxId пакета. 
// Далее запускает обработчик задачи
//
// Параметры:
//	ИмяОбработчика	 - Строка - см. Перечисление_ОбработчикиЗадач()
//
&НаКлиенте
Процедура ПроверитьДоступностьВыполненияДействияЭДО(Отказ)
	
	Если ЗначениеЗаполнено(СписокОшибокКЭП) Тогда
		
		Отказ = Истина;
		
		ОсновнаяФорма = ОсновнаяФорма();
		ОсновнаяФорма.ПоказатьВопрос_ДляДокументаНевозможноВыполнитьДействиеКЭП(СписокОшибокКЭП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОшибокКЭПНаСервере()
	
	СписокОшибокКЭП = Неопределено;
	
	Если ЗначениеЗаполнено(Пакет.Идентификаторы.BoxId) Тогда
	
		Модуль_Ядро		 = Модуль_ЯдроНаСервере();
		СписокОшибокКЭП	 = Модуль_Ядро.КЭП_ПолучитьОшибкиПоBoxID(Пакет.Идентификаторы.BoxId);
	
	КонецЕсли;
	
КонецПроцедуры


//}	КЭП


//{	ОБЕРТКИ

Функция Новый_ИдентификаторыСправочника(Ссылка = Неопределено, Идентификатор = "")
	
	Результат = Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(Ссылка, Идентификатор);	
	
	Возврат Результат;
	
КонецФункции

//}	ОБЕРТКИ
