
&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ МЕТОДЫ

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

// Возвращает форму для вызова сервера без контекста вызывающей формы
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция Модуль_Платформа() Экспорт
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	ИнициализироватьАдресКартинкиТарифа();
	
	ИнициализироватьРежимыФормы(Параметры);
	
	УстановитьНачальныеНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьАдресКартинкиТарифа()
	
	КартинкаТарифа =  КартинкаТарифСтартовый();
	
	АдресКартинкиТарифа = ПоместитьВоВременноеХранилище(КартинкаТарифа, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция КартинкаТарифСтартовый()
	
	МодульОбъекта = ОбработкаОбъект();
	ВсеКартинки = МодульОбъекта.БиблиотекаКартинок();
	
	Возврат ВсеКартинки.ТарифСтартовый;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПереключитьРежимФормыПриОткрытии();
	
	Если Параметры.ВойтиАвтоматически
		И ЭтоАвторизацияПоСертификату Тогда
		
		Авторизоваться(Истина);
		
	КонецЕсли;
	
	Если ТекущийРежимФормы = РежимФормыАвторизация()
		ИЛИ ТекущийРежимФормы = РежимФормыВыборОрганизации() Тогда
		
		НазваниеФормы	 = Метрика_НазваниеФормы();
		Категория		 = Метрика_ВозможныеКатегории().Авторизация;
		Действие		 = Метрика_ВозможныеДействия().ОткрытиеФормы;
		
		ДопПеременные = Новый Соответствие;
		ДопПеременные.Вставить("Количество сертификатов", ТаблицаСертификатов.Количество());
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриступитьКРаботеАвтоматически()
	
	ПриступитьКРаботе();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПереключитьРежимФормыПриОткрытии()
	
	ПереключитьРежимФормы();
	
	//Если модулю не удается получить доступ к сертификатам, то форма автоматически открывается на закладке “По паролю”
	Если ТекущийРежимФормы = РежимФормыАвторизация()
		И НетДоступаКСертификатам() Тогда
		
		РежимАвторизации = ВозможныеРежимыАвторизации().Логин;
		ПереключитьРежимФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийРежимФормы = РежимФормыАвторизация()
		ИЛИ ТекущийРежимФормы = РежимФормыВыборОрганизации() Тогда
		
		НазваниеФормы = Метрика_НазваниеФормы();
		Категория = Метрика_ВозможныеКатегории().Авторизация;
		Действие = Метрика_ВозможныеДействия().ЗакрытьФорму;
		
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы);
		
		КонтекстСеансаЗаполнен = Модуль_ЯдроНаКлиенте().КонтекстСеанса_ЕстьСтроки();
		
		Если НЕ КонтекстСеансаЗаполнен Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("РежимАвторизации", РежимАвторизации);
			ПараметрыОповещения.Вставить("Успешно", Ложь);
			
			Закрыть(ПараметрыОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление режимами формы

&НаСервере
Процедура ИнициализироватьРежимыФормы(ПараметрыФормы)
	
	ТекущиеСоединения = ПустоеФиксированноеСоответствие();
	
	ПараметрыФормы.Свойство("ТекущийРежимФормы", ТекущийРежимФормы);
	
	Если НЕ ЗначениеЗаполнено(ТекущийРежимФормы) Тогда
		ТекущийРежимФормы = РежимФормыАвторизация();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимАвторизации) Тогда
		РежимАвторизации = РежимАвторизацииИзСохраненныхНастроек();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимАвторизации) Тогда
		РежимАвторизации = ВозможныеРежимыАвторизации().Сертификат;
	КонецЕсли;
	
	ЭтоАвторизацияПоСертификату = ТекущийРежимАвторизацииПоСертификату(РежимАвторизации);
	
	Если ТекущийРежимФормы = РежимФормыВыборОрганизации() Тогда
		
		ЗаполнитьТекущиеСоединенияПоСохраненномуКонтекстуАвторизации();
		ВосстановитьДоступныеОрганизацииИзНастроек();
		УстановитьГалочкуВыбратьВсеПоСпискуОрганизаций();
		НастроитьОтображениеТарифа();
		
	ИначеЕсли ТекущийРежимФормы = РежимФормыВыборСертификата() Тогда
		
		ПараметрыФормы.Свойство("Организация", Организация);
		ПараметрыФормы.Свойство("ОрганизацияBoxId", ОрганизацияBoxId);
		
		ОписанияСертификатов = Неопределено;
		Если ПараметрыФормы.Свойство("ОписанияСертификатов", ОписанияСертификатов)
			И ОписанияСертификатов <> Неопределено Тогда
			
			Для Каждого ОписаниеСертификата Из ОписанияСертификатов Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаСертификатов.Добавить(), ОписаниеСертификата);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеРежимыФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("Авторизация"		, "Авторизация");
	Результат.Вставить("ВыборОрганизаций"	, "ВыборОрганизаций");
	Результат.Вставить("ВыборСертификата"	, "ВыборСертификата");
	
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РежимФормыАвторизация()

	Возврат ВозможныеРежимыФормы().Авторизация;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимФормыВыборОрганизации()

	Возврат ВозможныеРежимыФормы().ВыборОрганизаций;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимФормыВыборСертификата()

	Возврат ВозможныеРежимыФормы().ВыборСертификата;

КонецФункции

// Видимость элементов и страниц формы в зависимости от ревизита ТекущийРежимФормы
//
// Параметры:
//  СбрасыватьСоединение - Булево
//  *Истина	 - очистить текущие соединения и список организаций
//  *Ложь	 - не изменять текущие соединения и список организаций
// 
&НаКлиенте
Процедура ПереключитьРежимФормы(СбрасыватьСоединение = Истина)
	
	Если ТекущийРежимФормы = РежимФормыАвторизация() Тогда
		
		ЗаполнитьДанныеСтраницАвторизации(СбрасыватьСоединение);
		
		НастроитьФормуРежимАвторизация();
		
	ИначеЕсли ТекущийРежимФормы = РежимФормыВыборОрганизации() Тогда
		
		НастроитьФормуРежимВыборОрганизации();
		
	ИначеЕсли ТекущийРежимФормы = РежимФормыВыборСертификата() Тогда
		
		НастроитьФормуРежимВыборСертификата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуРежимВыборОрганизации()
	
	Параметры.ВойтиАвтоматически = Ложь; //Вход уже выполнен, нужно сбросить параметр
	
	ЭтаФорма.Заголовок = "Выбор организации для работы в модуле";
	
	УстановитьКнопкуПоУмолчанию(Элементы.ПриступитьКРаботе);
	
	Элементы.СтраницыДействия.ТекущаяСтраница = Элементы.СтраницаОрганизации;
	
	НастроитьКолонкиСертификатаВТаблицеОргнизаций(ЭтоАвторизацияПоСертификату);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонкиСертификатаВТаблицеОргнизаций(ВидимостьКолонок)

	Элементы.ГруппаДанныеСертификата.Видимость							 = ВидимостьКолонок;
	Элементы.ДоступныеОрганизацииКартинкаСертификат.Видимость			 = ВидимостьКолонок;
	Элементы.ДоступныеОрганизацииНаименованиеСертификата.Видимость		 = ВидимостьКолонок;
	Элементы.ДоступныеОрганизацииОписаниеСертификата.Видимость			 = ВидимостьКолонок;
	Элементы.ДоступныеОрганизацииКартинкаИзменитьСертификат.Видимость	 = ВидимостьКолонок;
	Элементы.ДоступныеОрганизацииРедактированиеСертификата.Видимость	 = ВидимостьКолонок;
	
	Если ВидимостьКолонок Тогда
		ЗначениеФиксации = ФиксацияВТаблице.Лево;
	Иначе
		ЗначениеФиксации = ФиксацияВТаблице.Нет;
	КонецЕсли; 
	
	Элементы.ГруппаДанныеОрганизации.ФиксацияВТаблице			 = ЗначениеФиксации;
	Элементы.ДоступныеОрганизацииНаименование.ФиксацияВТаблице	 = ЗначениеФиксации;
	Элементы.ДоступныеОрганизацииИНН_КПП.ФиксацияВТаблице		 = ЗначениеФиксации;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуРежимАвторизация()
	
	ЭтоАвторизацияПоСертификату = ТекущийРежимАвторизацииПоСертификату(РежимАвторизации);
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		Если ТаблицаСертификатов.Количество() = 0 Тогда
			Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоСертификатуНедоступен;
		Иначе
			Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоСертификату;
		КонецЕсли;
		
	Иначе
		
		Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоЛогину;
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = "Авторизация";
	
	УстановитьКнопкуПоУмолчанию(Элементы.Авторизоваться);
	
	Элементы.Декорация_НетСертификата.Видимость	= ЭтоАвторизацияПоСертификату;
	Элементы.СтраницыДействия.ТекущаяСтраница	 = Элементы.СтраницаАвторизация;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуРежимВыборСертификата()
	
	ЭтаФорма.Заголовок = "Выбор сертификата";
	
	УстановитьКнопкуПоУмолчанию(Элементы.СохранитьВыборСертификата);

	Элементы.ПереключениеРежимаВхода.Видимость					 = Ложь;
	Элементы.ГруппаДействияСтраницаАвторизация.Видимость		 = Ложь;
	Элементы.ГруппаДействияСтраницаАвторизацияВыбор.Видимость	 = Истина;
	
	Элементы.ДекорацияВыборСертификата.Видимость	 = Истина;
	Элементы.ДекорацияВыборСертификата.Заголовок	 = "Выберите сертификат для авторизации " + Организация;
	
	Элементы.СтраницыДействия.ТекущаяСтраница = Элементы.СтраницаАвторизация;
	
	Элементы.ГруппаДанныеСертификата.Видимость = ЭтоАвторизацияПоСертификату;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию(ЭлементКнопки)
	
	ШрифтКнопки = Новый Шрифт(ЭлементКнопки.Шрифт, , , Ложь);
	ЭлементКнопки.КнопкаПоУмолчанию	 = Истина;
	ЭлементКнопки.Шрифт				 = ШрифтКнопки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантИнтерфейсаКлиентскогоПриложения()
	
	ВариантыИнтерфейса	 = ВозможныеВариантыИнтерфейсаКлиентскогоПриложения();
	Результат			 = ВариантыИнтерфейса.Такси;
	Настройки			 = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если Настройки <> Неопределено Тогда
		
		Если Строка(Настройки.ВариантИнтерфейсаКлиентскогоПриложения) = ВариантыИнтерфейса.Версия8_2 Тогда
			Результат = ВариантыИнтерфейса.Версия8_2;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможныеВариантыИнтерфейсаКлиентскогоПриложения()

	Результат = Новый Структура;
	Результат.Вставить("Такси"		, "Такси");
	Результат.Вставить("Версия8_2"	, "Версия 8.2");
	
	Возврат Результат;
	
КонецФункции 
 

////////////////////////////////////////////////////////////////////////////////
// Настройки

&НаСервере
Процедура УстановитьНачальныеНастройкиФормы()
	
	Если НЕ ОбработкаОбъект().ПриложениеСтаршеВерсии("8.3.7") Тогда
		Элементы.ДекорацияСертификатНедоступен.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	
	Если НЕ ОбработкаОбъект().ПриложениеСтаршеВерсии("8.3.3") Тогда
		
		ВариантыИнтерфейса			 = ВозможныеВариантыИнтерфейсаКлиентскогоПриложения();
		ТекущийВариантИнтерфейса	 = ВариантИнтерфейсаКлиентскогоПриложения();
		
		Если ТекущийВариантИнтерфейса = ВариантыИнтерфейса.Версия8_2 Тогда
			УстановитьЦветРамкиТаблицФормы();
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение		 = Новый ПолеКомпоновкиДанных("ТаблицаСертификатов.ОшибкаАвторизации"); 
	ЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение	 = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 20, 60));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСертификатовВыбран");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСертификатовПредставление");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСертификатовНаименование");
	
	Если НЕ ОбработкаОбъект().ПриложениеСтаршеВерсии("8.3.3") Тогда
		Элементы.Декорация_ГоризонтальнаяЛиния.ЦветРамки = Новый Цвет(240, 240, 240);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветРамкиТаблицФормы()
	
	Цвет = Новый Цвет();
	Элементы.ТаблицаСертификатов.ЦветРамки	 = Цвет;
	Элементы.ДоступныеОрганизации.ЦветРамки	 = Цвет;
	
КонецПроцедуры

// Заполняет неоходимые данные авторизации
//  если авторизация по сертификату, то заполняет список сертификатов и отмечает выбранные из сохраненных настроек
//  если авторизация по логину, то восстанавливает логин из сохраненных настроек
//
// Параметры:
//  СбрасыватьСоединение - Булево
//  *Истина	 - очистить текущие соединения и список организаций
//  *Ложь	 - не изменять текущие соединения и список организаций
// 
&НаКлиенте
Процедура ЗаполнитьДанныеСтраницАвторизации(СбрасыватьСоединение)
	
	Если СбрасыватьСоединение = Истина Тогда
		ДоступныеОрганизации.Очистить();
		ЗакрытьАктивныеСоединения();
	КонецЕсли; 
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		Если ТаблицаСертификатов.Количество() = 0 Тогда
			
			ЗаполнитьТаблицуСертификатов();
			ВосстановитьНастройкиСтраницы_Сертификат();
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Логин) Тогда
			Логин = Авторизация_ПолучитьНастройку("Логин");
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Отмечает признак "Выбран" таблицы сертификатов по сохраненным в хранилище настройкам
//
&НаКлиенте
Процедура ВосстановитьНастройкиСтраницы_Сертификат()
	
	МассивОтпечатковСертификатов = Авторизация_ПолучитьНастройку("ВыбранныеСертификаты", Новый Массив);
	
	Если МассивОтпечатковСертификатов.Количество() = 0 Тогда
		
		СписокОрганизаций = Авторизация_ПолучитьНастройку("ДоступныеОрганизации", Новый Массив);
		Если СписокОрганизаций.Количество() > 0 Тогда
			
			МассивОтпечатковСертификатов = Модуль_ЯдроНаКлиенте().ВыгрузитьКолонку(СписокОрганизаций, "ОтпечатокСертификата");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОтпечатковСертификатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаСертификата Из ТаблицаСертификатов Цикл
	
		Если МассивОтпечатковСертификатов.Найти(СтрокаСертификата.ОтпечатокСертификата) <> Неопределено Тогда
		
			СтрокаСертификата.Выбран = Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет настройки формы авторизации
//
// Параметры:
//  ДополнитьСпискомОрганизаций - Булево 
//	* Истина	 - сохранять данные авторизации и список выбранных организаций
//	* Ложь		 - сохранять данные авторизации
//
&НаСервере
Процедура СохранитьНастройки(ДополнитьСпискомОрганизаций)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ДанныеСохранения = СохраненныеНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		СтрокиВыбранныхСертификатов	 = ТаблицаСертификатов.НайтиСтроки(Новый Структура("Выбран", Истина)); 
		ВыбранныеСертификаты		 = Модуль_Ядро.ВыгрузитьКолонку(СтрокиВыбранныхСертификатов, "ОтпечатокСертификата", Истина);
		СертификатыСоединений		 = Модуль_Ядро.ВыгрузитьКолонку(ТекущиеСоединения, "Ключ", Истина); 
		Модуль_Ядро.ДополнитьМассив(ВыбранныеСертификаты, СертификатыСоединений, Истина);
		
		ДанныеСохранения.Вставить("ВыбранныеСертификаты", ВыбранныеСертификаты);
		
	Иначе
		
		ДанныеСохранения.Вставить("Логин", Логин);
		
	КонецЕсли;
	
	Если ДополнитьСпискомОрганизаций Тогда
		ДоступныеОрганизацииДляСохранения = Модуль_Ядро.ТаблицаЗначенийВМассивСтруктур(Модуль_Ядро.КопияКоллекцииЗначений(ДоступныеОрганизации));
		ДанныеСохранения.Вставить("ДоступныеОрганизации", ДоступныеОрганизацииДляСохранения);
	КонецЕсли;
	
	КлючНастройки = КлючНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	Авторизация_СохранитьНастройку("Диадок", КлючНастройки, ДанныеСохранения);
	Авторизация_СохранитьНастройку("Диадок", "РежимАвторизации", РежимАвторизации);
	
КонецПроцедуры

// Ключ по которому сохранены настройки авторизации
//
// Параметры:
//  ЭтоАвторизацияПоСертификату - Булево 
//	* Истина	 - ключ для авторизация по сертивикату
//	* Ложь		 - ключ для авторизации по логину
//
// Возвращаемое значение:
//  Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиАвторизации(ЭтоАвторизацияПоСертификату)
	
	Результат = "";
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		Результат = "НастройкаАвторизации_Сертификат";
		
	Иначе
		
		Результат = "НастройкаАвторизации_Логин";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Получает сохраненные настройки авториазции
//
// Параметры:
//  ЭтоАвторизацияПоСертификату - Булево 
//	* Истина	 - авторизация по сертивикату
//	* Ложь		 - авторизация по логину
// 
// Возвращаемое значение:
//  Структура - см. функцию НовыйНастройкиАвторизации()
//
&НаСервереБезКонтекста
Функция СохраненныеНастройкиАвторизации(ЭтоАвторизацияПоСертификату)
	
	Результат = НовыйНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	
	КлючНастройки = КлючНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	СохраненныеНастройки = Авторизация_ЗагрузитьНастройку("Диадок", КлючНастройки);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Пустая структура в формате которой хранятся настройки авторизации
//
// Параметры:
//  ЭтоАвторизацияПоСертификату - Булево 
//	* Истина	 - ключ для авторизация по сертивикату
//	* Ложь		 - ключ для авторизации по логину
//
// Возвращаемое значение:
//  Структура
//
&НаСервереБезКонтекста
Функция НовыйНастройкиАвторизации(ЭтоАвторизацияПоСертификату)
	
	Результат = Новый Структура;
	Результат.Вставить("ДоступныеОрганизации", Новый Массив);
	
	Если ЭтоАвторизацияПоСертификату Тогда
		Результат.Вставить("ВыбранныеСертификаты", Новый Массив);
	Иначе
		Результат.Вставить("Логин", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Сохраненная настройка авторизации по ключу настройки
//
// Параметры:
//  ЭтоАвторизацияПоСертификату - Булево 
//	* Истина								 - ключ для авторизация по сертивикату
//	* Ложь									 - ключ для авторизации по логину
//  Настройка			 - Строка			 - ключ структуры НовыйНастройкиАвторизации() 
//  ЗначениеПоУмолчанию	 - ЛюбоеЗначение	 - возвращается если по ключу нет данных 
//
// Возвращаемое значение:
//  ЛюбоеЗначение
//
&НаКлиенте
Функция Авторизация_ПолучитьНастройку(Настройка, ЗначениеПоУмолчанию = Неопределено) 
	
	Настройки = СохраненныеНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	
	Результат = Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Настройки, Настройка, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

// Получает сохраненный режим авторизации
//
// Возвращаемое значение:
//  Строка
//
&НаСервере
Функция РежимАвторизацииИзСохраненныхНастроек()

	РежимАвторизации = Авторизация_ЗагрузитьНастройку("Диадок", "РежимАвторизации");
	Возврат РежимАвторизации;

КонецФункции

&НаСервереБезКонтекста
Процедура Авторизация_СохранитьНастройку(Знач КлючОбъекта,
								Знач КлючНастроек = Неопределено,
								Знач Настройки,
								Знач ОписаниеНастроек = Неопределено)
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Авторизация_ЗагрузитьНастройку(Знач КлючОбъекта,
							Знач КлючНастроек = Неопределено,
							Знач ОписаниеНастроек = Неопределено)
							
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Авторизация

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеРежимыАвторизации()
	
	Результат = Новый Структура;
	Результат.Вставить("Сертификат"	, "Сертификат");
	Результат.Вставить("Логин"		, "Логин");
	
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРежимАвторизацииПоСертификату(ПроверяемыйРежимАвторизации)
	
	Результат = ПроверяемыйРежимАвторизации = ВозможныеРежимыАвторизации().Сертификат;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура КомандаАвторизоваться(Команда)
	
	Авторизоваться(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Авторизоваться(ВойтиАвтоматически)
	
	ДействиеМетрики		 = Метрика_ВозможныеДействия().Авторизоваться;
	НазваниеФормы		 = Метрика_НазваниеФормы();
	
	ДопПеременныеМетрики = Новый Соответствие;
	
	Если ЭтоАвторизацияПоСертификату Тогда
		КатегорияМетрики = Метрика_ВозможныеКатегории().ПоСертификату;
		КоличествоВыбранныхСертификатов = ТаблицаСертификатов.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество();
		ДопПеременныеМетрики.Вставить("КоличествоВыбранныхСертификатов", КоличествоВыбранныхСертификатов);
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы, ДопПеременныеМетрики);
	Иначе
		КатегорияМетрики = Метрика_ВозможныеКатегории().ПоЛогину;
		ДопПеременныеМетрики.Вставить("Логин", Логин);
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы, ДопПеременныеМетрики, , Истина);
	КонецЕсли;
	
	ЗакрытьАктивныеСоединения();
	ДоступныеОрганизации.Очистить();
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		АвторизацияПройдена = АвторизацияПоСертификату();
		
	Иначе
		
		АвторизацияПройдена = АвторизацияПоЛогину();
		
	КонецЕсли;
	
	Если АвторизацияПройдена Тогда
		
		Модуль_ЯдроНаКлиенте().ОбщийКонтекст_Поместить("КонтекстАвторизации", ТекущиеСоединения);
		
		ТекущийРежимФормы = РежимФормыВыборОрганизации();
		ПереключитьРежимФормы();
		
		Если ВойтиАвтоматически = Истина Тогда
			
			ПодключитьОбработчикОжидания("ПриступитьКРаботеАвтоматически", 0.5, Истина);
			
		КонецЕсли;
		
		ДополнительныеПеременные = Новый Соответствие;
		ДополнительныеПеременные.Вставить("АвтоматическаяАвторизация", ВойтиАвтоматически);
		
	Иначе
		
		ЗакрытьАктивныеСоединения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУспешнойАвторизацииНаСервере()
	
	ЗаполнитьДоступныеОрганизации();
	
	СохранитьНастройки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция АвторизацияПоСертификату()
	
	Для каждого СтрокаСертификата Из ТаблицаСертификатов Цикл
		СтрокаСертификата.ОшибкаАвторизации	 = Ложь;
		СтрокаСертификата.Авторизован		 = Ложь;
	КонецЦикла;
	
	ВыбранныеСертификаты = ТаблицаСертификатов.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	АвторизацияВозможна = АвторизацияПоСертификатамВозможна(ВыбранныеСертификаты);
	
	АвторизацияПройдена = Истина;
	
	Если АвторизацияВозможна Тогда
		
		ОшибкиАвторизации = Новый Массив;
		
		Для каждого ВыбраннаяСтрока Из ВыбранныеСертификаты Цикл
			
			Connection = Неопределено;
			
			Попытка
				Connection = ТекущееСоединение(ВыбраннаяСтрока.ОтпечатокСертификата);
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОтпечатокСертификата"		 , ВыбраннаяСтрока.ОтпечатокСертификата);
				СтруктураОшибки.Вставить("Наименование"				 , ВыбраннаяСтрока.Наименование);
				СтруктураОшибки.Вставить("ИнформацияОбОшибке"		 , ИнформацияОбОшибке);
				
				ОшибкиАвторизации.Добавить(СтруктураОшибки) 
				
			КонецПопытки;
			
			Если Connection = Неопределено Тогда
				
				ВыбраннаяСтрока.Выбран				 = Ложь;
				ВыбраннаяСтрока.ОшибкаАвторизации	 = Истина;
				АвторизацияПройдена					 = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			ВыбраннаяСтрока.Авторизован = Истина;
			
		КонецЦикла;
		
		ОбработкаОшибокАвторизацииПоСертификатам(ОшибкиАвторизации);
		
	КонецЕсли;
	
	ЕстьСоединения = ТекущиеСоединения.Количество() > 0;
	АвторизацияПройдена = АвторизацияПройдена И ЕстьСоединения;
	
	Если АвторизацияПройдена Тогда
		
		ПослеУспешнойАвторизацииНаСервере();
		
		АвторизацияПройдена = ПроверкаПослеАвторизацииПоСертификатам(ВыбранныеСертификаты);
		
	КонецЕсли;
	
	Возврат АвторизацияПройдена;
	
КонецФункции

&НаКлиенте
Функция ПроверкаПослеАвторизацииПоСертификатам(ВыбранныеСертификаты)
	
	АвторизацияПройдена = Истина;
	
	Если ДоступныеОрганизации.Количество() = 0 Тогда
		
		АвторизацияПройдена = Ложь;
		
		ТекстОшибки = ТекстОшибкиНетДоступаВДиадокПоСпискуСертификатов(ВыбранныеСертификаты);
		
		мПоказатьПредупреждение(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат АвторизацияПройдена;
	
КонецФункции

&НаКлиенте
Функция ТекстОшибкиНетДоступаВДиадокПоСпискуСертификатов(ВыбранныеСертификаты)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ШаблонОшибки = "%1 доступа в Диадок. Попробуйте авторизоваться под %2 в веб-версии, следуя подсказкам сервиса. 
	|
	|Если авторизация в веб-версии не помогла, обратитесь в техподдержку.";
	
	Если ВыбранныеСертификаты.Количество() > 1 Тогда
		ТекстОшибки = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(ШаблонОшибки, "Сертификаты %1 не имеют", "ними");
	Иначе
		ТекстОшибки = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(ШаблонОшибки, "Сертификат %1 не имеет", "ним");
	КонецЕсли;
	
	СписокСертификатов			 = Модуль_Ядро.ВыгрузитьКолонку(ВыбранныеСертификаты, "Наименование");
	СписокСертификатовСтрокой	 = Модуль_Ядро.СоединитьСтроку(СписокСертификатов, ", ");
	Результат					 = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(ТекстОшибки, СписокСертификатовСтрокой);
	
	Возврат Результат;
	
КонецФункции

//Провверяет возможность входа по переданным сертификатам, без непосредственного запроса в ДД
//
// Параметры:
//  ПроверяемыеСтроки - Массив - массив строк табличной части ТаблицаСертификатов
//
// Возвращаемое значение:
//  Булево - Истина если по переданным строкам возможен вход
//
&НаКлиенте
Функция АвторизацияПоСертификатамВозможна(ПроверяемыеСтроки)
	
	АвторизацияВозможна = Истина;
	
	Если ПроверяемыеСтроки.Количество() = 0 Тогда
		
		Если НЕ Параметры.ВойтиАвтоматически Тогда
			ТекстОшибки = "Выберите сертификат для авторизации.";
			Метрика_ЗаписатьОшибку(ТекстОшибки, Метрика_ВозможныеКатегории().ПоСертификату, Метрика_ВозможныеДействия().Авторизоваться, "НеВыбранСертификат");
			мПоказатьПредупреждение(ТекстОшибки);
		КонецЕсли; 
		
		АвторизацияВозможна = Ложь;
	КонецЕсли;
	
	ЕстьУстаревшиеСертификаты = ПроверитьСертификатыНаУстаревшийГОСТ(ПроверяемыеСтроки);
	
	Если ЕстьУстаревшиеСертификаты Тогда
		ТекстОшибки = "Сертификаты устарели. Обновите их на
					|ГОСТ-2012 через сервисный центр.";
		
		Метрика_ЗаписатьОшибку(ТекстОшибки, Метрика_ВозможныеКатегории().ПоСертификату, Метрика_ВозможныеДействия().Авторизоваться, "УстаревшийГост");
		
		мПоказатьПредупреждение(ТекстОшибки);
		АвторизацияВозможна = Ложь;
	КонецЕсли;
	
	Возврат АвторизацияВозможна;
	
КонецФункции

&НаКлиенте
Функция АвторизацияПоЛогину()

	ДоступныеОрганизации.Очистить();
	ЗакрытьАктивныеСоединения();
	
	АвторизацияВозможна = Истина;
	АвторизацияПройдена = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		Метрика_ЗаписатьОшибку("Логин не заполнен", Метрика_ВозможныеКатегории().ПоЛогину, Метрика_ВозможныеДействия().Авторизоваться, "НеЗаполненоПоле");
		АвторизацияВозможна = Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда
		Метрика_ЗаписатьОшибку("Пароль не заполнен", Метрика_ВозможныеКатегории().ПоЛогину, Метрика_ВозможныеДействия().Авторизоваться, "НеЗаполненоПоле");
		АвторизацияВозможна = Ложь;
	КонецЕсли;
	
	Если АвторизацияВозможна Тогда
		
		Токен = АвторизоватьсяПодЛогином(Логин, Пароль);
		
		АвторизацияПройдена = ТекущиеСоединения.Количество() > 0;
		
		Если АвторизацияПройдена Тогда
			
			ПослеУспешнойАвторизацииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		мПоказатьПредупреждение(
			"Введите электронную почту и пароль
			|для авторизации"
		);
		
	КонецЕсли;
	
	Возврат АвторизацияПройдена;
	
КонецФункции

&НаКлиенте
Функция АвторизоватьсяПодЛогином(Логин, Пароль)
	
	ТекущиеСоединенияВременный	 = ТекущиеСоединененияВСоответствие();
	Токен						 = "";
	ОписаниеОшибкиАвторизации	 = "";
	
	Токен = Модуль_ЯдроНаКлиенте().Авторизация_ПоПаролю(Логин, Пароль, ОписаниеОшибкиАвторизации);
	
	Если ЗначениеЗаполнено(Токен) Тогда
		
		Соединение = ОписаниеСоединения();
		Соединение.ТипАвторизации	= ВозможныеРежимыАвторизации().Логин;
		Соединение.Токен			= Токен;
		Соединение.Логин			= Логин;
		
		ТекущиеСоединенияВременный.Вставить("", Соединение);
		
	Иначе
		
		ОбработкаОшибокАвторизацииПодЛогином(ОписаниеОшибкиАвторизации);
		
	КонецЕсли;
	
	ТекущиеСоединения = Новый ФиксированноеСоответствие(ТекущиеСоединенияВременный);
	
	Возврат Токен;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОшибокАвторизацииПодЛогином(ОписаниеОшибкиАвторизации)
	
	ИдентификаторОшибки = "НеизвестнаяОшибка";
	ИдентификаторОшибкиНекорректныйКлючАПИ = "НекорректныйКлючАпи";
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиАвторизации) Тогда
		
		Если Найти(ОписаниеОшибкиАвторизации, "Неправильный логин или пароль") Тогда
			ИдентификаторОшибки = "НеУдалосьАвторизоваться";
		ИначеЕсли Найти(ОписаниеОшибкиАвторизации, "Invalid API client id") Тогда
			ИдентификаторОшибки = ИдентификаторОшибкиНекорректныйКлючАПИ;
		КонецЕсли;
		
		КатегорияМетрикик	 = Метрика_ВозможныеКатегории().ПоЛогину;
		ДействиеМетрикик	 = Метрика_ВозможныеДействия().Авторизоваться;
		Метрика_ЗаписатьОшибку(ОписаниеОшибкиАвторизации, КатегорияМетрикик, ДействиеМетрикик, ИдентификаторОшибки);
		
	КонецЕсли;
	
	Если ИдентификаторОшибки = ИдентификаторОшибкиНекорректныйКлючАПИ Тогда
		
		ОповещениеОЗакрытииФормыОшибок = ОсновнаяФорма().НовыйОписаниеОповещения("ПослеЗакрытияПредупрежденияОшибкиКлючаАПИ", ЭтаФорма);
		
		ПоказатьПользователюПредложениеОбновитьМодуль(ОповещениеОЗакрытииФормыОшибок);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось авторизоваться.
		|Проверьте электронную почту и пароль'");
		
		мПоказатьПредупреждение(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияОшибкиКлючаАПИ(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПослеСогласияНаСкачиваниеНовойВерсииМодуля();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Соеднинения

//Авторизуется по серификату, добавлет созданное соединение в реквизит формы ТекущиеСоединения
//
// Возвращаемое значение:
//  Соединение - Структура - см. функцию ОписаниеСоединения()
//
&НаКлиенте
Функция ТекущееСоединение(ОтпечатокСертификата)
	
	ТекущиеСоединенияВременный = ТекущиеСоединененияВСоответствие();
	
	ДанныеСертификата	= Модуль_ЯдроНаКлиенте().Сертификаты_ДанныеСертификата(ОтпечатокСертификата);
	ОписаниеСертификата	= Модуль_ЯдроНаКлиенте().Сертификаты_ОписаниеСертификата(ДанныеСертификата);
	СертBase64			= Модуль_ЯдроНаКлиенте().Сертификаты_СертификатВBase64(ОтпечатокСертификата);
	РасшифрованныйТокен	= Модуль_ЯдроНаКлиенте().Авторизация_ПоСертификату(ОтпечатокСертификата);
	ГОСТСертификата		= Модуль_ЯдроНаКлиенте().ПолучитьГОСТСертификата(ОтпечатокСертификата);
	
	Соединение = ОписаниеСоединения();
	Соединение.ОтпечатокСертификата	 = ОтпечатокСертификата;
	Соединение.Токен				 = РасшифрованныйТокен;
	Соединение.ТипАвторизации		 = ВозможныеРежимыАвторизации().Сертификат;
	Соединение.СертификатBase64		 = СертBase64;
	Соединение.Логин				 = "";
	Соединение.ГОСТСертификата		 = ГОСТСертификата;
	Соединение.Сертификат			 = ОписаниеСертификата;
	
	ТекущиеСоединенияВременный.Вставить(ОтпечатокСертификата, Соединение);
	
	ТекущиеСоединения = Новый ФиксированноеСоответствие(ТекущиеСоединенияВременный);
	
	Возврат Соединение;
	
КонецФункции

//Создает Соответствие на основе реквизита формы ТекущиеСоединения
//
// Возвращаемое значение:
//  Соответствие - копия коллекции ТекущиеСоединения
//   *Ключ		 - Строка		 - отпечаток сертификата
//   *Значение	 - Структура	 - см. ОписаниеСоединения()
//
&НаКлиенте
Функция ТекущиеСоединененияВСоответствие()
	
	Результат = Новый Соответствие;
	
	Если ТекущиеСоединения <> Неопределено Тогда
		Для каждого КлючЗначение Из ТекущиеСоединения Цикл
			Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Описание соединения
//
// Возвращаемое значение:
//  Структура 
//
&НаКлиенте
Функция ОписаниеСоединения()

	Соединение = Новый Структура;
	Соединение.Вставить("ОтпечатокСертификата",	"");
	Соединение.Вставить("Токен",				"");
	Соединение.Вставить("ТипАвторизации",		"");
	Соединение.Вставить("СертификатBase64",		"");
	Соединение.Вставить("Логин",				"");
	Соединение.Вставить("ГОСТСертификата",		"");
	Соединение.Вставить("Сертификат");
	
	Возврат Соединение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекущиеСоединенияПоСохраненномуКонтекстуАвторизации()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	ТекущиеСоединения = Модуль_Ядро.КопияКоллекцииЗначений(Модуль_Ядро.ОбщийКонтекст_Прочитать("КонтекстАвторизации"));
	
КонецПроцедуры

//Обрабатывает ошибки возникающие при авторизации по сертификату, выводит сообщение пользователю что авторизация не прошла
//
// Параметры:
//  ОшибкиАвторизации - Массив структур описывающих ошибки подключения
//   *ОтпечатокСертификата			 - Строка				 - отпечаток сертификата
//   *ИнформацияОбОшибке			 - ИнформацияОбОшибке	 - ИнформацияОбОшибке()
//
&НаКлиенте
Процедура ОбработкаОшибокАвторизацииПоСертификатам(ОшибкиАвторизации)
	
	Если ОшибкиАвторизации.Количество() > 0 Тогда
		
		КатегорияМетрики = Метрика_ВозможныеКатегории().ПоСертификату;
		ДействиеМетрики = Метрика_ВозможныеДействия().Авторизоваться;
		ИдентификаторОшибки = "НеизвестнаяОшибка";
		ИдентификаторОшибкиНекорректныйКлючАПИ = "НекорректныйКлючАпи";
		
		Для каждого СтруктураОшибки Из ОшибкиАвторизации Цикл
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(СтруктураОшибки.ИнформацияОбОшибке);
			
			Если Найти(ПодробноеПредставлениеОшибки, "401") И Найти(ПодробноеПредставлениеОшибки, "is not authorized") Тогда
				ИдентификаторОшибки = "НетДоступа";
			ИначеЕсли Найти(ПодробноеПредставлениеОшибки, "Invalid API client id") Тогда
				ИдентификаторОшибки = "НекорректныйКлючАпи";
				
				Прервать;
			Иначе
				ИдентификаторОшибки = "НеизвестнаяОшибка";
			КонецЕсли; 
			
			Метрика_ЗаписатьОшибку(ПодробноеПредставлениеОшибки, КатегорияМетрики, ДействиеМетрики, ИдентификаторОшибки);
			
			Ядро = Модуль_ЯдроНаКлиенте();
			
			Ядро.Ошибка_Обработать("Авторизация по сертификату", ПодробноеПредставлениеОшибки);
			
		КонецЦикла;
		
		Если ИдентификаторОшибки = ИдентификаторОшибкиНекорректныйКлючАПИ Тогда
			ПоказатьПользователюОшибкуАвторизацииПоСертификатамНевалидныйКлючАПИ();
		Иначе
			ПоказатьПользователюОшибкиАвторизацииПоСертификатам(ОшибкиАвторизации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользователюОшибкуАвторизацииПоСертификатамНевалидныйКлючАПИ()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытииФормыОшибок = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ОповещениеОЗакрытииФормыОшибкиКлючаАПИ", 
			ЭтаФорма, 
			ДополнительныеПараметры);
	
	ПоказатьПользователюПредложениеОбновитьМодуль(ОповещениеОЗакрытииФормыОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользователюОшибкиАвторизацииПоСертификатам(ОшибкиАвторизации)
	
	ТекстОшибки = ТекстОшибкиНетДоступаВДиадокПоСпискуСертификатов(ОшибкиАвторизации);
	
	мПоказатьПредупреждение(ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользователюПредложениеОбновитьМодуль(ОповещениеОЗакрытииФормыОшибок)
	
	ТекстОшибки = НСтр("ru = 'Версия модуля устарела. Требуется обновление.
	|Для продолжения работы скачайте и установите новую
	|версию по кнопке ниже.'");
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Скачать обновление модуля");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Закрыть");
	
	мПоказатьВопрос(ТекстОшибки,СписокКнопок,,КнопкаПоУмолчанию,"",, ОповещениеОЗакрытииФормыОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОЗакрытииФормыОшибкиКлючаАПИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ПослеСогласияНаСкачиваниеНовойВерсииМодуля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСогласияНаСкачиваниеНовойВерсииМодуля()
	
	Метрика_ПриНажатииКнопкиСкачатьНовуюВерсию();
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОсновнаяФорма.ОткрытьФормуОбновления();
	
	Метрика_ЗаписатьСтатистикуСкачатьОбновлениеМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ПриНажатииКнопкиСкачатьНовуюВерсию()
	
	НазваниеФормы = "КлючАпиНеДействителен";
	Категория = Метрика_ВозможныеКатегории().НекорректныйКлючАпи;
	Действие = Метрика_ВозможныеДействия().СкачатьОбновлениеМодуля;
	Метка = "Нажатие кнопки";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, Категория, Действие, Метка);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистикуСкачатьОбновлениеМодуля()
	
	Категория = Метрика_ВозможныеКатегории().НекорректныйКлючАпи;
	Действие = Метрика_ВозможныеДействия().СкачатьОбновлениеМодуля;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьАктивныеСоединения()
	
	ТекущиеСоединения = ПустоеФиксированноеСоответствие();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустоеФиксированноеСоответствие()
	
	ВременноеСоответствие = Новый Соответствие;
	Результат = Новый ФиксированноеСоответствие(ВременноеСоответствие);
	
	Возврат Результат;
	
КонецФункции 
 

////////////////////////////////////////////////////////////////////////////////
// Список организаций

// Заполняет таблицу доступных организаций с сервера ДД
//
&НаСервере
Процедура ЗаполнитьДоступныеОрганизации()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Для каждого Соединение Из ТекущиеСоединения Цикл
		
		СтруктураПодключения = Соединение.Значение;
		
		Токен					 = СтруктураПодключения.Токен;
		ОтпечатокСертификата	 = СтруктураПодключения.ОтпечатокСертификата;
		OrganizationList		 = Модуль_Ядро.Организации_ДоступныеОрганизации(, Токен);
		
		ДополнитьСписокОрганизаций(OrganizationList, СтруктураПодключения);
		
	КонецЦикла;
	
	ДоступныеОрганизации.Сортировать("Наименование");
	
	СопоставитьОрганизацииССертификатами();
	
	ВосстановитьНастройкиСпискаОрганизаций();
	
	УстановитьГалочкуВыбратьВсеПоСпискуОрганизаций();
	
	НастроитьОтображениеТарифа();
	
КонецПроцедуры

// Дополняет строки таблицы организаций данными о доступных сертификатах
//  - сопоставление организаций и сертификатов по связке ИНН-КПП)
//  - сопоставление организаций и сертификатов по ИНН, если КПП нет
//  - если сертификатов несколько, то берется с большим сроком действия
//
&НаСервере
Процедура СопоставитьОрганизацииССертификатами()
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1000));
	
	ТзДоступныхСертификатов = Новый ТаблицаЗначений;
	ТзДоступныхСертификатов.Колонки.Добавить("ОрганизацияИДСтроки"					, Новый ОписаниеТипов("Число"));
	ТзДоступныхСертификатов.Колонки.Добавить("КоличествоДоступныхСертификатов"		, Новый ОписаниеТипов("Число"));
	ТзДоступныхСертификатов.Колонки.Добавить("ОтпечатокСертификата"					, ОписаниеСтроки);
	ТзДоступныхСертификатов.Колонки.Добавить("ИНН"									, ОписаниеСтроки);
	ТзДоступныхСертификатов.Колонки.Добавить("КПП"									, ОписаниеСтроки);
	
	Для каждого СтрокаОрганизации Из ДоступныеОрганизации Цикл
		
		ОрганизацияИДСтроки = ДоступныеОрганизации.Индекс(СтрокаОрганизации);
		
		Для каждого ОписаниеОтпечатка Из СтрокаОрганизации.ДоступныеСертификаты Цикл
			
			НоваяСтрока = ТзДоступныхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОрганизации);
			НоваяСтрока.ОрганизацияИДСтроки		 = ОрганизацияИДСтроки;
			НоваяСтрока.ОтпечатокСертификата	 = ОписаниеОтпечатка.Значение;
			НоваяСтрока.КоличествоДоступныхСертификатов	 = СтрокаОрганизации.ДоступныеСертификаты.Количество();
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСертификатов"				, Модуль_ЯдроНаСервере().КопияКоллекцииЗначений(ТаблицаСертификатов));
	Запрос.УстановитьПараметр("ТаблицаСертификатовОрганизаций"	, ТзДоступныхСертификатов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСертификатов.ОтпечатокСертификата КАК ОтпечатокСертификата,
	|	ТаблицаСертификатов.Представление КАК Представление,
	|	ТаблицаСертификатов.Наименование КАК Наименование,
	|	ТаблицаСертификатов.СрокДействия КАК СрокДействия,
	|	ТаблицаСертификатов.ГОСТ КАК ГОСТ,
	|	ТаблицаСертификатов.ИНН КАК ИНН,
	|	ТаблицаСертификатов.КПП КАК КПП
	|ПОМЕСТИТЬ ТЗСертификатов
	|ИЗ
	|	&ТаблицаСертификатов КАК ТаблицаСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСертификатовОрганизаций.ОрганизацияИДСтроки КАК ОрганизацияИДСтроки,
	|	ТаблицаСертификатовОрганизаций.КоличествоДоступныхСертификатов КАК КоличествоДоступныхСертификатов,
	|	ТаблицаСертификатовОрганизаций.ОтпечатокСертификата КАК ОтпечатокСертификата,
	|	ТаблицаСертификатовОрганизаций.ИНН КАК ИНН,
	|	ТаблицаСертификатовОрганизаций.КПП КАК КПП
	|ПОМЕСТИТЬ ТЗСертификатыОрганизаций
	|ИЗ
	|	&ТаблицаСертификатовОрганизаций КАК ТаблицаСертификатовОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗСертификатыОрганизаций.ОрганизацияИДСтроки КАК ОрганизацияИДСтроки,
	|	ТЗСертификатыОрганизаций.ОтпечатокСертификата КАК ОтпечатокСертификата,
	|	ТЗСертификатов.Представление КАК Представление,
	|	ТЗСертификатов.Наименование КАК Наименование,
	|	ТЗСертификатов.ГОСТ КАК ГОСТ,
	|	ТЗСертификатов.СрокДействия КАК СрокДействия,
	|	ТЗСертификатов.ОтпечатокСертификата КАК КоличествоСертификатов
	|ИЗ
	|	ТЗСертификатыОрганизаций КАК ТЗСертификатыОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗСертификатов КАК ТЗСертификатов
	|		ПО (ВЫБОР
	|				КОГДА ТЗСертификатыОрганизаций.КоличествоДоступныхСертификатов = 1
	|					ТОГДА ТЗСертификатыОрганизаций.ОтпечатокСертификата = ТЗСертификатов.ОтпечатокСертификата
	|				КОГДА ТЗСертификатыОрганизаций.КПП = """"
	|					ТОГДА ТЗСертификатыОрганизаций.ИНН = ТЗСертификатов.ИНН
	|				ИНАЧЕ ТЗСертификатыОрганизаций.ИНН = ТЗСертификатов.ИНН
	|						И ТЗСертификатыОрганизаций.КПП = ТЗСертификатов.КПП
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияИДСтроки,
	|	СрокДействия
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоСертификатов)
	|ПО
	|	ОрганизацияИДСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизацияИДСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизацияИДСтроки.Следующий() Цикл
		
		СтрокаОрганизации = ДоступныеОрганизации.Получить(ВыборкаОрганизацияИДСтроки.ОрганизацияИДСтроки);
		
		Если ВыборкаОрганизацияИДСтроки.КоличествоСертификатов = 0 Тогда
			
			ЗаполнитьОписаниеСертификата(СтрокаОрганизации, Неопределено, ВыборкаОрганизацияИДСтроки.КоличествоСертификатов);
			
		Иначе
			
			ВыборкаДетальныеЗаписи = ВыборкаОрганизацияИДСтроки.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ЗаполнитьОписаниеСертификата(СтрокаОрганизации, ВыборкаДетальныеЗаписи, ВыборкаОрганизацияИДСтроки.КоличествоСертификатов);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу организаций элементами из OrganizationList
//
// Параметры:
//  OrganizationList - Массив - см. Организации_ДоступныеОрганизации()
//  Подключение - Соответсвие - элемент коллекции ТекущиеСоединения
//
&НаСервере
Процедура ДополнитьСписокОрганизаций(OrganizationList, Подключение)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ОтпечатокСертификата = Модуль_Ядро.СвойствоСтруктуры(Подключение, "ОтпечатокСертификата", "");
	
	Для Каждого Organization Из OrganizationList Цикл
		
		BoxId = Organization.BoxId;
		
		СтрокаОрганизации = НайтиСтрокуВКоллекции(ДоступныеОрганизации, BoxId, "BoxId");
		
		Если СтрокаОрганизации = Неопределено Тогда
			
			СтрокаОрганизации = ДоступныеОрганизации.Добавить();
			СтрокаОрганизации.BoxId = BoxId;
			СтрокаОрганизации.OrgID = Organization.OrgID;
			СтрокаОрганизации.Наименование = Organization.Наименование;
			СтрокаОрганизации.Инн = Organization.ИНН;
			СтрокаОрганизации.Кпп = Organization.КПП;
			СтрокаОрганизации.ИдентификаторУчастникаЭДО = Organization.FnsParticipantId;
			СтрокаОрганизации.ОрганизацияДиадокСсылка = Модуль_Ядро.Организации_СсылкаПоИдентификатору(BoxId);
			КоллекцияИНН_КПП = Модуль_Ядро.ПараметрыВМассив(СтрокаОрганизации.ИНН, СтрокаОрганизации.КПП);
			СтрокаОрганизации.ИНН_КПП = Модуль_Ядро.СоединитьСтроку(КоллекцияИНН_КПП, "-");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			
			СтрокаОрганизации.ДоступныеСертификаты.Добавить(ОтпечатокСертификата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеТарифа()
	
	ВыводитьКолонкуТарифа = Ложь;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Для Каждого СтрокаОрганизации Из ДоступныеОрганизации Цикл
		
		Подключение = ТекущиеСоединения.Получить(СтрокаОрганизации.ОтпечатокСертификата);
		
		Если Не ЗначениеЗаполнено(Подключение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьОграниченияПоТарифу = Модуль_Ядро.КонтурШлюзАвторизации_ЭтоСтартовыйТариф(
				СтрокаОрганизации.BoxId, 
				Подключение.Токен);
				
		Если ЕстьОграниченияПоТарифу Тогда
			ВыводитьКолонкуТарифа = Истина;
			СтрокаОрганизации.Тариф = ИмяТарифаСтартовый();
			СтрокаОрганизации.КартинкаТарифа = АдресКартинкиТарифа;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДоступныеОрганизацииКартинкаТарифа.Видимость = ВыводитьКолонкуТарифа;

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ИмяТарифаСтартовый()
	
	Возврат "Стартовый";
	
КонецФункции

// Восстанавливает значения колонок таблицы организаций по сохраненным ранее данным
//  Список колонок: Использовать, колонки сертификата (см. ДанныеСертификатаДляСтрокиОрганизации() )
//
&НаСервере
Процедура ВосстановитьНастройкиСпискаОрганизаций()
	
	СохраненныеНастройки = СохраненныеНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаСервере();
		
		СохраненныеДоступныеОрганизации = СохраненныеНастройки.ДоступныеОрганизации;
		
		Если ТипЗнч(СохраненныеДоступныеОрганизации) = Тип("ТаблицаЗначений") Тогда
		
			СохраненныеДоступныеОрганизации = Модуль_Ядро.ТаблицаЗначенийВМассивСтруктур(СохраненныеДоступныеОрганизации);
		
		КонецЕсли; 
		
		Для Каждого СтрокаОрганизации Из СохраненныеДоступныеОрганизации Цикл
			
			ОтборОрганизаций = Новый Структура;
			ОтборОрганизаций.Вставить("BoxId"	 , СтрокаОрганизации.BoxId);
			
			СтрокиДоступныхОрганизаций = ДоступныеОрганизации.НайтиСтроки(ОтборОрганизаций);
			
			Если СтрокиДоступныхОрганизаций.Количество() = 1 Тогда
				
				СтрокаДоступнойОрганизации				 = СтрокиДоступныхОрганизаций[0];
				СтрокаДоступнойОрганизации.Использовать	 = Модуль_Ядро.СвойствоСтруктуры(СтрокаОрганизации, "Использовать", Истина);
				ОтпечатокСертификата					 = Модуль_Ядро.СвойствоСтруктуры(СтрокаОрганизации, "ОтпечатокСертификата", "");
				
				Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
					
					СтрокаСертификата = НайтиСтрокуВКоллекции(ТаблицаСертификатов, ОтпечатокСертификата, "ОтпечатокСертификата");
					
					Если СтрокаСертификата <> Неопределено И СтрокаСертификата.Выбран Тогда
						
						ЗаполнитьОписаниеСертификата(СтрокаДоступнойОрганизации
						, СтрокаСертификата
						, СтрокаДоступнойОрганизации.ДоступныеСертификаты.Количество());
						
					Иначе
						
						СтрокаДоступнойОрганизации.Использовать = Ложь
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеСертификата(СтрокаОрганизации, СтрокаСертификата, КоличествоСертификатов)
	
	ДанныеСертификата = ДанныеСертификатаДляСтрокиОрганизации(СтрокаСертификата, КоличествоСертификатов);
	ЗаполнитьЗначенияСвойств(СтрокаОрганизации, ДанныеСертификата);
	
КонецПроцедуры

// Описание сертификата в формате строки таблицы организаций
//
// Параметры:
//  СтрокаСертификата		 - Структура - см. функцию НоваяСтрокаСертификата()
//							 - ВыборкаДетальныеЗаписи - поля соответствуют функции НоваяСтрокаСертификата()
//							 - Неопределено 
//  КоличествоСертификатов	 - Число - Количество привязанных к организации сертификатов
// 
// Возвращаемое значение:
//  Структура - данные, представляющие номенклатуру ИБ:
//   * НаименованиеСертификата		 - Строка.
//   * ОтпечатокСертификата			 - Строка.
//   * ОписаниеСертификата			 - Строка	 - описание сертификата в формате: ИНН-КПП-Организация.
//   * ГОСТ							 - Строка	 - ГОСТ.
//   * РедактированиеСертификата	 - Строка	 - надпись в колонке редактирования сертификата.
//   * КартинкаИзменитьСертификат	 - Число	 - индекс картинки редактирования сертификата для таблицы формы.
//   * КартинкаСертификат			 - Число	 - индекс картинки наличия сертификата для таблицы формы.
//
&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСертификатаДляСтрокиОрганизации(Знач СтрокаСертификата, Знач КоличествоСертификатов)
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеСертификата"	, "");
	Результат.Вставить("ОтпечатокСертификата"		, "");
	Результат.Вставить("ОписаниеСертификата"		, "");
	Результат.Вставить("ГОСТ"						, "");
	Результат.Вставить("РедактированиеСертификата"	, "");
	Результат.Вставить("КартинкаИзменитьСертификат"	, 1);
	Результат.Вставить("КартинкаСертификат"			, 0);
		
	Если СтрокаСертификата = Неопределено Тогда
	
		СтрокаСертификата					 = НоваяСтрокаСертификата(); 
		Результат.РедактированиеСертификата	 = "Выбрать сертификат";
		
	Иначе
		
		Результат.КартинкаСертификат = 1;
		
		Если КоличествоСертификатов = 1 Тогда
			Результат.КартинкаИзменитьСертификат	 = 0;
		ИначеЕсли КоличествоСертификатов > 1 Тогда
			Результат.КартинкаИзменитьСертификат	 = 2;
			Результат.РедактированиеСертификата	 = "Изменить сертификат";
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НаименованиеСертификата	 = СтрокаСертификата.Наименование;
	Результат.ОтпечатокСертификата		 = СтрокаСертификата.ОтпечатокСертификата;
	Результат.ОписаниеСертификата		 = СтрокаСертификата.Представление;
	Результат.ГОСТ						 = СтрокаСертификата.ГОСТ;
	
	Возврат Результат;
	
КонецФункции

// Описание строки сертификата при авторизации
// 
// Возвращаемое значение:
//  Структура
&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаСертификата()
	
	Результат = Новый Структура();
	Результат.Вставить("Наименование");
	Результат.Вставить("ОтпечатокСертификата");
	Результат.Вставить("Представление");
	Результат.Вставить("ГОСТ");
	Результат.Вставить("ИстекаетСрок");
	Результат.Вставить("Организация");
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	Результат.Вставить("Издатель");
	Результат.Вставить("ДатаВыдачи");
	Результат.Вставить("СрокДействия");
	Результат.Вставить("Выбран");
	
	Возврат Результат;
	
КонецФункции

// Восстанавливает таблицу ДоступныеОрганизации из сохраненных настроек
// 
&НаСервере
Процедура ВосстановитьДоступныеОрганизацииИзНастроек()
	
	ДоступныеОрганизации.Очистить();
	СохраненныеНастройки = СохраненныеНастройкиАвторизации(ЭтоАвторизацияПоСертификату);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		СохраненныеДоступныеОрганизации = СохраненныеНастройки.ДоступныеОрганизации;
		
		Для каждого СохраненнаяОрганизация Из СохраненныеДоступныеОрганизации Цикл
			
			СтрокаОрганизации = ДоступныеОрганизации.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаОрганизации, СохраненнаяОрганизация);
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГалочкуВыбратьВсеПоСпискуОрганизаций()

	Если ДоступныеОрганизации.Количество() > 0 Тогда
		НеВыбраннаяСтрока = НайтиСтрокуВКоллекции(ДоступныеОрганизации, Ложь, "Использовать");
		ВыбратьВсеОрганизации = НеВыбраннаяСтрока = Неопределено;
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Список сертификатов

&НаКлиенте
Процедура ЗаполнитьТаблицуСертификатов()
	
	ТаблицаСертификатов.Очистить();
	
	СписокСертификатов = Новый Массив;
	
	Попытка
		
		Модуль_Ядро = Модуль_ЯдроНаКлиенте();
		
		Модуль_Ядро.ПроверитьПодключениеКонтурПлагина();
		
		СписокСертификатов = Модуль_Ядро.Сертификаты_СписокСертификатов();
		
	Исключение
		
		ТаблицаСертификатов.Очистить();
		
		Ошибка = ИнформацияОбОшибке();
		
		ДекорацияСертификатНедоступен = КраткоеПредставлениеОшибки(Ошибка);
		
		Категория	 = Метрика_ВозможныеКатегории().Авторизация;
		Действие	 = Метрика_ВозможныеДействия().ОткрытиеФормы;
		ТекстОшибки	 = ПодробноеПредставлениеОшибки(Ошибка);
		Метрика_ЗаписатьОшибку(ТекстОшибки, Категория, Действие, "НетДоступаКСертификатам");
		
	КонецПопытки;
	
	Для Каждого Сертификат Из СписокСертификатов Цикл
		
		Стр = ТаблицаСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Сертификат);
		
		Если СтрДлина(Стр.ИНН) = 12 Тогда
			Стр.КПП = "";
		КонецЕсли; 
		
		ИНН_КПП = Модуль_Ядро.СоединитьСтроку(Модуль_Ядро.ПараметрыВМассив(Стр.ИНН, Стр.КПП), "-");
		Стр.Представление = Модуль_Ядро.СоединитьСтроку(Модуль_Ядро.ПараметрыВМассив(ИНН_КПП, Стр.Организация), " • ");
		Стр.ИстекаетСрок = 60*60*24*30 >= (Стр.СрокДействия - ТекущаяДата());
		
	КонецЦикла;
	
	ТаблицаСертификатов.Сортировать("Наименование, ДатаВыдачи убыв");
	
КонецПроцедуры

&НаКлиенте
Функция НетДоступаКСертификатам()
	
	Результат = Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоСертификатуНедоступен;
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ПроверитьСертификатыНаУстаревшийГОСТ(ВыбранныеСертификаты)

	Результат = Ложь;
	
	УстаревшиеСертификаты = СертификатыГОСТ2001(ВыбранныеСертификаты);
	
	Результат = УстаревшиеСертификаты.Количество() > 0;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СертификатыГОСТ2001(ВыбранныеСертификаты)
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаСертификата Из ВыбранныеСертификаты Цикл
		
		Если СтрокаСертификата.ГОСТ = "2001" Тогда
			
			НайденныйСертификат = Результат.Найти(СтрокаСертификата.Отпечаток);
			
			Если НайденныйСертификат = Неопределено Тогда
				
				Результат.Добавить(СтрокаСертификата.Отпечаток);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоответствияСертификатов(СтрокаОрганизации)
	
	Если СтрокаОрганизации.ДоступныеСертификаты.Количество() < 2 Тогда
		Возврат;
	КонецЕсли; 
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборОрганизаций;
	Если ЗначениеЗаполнено(СтрокаОрганизации.ОтпечатокСертификата) Тогда
		Действие	 = Метрика_ВозможныеДействия().ИзменитьСертификат;
	Иначе
		Действие	 = Метрика_ВозможныеДействия().ВыбратьСертификат;
	КонецЕсли;
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, , Организацияboxid);
	
	Если ТаблицаСертификатов.Количество() = 0 Тогда
		ЗаполнитьТаблицуСертификатов();
		ВосстановитьНастройкиСтраницы_Сертификат();
	КонецЕсли;
	
	ДоступныеСертификатыМассив = СтрокаОрганизации.ДоступныеСертификаты.ВыгрузитьЗначения();
	ОписанияСертификатов = Новый Массив;
	Для каждого СтрокаСертификата Из ТаблицаСертификатов Цикл
		
		Если ДоступныеСертификатыМассив.Найти(СтрокаСертификата.ОтпечатокСертификата) <> Неопределено Тогда
			
			ОписаниеСертификата = НоваяСтрокаСертификата();
			ЗаполнитьЗначенияСвойств(ОписаниеСертификата, СтрокаСертификата, , "Выбран");
			
			Если СтрокаОрганизации.ОтпечатокСертификата = ОписаниеСертификата.ОтпечатокСертификата Тогда
				ОписаниеСертификата.Выбран = Истина;
			КонецЕсли;
			
			ОписанияСертификатов.Добавить(ОписаниеСертификата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организация"			, СтрокаОрганизации.Наименование);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияBoxId"		, СтрокаОрганизации.boxid);
	ПараметрыОткрытияФормы.Вставить("ОписанияСертификатов"	, ОписанияСертификатов);
	ПараметрыОткрытияФормы.Вставить("ТекущийРежимФормы"		, РежимФормыВыборСертификата());
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("СтрокаОрганизации"		, СтрокаОрганизации);
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ФормаРедактированияСоответствияСертификатовПослеВыбора", ЭтаФорма, ПараметрыОповещения);
	
	ОткрытьФормуДиадокМодально("АвторизацияУправляемая", ЭтаФорма, ПараметрыОткрытияФормы, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ИндексСрокиТаблицы(Таблица, Строка)
	
	Результат = Строка.ПолучитьИдентификатор();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Приступить к работе

&НаКлиенте
Процедура КомандаПриступитьКРаботе(Команда)
	
	ПриступитьКРаботе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриступитьКРаботе()
	
	Метрика_ПриступитьКРаботе();
	
	Модуль_ЯдроНаКлиенте().КонтекстСеанса_Очистить();
	
	Результат = ИнициализироватьНовыйКонтекстСеанса();
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		
		Для каждого ОписаниеОшибки Из Результат.Ошибки Цикл
			
			ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ВывестиОтложеныеСообщенияПослеЗакрытияОсновногоСообщения", ЭтаФорма, ОписаниеОшибки.СообщенияДляОтложеногоВывода);
			
			мПоказатьПредупреждение(
				ОписаниеОшибки.ТекстОшибки,,,
				ОписаниеОповещения
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		
		ПослеИнициализацииКонтекстаСеанса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьНовыйКонтекстСеанса()
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки"		, Новый Массив);
	Результат.Вставить("Успешно"	, Ложь);
	
	ИнициализацияВозможна = ВозможнаИнициализацияНовогоКонтекстаСеанса(Результат.Ошибки);
	
	Если ИнициализацияВозможна Тогда
		
		ОрганизацииДляВхода = ДоступныеОрганизации.НайтиСтроки(Новый Структура("Использовать", Истина));
		
		ЗаполнитьОрганизациюДиадокВСтроке(ОрганизацииДляВхода);
		
		Результат.Успешно = ЗаполнитьКонтекстСеанса(ОрганизацииДляВхода);
		
		Если Результат.Успешно Тогда
			
			СохранитьНастройки(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВозможнаИнициализацияНовогоКонтекстаСеанса(МасcивОшибок)
	
	Модуль_Ядро			 = Модуль_ЯдроНаСервере();
	ЭтоОбычноеПриложение = Модуль_Ядро.ЭтоОбычноеПриложение();
	ОрганизацииДляВхода	 = ДоступныеОрганизации.НайтиСтроки(Новый Структура("Использовать", Истина));
	
	Если ОрганизацииДляВхода.Количество() = 0 Тогда
		
		ОписаниеОшибки				 = Новый_ОписаниеОшибки();
		ОписаниеОшибки.ТекстОшибки	 = "Не выбрано ни одной организации для работы";
		МасcивОшибок.Добавить(ОписаниеОшибки);
		
		Категория			 = Модуль_Ядро.Метрика_НазваниеКатегории().ВыборОрганизаций;
		Действие			 = Модуль_Ядро.Метрика_НазваниеДействий().ПриступитьКРаботе;
		ДопПеременные		 = Новый Соответствие;
		ДопПеременные.Вставить("Идентификатор ошибки"	, "НеВыбранаОрганизация");
		Модуль_Ядро.Метрика_ДобавитьОшибку_СУчетомЗаполненияКонтекста(Категория, Действие, ОписаниеОшибки.ТекстОшибки, ДопПеременные);
		
	КонецЕсли;
	
	Если ЭтоАвторизацияПоСертификату Тогда
		
		ОрганизацииСПустымСертификатом = ДоступныеОрганизации.НайтиСтроки(Новый Структура("Использовать, ОтпечатокСертификата", Истина, ""));
		
		КоличествоСтрок = ОрганизацииСПустымСертификатом.Количество();
		
		Если КоличествоСтрок > 0 Тогда
			
			ТекстОшибки = "";
			
			Если КоличествоСтрок = 1 Тогда
				ТекстОшибки = "Выберите сертификат для организации " + ОрганизацииСПустымСертификатом[0].Наименование;
			ИначеЕсли КоличествоСтрок > 1 Тогда
				ПараметрыПредметаИсчисления	 = "организации,организаций,организаций,м,,,,м,0";
				ПостфиксЧисла				 = Модуль_Ядро.Общее_ПолучитьСклоненияСтрокиПоЧислу(КоличествоСтрок, "", ПараметрыПредметаИсчисления);
				ТекстОшибки					 = "Выберите сертификаты для " + КоличествоСтрок + " " + ПостфиксЧисла;
			КонецЕсли; 
			
			ШаблонОшибкиСтроки = "В строке %1 не выбран сертификат";
			
			Категория			 = Модуль_Ядро.Метрика_НазваниеКатегории().ВыборОрганизаций;
			Действие			 = Модуль_Ядро.Метрика_НазваниеДействий().ПриступитьКРаботе;
			ДопПеременные		 = Новый Соответствие;
			ДопПеременные.Вставить("Идентификатор ошибки"	, "НеВыбранСертификат");
			
			СообщенияДляОтложеногоВывода = Новый Массив;
			Для каждого СтрокаОрганизации Из ОрганизацииСПустымСертификатом Цикл
				
				ИндексСтроки = ДоступныеОрганизации.Индекс(СтрокаОрганизации);
				
				ТекстОшибкиСтроки = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(ШаблонОшибкиСтроки, ИндексСтроки + 1);
				
				Если НЕ ЭтоОбычноеПриложение Тогда
					
					Поле							 = "ДоступныеОрганизации["+ИндексСтроки+"].ОписаниеСертификата";
					СообщениеДляВывода				 = НовыйОписаниеСообщенияДляВывода();
					СообщениеДляВывода.ТекстОшибки	 = ТекстОшибкиСтроки;
					СообщениеДляВывода.Поле			 = Поле;
					СообщенияДляОтложеногоВывода.Добавить(СообщениеДляВывода);
					
				КонецЕсли;
				
				Модуль_Ядро.Метрика_ДобавитьОшибку_ДляОрганизации(СтрокаОрганизации.BoxID, Категория, Действие, ТекстОшибкиСтроки, ДопПеременные);
				
			КонецЦикла; 
			
			ОписаниеОшибки						 = Новый_ОписаниеОшибки();
			ОписаниеОшибки.ТекстОшибки			 = ТекстОшибки;
			ОписаниеОшибки.СообщенияДляОтложеногоВывода	 = СообщенияДляОтложеногоВывода;
			МасcивОшибок.Добавить(ОписаниеОшибки);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	ВыбраныРазныеТарифы = НЕ ВыбранныеОрганизацииИмеютОдинаковыйТариф();
	
	Если ВыбраныРазныеТарифы Тогда
		
		ТекстОшибки = НСтр("ru='Вы попытались авторизоваться под организациями с разными 
								|тарифными планами. Одновременное использование тарифов 
								|""Стартовый"" и ""Универсальный"" невозможно. 
								|Выберите организации, которые используют один тариф.'");
						
		ОписаниеОшибки						 = Новый_ОписаниеОшибки();
		ОписаниеОшибки.ТекстОшибки			 = ТекстОшибки;
		МасcивОшибок.Добавить(ОписаниеОшибки);
		
		Метрика_НазваниеКатегории = Модуль_Ядро.Метрика_НазваниеКатегории();
		Метрика_НазваниеДействий = Модуль_Ядро.Метрика_НазваниеДействий();
		
		ДопПеременные = Новый Соответствие;
		ДопПеременные.Вставить("Идентификатор ошибки", "ВыбраныРазныеТарифы");
		
		Модуль_Ядро.Метрика_ДобавитьОшибку_СУчетомЗаполненияКонтекста(
				Метрика_НазваниеКатегории.ВыборОрганизаций, 
				Метрика_НазваниеДействий.ПриступитьКРаботе, 
				ОписаниеОшибки.ТекстОшибки, 
				ДопПеременные);
		
	КонецЕсли;
	
	Результат = МасcивОшибок.Количество() = 0;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеОрганизацииИмеютОдинаковыйТариф()
	
	ОрганизацииДляВхода = ДоступныеОрганизации.НайтиСтроки(Новый Структура("Использовать", Истина));
	
	КопияВыбранныхТарифов = ДоступныеОрганизации.Выгрузить(ОрганизацииДляВхода);
	КопияВыбранныхТарифов.Свернуть("Тариф");
	Результат = КопияВыбранныхТарифов.Количество() <= 1;
	
	Возврат Результат;
	
КонецФункции

// Заполняет контекст сеанса данными из сервиса Диадок.
&НаСервере
Функция ЗаполнитьКонтекстСеанса(НастройкиФормыАвторизации)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Настройки = Новый Массив;
	
	Для Каждого ТекНастройка Из НастройкиФормыАвторизации Цикл
		Настройки.Добавить(СтрокаНастройкиОрганизацииВСтруктуру(ТекНастройка));
	КонецЦикла;
	
	Попытка
		
		Результат = Модуль_Ядро.КонтекстСеанса_Заполнить(Настройки, ТекущиеСоединения);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Категория			 = Модуль_Ядро.Метрика_НазваниеКатегории().ВыборОрганизаций;
		Действие			 = Модуль_Ядро.Метрика_НазваниеДействий().ПриступитьКРаботе;
		boxIdДляМетрики		 = "";
		Если Настройки.Количество() > 0 Тогда
			boxIdДляМетрики	 = Настройки[0].boxId;
		КонецЕсли;
		ДопПеременные		 = Новый Соответствие;
		ДопПеременные.Вставить("Идентификатор ошибки"	, "НеизвестнаяОшибка");
		Модуль_Ядро.Метрика_ДобавитьОшибку_ДляОрганизации(boxIdДляМетрики, Категория, Действие, ПодробноеПредставлениеОшибки, ДопПеременные);
		
	КонецПопытки;
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_Авторизации(Настройки);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_НастройкиОрганизацияПриАвторизации(Настройки);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ВидыДокументовПриАвторизации(Настройки);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_Плагины();
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПредложенияДляПокупки();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтрокаНастройкиОрганизацииВСтруктуру(СтрокаНастройки)
	
	Результат = Новый Структура(
		"Использовать, boxId, Наименование, ИНН, КПП, ОрганизацияДиадокСсылка, ОтпечатокСертификата, Облачный"
		);
		
	ЗаполнитьЗначенияСвойств(Результат, СтрокаНастройки);
	
	Возврат Результат;
	
КонецФункции

// СХ1: по данным организации ДД создает/изменяет записи в справочнике Юр./физ лица, и заполняет ссылкой реквизит ОрганизацияДиадокСсылка
//
// Параметры:
//  МассивСтрокОрганизаций - Массив - элементом массива является строка таблицы значений, описываюшая организацию ДД
//
&НаСервере
Процедура ЗаполнитьОрганизациюДиадокВСтроке(МассивСтрокОрганизаций)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Для Каждого ВыбраннаяСтрока Из МассивСтрокОрганизаций Цикл
		
		ОрганизацияДиадок = ВыбраннаяСтрока.ОрганизацияДиадокСсылка;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияДиадок) Тогда
			
			КонтрактОрганизации = Модуль_Ядро.Контракт_ОрганизацияЭДО();
			
			КонтрактОрганизации.ID = ВыбраннаяСтрока.BoxId;
			КонтрактОрганизации.OrgID = ВыбраннаяСтрока.OrgID;
			КонтрактОрганизации.ИНН = ВыбраннаяСтрока.ИНН;
			КонтрактОрганизации.КПП = ВыбраннаяСтрока.КПП;
			КонтрактОрганизации.Наименование = ВыбраннаяСтрока.Наименование;
			
			КонтрактОрганизации.ИдентификаторУчастникаЭДО = ВыбраннаяСтрока.ИдентификаторУчастникаЭДО;
			
			ВыбраннаяСтрока.ОрганизацияДиадокСсылка = Модуль_Ядро.Организации_ЗаписатьЭлемент(КонтрактОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииКонтекстаСеанса()
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимАвторизации", РежимАвторизации);
	ПараметрыОповещения.Вставить("Успешно", Истина);
	
	Закрыть(ПараметрыОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕКОРАЦИИ ФОРМЫ

&НаКлиенте
Процедура Декорация_ПодробнееНажатие(Элемент)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ПоСертификату;
	Действие		 = Метрика_ВозможныеДействия().Подробнее;
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы);
	
	Элементы.ДекорацияСертификатНедоступен.Видимость = НЕ Элементы.ДекорацияСертификатНедоступен.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация_ЗабылиПарольНажатие(Элемент)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ПоЛогину;
	Действие		 = Метрика_ВозможныеДействия().ЗабылиПароль;
	ДопПеременные	 = Новый Соответствие;
	ДопПеременные.Вставить("Логин", Логин);
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные, , Истина);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	АдресаИнтернетРесурсов = Ядро.Перечисление_АдресаИнтернетРесурсов();
	
	ПерейтиПоНавигационнойСсылке(АдресаИнтернетРесурсов.СтраницаСменыПароля);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация_НетСертификатаНажатие(Элемент)
	
	Метрика_НетСертификатаНажатие();
	
	ПоказатьФормуНетНужногоСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНетНужногоСертификата()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПропуститьВыборОрганизацииДляЧатаИEmail", Истина);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "НетНужногоСертификата");
	ПараметрыОткрытияФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация_НужнаПомощьНажатие(Элемент)
	
	ОткрытьЦентрПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦентрПоддержки()
	
	НазваниеФормы	= Метрика_НазваниеФормы();
	Категория		= Метрика_ВозможныеКатегории().ПоСертификату;
	
	ОсновнаяФорма().ЦентрПоддержки_Открыть(Категория, НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСДаннымиСертификата(ДанныеТекущейСтроки)
	
	ОписаниеСертификата = Модуль_ЯдроНаКлиенте().Сертификаты_Контракт_ОписаниеСертификата();
	ЗаполнитьЗначенияСвойств(ОписаниеСертификата, ДанныеТекущейСтроки);
	
	ОсновнаяФорма().ОткрытьФормуСДаннымиСертификата(ОписаниеСертификата, ЭтаФорма);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ФормаРедактированияСоответствияСертификатовПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
	
		СтрокаСертификата = НайтиСтрокуВКоллекции(ТаблицаСертификатов, Результат, "ОтпечатокСертификата");
		Если СтрокаСертификата <> Неопределено Тогда
			
			СтрокаОрганизации = ДополнительныеПараметры.СтрокаОрганизации;
			
			ОписаниеСертификата = НоваяСтрокаСертификата();
			ЗаполнитьЗначенияСвойств(ОписаниеСертификата, СтрокаСертификата);
			
			ДанныеСертификата = ДанныеСертификатаДляСтрокиОрганизации(ОписаниеСертификата, СтрокаОрганизации.ДоступныеСертификаты.Количество());
			
			ЗаполнитьЗначенияСвойств(СтрокаОрганизации, ДанныеСертификата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеРежимаВходаПриИзменении(Элемент)
	
	ЭтоАвторизацияПоСертификату = ТекущийРежимАвторизацииПоСертификату(РежимАвторизации);
	
	МеткаМетрики	 = Метрика_ВозможныеКатегории().СменаВкладки;
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Если ЭтоАвторизацияПоСертификату Тогда
		ДействиеМетрики = Метрика_ВозможныеДействия().ПоСертификату;
	Иначе
		ДействиеМетрики = Метрика_ВозможныеДействия().ПоПаролю;
	КонецЕсли;
	
	ДопПеременные	 = Новый Соответствие;
	ДопПеременные.Вставить("Имя вкладки", ДействиеМетрики);
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, МеткаМетрики, ДействиеМетрики, "Нажать кнопку", НазваниеФормы, ДопПеременные);
	
	ПереключитьРежимФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОрганизацииВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоступныеОрганизации.ТекущиеДанные;
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборОрганизаций;
	Действие		 = Метрика_ВозможныеДействия().Чекбокс;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("true/false"				, ТекущиеДанные.Использовать);
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные, ТекущиеДанные.boxid);
	
	НеВыбраннаяСтрока = НайтиСтрокуВКоллекции(ДоступныеОрганизации, Ложь, "Использовать");
	ВыбратьВсеОрганизации = НеВыбраннаяСтрока = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КАвторизации(Команда)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборОрганизаций;
	Действие		 = Метрика_ВозможныеДействия().КАвторизации;
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы,Категория, Действие, "Нажать кнопку", НазваниеФормы);
	
	ТекущийРежимФормы = РежимФормыАвторизация();
	ПереключитьРежимФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаСертификатовКартинкаДанныеСертификата" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеТекущейСтроки = Элементы.ТаблицаСертификатов.ТекущиеДанные;
		
		НазваниеФормы	 = Метрика_НазваниеФормы();
		Действие		 = Метрика_ВозможныеДействия().ОткрытьСертификат;
		ДопПеременные	 = Новый Соответствие;
		ДопПеременные.Вставить("Отпечаток"		, ДанныеТекущейСтроки.ОтпечатокСертификата);
		ДопПеременные.Вставить("Срок действия"	, ДанныеТекущейСтроки.СрокДействия);
		
		Если ТекущийРежимФормы = РежимФормыВыборСертификата() Тогда
			
			Категория	 = Метрика_ВозможныеКатегории().ВыборСертификата;
			Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", "Выбор сертификата", ДопПеременные, Организацияboxid);
			
		Иначе
			
			Категория	 = Метрика_ВозможныеКатегории().ПоСертификату;
			Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные);
			
		КонецЕсли;
		
		ОткрытьФормуСДаннымиСертификата(ДанныеТекущейСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСертификатов.ТекущиеДанные;
	
	Если ТекущийРежимФормы = РежимФормыВыборСертификата() Тогда
		
		НазваниеФормы	 = Метрика_НазваниеФормы();
		Категория		 = Метрика_ВозможныеКатегории().ВыборСертификата;
		Действие		 = Метрика_ВозможныеДействия().Переключатель;
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", "Выбор сертификата", , Организацияboxid);

		ИндексТекущейСтроки = ИндексСрокиТаблицы(ТаблицаСертификатов, ТекущиеДанные);
		Для каждого СтрокаСертификата Из ТаблицаСертификатов Цикл
			
			ИндексСтроки = ИндексСрокиТаблицы(ТаблицаСертификатов, СтрокаСертификата);
			Если СтрокаСертификата.Выбран = Истина И ИндексСтроки <> ИндексТекущейСтроки Тогда
				
				СтрокаСертификата.Выбран = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НазваниеФормы	 = Метрика_НазваниеФормы();
		Категория		 = Метрика_ВозможныеКатегории().ПоСертификату;
		Действие		 = Метрика_ВозможныеДействия().ЧекБокс;
		
		ДопПеременные = Новый Соответствие;
		ДопПеременные.Вставить("Отпечаток"	, ТекущиеДанные.ОтпечатокСертификата);
		ДопПеременные.Вставить("true/false"	, ТекущиеДанные.Выбран);
		Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВыборСертификата(Команда)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборСертификата;
	Действие		 = Метрика_ВозможныеДействия().Сохранить;
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", "Выбор сертификата", , Организацияboxid);
	
	СтрокаСертификата = НайтиСтрокуВКоллекции(ТаблицаСертификатов, Истина, "Выбран");
	
	Если СтрокаСертификата <> Неопределено Тогда
		Попытка
			Закрыть(СтрокаСертификата.ОтпечатокСертификата);
		Исключение
			
			Категория	 = Метрика_ВозможныеКатегории().ПоСертификату;
			Действие	 = Метрика_ВозможныеДействия().Сохранить;
			ТекстОшибки	 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Метрика_ЗаписатьОшибку(ТекстОшибки, Категория, Действие, "НеизвестнаяОшибка");
			
			Модуль_ЯдроНаКлиенте().Ошибка_Обработать("Выбор сертификата", ТекстОшибки);
			
		КонецПопытки;
	Иначе
		Категория	 = Метрика_ВозможныеКатегории().ПоСертификату;
		Действие	 = Метрика_ВозможныеДействия().Сохранить;
		ТекстОшибки	 = "Выберите сертификат для авторизации " + Организация;
		Метрика_ЗаписатьОшибку(ТекстОшибки, Категория, Действие, "НеВыбранСертификат");
		
		мПоказатьПредупреждение(ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборСертификата(Команда)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборСертификата;
	Действие		 = Метрика_ВозможныеДействия().Отменить;
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", "Выбор сертификата", , Организацияboxid);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДоступныеОрганизацииРедактированиеСертификата" Тогда
		ДанныеСтроки = Элементы.ДоступныеОрганизации.ТекущиеДанные;
		ОткрытьФормуРедактированияСоответствияСертификатов(ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОрганизацииПриИзменении(Элемент)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборОрганизаций;
	Действие		 = Метрика_ВозможныеДействия().ВыбратьВсе;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("true/false"				, ВыбратьВсеОрганизации);
	ДопПеременные.Вставить("Количество строк в ТЧ"	, ДоступныеОрганизации.Количество());
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПеременные);
	
	Для каждого СтрокаОрганизации Из ДоступныеОрганизации Цикл
		СтрокаОрганизации.Использовать = ВыбратьВсеОрганизации;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ПоЛогину;
	Действие		 = Метрика_ВозможныеДействия().ЭлектроннаяПочта;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, Категория, Действие, "Нажать кнопку");
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ПоЛогину;
	Действие		 = Метрика_ВозможныеДействия().Пароль;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, Категория, Действие, "Нажать кнопку");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ОткрытьФормуДиадокМодально(мИмяФормы,
									мВладелецФормы,
									ПараметрыФормы = Неопределено,
									ОписаниеОповещения = Неопределено,
									РежимБлокирования = Неопределено)
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально(мИмяФормы,
									мВладелецФормы,
									ПараметрыФормы,
									ОписаниеОповещения,
									РежимБлокирования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Аналог "ТаблицаЗначений.Найти(Значение, ИмяКолонки)" из ОФ
Функция НайтиСтрокуВКоллекции(Коллекция, Значение, ИмяКолонки)
	
	Строки = Коллекция.НайтиСтроки(Новый Структура(ИмяКолонки, Значение));
	
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0];
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура мПоказатьПредупреждение(Текст, Таймаут = 0, Заголовок = Неопределено, Оповещение = Неопределено)
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(Оповещение , Текст, Таймаут, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура мПоказатьВопрос(ТекстВопроса,
			Кнопки,
			Таймаут = 0,
			КнопкаПоУмолчанию = Неопределено,
			Заголовок = Неопределено,
			КнопкаТаймаута = Неопределено,
			Оповещение = Неопределено)
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение,
										ТекстВопроса,
										Кнопки,
										Таймаут,
										КнопкаПоУмолчанию,
										Заголовок,
										КнопкаТаймаута);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтложеныеСообщенияПослеЗакрытияОсновногоСообщения(МассивСообщений) Экспорт
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Для каждого Соообщение Из МассивСообщений Цикл
		
		Модуль_Ядро.Ошибка_СообщитьПользователю(Соообщение.ТекстОшибки, УникальныйИдентификатор, Соообщение.Поле);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Новый_ОписаниеОшибки()
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки"					, "");
	Результат.Вставить("СообщенияДляОтложеногоВывода"	, Новый Массив);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйОписаниеСообщенияДляВывода()
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки"		, "");
	Результат.Вставить("Поле"	, Новый Массив);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Метрики

&НаКлиенте
Процедура Метрика_НетСертификатаНажатие()
	
	НазваниеФормы = Метрика_НазваниеФормы();
	Категория = Метрика_ВозможныеКатегории().ПоСертификату;
	Действие = Метрика_ВозможныеДействия().НетНужногоСертификата;
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ВозможныеДействия()

	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеДействий();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ВозможныеКатегории()
	
	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеКатегории();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьСводноеСобытие(ИмяФормы, КатегорияМетрики, ДействиеМетрики, Метка, Представление, ДопПеременные = Неопределено, boxid = "", ОтправитьСПустымBoxid = Ложь)
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(ИмяФормы, КатегорияМетрики, ДействиеМетрики, Метка, Представление);
	
	Если ЗначениеЗаполнено(boxid) ИЛИ ОтправитьСПустымBoxid Тогда
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(boxid, КатегорияМетрики, ДействиеМетрики, , ДопПеременные);
	Иначе
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПеременные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ЗаписатьОшибку(ТекстОшибки, Категория, Действие, ИдентификаторОшибки)
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Идентификатор ошибки"	, ИдентификаторОшибки);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьОшибку_СУчетомЗаполненияКонтекста(Категория, Действие, ТекстОшибки, ДопПеременные);
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеФормы()

	Результат = "Авторизация";
	
	Если ТекущийРежимФормы = РежимФормыВыборСертификата() Тогда
		
		Результат = "ВыборСертифаката";
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ПриступитьКРаботе()
	
	НазваниеФормы	 = Метрика_НазваниеФормы();
	Категория		 = Метрика_ВозможныеКатегории().ВыборОрганизаций;
	Действие		 = Метрика_ВозможныеДействия().ПриступитьКРаботе;
	
	ВыбранныеОрганизации = ДоступныеОрганизации.НайтиСтроки(Новый Структура("Использовать", Истина));
	ДопПараметры = Новый Соответствие;
	ДопПараметры.Вставить("КоличествоВыбранныхОрганизаций", ВыбранныеОрганизации.Количество());
	
	boxIdДляМетрики		 = "";
	Если ВыбранныеОрганизации.Количество() > 0 Тогда
		boxIdДляМетрики	 = ВыбранныеОрганизации[0].boxId;
	КонецЕсли;
	
	Метрика_ДобавитьСводноеСобытие(НазваниеФормы, Категория, Действие, "Нажать кнопку", НазваниеФормы, ДопПараметры, boxIdДляМетрики);
	
КонецПроцедуры

