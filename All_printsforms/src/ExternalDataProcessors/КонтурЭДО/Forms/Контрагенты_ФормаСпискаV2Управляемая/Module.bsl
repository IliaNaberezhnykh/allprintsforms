&НаСервере
Перем ОбработкаОбъект;

//{		Сервисные методы

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если НЕ СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(
					Новый Структура("ОбработкаОбъект", ОбработкаОбъект),
					Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект
				);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущейФормы()
	
	Возврат "Контрагенты_ФормаСпискаV2";
	
КонецФункции

//}		Сервисные методы

//{		Стартовые методы формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	Если ТекущийРежимСписка = "ПоискИПриглашение" ИЛИ ТекущийРежимСписка = "ВашиКонтрагенты" Тогда
		
		ПоказатьФормуНовоеВВерсииОтложенно(ТекущийРежимСписка);
		
	КонецЕсли;
	
	Элементы.ПолеПоиска.ОбновитьТекстРедактирования();
	
	ПодключитьОбработчикОжидания("ПослеОткрытия", 0.01, Истина);
	
	Метрики_ЗаписатьСтатистику_ОткрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	
	СтартоваяИнициализацияСпискаНаСервере();
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура СтартоваяИнициализацияСпискаНаСервере()
	
	ОписаниеЗамераОбщее = Метрика_ОписаниеЗамера_ОбщийЗамерПолученияСпискаКонтрагентов();
	
	Если ИспользуетсяПодсистемаДиадок() Тогда
		
		Список = ПолучитьСписокКонтрагентовНаСервере();
		
		Если Список.Количество() = 0 Тогда
			
			ОписаниеЗамераПолученияКонтрагентов = Метрика_ОписаниеЗамера_СинхронизацияКонтрагентов();
			
			ВыполнитьСинхронизациюКонтрагентов();
			
			Метрика_ЗавершитьЗамер_СинхронизацияКонтрагентов(ОписаниеЗамераПолученияКонтрагентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеЗамераобновлениеСписка = Метрика_ОписаниеЗамера_ОбновлениеСписка();
	
	ЗаполнитьСписокКонтрагентовНаФорме();
	
	Метрика_ЗавершитьЗамер_ОбновлениеСписка(ОписаниеЗамераобновлениеСписка);
	Метрика_ЗавершитьЗамер_ОбщийЗамерПолученияСпискаКонтрагентов(ОписаниеЗамераОбщее);
	
	Если ЗначениеЗаполнено(ПолеПоиска) Тогда
		ЗначениеПоиска = ПолеПоиска;
		ПрименитьФильтрыДляСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтрагентовНаСервере()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		
		Результат = Модуль_Ядро.Контрагенты_СписокДляРазделаПоискИПриглашение(ДанныеОрганизации);
		
	Иначе
		
		Результат = Модуль_Ядро.Контрагенты_СписокДляРазделаВашиКонтрагенты(ДанныеОрганизации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьПараметрыФормы(Параметры);
	
	ЗаполнитьСпискиВыбораФормы();
	
	ОбработатьВыборОрганизации();
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьКнопкиВыполнитьОбменССервером();
	
	ИнициализироватьНастройку_НовоеВВерсии_БольшеНеПоказывать();
	
	ИнициализироватьСхемыКомпоновкиДанных();
	
	ИнициализироватьКомпоновщикНастроекСКД();
	
	ПоказатьЗаглушкуДлительнойОперацииНаСервере();
	
	ИнициализироватьАдресВХранилищеСпискаКонтрагентовФормы();
	
	ЗаполнитьМенюДополнительныхКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенюДополнительныхКнопок()
	
	ОбработкаОбъект = ОбработкаОбъект();
	ОбработкаОбъект.ЗаполнитьДополнительныеКнопкиИзПодключаемогоМодуля(ЭтаФорма, ТекущийРежимСписка, Элементы.ДополнительныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаглушкуДлительнойОперации();
	
	Элементы.СправочникСписок.Видимость = Ложь;
	Элементы.ГруппаДлительнаяОперация.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьЗаглушкуДлительнойОперацииНаСервере();
	
	Элементы.СправочникСписок.Видимость = Ложь;
	Элементы.ГруппаДлительнаяОперация.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗаглушкуДлительнойОперации();
	
	Элементы.СправочникСписок.Видимость = Истина;
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыФормы(Параметры)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	Параметры.Свойство("ОтборПоОрганизации", ОтборПоОрганизации);
	Параметры.Свойство("ОтборПоСтатусу", ОтборПоСтатусу);
	Параметры.Свойство("ТекущийРежимСписка", ТекущийРежимСписка);
	Параметры.Свойство("РежимВыбораИзСписка", РежимВыбораИзСписка);
	Параметры.Свойство("НеПоказыватьОбновлениеВРаботеКонтрагентов", НеПоказыватьОбновлениеВРаботеКонтрагентов);
	Параметры.Свойство("СтрокаПоиска", ПолеПоиска);
	
	ИнициализироватьИдентификаторТрассировки();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИдентификаторТрассировки()
	
	Метрики_НаименованиеФормы = Метрики_НаименованиеФормы();
	СтрокаИдентификатора = Строка(Новый УникальныйИдентификатор());
	
	ИдентификаторТрассировки = Метрики_НаименованиеФормы + "_" + СтрокаИдентификатора;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораФормы()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	СписокДляОтбора = Элементы.ОтборПоОрганизации.СписокВыбора;
	
	СписокДляОтбораОрганизации = Ядро.Организации_СписокОрганизацийДляВыбора(Ложь);
	
	Для Каждого ТекОрганизация Из СписокДляОтбораОрганизации Цикл
		
		НовыйЭлемент = СписокДляОтбора.Добавить();
		НовыйЭлемент.Значение = ТекОрганизация.Значение;
		НовыйЭлемент.Представление = ТекОрганизация.Представление;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоОрганизации)
		И ЗначениеЗаполнено(СписокДляОтбора) Тогда
		
		ПервыйЭлемент = СписокДляОтбора[0];
		ОтборПоОрганизации = ПервыйЭлемент.Значение;
		
	КонецЕсли;
	
	СписокДляОтбора = Элементы.Статус.СписокВыбора;
	
	СтатусыКонтрагентов = ВозможныеСтатусыКонтрагентов();
	
	Для Каждого СтатусКонтрагента Из СтатусыКонтрагентов Цикл
		
		НовыйЭлемент = СписокДляОтбора.Добавить();
		НовыйЭлемент.Значение = СтатусКонтрагента.Значение;
		НовыйЭлемент.Представление = СтатусКонтрагента.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьУсловноеОформлениеСписка_Видимость();
	УстановитьУсловноеОформление_НетСвязей();
	УстановитьУсловноеФормление_РежимСписка();
	УстановитьУсловноеОформлениеСписка_ПредставлениеСтатусов();
	УстановитьУсловноеОформлениеСписка_РаботаетВДиадок();
	УстановитьУсловноеОформлениеСписка_Ликвидирована();
	УстановитьУсловноеОформлениеСписка_ЦветГиперссылкиСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиВыполнитьОбменССервером()
	
	ИспользуетсяПодсистемаДиадок = Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	Элементы.ПодменюСинхронизироватьССервером.Видимость = ИспользуетсяПодсистемаДиадок;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_НетСвязей()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.ПредставлениеСвязи");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "Не выбран";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокПредставлениеСвязи");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_Видимость()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.Видимость");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписок");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_РаботаетВДиадок()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.Статус");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Статус_РаботаетВДиадок();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_Ликвидирована()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.ОрганизацияЛиквидирована");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Организация ликвидирована");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_ЦветГиперссылкиСтатуса()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(80, 85, 206));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_ПредставлениеСтатусов()
	
	ВозможныеСтатусы = ВозможныеСтатусыКонтрагентов();
	
	Для Каждого ЭлементСтатуса Из ВозможныеСтатусы Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.Статус");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ЭлементСтатуса.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСтатуса.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеФормление_РежимСписка()
	
	
	ПараметрыПодсказкаВвода = Новый Структура;
	ПараметрыПодсказкаВвода.Вставить("ПодсказкаВвода", "Введите ИНН, имя контрагента или ID участника ЭДО");
	
	ЗаполнитьЗначенияСвойств(Элементы.ПолеПоиска, ПараметрыПодсказкаВвода);
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		
		ЭтаФорма.Заголовок = "Контрагенты: поиск новых контрагентов";
		
		Элементы.ГруппаКнопокРежима.Видимость = Ложь;
		Элементы.СправочникСписокКнопкаОтправитьПриглашение.Видимость = Истина;
		Элементы.СправочникСписокКартинкаСтроки.Видимость = Ложь;
		Элементы.СправочникСписокДокументовЗаПериод.Видимость = Истина;
		
	Иначе
		
		ЭтаФорма.Заголовок = "Контрагенты: ваши контрагенты";
		
		Элементы.ГруппаКнопокРежима.Видимость = Истина;
		Элементы.СправочникСписокКнопкаОтправитьПриглашение.Видимость = Ложь;
		Элементы.СправочникСписокКартинкаСтроки.Видимость = Истина;
		Элементы.СправочникСписокДокументовЗаПериод.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройку_НовоеВВерсии_БольшеНеПоказывать()
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	НеПоказыватьОбновлениеВРаботеКонтрагентов =
		ОбработкаОбъект.НастройкиПользователяПрочитать_БольшеНеПоказыватьИзмененияВРазделеКонтрагентов(ТекущийРежимСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНовоеВВерсииОтложенно(РежимСписка)
	
	Если НеПоказыватьОбновлениеВРаботеКонтрагентов Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОднократно = Истина;
	Интервал = 0.1;
	
	Если РежимСписка = РежимПоискИПриглашение() Тогда
		
		ПодключитьОбработчикОжидания(
			"ПоказатьФормуНовоеВВерсии_ПоискИПриглашение",
			Интервал,
			ВыполнитьОднократно
		);
		
	Иначе
		
		ПодключитьОбработчикОжидания(
			"ПоказатьФормуНовоеВВерсии_ВашиКонтрагенты",
			Интервал,
			ВыполнитьОднократно
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНовоеВВерсии_ВашиКонтрагенты()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ОбновлениеРазделаСКонтрагентами_ВашиКонтрагенты");
	
	ОбработчикЗакрытия = Неопределено;
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОбработчикЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНовоеВВерсии_ПоискИПриглашение()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ОбновлениеРазделаСКонтрагентами_ПоискИПриглашение");
	
	ОбработчикЗакрытия = Неопределено;
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОбработчикЗакрытия);
	
КонецПроцедуры


//}		Стартовые методы формы

//{ методы формы зависимые от приложения

&НаСервере
Функция ИспользуетсяПодсистемаДиадок()
	
	Возврат Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	
КонецФункции

&НаКлиенте
Функция ИмяПоляСтатус()
	
	Возврат "СправочникСписокСтатус";
	
КонецФункции

&НаКлиенте
Функция ИмяПоляКартинки()
	
	Возврат "СправочникСписокКартинкаСтроки";
	
КонецФункции

&НаСервере
Функция ПолучитьКолонкиТаблицы(ИмяТаблицы)
	
	Возврат ПолучитьРеквизиты(ИмяТаблицы);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентов()
	
	Возврат СопоставленныеКонтрагенты.Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСписка()
	
	Возврат СправочникСписок.Выгрузить();
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеСписка(Список)
	
	СправочникСписок.Загрузить(Список);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиФильтров()
	
	КоличествоУстановленныхФильтров = КоличествоУстановленныхФильтров();
	
	Если ЗначениеЗаполнено(КоличествоУстановленныхФильтров) Тогда
		
		Если Элементы.Фильтры.Заголовок <> Строка(КоличествоУстановленныхФильтров) Тогда
			
			Элементы.Фильтры.Картинка = Элементы.КартинкаФильтрыАктивныеСкрытая.Картинка;
			Элементы.Фильтры.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Элементы.Фильтры.Ширина = 6;
			Элементы.Фильтры.Заголовок = КоличествоУстановленныхФильтров;
			
		КонецЕсли;
		
	Иначе
		
		СброситьЗаголовокКнопкиФильтров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьЗаголовокКнопкиФильтров()
	
	Элементы.Фильтры.Картинка = Элементы.КартинкаФильтрыНеактивныеСкрытая.Картинка;
	Элементы.Фильтры.Отображение = ОтображениеКнопки.Картинка;
	Элементы.Фильтры.Ширина = 4;
	Элементы.Фильтры.Заголовок = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатКомпоновкиВСписок(Результат)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	МассивРеквизитов = Новый Массив;
	МассивЗначимыхРеквизитов = ПолучитьКолонкиТаблицы("СправочникСписок");
	Для Каждого ЗначимыйРеквизит Из МассивЗначимыхРеквизитов Цикл
		МассивРеквизитов.Добавить(ЗначимыйРеквизит.Имя);
	КонецЦикла;
	
	СтрокаРеквизитов = Модуль_Ядро.СоединитьСтроку(МассивРеквизитов, ",");
	Результат.Свернуть(СтрокаРеквизитов);
	СправочникСписок.Загрузить(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСправочникСписок(НаправлениеСортировки)
	
	ИмяКолонкиСортировки = СтрЗаменить(Элементы.СправочникСписок.ТекущийЭлемент.Имя, "СправочникСписок", "");
	
	Если ИмяКолонкиСортировки <> "" И ИмяКолонкиСортировки <> "Пометка" Тогда
		СправочникСписок.Сортировать(ИмяКолонкиСортировки + " " + НаправлениеСортировки);
	Иначе
		СправочникСписок.Сортировать("Наименование " + НаправлениеСортировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторыВыбранныхСтрок(Статус = Неопределено, ИсключатьЛиквидированные = Истина)
	
	Результат = Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	
	Если ЗначениеЗаполнено(Статус) Тогда
		ПараметрыОтбора.Вставить("Статус", Статус);
	КонецЕсли;
	
	Если ИсключатьЛиквидированные Тогда
		ПараметрыОтбора.Вставить("ОрганизацияЛиквидирована", Ложь);
	КонецЕсли;
	
	ОтобранныеСтроки = СправочникСписок.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
		
		Результат.Добавить(ОтобраннаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеКонтрагентовИзИдентификаторовСтрок(Знач ИдентификаторыСтрок)
	
	ДанныеКонтрагентов = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		Строка = СправочникСписок.НайтиПоИдентификатору(Идентификатор);
		ДанныеКонтрагента = КонтрагентИзСтрокиДанных(Строка.ДанныеКонтрагента);
		ДанныеКонтрагентов.Добавить(ДанныеКонтрагента);
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуВыбранногоПриглашения()
	
	ВыбраннаяСтрока = Элементы.СправочникСписок.ТекущиеДанные;
	
	Приглашение = КомментарийИДокументПриглашения(ВыбраннаяСтрока.ДанныеКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Приглашение) Тогда
		Сообщить("Отсутствует приглашение контрагента");
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока.Статус = Статус_ОжидаемОтветНаПриглашение() Тогда
		РежимОткрытия = "Исходящее";
	Иначе
		РежимОткрытия = "Входящее";
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(ВыбраннаяСтрока.ПолучитьИдентификатор());
	
	ПоказатьФормуПриглашения(Приглашение, РежимОткрытия, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст)
		И Ожидание = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачатьОбработкуВвода(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбработкуВвода(Текст)
	
	Если ЗначениеПоиска = Текст Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоиска = Текст;
	
	ПодключитьОбработчикОжидания("ПоказатьЗаглушкуДлительнойОперации", 0.5, Истина);
	
	ПодключитьОбработчикОжидания("ЗапуститьПоиск", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция Метрики_ПолучитьМассивИменВидимыхКолонок()
	
	Результат = Новый Массив;
	
	Для Каждого КолонкаСписка Из Элементы.СправочникСписок.ПодчиненныеЭлементы Цикл
		Если КолонкаСписка.Видимость Тогда
			Результат.Добавить(КолонкаСписка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьАдресВХранилищеСпискаКонтрагентовФормы()
	
	АдресВХранилищеСпискаКонтрагентовФормы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(СостояниеПометки)
	
	ПолеФормыСписка = Элементы.СправочникСписок;
	
	Для Каждого СтрокаТЧ Из СправочникСписок Цикл
		
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		
		Если НЕ ПолеФормыСписка.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.Пометка = СостояниеПометки;
		
	КонецЦикла;
	
КонецПроцедуры

//} методы формы зависимые от приложения


&НаСервере
Процедура ПерезаполнитьСписокКонтрагентовНаФорме()
	
	Список = ПолучитьИзВременногоХранилища(АдресВХранилищеСпискаКонтрагентовФормы);
	Если ЗначениеЗаполнено(Список) Тогда
		УстановитьДанныеСписка(Список);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокКонтрагентовНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонтрагентовНаФорме()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СправочникСписок.Очистить();
	СопоставленныеКонтрагенты.Очистить();
	
	Список = ПолучитьСписокКонтрагентовНаСервере();
	
	ВозможныеСтатусы = ВозможныеСтатусыКонтрагентов();
	
	Для Каждого КонтрагентЭДО Из Список Цикл
		
		Если ВозможныеСтатусы.НайтиПоЗначению(КонтрагентЭДО.Статус) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтрокуИЗаполнить(
			СправочникСписок,
			КонтрагентЭДО,
			КонтрагентЭДО.РеквизитыСвязанныхСправочников,
			Модуль_Ядро);
		
		ЗаполнитьТаблицуСвязанныхСправочников(
			КонтрагентЭДО.ID,
			КонтрагентЭДО.РеквизитыСвязанныхСправочников);
		
	КонецЦикла;
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		СправочникСписок.Сортировать("ОрганизацияЛиквидирована Возр, Статус Убыв");
	Иначе
		СправочникСписок.Сортировать("ОрганизацияЛиквидирована Возр, Статус Возр");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПолучитьДанныеСписка(), АдресВХранилищеСпискаКонтрагентовФормы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуИЗаполнить(ТекущаяТаблица, КонтрагентЭДО, СвязанныеСправочники, Модуль_Ядро)
	
	НоваяСтрока = ТекущаяТаблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтрагентЭДО);
	
	Если НоваяСтрока.Статус = Статус_ОжидаемОтветНаПриглашение() Тогда
		НоваяСтрока.КартинкаСтроки = 1;
	ИначеЕсли НоваяСтрока.Статус = Статус_ПригласилиНас() Тогда
		НоваяСтрока.КартинкаСтроки = 2;
	Иначе
		НоваяСтрока.КартинкаСтроки = 0;
	КонецЕсли;
	
	НоваяСтрока.Видимость = Истина;
	НоваяСтрока.ПредставлениеСвязи = СформироватьПредставлениеСвязейВСписке(СвязанныеСправочники);
	НоваяСтрока.НомерСтроки = СправочникСписок.Индекс(НоваяСтрока) + 1;
	
	НоваяСтрока.ОрганизацияЛиквидирована = ЗначениеЗаполнено(КонтрагентЭДО.ДатаЛиквидации);
	НоваяСтрока.ДатаЛиквидации = КонтрагентЭДО.ДатаЛиквидации;
	
	Если НоваяСтрока.ОрганизацияЛиквидирована Тогда
		
		НоваяСтрока.КартинкаСтроки = 3;
		
	КонецЕсли;
	
	ДанныеКонтрагентаЭДО = Модуль_Ядро.Контракт_КонтрагентЭДО();
	
	ЗаполнитьЗначенияСвойств(ДанныеКонтрагентаЭДО, КонтрагентЭДО);
	
	НоваяСтрока.ДанныеКонтрагента = КонтрагентВСтрокуДанных(ДанныеКонтрагентаЭДО);
	
	ИдентификаторФНСОператора = Модуль_Ядро.ИдентификаторФНСИзИдентификаторУчастникаЭДО(
			ДанныеКонтрагентаЭДО.ИдентификаторУчастникаЭДО);
	
	НоваяСтрока.ОператорЭДО = Модуль_Ядро.ПредставлениеОператораЭДО(ИдентификаторФНСОператора, ДанныеОрганизации.ID);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСвязанныхСправочников(ID, СвязанныеСправочники = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СвязанныеСправочники) Тогда
		
		НоваяСтрокаСопоставления = СопоставленныеКонтрагенты.Добавить();
		НоваяСтрокаСопоставления.ID = ID;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаКонтрагента Из СвязанныеСправочники Цикл
		
		НоваяСтрокаСопоставления = СопоставленныеКонтрагенты.Добавить();
		НоваяСтрокаСопоставления.ID = ID;
		НоваяСтрокаСопоставления.Контрагент = СтрокаКонтрагента.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеСвязейВСписке(СвязанныеСправочники)
	
	ОбработкаОбъект = ОбработкаОбъект();
	Результат = ОбработкаОбъект.ПредставлениеСвязейВСписке(
			СвязанныеСправочники,
			"Контрагенты"
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Метрики_ЗаписатьПоведение_ОбновлениеСписка();
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресВХранилищеСпискаКонтрагентовФормы);
	
	ОписаниеЗамераОбщее = Метрика_ОписаниеЗамера_ОбщийЗамерПолученияСпискаКонтрагентов();
	
	ОписаниеЗамераобновлениеСписка = Метрика_ОписаниеЗамера_ОбновлениеСписка();
	
	ПерезаполнитьСписокКонтрагентовНаФорме();
	
	Метрика_ЗавершитьЗамер_ОбновлениеСписка(ОписаниеЗамераобновлениеСписка);
	
	Если КоличествоУстановленныхФильтров() <> 0
		ИЛИ КоличествоФиксированныхФильтров() <> 0 Тогда
		
		ОписаниеЗамераКомпоновщикНастроек = Метрика_ОписаниеЗамера_КомпоновкаСпискаКонтрагентов();
		
		ПрименитьФильтрыДляСписка();
		
		Метрика_ЗавершитьЗамер_КомпоновкаСпискаКонтрагентов(ОписаниеЗамераКомпоновщикНастроек);
		
	КонецЕсли;
	
	Метрика_ЗавершитьЗамер_ОбщийЗамерПолученияСпискаКонтрагентов(ОписаниеЗамераОбщее);
	
	ОтключитьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьСтатистику_ОбновлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьССервером(Команда)
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьПоведение_ПолучитьИзмененияПоТекущейОрганизации();
	
	
	ОписаниеЗамераОбщее = Метрика_ОписаниеЗамера_ОбщийЗамерПолученияСпискаКонтрагентов();
	
	
	ОписаниеЗамераПолученияКонтрагентов = Метрика_ОписаниеЗамера_СинхронизацияКонтрагентов();
	
	ВыполнитьСинхронизациюКонтрагентов();
	
	Метрика_ЗавершитьЗамер_СинхронизацияКонтрагентов(ОписаниеЗамераПолученияКонтрагентов);
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресВХранилищеСпискаКонтрагентовФормы);
	
	ОписаниеЗамераобновлениеСписка = Метрика_ОписаниеЗамера_ОбновлениеСписка();
	
	ПерезаполнитьСписокКонтрагентовНаФорме();
	
	Метрика_ЗавершитьЗамер_ОбновлениеСписка(ОписаниеЗамераобновлениеСписка);
	
	
	ОписаниеЗамераКомпоновщикНастроек = Метрика_ОписаниеЗамера_КомпоновкаСпискаКонтрагентов();
	
	ПрименитьФильтрыДляСписка();
	
	Метрика_ЗавершитьЗамер_КомпоновкаСпискаКонтрагентов(ОписаниеЗамераКомпоновщикНастроек);
	
	
	Метрика_ЗавершитьЗамер_ОбщийЗамерПолученияСпискаКонтрагентов(ОписаниеЗамераОбщее);
	
	
	Метрики_ЗаписатьСтатистику_ПолучитьИзмененияИзДиадока();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьССерверомПоКонтексту(Команда)
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьПоведение_ПолучитьИзмененияПоВсемОрганизациям();
	
	
	ОписаниеЗамераОбщее = Метрика_ОписаниеЗамера_ОбщийЗамерПолученияСпискаКонтрагентов();
	
	
	ОписаниеЗамераПолученияКонтрагентов = Метрика_ОписаниеЗамера_СинхронизацияКонтрагентов();
	
	ВыполнитьСинхронизациюКонтрагентовПоКонтексту();
	
	Метрика_ЗавершитьЗамер_СинхронизацияКонтрагентов(ОписаниеЗамераПолученияКонтрагентов);
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресВХранилищеСпискаКонтрагентовФормы);
	
	ОписаниеЗамераобновлениеСписка = Метрика_ОписаниеЗамера_ОбновлениеСписка();
	
	ПерезаполнитьСписокКонтрагентовНаФорме();
	
	Метрика_ЗавершитьЗамер_ОбновлениеСписка(ОписаниеЗамераобновлениеСписка);
	
	
	ОписаниеЗамераКомпоновщикНастроек = Метрика_ОписаниеЗамера_КомпоновкаСпискаКонтрагентов();
	
	ПрименитьФильтрыДляСписка();
	
	Метрика_ЗавершитьЗамер_КомпоновкаСпискаКонтрагентов(ОписаниеЗамераКомпоновщикНастроек);
	
	
	Метрика_ЗавершитьЗамер_ОбщийЗамерПолученияСпискаКонтрагентов(ОписаниеЗамераОбщее);
	
	
	Метрики_ЗаписатьСтатистику_ПолучитьИзмененияИзДиадока();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСинхронизациюКонтрагентов()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	СтатусыКонтрагентовДляСинхронизации = ВозможныеСтатусыКонтрагентовДляСинхронизации();
	ДобавитьКонтрагентовИзПоискИПриглашение = ТекущийРежимСписка = РежимПоискИПриглашение();
	
	Ядро.Контрагенты_ВыполнитьСинхронизациюПоСтатусам(
		ДанныеОрганизации,
		СтатусыКонтрагентовДляСинхронизации,
		ДобавитьКонтрагентовИзПоискИПриглашение);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСинхронизациюКонтрагентовПоКонтексту()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	СтатусыКонтрагентовДляСинхронизации = ВозможныеСтатусыКонтрагентовДляСинхронизации();
	ДобавитьКонтрагентовИзПоискИПриглашение = ТекущийРежимСписка = РежимПоискИПриглашение();
	
	Ядро.Контрагенты_ВыполнитьСинхронизациюПоКонтекстуИСтатусам(
		СтатусыКонтрагентовДляСинхронизации,
		ДобавитьКонтрагентовИзПоискИПриглашение);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоВозрастанию(Команда)
	
	СортировкаСправочникСписок("Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоУбыванию(Команда)
	
	СортировкаСправочникСписок("Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеПометки(Команда)
	
	УстановитьСнятьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПометки(Команда)
	
	УстановитьСнятьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ОбновитьКэш(Результат.ID);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэш(Знач IDКонтрагента, Знач НовыйСтатус = Неопределено)
	
	ОбновитьДанныеКонтрагентаВКэше(IDКонтрагента, НовыйСтатус);
	ОбновитьСтрокуСпискаКонтрагентаНаФорме(IDКонтрагента, НовыйСтатус);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуСпискаКонтрагентаНаФорме(Знач IDКонтрагента, Знач НовыйСтатус = Неопределено)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ID", IDКонтрагента);
	СтрокиСписка = СправочникСписок.НайтиСтроки(ПараметрыОтбораСтрок);
	Если НЕ ЗначениеЗаполнено(СтрокиСписка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСписка = СтрокиСписка[СтрокиСписка.ВГраница()];
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоСтрокеСписка(СтрокаСписка);
	
	Если ЗначениеЗаполнено(НовыйСтатус) Тогда
		
		ДанныеКонтрагента.Статус = НовыйСтатус;
		
	КонецЕсли;
	
	ВозможныеСтатусыКонтрагентов = ВозможныеСтатусыКонтрагентов();
	НайденноеЗначение = ВозможныеСтатусыКонтрагентов.НайтиПоЗначению(ДанныеКонтрагента.Статус);
	
	Если НайденноеЗначение = Неопределено Тогда
		
		УдалитьДанныеКонтрагентаИзСписка(
			СправочникСписок,
			ДанныеКонтрагента);
		
		УдалитьСопоставлениеКонтрагентаСФормы(ДанныеКонтрагента);
		
		Возврат;
		
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	ОбработкаОбъект = ОбработкаОбъект();
	
	ЗаполнитьЗначенияСвойств(СтрокаСписка, ДанныеКонтрагента);
	
	СвязанныеСправочники = Модуль_Ядро.Контрагенты_МассивСопоставленныхВ1С(ДанныеКонтрагента);
	
	СтрокаСписка.ПредставлениеСвязи = ОбработкаОбъект.ПредставлениеСвязейВСписке(
			СвязанныеСправочники,
			"Контрагенты");
	
	СтрокаСписка.ДанныеКонтрагента = КонтрагентВСтрокуДанных(ДанныеКонтрагента);
	
	КоллекцияСопоставленийКА = СопоставленныеКонтрагенты.НайтиСтроки(ПараметрыОтбораСтрок);
	Для Каждого СтрокаСопоставления Из КоллекцияСопоставленийКА Цикл
		СопоставленныеКонтрагенты.Удалить(СтрокаСопоставления);
	КонецЦикла;
	
	ЗаполнитьТаблицуСвязанныхСправочников(
		СтрокаСписка.ID,
		СвязанныеСправочники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискИПриглашение(Команда)
	
	Метрики_ЗаписатьПоведение_ПоискИПриглашениеКонтрагентов();
	
	Платформа = Модуль_Платформа();
	Платформа.Контрагенты_ПоказатьФормуПоискаИПриглашения(ОтборПоОрганизации);
	
	Метрики_ЗаписатьСтатистику_ПоискИПриглашениеКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	ДанныеКонтрагента = КонтрагентИзСтрокиДанных(ТекДанные.ДанныеКонтрагента);
	
	Если РежимВыбораИзСписка Тогда
		ЭтаФорма.Закрыть(ДанныеКонтрагента);
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = ИмяПоляСтатус() Тогда
		
		Если ТекДанные.Статус = Статус_РаботаетВДиадок()
			И НЕ ТекДанные.ОрганизацияЛиквидирована Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
			
			Метрики_ЗаписатьПоведение_ПодсказкаСтатусОтношений();
			
			ПоказатьПодсказкуСостояниеОтношений();
			
			ПредставлениеСтатуса = ПредставлениеСтатусаКонтрагента(ТекДанные);
			
			Метрики_ЗаписатьСтатистику_ПодсказкаСтатусОтношений(ПредставлениеСтатуса);
			
		Иначе
			
			ОткрытьПриглашениеПоВыбраннойСтроке();
			
		КонецЕсли;
		
	Иначе
		
		ОткрытьФормуКонтрагента(ДанныеКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтрагента(ДанныеКонтрагента)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID", ДанныеКонтрагента.ID);
	ПараметрыФормы.Вставить("ДанныеКонтрагента", ДанныеКонтрагента);
	ПараметрыФормы.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ПараметрыФормы.Вставить("ИмяСправочника", "Контрагенты");
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ПослеЗакрытияФормыКонтрагента", 
			ЭтаФорма, 
			ПараметрыФормы); 
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
			"ФормаЭлементаСправочникаУправляемая", 
			ЭтаФорма, 
			ПараметрыФормы, 
			ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	Метрики_ЗаписатьПоведение_ФильтрПоОрганизации();
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	ОбработатьВыборОрганизации();
	
	ОбновитьСписокИПрименитьФильтрыПриСменеОрганизации();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьСтатистику_ФильтрПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	
	Если ЗначениеПоиска = ПолеПоиска Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоиска = ПолеПоиска;
	
	ЗапуститьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПоиск()
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		
		ОчисткаПоискаСправочникаСписка();
		ОтключитьЗаглушкуДлительнойОперации();
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	ОбновитьСписокИПрименитьФильтры();
	
	Метрики_ЗаписатьСтатистику_БыстрыйПоиск();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаПоискаСправочникаСписка()
	
	ОчиститьГруппуБыстрогоПоиска();
	ОбновитьСписокИПрименитьФильтры();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИПрименитьФильтры()
	
	ПерезаполнитьСписокКонтрагентовНаФорме();
	ПрименитьФильтрыДляСписка();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИПрименитьФильтрыПриСменеОрганизации()
	
	ЗаполнитьСписокКонтрагентовНаФорме();
	ПрименитьФильтрыДляСписка();
	
КонецПроцедуры

//{ Фильтры

&НаСервере
Процедура ИнициализироватьСхемыКомпоновкиДанных()
	
	РеквизитыСправочника = ПолучитьКолонкиТаблицы("СправочникСписок");
	РеквизитыСвязей = ПолучитьКолонкиТаблицы("СопоставленныеКонтрагенты");
	
	ИмяИсточникаДанных = "ИсточникДанных1";
	
	Результат = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = Результат.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ИмяИсточникаДанных;
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных1 = Результат.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных1.Имя = "НаборДанных1";
	НаборДанных1.ИмяОбъекта = "СправочникСписок";
	НаборДанных1.ИсточникДанных = ИмяИсточникаДанных;
	
	НаборДанных2 = Результат.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных2.Имя = "НаборДанных2";
	НаборДанных2.ИмяОбъекта = "СопоставленныеКонтрагенты";
	НаборДанных2.ИсточникДанных = ИмяИсточникаДанных;
	
	Для Каждого Колонка Из РеквизитыСправочника Цикл
		
		ДобавитьПолеКомпоновкиДанных(НаборДанных1, Колонка);
		ДобавитьПолеКомпоновкиСтрока(НаборДанных1, Колонка);
		
	КонецЦикла;
	
	Для Каждого Колонка Из РеквизитыСвязей Цикл
		
		ДобавитьПолеКомпоновкиДанных(НаборДанных2, Колонка);
		ДобавитьПолеКомпоновкиСтрока(НаборДанных2, Колонка);
		
	КонецЦикла;
	
	СвязьКомпоновки = Результат.СвязиНаборовДанных.Добавить();
	СвязьКомпоновки.НаборДанныхИсточник = "НаборДанных1";
	СвязьКомпоновки.НаборДанныхПриемник = "НаборДанных2";
	СвязьКомпоновки.ВыражениеИсточник = "ID";
	СвязьКомпоновки.ВыражениеПриемник = "ID";
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеКомпоновкиСтрока(НаборДанных, Колонка)
	
	ДоступныеПоляПоискаПоСтроке = ДоступныеПоляПоискаПоСтроке();
	
	Если ДоступныеПоляПоискаПоСтроке.Найти(Колонка.Имя) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Колонка.Имя;
	НовоеПоле.ПутьКДанным = Колонка.Имя + "Строка";
	НовоеПоле.Заголовок = Колонка.Заголовок;
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250));
	НовоеПоле.ОграничениеИспользования.Группировка = Истина;
	НовоеПоле.ОграничениеИспользования.Поле = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеПоляПоискаПоСтроке()
	
	Результат = Новый Массив;
	Результат.Добавить("ИНН");
	Результат.Добавить("КПП");
	Результат.Добавить("Наименование");
	Результат.Добавить("ИдентификаторУчастникаЭДО");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПолеКомпоновкиДанных(НаборДанных, Колонка)
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Колонка.Имя;
	НовоеПоле.ПутьКДанным = Колонка.Имя;
	НовоеПоле.Заголовок = Колонка.Заголовок;
	НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	
	Если Колонка.Имя = "Статус" Тогда
		НовоеПоле.УстановитьДоступныеЗначения(ВозможныеСтатусыКонтрагентов());
	КонецЕсли;
	
	Если Колонка.Имя = "Контрагент" Тогда
		Модуль_Ядро = Модуль_ЯдроНаСервере();
		ИмяТипа = Модуль_Ядро.Справочники_ТипЗначенияОбъекта("Контрагенты");
		Если ЗначениеЗаполнено(ИмяТипа) Тогда
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ИмяТипа);
		Иначе
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов( , Справочники.ТипВсеСсылки().Типы());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекСКД()
	
	КомпоновщикНастроекСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	НастроитьГруппировкуСКД(КомпоновщикНастроекСКД);
	
	СортировкаЛиквидирована = КомпоновщикНастроекСКД.Настройки.Порядок.Элементы.Добавить(
			Тип("ЭлементПорядкаКомпоновкиДанных"));
	СортировкаЛиквидирована.Поле = Новый ПолеКомпоновкиДанных("ОрганизацияЛиквидирована");
	СортировкаЛиквидирована.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	Сортировка = КомпоновщикНастроекСКД.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Сортировка.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		Сортировка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	Иначе
		Сортировка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроекСКД.Настройки;
	ДоступныеПоля = ДоступныеПоляРасширенногоФильтра();
	
	Для Каждого Колонка Из ДоступныеПоля Цикл
		
		НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Колонка.Имя);
		НовыйОтбор.Использование = Ложь;
		НовыйОтбор.ВидСравнения = Колонка.ВидСравнения;
		
	КонецЦикла;
	
	ОтборКомпоновкиПоУмолчанию = КомпоновщикПоУмолчанию.Настройки.Отбор.Элементы;
	ОтборКомпоновкиСКД = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы;
	
	Для Каждого ЭлементОтбораСКД Из ОтборКомпоновкиСКД Цикл
		
		НовыйЭлементОтбора = ОтборКомпоновкиПоУмолчанию.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораСКД);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппировкуСКД(КомпоновщикНастроек)
	
	Настройки = КомпоновщикНастроек.Настройки;
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ДетальныеЗаписи.Использование = Истина;
	
	Для Каждого ДоступноеПоле Из Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		Если ДоступноеПоле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля") Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеГруппировки = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = ДоступноеПоле.Поле;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Метрики_ЗаписатьПоведение_ФильтрПоСтатусу();
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	ОбновитьСписокИПрименитьФильтры();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьСтатистику_ФильтрПоСтатусу();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборОрганизации()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	ИдентификаторыОрганизации = Модуль_Ядро.Новый_ИдентификаторыСправочника( , ОтборПоОрганизации);
	ДанныеОрганизации = Модуль_Ядро.Организации_ЗаполненныеРеквизиты(ИдентификаторыОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрыДляСписка()
	
	НастроитьКомпоновщикПоПолюПоиска();
	НастроитьКомпоновщикПоСтатусу();
	УстановитьЗаголовокКнопкиФильтров();
	
	Если КоличествоУстановленныхФильтров() = 0
		И КоличествоФиксированныхФильтров() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьРезультатКомпоновкиДанных();
	ЗагрузитьРезультатКомпоновкиВСписок(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатКомпоновкиДанных()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
			СхемаКомпоновкиДанных,
			КомпоновщикНастроекСКД.ПолучитьНастройки(), , ,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ДанныеСписка = ПолучитьДанныеСписка();
	ДанныеСопоставления = ПолучитьДанныеКонтрагентов();
	ВнешниеНаборы = Новый Структура(
			"СправочникСписок, СопоставленныеКонтрагенты",
			ДанныеСписка,
			ДанныеСопоставления);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьКомпоновщикПоПолюПоиска()
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	МассивСтрокПоиска = Модуль_Ядро.РазделитьСтроку(ЗначениеПоиска, " ");
	
	ОчиститьГруппуБыстрогоПоиска();
	ГруппаОтбора = ДобавитьГруппуБыстрогоПоиска();
	
	РеквизитыОтбора = ДоступныеПоляПоискаПоСтроке();
	
	Для Каждого ДоступноеПоле Из РеквизитыОтбора Цикл
		
		Для Каждого СтрокаПоиска Из МассивСтрокПоиска Цикл
			
			НовыйОтбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДоступноеПоле + "Строка");
			НовыйОтбор.ПравоеЗначение = СтрокаПоиска;
			НовыйОтбор.Использование = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикПоСтатусу()
	
	Результат = КомпоновщикНастроекСКД.ФиксированныеНастройки;
	ЭлементыОтбора = Результат.Отбор.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Представление = "ОтборПоЛиквидированности" Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Представление = "ОтборПоСтатусу" Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоСтатусу) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоСтатусуЛиквидированности = ОтборПоСтатусу = "Организация ликвидирована";
	
	НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОрганизацияЛиквидирована");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.равно;
	НовыйОтбор.ПравоеЗначение = ЭтоОтборПоСтатусуЛиквидированности;
	НовыйОтбор.Представление = "ОтборПоЛиквидированности";
	
	Если НЕ ЭтоОтборПоСтатусуЛиквидированности Тогда
		
		НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.равно;
		НовыйОтбор.ПравоеЗначение = ОтборПоСтатусу;
		НовыйОтбор.Представление = "ОтборПоСтатусу";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуБыстрогоПоиска()
	
	Результат = КомпоновщикНастроекСКД.ФиксированныеНастройки;
	ЭлементыОтбора = Результат.Отбор.Элементы;
	
	ГруппаОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.Представление = "БыстрыйОтбор";
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Возврат ГруппаОтбора;
	
КонецФункции

&НаСервере
Процедура ОчиститьГруппуБыстрогоПоиска()
	
	Результат = КомпоновщикНастроекСКД.ФиксированныеНастройки;
	ЭлементыОтбора = Результат.Отбор.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Представление = "БыстрыйОтбор" Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтры(Команда)
	
	Метрики_ЗаписатьПоведение_РасширенныеФильтры();
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КомпоновщикНастроек", КомпоновщикНастроекСКД);
	ПараметрыФормы.Вставить("КомпоновщикПоУмолчанию", КомпоновщикПоУмолчанию);
	ПараметрыФормы.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ПараметрыФормы.Вставить("ТекущийРежимСписка", ТекущийРежимСписка);
	
	ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
			"НастройкаРасширенныхФильтровЗавершение",
			ЭтаФорма);
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"Контрагенты_ФормаФильтровУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОповещениеОЗавершении);
	
	Метрики_ЗаписатьСтатистику_РасширенныеФильтры();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРасширенныхФильтровЗавершение(КомпоновщикНастроек, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроекСКД = КомпоновщикНастроек;
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	ОбновитьСписокИПрименитьФильтры();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Функция ДоступныеПоляРасширенногоФильтра()
	
	Результат = Новый Массив;
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "ИНН";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "КПП";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "Наименование";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "ОператорЭДО";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "ИдентификаторУчастникаЭДО";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "Контрагент";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Результат.Добавить(НовоеПоле);
	
	НовоеПоле = Контракт_ПолеФильтра();
	НовоеПоле.Имя = "ДатаИзменения";
	НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Результат.Добавить(НовоеПоле);
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		НовоеПоле = Контракт_ПолеФильтра();
		НовоеПоле.Имя = "ДокументовЗаПериод";
		НовоеПоле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Результат.Добавить(НовоеПоле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Контракт_ПолеФильтра()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("ВидСравнения");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоУстановленныхФильтров()
	
	Результат = 0;
	
	Настройки = КомпоновщикНастроекСКД.Настройки;
	
	Для Каждого Отбор Из Настройки.Отбор.Элементы Цикл
		
		Если Отбор.Использование Тогда
			
			Результат = Результат + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоФиксированныхФильтров()
	
	Результат = 0;
	
	Настройки = КомпоновщикНастроекСКД.ФиксированныеНастройки;
	
	Для Каждого Отбор Из Настройки.Отбор.Элементы Цикл
		
		Если Отбор.Использование Тогда
			
			Результат = Результат + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//} Фильтры


//{ Сопоставление контрагентов

&НаКлиенте
Процедура СопоставлениеКонтрагентов(Команда)
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	Метрики_ЗаписатьПоведение_ГрупповоеСопоставлениеКонтрагентов();
	
	ВыполнитьГрупповоеСопоставлениеКонтрагентов();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьГрупповоеСопоставлениеКонтрагентов()
	
	РезультатСопоставления = Контрагенты_ГрупповоеСопоставлениеНаСервере();
	
	Контрагенты_ГрупповоеСопоставлениеСообщитьОРезультатеПользователю(РезультатСопоставления);
	
	Метрики_ЗаписатьСтатистику_ГрупповоеСопоставлениеКонтрагентов(
		РезультатСопоставления.КоличествоСопоставляемых,
		РезультатСопоставления.КоличествоСопоставленных,
		РезультатСопоставления.КоличествоИмеющихДубли
	);
	
КонецПроцедуры

&НаСервере
Функция Контрагенты_ГрупповоеСопоставлениеНаСервере()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	СтатусыДляСопоставления = СтатусыДляГрупповогоСопоставленияПоРежиму();
	
	Результат = МодульЯдро.Контрагенты_ГрупповоеСопоставлениеV2(ДанныеОрганизации, СтатусыДляСопоставления);
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресВХранилищеСпискаКонтрагентовФормы);
	
	ОбновитьСписокИПрименитьФильтры();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтатусыДляГрупповогоСопоставленияПоРежиму()
	
	Результат = Новый Массив;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Перечисление_Статусы = Модуль_Ядро.Перечисление_СтатусыКонтрагентов();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		
		Результат.Добавить(Перечисление_Статусы.РаботаетВДиадок);
		
	Иначе
		
		Результат.Добавить(Перечисление_Статусы.ПартнерскиеОтношения);
		Результат.Добавить(Перечисление_Статусы.ПриглашаютВас);
		Результат.Добавить(Перечисление_Статусы.ОжидаетсяОтвет);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Контрагенты_ГрупповоеСопоставлениеСообщитьОРезультатеПользователю(РезультатСопоставления)
	
	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	Если РезультатСопоставления.КоличествоНеНайденных = 0
		И РезультатСопоставления.КоличествоИмеющихДубли = 0 Тогда
		
		ШаблонСообщенияПользователю = НСтр(
				"ru = 'Сопоставлено контрагентов 1С: %1 из %2.'"
			);
		
		ТекстСообщенияПользователю = МодульЯдро.Общее_ПодставитьПараметрыВСтроку(
				ШаблонСообщенияПользователю,
				РезультатСопоставления.КоличествоСопоставленных,
				РезультатСопоставления.КоличествоСопоставляемых
			);
		
		СообщитьОбУспешномСопоставлении(ТекстСообщенияПользователю);
		
	ИначеЕсли РезультатСопоставления.КоличествоИмеющихДубли > 0 Тогда
		
		ШаблонСообщенияПользователю = НСтр(
				"ru = 'Сопоставлено контрагентов 1С: %1 из %2.
				|Не найдено подходящих для контрагентов 1С: %3.
				|Не удалось сопоставить контрагентов 1С по причине дублей в Диадоке: %4.
				|
				|По кнопке ""Показать дубли"" можно посмотреть список найденных дублей.'"
			);
		
		ТекстСообщенияПользователю = МодульЯдро.Общее_ПодставитьПараметрыВСтроку(
				ШаблонСообщенияПользователю,
				РезультатСопоставления.КоличествоСопоставленных,
				РезультатСопоставления.КоличествоСопоставляемых,
				РезультатСопоставления.КоличествоНеНайденных,
				РезультатСопоставления.КоличествоИмеющихДубли
			);
		
		ПредставлениеОшибокДублейПриГрупповомСопоставлении(
			ТекстСообщенияПользователю,
			РезультатСопоставления.ДетальныеДанные
		);
		
	Иначе
		
		ШаблонСообщенияПользователю = НСтр(
				"ru = 'Сопоставлено контрагентов 1С: %1 из %2.
				|Не найдено подходящих для контрагентов 1С: %3.'"
			);
		
		ТекстСообщенияПользователю = МодульЯдро.Общее_ПодставитьПараметрыВСтроку(
				ШаблонСообщенияПользователю,
				РезультатСопоставления.КоличествоСопоставленных,
				РезультатСопоставления.КоличествоСопоставляемых,
				РезультатСопоставления.КоличествоНеНайденных
			);
		
		ПредставлениеОшибокДублейПриГрупповомСопоставлении(ТекстСообщенияПользователю);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСброситьСопоставление(Команда)
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		
		Возврат;
		
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_СброситьСопоставление();
	
	НачатьСброситьСопоставлениеКонтрагентов();
	
	Метрики_ЗаписатьСтатистику_СброситьСопоставление();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСброситьСопоставлениеКонтрагентов()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокСообщения = НСтр("ru = 'Сброс сопоставления контрагентов'");
	
	ТекстСообщения = НСтр(
			"ru = 'Очистить сопоставление для выбранных контрагентов?'"
		);
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Сбросить сопоставление");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	ИмяОбработчикаСброситьСопоставлениеКонтрагентов = "ОбработчикСброситьСопоставлениеКонтрагентов";
	Таймаут = 0;
	
	ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
			ИмяОбработчикаСброситьСопоставлениеКонтрагентов,
			ЭтаФорма
		);
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСброситьСопоставлениеКонтрагентов(Результат, ПараметрыОбработки) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗаглушкуДлительнойОперации();
	
	СброситьСопоставлениеКонтрагентовЗавершение();
	
	ОтключитьЗаглушкуДлительнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура СброситьСопоставлениеКонтрагентовЗавершение()
	
	СброситьСопоставлениеКонтрагентовНаСервере();
	
	ОбновитьСписокИПрименитьФильтры();
	
КонецПроцедуры

&НаСервере
Процедура СброситьСопоставлениеКонтрагентовНаСервере()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ВыбранныеСтроки = ВыбранныеСтрокиСпискаНаСервере();
	МассивКонтрагентовДляСброса = ПолучитьКонтрагентовИзСтрокСписка(ВыбранныеСтроки);
	
	Для Каждого ДанныеКонтрагента Из МассивКонтрагентовДляСброса Цикл
		
		Идентификаторы = Ядро.Новый_ИдентификаторыСправочника(
				ДанныеКонтрагента.Ссылка,
				ДанныеКонтрагента.ID
			);
		
		Ядро.Контрагенты_ОтвязатьКонтрагента(Идентификаторы, ДанныеОрганизации);
		
		ОбновитьКэш(Идентификаторы.ID);
		
	КонецЦикла;
	
КонецПроцедуры

//} Сопоставление контрагентов

&НаКлиенте
Процедура ГиперссылкаОткрытьЦентрПоддержки(Команда)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	РежимОткрытияЦП = Неопределено;
	
	КатегорииМетрики = Метрика_НазваниеКатегорииТехподдержка();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимОткрытияЦП", РежимОткрытияЦП);
	ДополнительныеПараметры.Вставить("КатегорияМетрики", КатегорииМетрики);
	
	ИмяОбработчика = "ОткрытьЦентрПоддержкиПродолжение";
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
			ИмяОбработчика,
			ОсновнаяФорма,
			ДополнительныеПараметры
		);
	
	ТекущаяОрганизация = Элементы.ОтборПоОрганизации.СписокВыбора.НайтиПоЗначению(ОтборПоОрганизации);
	
	ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(
		Оповещение,
		ТекущаяОрганизация
	);
	
КонецПроцедуры

//{ Блокировка контрагентов

&НаКлиенте
Процедура КнопкаЗаблокировать(Команда)
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_Заблокировать();
	
	НачатьБлокировкуКонтрагентов();
	
	Метрики_ЗаписатьСтатистику_Заблокировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупрежденияНеВыбраныКонтрагенты()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокПредупреждения = "";
	ТекстПредупреждения = НСтр("ru='Выберите хотя бы одного контрагента'");
	ОповещениеОЗакрытии = Неопределено;
	ОсновнаяФорма.ПоказатьПредупреждениеПереопределенная(
		ОповещениеОЗакрытии,
		ТекстПредупреждения, ,
		ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьБлокировкуКонтрагентов()
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Статус = Неопределено;
	ИсключатьЛиквидированные = Ложь;
	ИдентификаторыСтрок = ПолучитьИдентификаторыВыбранныхСтрок(
			Статус,
			ИсключатьЛиквидированные
		);
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Действие = "Заблокировать";
	ОписаниеЗакрытияФормы = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ПродолжитьБлокировкуКонтрагентов",
			ЭтаФорма,
			ИдентификаторыСтрок
		);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ЗаблокироватьКонтрагентов");
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаВводаV2Управляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеЗакрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБлокировкуКонтрагентов(Знач Результат, Знач ИдентификаторыСтрок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = Результат.Комментарий;
	
	БлокировкаКонтрагентовЗавершение(Комментарий, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаСервере
Процедура БлокировкаКонтрагентовЗавершение(Знач Комментарий, Знач ИдентификаторыСтрок)
	
	РезультатБлокировки = Контрагенты_Заблокировать(ИдентификаторыСтрок, Комментарий);
	
	РезультатВыполненияУспешный = РезультатБлокировки.Количество() > 0;
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ИдентификаторыСтрок);
	
	НовыйСтатус = Статус_ЗаблокированМной();
	
	Для Каждого КонтрагентЭДО Из ДанныеКонтрагентов Цикл
		ОбновитьКэш(КонтрагентЭДО.ID, НовыйСтатус);
	КонецЦикла;
	
	СообщитьОРезультатеДействия("Заблокировать", РезультатВыполненияУспешный);
	
КонецПроцедуры

&НаСервере
Функция Контрагенты_Заблокировать(Знач ИдентификаторыСтрок, Комментарий)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ИдентификаторыСтрок);
	
	Результат = Модуль_Ядро.Контрагенты_Заблокировать(
			ДанныеОрганизации,
			ДанныеКонтрагентов,
			Комментарий
		);
	
	НовыйСтатус = Модуль_Ядро.Перечисление_СтатусыКонтрагентов().ЗаблокированМной;
	
	Модуль_Ядро.Контрагенты_ЗаписатьСтатусДляМассиваКонтрагентов(
		ДанныеОрганизации,
		Результат,
		НовыйСтатус
	);
	
	Возврат Результат;
	
КонецФункции

//} Блокировка контрагентов

&НаКлиенте
Процедура ПоказатьПодсказкуСостояниеОтношений()
	
	ТекущиеДанные = Элементы.СправочникСписок.ТекущиеДанные;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ТекстПредупреждения = ТекстПредупрежденияПоСтатусуКонтрагента(ТекущиеДанные);
	КомментарийПредупреждения = КомментарийПредупрежденияПоСтатусуКонтрагента(ТекущиеДанные);
	ПредставлениеСтатуса = ПредставлениеСтатусаКонтрагента(ТекущиеДанные);
	
	Если ТекущиеДанные.ОрганизацияЛиквидирована Тогда
		
		ЗаголовокПредупреждения = "Организация ликвидирована";
		
	Иначе
		
		ЗаголовокПредупреждения = ПредставлениеСтатуса;
		
	КонецЕсли;
	
	МодульПлатформа = Модуль_Платформа();
	МодульПлатформа.ОткрытьФормуПредупреждения(
		ТекстПредупреждения,
		КомментарийПредупреждения,
		ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Функция КомментарийПредупрежденияПоСтатусуКонтрагента(Знач ТекущиеДанные)
	
	Результат = "";
	
	Если ТекущиеДанные.ОрганизацияЛиквидирована Тогда
		
		Результат = "Подписание, отправка и получение документов недоступны";
		Возврат Результат;
		
	КонецЕсли;
	
	Приглашение = Неопределено;
	Если ТекущиеДанные.Статус <> Статус_РаботаетВДиадок() Тогда
		Приглашение = КомментарийИДокументПриглашения(ТекущиеДанные.ДанныеКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приглашение) Тогда
		Результат = Приглашение.Комментарий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеСтатусаКонтрагента(Знач ТекущиеДанные)
	
	ВозможныеСтатусы = ВозможныеСтатусыКонтрагентов();
	
	Результат = ТекущиеДанные.Статус;
	
	ЭлементСтатуса = ВозможныеСтатусы.НайтиПоЗначению(ТекущиеДанные.Статус);
	Если ЭлементСтатуса <> Неопределено Тогда
		Результат = ЭлементСтатуса.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекстПредупрежденияПоСтатусуКонтрагента(Знач ТекущиеДанные)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ДатаИзмененияСтатуса = ТекущиеДанные.ДатаИзменения;
	
	Если ТекущиеДанные.ОрганизацияЛиквидирована Тогда
		
		ШаблонТекстаПредупреждения = НСтр(
				"ru = 'Организация %1 ликвидирована %2'");
		
		ДатаИзмененияСтатуса = ТекущиеДанные.ДатаИзменения;
		
	ИначеЕсли ТекущиеДанные.Статус = Статус_ЗаблокировалМеня() Тогда
		
		ШаблонТекстаПредупреждения = НСтр(
				"ru = '%1 заблокировала вас %2'");
	Иначе
		
		ШаблонТекстаПредупреждения = НСтр(
				"ru = 'Вы заблокировали %1 %2'");
		
	КонецЕсли;
	
	Результат = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(
			ШаблонТекстаПредупреждения,
			ТекущиеДанные.Наименование,
			Формат(ДатаИзмененияСтатуса, "ДФ=dd.MM.yyyy"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КнопкаОткрытьПриглашение(Команда)
	
	
	ОткрытьПриглашениеПоВыбраннойСтроке();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриглашениеПоВыбраннойСтроке()
	
	ВыбраннаяСтрока = Элементы.СправочникСписок.ТекущиеДанные;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока.ОрганизацияЛиквидирована Тогда
		ПоказатьПредупреждениеОрганизацияЛиквидирована();
		Возврат;
	КонецЕсли;
	
	Если НЕ СтатусПозволяетОткрытьПриглашение(ВыбраннаяСтрока.Статус) Тогда
		ПоказатьПредупреждениеПриглашениеПринято();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_ПосмотретьПриглашение();
	
	ПоказатьФормуВыбранногоПриглашения();
	
	Метрики_ЗаписатьСтатистику_ПосмотретьПриглашение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПриглашениеПринято()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ТекстПредупреждения = НСтр(
			"ru = 'Контрагент находится в партнерских отношениях'");
	
	ЗаголовокПредупреждения = НСтр(
			"ru = 'Приглашение уже принято'");
	
	ОповещениеОЗакрытии = Неопределено;
	ОсновнаяФорма.ПоказатьПредупреждениеПереопределенная(
		ОповещениеОЗакрытии,
		ТекстПредупреждения, ,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОрганизацияЛиквидирована()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ТекстПредупреждения = НСтр(
			"ru = 'Обмен документами с данным контрагентом невозможен. 
			|Воспользуйтесь кнопкой ""Заблокировать"", 
			|чтобы исключить контрагента из списка ""Ваши контрагенты""'");
	
	ЗаголовокПредупреждения = НСтр(
			"ru = 'Организация контрагента ликвидирована'");
	
	ОповещениеОЗакрытии = Неопределено;
	ОсновнаяФорма.ПоказатьПредупреждениеПереопределенная(
		ОповещениеОЗакрытии,
		ТекстПредупреждения, ,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

//{ Прием приглашений

&НаКлиенте
Процедура КнопкаПринять(Команда)
	
	МассивДоступныхСтрок = ВыбранныеСтрокиСписка();
	Если МассивДоступныхСтрок.Количество() = 0 Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_ПринятьПриглашение();
	
	НачатьПринятьПриглашенияКонтрагентов();
	
	Метрики_ЗаписатьСтатистику_ПринятьПриглашение();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПринятьПриглашенияКонтрагентов()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Статус = Статус_ПригласилиНас();
	ИдентификаторыСтрок = ПолучитьИдентификаторыВыбранныхСтрок(Статус);
	СписокОшибок = СписокОшибок_ПринятьПриглашение();
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		
		ОбработчикПродолжить = "ПродолжитьПринятьПриглашениеКонтрагентов";
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				ОбработчикПродолжить,
				ЭтаФорма,
				ИдентификаторыСтрок
			);
		
		ПоказатьВопросПринятьНеВсеПриглашения(ОповещениеОЗавершении);
		
	Иначе
		
		ПродолжитьПринятьПриглашениеКонтрагентов(КодВозвратаДиалога.ОК, ИдентификаторыСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПринятьНеВсеПриглашения(ОповещениеОЗавершении)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокСообщения = НСтр(
			"ru = 'Невозможно принять все приглашения'"
		);
	ТекстСообщения = НСтр(
			"ru = 'Среди выбранных есть приглашения которые нельзя принять.'"
		);
	
	КнопкаПоУмолчанию = Неопределено;
	
	СписокКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОповещениеОЗавершении.ДополнительныеПараметры) Тогда
		КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
		СписокКнопок.Добавить(КнопкаПоУмолчанию, "Принять доступные пиглашения");
	КонецЕсли;
	
	СписокКнопок.Добавить(КодВозвратаДиалога.Прервать, "Подробнее");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок, ,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПринятьПриглашениеКонтрагентов(КодОтвета, ИдентификаторыСтрок) Экспорт
	
	Операция = "Принять приглашение";
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда
		
		Метрики_ЗаписатьПоведение_ВыполнитьДействиеПоДоступнымПриглашениям();
		
		ПринятьКонтрагентов(ИдентификаторыСтрок);
		
		Метрики_ЗаписатьСтатистику_ВыполнитьДействиеПоДоступнымПриглашениям(Операция);
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Прервать Тогда
		
		Метрики_ЗаписатьПоведение_Подробнее();
		
		ОсновнаяФорма = ОсновнаяФорма();
		ОбработчикПродолжить = "ОбработчикЗакрытияФормыСлужебныхСообщений_ПринятьПриглашения";
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				ОбработчикПродолжить,
				ЭтаФорма
			);
		
		СписокОшибок = СписокОшибок_ПринятьПриглашение();
		ЗаголовокФормы = НСтр("ru = 'Служебные сообщения'");
		ТекстСообщения = HTMLОшибкиДействийНаФормеКонтрагента(Операция, СписокОшибок);
		
		ОсновнаяФорма.ОткрытьФормуHTMLСообщения(
			ТекстСообщения,
			ЗаголовокФормы, , ,
			ОповещениеОЗавершении
		);
		
		Метрики_ЗаписатьСтатистику_Подробнее(Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСлужебныхСообщений_ПринятьПриглашения(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьПринятьПриглашенияКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКонтрагентов(ИдентификаторыСтрок)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеДоверенности = МашиночитаемаяДоверенность(ДанныеОрганизации.ID);
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ПринятьКонтрагентовЗавершение",
			ЭтаФорма,
			ИдентификаторыСтрок
		);
	
	Если ЗначениеЗаполнено(ОписаниеДоверенности.Ошибки) Тогда
		ПоказатьВопрос_НетПодходящихДоверенностей(ОписаниеОповещения, ОписаниеДоверенности.Ошибки);
	Иначе
		ПринятьКонтрагентовЗавершение(ОписаниеДоверенности.МЧД, ИдентификаторыСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКонтрагентовЗавершение(КонтрактМЧД, ИдентификаторыСтрок) Экспорт
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ИдентификаторыСтрок);
	
	ПриглашенияКонтрагентов = Контрагенты_ПриглашенияКонтрагентов(ДанныеКонтрагентов);
	
	Для Каждого КлючЗначение Из ПриглашенияКонтрагентов Цикл
		
		Приглашение = КлючЗначение.Значение;
		
		СведенияОФайле = Приглашение.Файл;
		
		Если СведенияОФайле.ТребуетсяПодпись Тогда
			
			ДанныеПодписи = Модуль_Ядро.ПодписьДанных(ДанныеОрганизации.ID, СведенияОФайле.Данные);
			СведенияОФайле.Вставить("ДанныеПодписи", ДанныеПодписи);
			
			Если ЗначениеЗаполнено(КонтрактМЧД) Тогда
				СведенияОФайле.Вставить("КонтрактМЧД", КонтрактМЧД);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПринятьКонтрагентовНаСервере(ПриглашенияКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ПринятьКонтрагентовНаСервере(Знач ПриглашенияКонтрагентов)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	МассивКонтрагентов = Модуль_Ядро.Контрагенты_ПринятьПриглашение(
			ДанныеОрганизации,
			ПриглашенияКонтрагентов
		);
	
	Результат = МассивКонтрагентов.Количество() > 0;
	
	НовыйСтатус = Статус_МойКонтрагент();
	
	Для Каждого КонтрагентЭДО Из МассивКонтрагентов Цикл
		ОбновитьКэш(КонтрагентЭДО.ID, НовыйСтатус);
	КонецЦикла;
	
	ОбновитьСписокИПрименитьФильтры();
	
	СообщитьОРезультатеДействия("Принять", Результат);
	
КонецПроцедуры

//} Прием приглашений


//{ Отказ приглашений
&НаКлиенте
Процедура КнопкаОтказать(Команда)
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_ОтказатьВПриглашении();
	
	НачатьОтказатьВПриглашенииКонтрагентов();
	
	Метрики_ЗаписатьСтатистику_ОтказатьВПриглашении();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтказатьВПриглашенииКонтрагентов()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Статус = Статус_ПригласилиНас();
	ИсключатьЛиквидированные = Ложь;
	ИдентификаторыСтрок = ПолучитьИдентификаторыВыбранныхСтрок(Статус, ИсключатьЛиквидированные);
	СписокОшибок = СписокОшибок_ОтказатьВПриглашении(ИсключатьЛиквидированные);
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				"ПродолжитьОтказатьВПриглашенииКонтрагентов",
				ЭтаФорма,
				ИдентификаторыСтрок
			);
		ПоказатьВопросОтказатьВДоступныхПриглашениях(ОповещениеОЗавершении);
	Иначе
		ПродолжитьОтказатьВПриглашенииКонтрагентов(КодВозвратаДиалога.ОК, ИдентификаторыСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтказатьВДоступныхПриглашениях(ОповещениеОЗавершении)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокСообщения = НСтр("ru = 'Невозможно отказать по всем приглашениям'");
	
	ТекстСообщения = НСтр(
			"ru = 'Среди выбранных есть приглашения, по которым нельзя отказать.'"
		);
	
	КнопкаПоУмолчанию = Неопределено;
	
	СписокКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОповещениеОЗавершении.ДополнительныеПараметры) Тогда
		КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
		СписокКнопок.Добавить(КнопкаПоУмолчанию, "Отказать в доступных приглашениях");
	КонецЕсли;
	
	СписокКнопок.Добавить(КодВозвратаДиалога.Прервать, "Подробнее");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	Таймаут = 0;
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтказатьВПриглашенииКонтрагентов(КодОтвета, ИдентификаторыСтрок) Экспорт
	
	Операция = "Отказать в приглашении";
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда
		
		Метрики_ЗаписатьПоведение_ВыполнитьДействиеПоДоступнымПриглашениям();
		
		ОтказатьВПриглашении(ИдентификаторыСтрок);
		
		Метрики_ЗаписатьСтатистику_ВыполнитьДействиеПоДоступнымПриглашениям(Операция);
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Прервать Тогда
		
		Метрики_ЗаписатьПоведение_Подробнее();
		
		ОсновнаяФорма = ОсновнаяФорма();
		ОбработчикПродолжить = "ОбработчикЗакрытияФормыСлужебныхСообщений_ОтказатьВПриглашении";
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				ОбработчикПродолжить,
				ЭтаФорма
			);
		
		ИсключатьЛиквидированные = Ложь;
		СписокОшибок = СписокОшибок_ОтказатьВПриглашении(ИсключатьЛиквидированные);
		ЗаголовокФормы = НСтр("ru = 'Служебные сообщения'");
		ТекстСообщения = HTMLОшибкиДействийНаФормеКонтрагента(Операция, СписокОшибок);
		
		ОсновнаяФорма.ОткрытьФормуHTMLСообщения(
			ТекстСообщения,
			ЗаголовокФормы, , ,
			ОповещениеОЗавершении
		);
		
		Метрики_ЗаписатьСтатистику_Подробнее(Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСлужебныхСообщений_ОтказатьВПриглашении(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьОтказатьВПриглашенииКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПриглашении(ИдентификаторыСтрок)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ОтказатьВПриглашенииЗавершение",
			ЭтаФорма,
			ИдентификаторыСтрок
		);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ОтказатьВПриглашении");
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаВводаV2Управляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеЗакрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПриглашенииЗавершение(Знач Результат, Знач ИдентификаторыСтрок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = Результат.Комментарий;
	
	ОтказатьВПриглашенииКонтрагентовНаСервере(Комментарий, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОтказатьВПриглашенииКонтрагентовНаСервере(Знач Комментарий, Знач ИдентификаторыСтрок)
	
	РезультатБлокировки = Контрагенты_Заблокировать(ИдентификаторыСтрок, Комментарий);
	
	РезультатВыполненияУспешный = РезультатБлокировки.Количество() > 0;
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ИдентификаторыСтрок);
	
	НовыйСтатус = Статус_РаботаетВДиадок();
	
	Для Каждого КонтрагентЭДО Из ДанныеКонтрагентов Цикл
		ОбновитьКэш(КонтрагентЭДО.ID, НовыйСтатус);
	КонецЦикла;
	
	ОбновитьСписокИПрименитьФильтры();
	
	СообщитьОРезультатеДействия("Отказать", РезультатВыполненияУспешный);
	
КонецПроцедуры

//} Отказ приглашений

&НаКлиенте
Процедура КнопкаОтозвать(Команда)
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_ОтозватьСвоеПриглашение();
	
	НачатьОтозватьПриглашенияКонтрагентов();
	
	Метрики_ЗаписатьСтатистику_ОтозватьСвоеПриглашение();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтозватьПриглашенияКонтрагентов()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Статус = Статус_ОжидаемОтветНаПриглашение();
	ИсключатьЛиквидированные = Ложь;
	ИдентификаторыСтрок = ПолучитьИдентификаторыВыбранныхСтрок(Статус, ИсключатьЛиквидированные);
	СписокОшибок = СписокОшибок_ОтозватьПриглашение(ИсключатьЛиквидированные);
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				"ПродолжитьОтозватьПриглашенияКонтрагентов",
				ЭтаФорма,
				ИдентификаторыСтрок
			);
		ПоказатьВопросОтозватьДоступныеПриглашения(ОповещениеОЗавершении);
	Иначе
		ПродолжитьОтозватьПриглашенияКонтрагентов(КодВозвратаДиалога.ОК, ИдентификаторыСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтозватьДоступныеПриглашения(ОповещениеОЗавершении)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Таймаут = 0;
	ЗаголовокСообщения = НСтр("ru = 'Невозможно отозвать все приглашения'");
	
	ТекстСообщения = НСтр(
			"ru = 'Среди выбранных есть приглашения, которые нельзя отозвать.'"
		);
	
	КнопкаПоУмолчанию = Неопределено;
	
	СписокКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОповещениеОЗавершении.ДополнительныеПараметры) Тогда
		КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
		СписокКнопок.Добавить(КнопкаПоУмолчанию, "Отозвать доступные пиглашения");
	КонецЕсли;
	
	СписокКнопок.Добавить(КодВозвратаДиалога.Прервать, "Подробнее");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтозватьПриглашенияКонтрагентов(Результат, ИдентификаторыСтрок) Экспорт
	
	Операция = "Отозвать приглашение";
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Метрики_ЗаписатьПоведение_ВыполнитьДействиеПоДоступнымПриглашениям();
		
		ОтозватьПриглашение(ИдентификаторыСтрок);
		
		Метрики_ЗаписатьСтатистику_ВыполнитьДействиеПоДоступнымПриглашениям(Операция);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Прервать Тогда
		
		Метрики_ЗаписатьПоведение_Подробнее();
		
		ОсновнаяФорма = ОсновнаяФорма();
		ОбработчикПродолжить = "ОбработчикЗакрытияФормыСлужебныхСообщений_ОтозватьПриглашения";
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				ОбработчикПродолжить,
				ЭтаФорма
			);
		
		ИсключатьЛиквидированные = Ложь;
		СписокОшибок = СписокОшибок_ОтозватьПриглашение(ИсключатьЛиквидированные);
		ЗаголовокФормы = НСтр("ru = 'Служебные сообщения'");
		ТекстСообщения = HTMLОшибкиДействийНаФормеКонтрагента(Операция, СписокОшибок);
		
		ОсновнаяФорма.ОткрытьФормуHTMLСообщения(
			ТекстСообщения,
			ЗаголовокФормы, , ,
			ОповещениеОЗавершении
		);
		
		Метрики_ЗаписатьСтатистику_Подробнее(Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция HTMLОшибкиДействийНаФормеКонтрагента(Операция, Ошибки)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Модуль_Ядро.HTMLОшибкиДействийНаФормеКонтрагента(Операция, Ошибки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСлужебныхСообщений_ОтозватьПриглашения(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьОтозватьПриглашенияКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПриглашение(Знач ИдентификаторыСтрок)
	
	СведенияОПриглашениях = ПодготовитьСведенияОПриглашениях(ИдентификаторыСтрок);
	
	Если СведенияОПриглашениях.ТребуетсяАннулирование Тогда
		НачатьАннулированиеВложений(СведенияОПриглашениях.АдресДанных);
	Иначе
		ЗаблокироватьКонтрагентов(СведенияОПриглашениях.АдресДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАннулированиеВложений(Приглашения)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ПродолжитьАннулированиеВложений",
			ЭтаФорма,
			Приглашения
		);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "АннулироватьВложения");
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаВводаV2Управляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеЗакрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАннулированиеВложений(Знач Результат, Знач Приглашения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = Результат.Комментарий;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Приглашения", Приглашения);
	ДопПараметры.Вставить("Комментарий", Комментарий);
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ПродолжитьАннулированиеВложенийПослеПроверкиМЧД",
			ЭтаФорма,
			ДопПараметры
		);
	
	ОписаниеДоверенности = МашиночитаемаяДоверенность(ДанныеОрганизации.ID);
	
	Если ЗначениеЗаполнено(ОписаниеДоверенности.Ошибки) Тогда
		
		ПоказатьВопрос_НетПодходящихДоверенностей(
			ОписаниеОповещения,
			ОписаниеДоверенности.Ошибки
		);
		
	Иначе
		
		ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(
			ОписаниеОповещения,
			ОписаниеДоверенности.МЧД
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопрос_НетПодходящихДоверенностей(ОписаниеОповещенияОзавершении, ОшибкиПроверкиМЧД)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ИдентификаторЯщика = Неопределено;
	ВыбраннаяМЧД = Неопределено;
	ДействиеЭДО = "";
	
	ПараметрыДляПроверкиМЧД = ОсновнаяФорма.ПараметрыДляПроверкиМЧД(
			ОписаниеОповещенияОзавершении,
			ИдентификаторЯщика,
			ВыбраннаяМЧД,
			ДействиеЭДО
		);
	
	ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД = ОшибкиПроверкиМЧД;
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ОбработатьРезультатПриГрупповыхДействияхНаФормеВопросаМЧД",
			ВладелецФормы,
			ПараметрыДляПроверкиМЧД
		);
	
	ОсновнаяФорма.ПоказатьВопрос_НетПодходящейДоверенности(
		ПараметрыДляПроверкиМЧД,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Функция МашиночитаемаяДоверенность(ИдентификаторЯщика)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Результат = Новый Структура;
	Результат.Вставить("МЧД");
	Результат.Вставить("Ошибки");
	
	Если НЕ ОсновнаяФорма.ТребуетсяМЧД(ИдентификаторЯщика) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОшибкиПроверкиМЧД = Новый Массив;
	
	ИдентификаторыЯщиков = Новый Массив;
	ИдентификаторыЯщиков.Добавить(ИдентификаторЯщика);
	
	КонтрактыМЧД = ОсновнаяФорма.ПолучитьДействующиеМЧДпоУмолчанию(ИдентификаторыЯщиков, ОшибкиПроверкиМЧД);
	КонтрактМЧД = КонтрактыМЧД.Получить(ИдентификаторЯщика);
	
	Результат.МЧД = КонтрактМЧД;
	Результат.Ошибки = ОшибкиПроверкиМЧД;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьАннулированиеВложенийПослеПроверкиМЧД(КонтрактМЧД, ДополнительныеПараметры) Экспорт
	
	Приглашения = ДополнительныеПараметры.Приглашения;
	Комментарий = ДополнительныеПараметры.Комментарий;
	
	АннулироватьВложения(
		Приглашения,
		Комментарий,
		КонтрактМЧД
	);
	
	ЗаблокироватьКонтрагентов(Приглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьВложения(АдресДанныхПриглашений, Комментарий, КонтрактМЧД)
	
	ДокументыКАннулированию = Приглашения_ВложенияСЗапросомОтветнойПодписи(АдресДанныхПриглашений);
	
	Для Каждого Документ Из ДокументыКАннулированию Цикл
		
		Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", Комментарий);
		
		Если НЕ Документ.СлужебнаяИнформация.Свойство("КонтрактМЧД") Тогда
			Документ.СлужебнаяИнформация.Вставить("КонтрактМЧД", КонтрактМЧД);
		КонецЕсли;
		
	КонецЦикла;
	
	Действие = ДействияЭДО_Аннулировать();
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Модуль_Ядро.Документы_ВыполнитьДействиеСДокументами(ДокументыКАннулированию, Действие);
	
КонецПроцедуры

&НаСервере
Функция СведенияОПриглашениях(ИдентификаторыСтрок)
	
	ВыбранныеКонтрагенты = ДанныеКонтрагентовИзИдентификаторовСтрок(ИдентификаторыСтрок);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Контрагент"); // Контракт Контрагент
	Результат.Колонки.Добавить("ТребуетсяПодписатьВложение");
	Результат.Колонки.Добавить("Вложение"); // Контракт Документ
	Результат.Колонки.Добавить("Комментарий");
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	BoxID = МодульЯдро.АдресЯщикаВИдентификатор(ДанныеОрганизации.ID);
	
	Для Каждого Контрагент Из ВыбранныеКонтрагенты Цикл
		
		Приглашение = МодульЯдро.Контрагенты_СведенияОПриглашении(
				BoxID,
				ДанныеОрганизации.OrgId,
				Контрагент.OrgId
			);
		
		Запись = Результат.Добавить();
		Запись.Контрагент = Контрагент;
		Запись.Вложение = Приглашение.Документ;
		Запись.ТребуетсяПодписатьВложение = Приглашение.ТребуетсяПодпись;
		Запись.Комментарий = Приглашение.Комментарий;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьСведенияОПриглашениях(Знач ИдентификаторыСтрок)
	
	Приглашения = СведенияОПриглашениях(ИдентификаторыСтрок);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТребуетсяПодписатьВложение", Истина);
	ПриглашенияТребуетсяАннулирование = Приглашения.НайтиСтроки(Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяАннулирование", ЗначениеЗаполнено(ПриглашенияТребуетсяАннулирование));
	Результат.Вставить("АдресДанных", ПоместитьВоВременноеХранилище(Приглашения, Новый УникальныйИдентификатор()));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеАннулированияВложений(Результат, ПараметрыОбработки) Экспорт
	
	ЗаблокироватьКонтрагентов(ПараметрыОбработки.ДополнительныеПараметры.Приглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьКонтрагентов(АдресДанныхПриглашений)
	
	ПриглашенияОтозваны = ЗаблокироватьКонтрагентовНаСервере(АдресДанныхПриглашений);
	
	Контрагенты = Приглашения_ВсеКонтрагенты(АдресДанныхПриглашений);
	
	НовыйСтатус = Статус_ЗаблокированМной();
	
	Для Каждого КонтрагентЭДО Из Контрагенты Цикл
		ОбновитьКэш(КонтрагентЭДО.ID, НовыйСтатус);
	КонецЦикла;
	
	СообщитьОРезультатеДействия("Отозвать", ПриглашенияОтозваны);
	
КонецПроцедуры

&НаСервере
Функция ЗаблокироватьКонтрагентовНаСервере(Знач АдресДанныхПриглашений)
	
	КонтрагентыЗаблокированы = ОтозватьПриглашениеНаСервере(АдресДанныхПриглашений);
	УстановитьСтатусКонтрагентов_РаботаетВДиадок(АдресДанныхПриглашений);
	
	Возврат КонтрагентыЗаблокированы;
	
КонецФункции

&НаСервере
Функция ОтозватьПриглашениеНаСервере(Знач АдресДанныхПриглашений)
	
	Результат = Истина;
	
	КонтрагентыДляБлокировки = Приглашения_КонтрагентыДоступныеДляБлокировки(АдресДанныхПриглашений);
	
	Если ЗначениеЗаполнено(КонтрагентыДляБлокировки) Тогда
		
		МодульЯдро = Модуль_ЯдроНаСервере();
		
		ЗаблокированныеКонтрагенты = МодульЯдро.Контрагенты_Заблокировать(ДанныеОрганизации, КонтрагентыДляБлокировки);
		
		Результат = (ЗаблокированныеКонтрагенты.Количество() > 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусКонтрагентов_РаботаетВДиадок(Знач АдресДанныхПриглашений)
	
	Контрагенты = Приглашения_ВсеКонтрагенты(АдресДанныхПриглашений);
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	СтатусыКонтрагентов = МодульЯдро.Перечисление_СтатусыКонтрагентов();
	
	НовыйСтатус = СтатусыКонтрагентов.РаботаетВДиадок;
	
	МодульЯдро.Контрагенты_ЗаписатьСтатусДляМассиваКонтрагентов(
		ДанныеОрганизации,
		Контрагенты,
		НовыйСтатус
	);
	
КонецПроцедуры

//{ Отправка приглашений

&НаКлиенте
Процедура КнопкаОтправитьПриглашение(Команда)
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	Если НЕ ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупрежденияНеВыбраныКонтрагенты();
		Возврат;
	КонецЕсли;
	
	Метрики_ЗаписатьПоведение_ОтправитьПриглашение();
	
	НачатьОтправкуПриглашенияКонтрагентам();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуПриглашенияКонтрагентам()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Статус = Неопределено;
	ИсключатьЛиквидированные = Истина;
	ИдентификаторыСтрок = ПолучитьИдентификаторыВыбранныхСтрок(Статус, ИсключатьЛиквидированные);
	СписокОшибок = СписокОшибок_ОтправитьПриглашение(ИсключатьЛиквидированные);
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				"ПродолжитьОтправкуПриглашенияКонтрагентов",
				ЭтаФорма,
				ИдентификаторыСтрок
			);
		ПоказатьВопросОтправитьПриглашенияДоступнымКонтрагентам(ОповещениеОЗавершении);
	Иначе
		ПродолжитьОтправкуПриглашенияКонтрагентов(КодВозвратаДиалога.ОК, ИдентификаторыСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтправитьПриглашенияДоступнымКонтрагентам(ОповещениеОЗавершении)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокСообщения = НСтр("ru = 'Невозможно отправить приглашения всем контрагентам'");
	
	ТекстСообщения = НСтр(
			"ru = 'Среди выбранных есть контрагенты, по которым нельзя отправить приглашение.'"
		);
	
	КнопкаПоУмолчанию = Неопределено;
	
	СписокКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОповещениеОЗавершении.ДополнительныеПараметры) Тогда
		КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
		СписокКнопок.Добавить(КнопкаПоУмолчанию, "Отправить доступным контрагентам");
	КонецЕсли;
	
	СписокКнопок.Добавить(КодВозвратаДиалога.Прервать, "Подробнее");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	Таймаут = 0;
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуПриглашенияКонтрагентов(КодОтвета, ИдентификаторыСтрок) Экспорт
	
	Операция = "Отправить приглашение";
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда
		
		ПоказатьФормуОтправкиПриглашения(ИдентификаторыСтрок);
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Прервать Тогда
		
		Метрики_ЗаписатьПоведение_Подробнее();
		
		ОсновнаяФорма = ОсновнаяФорма();
		ОбработчикПродолжить = "ОбработчикЗакрытияФормыСлужебныхСообщений_ОтправитьПриглашение";
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				ОбработчикПродолжить,
				ЭтаФорма
			);
		
		ИсключатьЛиквидированные = Истина;
		СписокОшибок = СписокОшибок_ОтправитьПриглашение(ИсключатьЛиквидированные);
		ЗаголовокФормы = НСтр("ru = 'Служебные сообщения'");
		ТекстСообщения = HTMLОшибкиДействийНаФормеКонтрагента(Операция, СписокОшибок);
		
		ОсновнаяФорма.ОткрытьФормуHTMLСообщения(
			ТекстСообщения,
			ЗаголовокФормы, , ,
			ОповещениеОЗавершении
		);
		
		Метрики_ЗаписатьСтатистику_Подробнее(Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСлужебныхСообщений_ОтправитьПриглашение(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьОтправкуПриглашенияКонтрагентам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(ИдентификаторыСтрок, Приглашение)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПодготовленноеПриглашение = ПодготовитьПриглашениеКОтправке(Приглашение);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодготовленноеПриглашение", ПодготовленноеПриглашение);
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ИдентификаторыСтрок);
	
	ОписаниеДоверенности = МашиночитаемаяДоверенность(ДанныеОрганизации.ID);
	
	Если ЗначениеЗаполнено(ОписаниеДоверенности.Ошибки)
		И ЗначениеЗаполнено(Приглашение.Файл.ИмяФайла) Тогда
		ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
				"ОбработчикОтправкиПриглашенийПослеПроверкиМЧД",
				ЭтаФорма,
				ДополнительныеПараметры);
		
		ПоказатьВопрос_НетПодходящихДоверенностей(ОписаниеОповещения, ОписаниеДоверенности.Ошибки);
	Иначе
		ОбработчикОтправкиПриглашенийПослеПроверкиМЧД(ОписаниеДоверенности.МЧД, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПриглашениеКОтправке(Приглашение)
	
	ПараметрыПриглашения = Новый Структура;
	ПараметрыПриглашения.Вставить("ТекстПриглашения", Приглашение.Комментарий);
	ПараметрыПриглашения.Вставить("ИмяФайла", Приглашение.Файл.ИмяФайла);
	ПараметрыПриглашения.Вставить("ЭтоПриглашениеСВложением", Ложь);
	
	Если ЗначениеЗаполнено(Приглашение.Файл.ИмяФайла) Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаКлиенте();
		
		ДвоичныеДанныеФайла = Приглашение.Файл.Данные;
		ДвоичныеДанныеПодписи = Модуль_Ядро.ПодписьДанных(
				ДанныеОрганизации.ID,
				ДвоичныеДанныеФайла
			);
		
		ПараметрыПриглашения.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
		ПараметрыПриглашения.Вставить("ДвоичныеДанныеПодписи", ДвоичныеДанныеПодписи);
		ПараметрыПриглашения.Вставить("ЗапрашиватьОтветнуюПодпись", Приглашение.Файл.ТребуетсяПодпись);
		ПараметрыПриглашения.Вставить("ЭтоПриглашениеСВложением", Истина);
		
	КонецЕсли;
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОтправкиПриглашенийПослеПроверкиМЧД(КонтрактМЧД, ДополнительныеПараметры) Экспорт
	
	Приглашение = ДополнительныеПараметры.ПодготовленноеПриглашение;
	
	Приглашение.Вставить("КонтрактМЧД", КонтрактМЧД);
	
	Если Приглашение.ЭтоПриглашениеСВложением
		И ЕстьРоуминговыеКонтрагентыВВыбранныхСтроках() Тогда
		
		ПоказатьПредупреждениеОтправкиВложенийВРоуминг(ДополнительныеПараметры);
		
	Иначе
		ОтправитьПриглашенияЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОтправкиВложенийВРоуминг(ДополнительныеПараметры) Экспорт
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокПредупреждения = НСтр("ru = 'Контрагент в роуминге'");
	
	ТекстПредупреждения = НСтр(
			"ru = 'Отправка приглашений с вложениями недоступна для роуминговых контрагентов. 
			|
			|При выполнении действия произошли ошибки. Перейдите по кнопке «Подробнее» для просмотра причин'"
		);
	
	ИмяОбработчика = "ОбработчикЗакрытиеПредупрежденияОтправкиВложенийВРоуминг";
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения(
			ИмяОбработчика,
			ЭтаФорма,
			ДополнительныеПараметры);
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Отправить без вложения");
	СписокКнопок.Добавить(КодВозвратаДиалога.Прервать, "Подробнее");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Закрыть");
	
	Таймаут = 0;
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		ОписаниеОповещения,
		ТекстПредупреждения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытиеПредупрежденияОтправкиВложенийВРоуминг(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.Ок Тогда
		
		ОтправитьПриглашенияЗавершение(ДополнительныеПараметры);
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Прервать Тогда
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ОповещениеОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
				"ОбработчикЗакрытияФормыСлужебныхСообщений_ОтправитьПриглашения",
				ЭтаФорма,
				ДополнительныеПараметры);
		
		ЗаголовокФормы = НСтр("ru = 'Служебные сообщения'");
		ТекстСообщения = Контрагенты_ОтправкаПриглашенийСВложениямиРоуминг_СписокОшибокВТекстHTML();
		
		ОсновнаяФорма.ОткрытьФормуHTMLСообщения(
			ТекстСообщения,
			ЗаголовокФормы, , ,
			ОповещениеОЗавершении
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСлужебныхСообщений_ОтправитьПриглашения(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждениеОтправкиВложенийВРоуминг(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияЗавершение(ДополнительныеПараметры)
	
	ПриглашенияОтправленыБезОшибок = Истина;
	
	РезультатОтправкиПриглашений = ОтправитьПриглашенияНаСервере(ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(РезультатОтправкиПриглашений) Тогда
		
		МассивПриглашенныхКонтрагентов = РезультатОтправкиПриглашений.ПриглашенныеКонтрагенты;
		
		Если ДополнительныеПараметры.ИдентификаторыСтрок.Количество() <> МассивПриглашенныхКонтрагентов.Количество() Тогда
			ПриглашенияОтправленыБезОшибок = Ложь;
		КонецЕсли;
		
		Если НЕ ПриглашенияОтправленыБезОшибок Тогда
			ПредупреждениеОбОшибкахОтправкиПриглашений(РезультатОтправкиПриглашений);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ДополнительныеПараметры.ИдентификаторыСтрок);
	
	НовыйСтатус = Статус_ОжидаемОтветНаПриглашение();
	
	Для Каждого КонтрагентЭДО Из ДанныеКонтрагентов Цикл
		ОбновитьКэш(КонтрагентЭДО.ID, НовыйСтатус);
	КонецЦикла;
	
	СообщитьОРезультатеДействия("ОтправитьПриглашение", ПриглашенияОтправленыБезОшибок);
	
КонецПроцедуры

&НаСервере
Функция ОтправитьПриглашенияНаСервере(Знач ДополнительныеПараметры)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Перечисление_СтатусыКонтрагентов = Модуль_Ядро.Перечисление_СтатусыКонтрагентов();
	НовыйСтатус = Перечисление_СтатусыКонтрагентов.ОжидаетсяОтвет;
	
	ДанныеКонтрагентов = ДанныеКонтрагентовИзИдентификаторовСтрок(ДополнительныеПараметры.ИдентификаторыСтрок);
	
	Результат = Модуль_Ядро.Контрагенты_ОтправитьПриглашение(
			ДанныеОрганизации,
			ДанныеКонтрагентов,
			ДополнительныеПараметры.ПодготовленноеПриглашение
		);
	
	Модуль_Ядро.Контрагенты_ЗаписатьСтатусДляМассиваКонтрагентов(
		ДанныеОрганизации,
		Результат.ПриглашенныеКонтрагенты,
		НовыйСтатус);
	
	КоличествоВыбранныхКонтрагентов = ДанныеКонтрагентов.Количество();
	КоличествоПриглашенныхКотрагентов = Результат.ПриглашенныеКонтрагенты.Количество();
	
	КоллекцияBoxIDПриглашенных = ПолучитьКоллекциюBoxIDПриглашенныхКонтрагентов(Результат.ПриглашенныеКонтрагенты);
	
	Метрики_ЗаписатьСтатистику_ОтправитьПриглашение(
		КоличествоВыбранныхКонтрагентов,
		КоличествоПриглашенныхКотрагентов,
		КоллекцияBoxIDПриглашенных);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКоллекциюBoxIDПриглашенныхКонтрагентов(ПриглашенныеКонтрагенты)
	
	Результат = Новый Массив;
	
	Для Каждого ПриглашенныйКонтрагент Из ПриглашенныеКонтрагенты Цикл
		
		Результат.Добавить(ПриглашенныйКонтрагент.ID);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредупреждениеОбОшибкахОтправкиПриглашений(РезультатОтправкиПриглашений)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокПредупреждения = НСтр("ru = 'Не удалось отправить приглашения контрагентам'");
	
	ТекстПредупреждения = НСтр(
			"ru = 'Для некоторых контрагентов отсутствует автоматическое подключение роуминга.
			|Необходимо оставить заявку для настройки роуминговой пары на сайте www.diadoc.ru/roaming.
			|
			|Для просмотра расшифровки по контрагентам перейдите по кнопке ""Подробнее"".'"
		);
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, "Подробнее");
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Закрыть");
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ДетальныеДанные", РезультатОтправкиПриглашений.ДетальныеДанные);
	
	Таймаут = 0;
	ИмяОбработчика = "ОбработчикПредставленияОшибокОтправкиПриглашенийКонтрагентам";
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
			ИмяОбработчика,
			ЭтаФорма,
			ПараметрыОбработки
		);
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		Оповещение,
		ТекстПредупреждения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПредставленияОшибокОтправкиПриглашенийКонтрагентам(ПараметрОповещения, ПараметрыОбработки) Экспорт
	
	Если ПараметрОповещения = КодВозвратаДиалога.ОК Тогда
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим", "ОшибкиОтправкиПриглашенийКонтрагентам");
		ПараметрыОткрытияФормы.Вставить("ДетальныеДанные", ПараметрыОбработки.ДетальныеДанные);
		
		ОсновнаяФорма.ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы
		);
		
	КонецЕсли;
	
КонецПроцедуры

//{ Отправка приглашений. Проверка вложений для роуминга

&НаКлиенте
Функция ЕстьРоуминговыеКонтрагентыВВыбранныхСтроках()
	
	Результат = Ложь;
	ВыбранныеСтрокиСписка = ВыбранныеСтрокиСписка();
	Для Каждого СтрокаСписка Из ВыбранныеСтрокиСписка Цикл
		Если СтрокаСписка.Роуминговый Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Контрагенты_ОтправкаПриглашенийСВложениямиРоуминг_СписокОшибокВТекстHTML()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ВыбранныеСтроки = ВыбранныеСтрокиСпискаНаСервере_Роуминг();
	ДанныеКонтрагентов = ПолучитьКонтрагентовИзСтрокСписка(ВыбранныеСтроки);
	
	Результат = Модуль_Ядро.Контрагенты_ОтправкаПриглашенийСВложениямиРоуминг_СписокОшибокВТекстHTML(
			ДанныеКонтрагентов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеТекстаОшибкиКонтрагента(Контрагент, Действие)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ШаблонСтрокиСообщения = "Для контрагента %1 ИНН-КПП %2-%3 нельзя выполнить действие: %4";
	Результат = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(
			ШаблонСтрокиСообщения,
			Контрагент.Наименование,
			Контрагент.ИНН,
			Контрагент.КПП,
			Действие);
	
	Возврат Результат;
	
КонецФункции

//} Отправка приглашений

&НаСервере
Функция Контрагенты_ПриглашенияКонтрагентов(Знач ДанныеКонтрагентов)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Модуль_Ядро.Контрагенты_КомментарийИДокументПриглашения(ДанныеОрганизации, ДанныеКонтрагентов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НетНужногоКонтрагента()
	
	Метрика_НетНужногоКонтрагента();
	ПоказатьФормуНетНужногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНетНужногоКонтрагента()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ОповещениеНетНужногоКонтрагента");
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОбработчикЗакрытия = Неопределено;
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОбработчикЗакрытия
	);
	
КонецПроцедуры

//{ Вспомогательные функции и процедуры

&НаКлиенте
Функция СписокОшибок_ПринятьПриглашение(ИсключатьЛиквидированные = Истина)
	
	Операция = "Принять приглашение";
	Статус = Статус_ПригласилиНас();
	
	Результат = ПроверитьВыбранныеСтроки(
			Операция,
			Статус,
			ИсключатьЛиквидированные
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СписокОшибок_ОтказатьВПриглашении(ИсключатьЛиквидированные = Истина)
	
	Операция = "Отказать в приглашении";
	Статус = Статус_ПригласилиНас();
	
	Результат = ПроверитьВыбранныеСтроки(
			Операция,
			Статус,
			ИсключатьЛиквидированные
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СписокОшибок_ОтозватьПриглашение(ИсключатьЛиквидированные = Истина)
	
	Операция = "Отозвать приглашение";
	Статус = Статус_ОжидаемОтветНаПриглашение();
	
	Результат = ПроверитьВыбранныеСтроки(
			Операция,
			Статус,
			ИсключатьЛиквидированные
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СписокОшибок_ОтправитьПриглашение(ИсключатьЛиквидированные = Истина)
	
	Операция = "Отправить приглашение";
	Статус = Неопределено;
	
	Результат = ПроверитьВыбранныеСтроки(
			Операция,
			Статус,
			ИсключатьЛиквидированные
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВыбранныеСтроки(Операция, Статус = Неопределено, ИсключатьЛиквидированные = Истина)
	
	Результат = Новый Массив;
	
	СтрокиСписка = ВыбранныеСтрокиСписка();
	
	ПроверятьСтатус = ЗначениеЗаполнено(Статус);
	
	Для Каждого СтрокаСписка Из СтрокиСписка Цикл
		Если (ПроверятьСтатус И СтрокаСписка.Статус <> Статус)
			ИЛИ (ИсключатьЛиквидированные И СтрокаСписка.ОрганизацияЛиквидирована) Тогда
			ТекстОшибки = ПредставлениеТекстаОшибкиКонтрагента(СтрокаСписка, Операция);
			Результат.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеСтрокиСписка()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	Результат = СправочникСписок.НайтиСтроки(ПараметрыОтбора);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиСпискаНаСервере_Роуминг()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	ПараметрыОтбора.Вставить("Роуминговый", Истина);
	Результат = СправочникСписок.НайтиСтроки(ПараметрыОтбора);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиСпискаНаСервере_НеРоуминг()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	ПараметрыОтбора.Вставить("Роуминговый", Ложь);
	Результат = СправочникСписок.НайтиСтроки(ПараметрыОтбора);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиСпискаНаСервере()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	Результат = СправочникСписок.НайтиСтроки(ПараметрыОтбора);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДействияЭДО_Аннулировать()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	ДействияЭДО = Ядро.Перечисление_ДействияЭДО();
	Результат = ДействияЭДО.Аннулировать;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Новый_ИдентификаторыДокумента(BoxID, LetterID, DocumentID)
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	Идентификаторы = МодульЯдро.Контракт_Идентификаторы();
	Идентификаторы.BoxID = BoxID;
	Идентификаторы.LetterID = LetterID;
	Идентификаторы.DocumentID = DocumentID;
	
	Возврат Идентификаторы;
	
КонецФункции

&НаСервере
Функция ПустоеПриглашение()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Результат = Модуль_Ядро.Новый_ПриглашениеКонтрагента();
	Результат.Комментарий = Модуль_Ядро.Контрагенты_ТекстПриглашенияДляКонтрагентов(ДанныеОрганизации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КомментарийИДокументПриглашения(Знач ДанныеСтроки)
	
	Результат = Новый Структура;
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Контрагент = КонтрагентИзСтрокиДанных(ДанныеСтроки);
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтрагентов.Добавить(Контрагент);
	
	СоответствиеПриглашений = Модуль_Ядро.Контрагенты_КомментарийИДокументПриглашения(
			ДанныеОрганизации,
			МассивКонтрагентов
		);
	
	Если СоответствиеПриглашений.Количество() > 0 Тогда
		Результат = СоответствиеПриглашений[Контрагент.ID];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РежимПоискИПриглашение()
	
	Возврат "ПоискИПриглашение";
	
КонецФункции

&НаСервере
Функция ТекстУспешногоВыполнения()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("ОтправитьПриглашение", "Отправка приглашения выполнена успешно");
	Результат.Вставить("Заблокировать", "Блокировка выполнена успешно");
	Результат.Вставить("Принять", "Приглашение принято успешно");
	Результат.Вставить("Отказать", "Отказ выполнен успешно");
	Результат.Вставить("Отозвать", "Приглашение отозвано успешно");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстНеуспешногоВыполнения()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("ОтправитьПриглашение", "Отправку приглашения выполнить не удалось");
	Результат.Вставить("Заблокировать", "Блокировку выполнить не удалось");
	Результат.Вставить("Принять", "Принять приглашение не удалось");
	Результат.Вставить("Отказать", "Отказ выполнить не удалось");
	Результат.Вставить("Отозвать", "Отозвать приглашение не удалось");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтрагентовИзСтрокСписка(СтрокиСписка)
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтрока Из СтрокиСписка Цикл
		
		ДанныеКонтрагента = КонтрагентИзСтрокиДанных(ТекСтрока.ДанныеКонтрагента);
		Результат.Добавить(ДанныеКонтрагента);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбУспешномСопоставлении(ТекстСообщенияПользователю)
	
	ОчиститьСообщения();
	
	Сообщить(
		ТекстСообщенияПользователю,
		СтатусСообщения.Информация
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОшибокДублейПриГрупповомСопоставлении(ТекстПредупреждения, ДетальныеДанные = Неопределено)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокПредупреждения = НСтр("ru = 'Сопоставление контрагентов завершено'");
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
	
	СписокКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ДетальныеДанные) Тогда
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, "Показать дубли");
	КонецЕсли;
	
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Закрыть");
	
	Таймаут = 0;
	ИмяОбработчика = "ОбработчикПредставленияОшибокГрупповогоСопоставления";
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ДетальныеДанные", ДетальныеДанные);
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
			ИмяОбработчика,
			ЭтаФорма,
			ПараметрыОбработки
		);
	
	ОсновнаяФорма.ПоказатьВопросПереопределенная(
		Оповещение,
		ТекстПредупреждения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПредставленияОшибокГрупповогоСопоставления(ПараметрОповещения, ПараметрыОбработки) Экспорт
	
	Если ПараметрОповещения = КодВозвратаДиалога.ОК Тогда
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим", "ОшибкиГрупповогоСопоставленияКонтрагентов");
		ПараметрыОткрытияФормы.Вставить("ДетальныеДанные", ПараметрыОбработки.ДетальныеДанные);
		
		ОсновнаяФорма.ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможныеСтатусыКонтрагентов()
	
	Результат = Новый СписокЗначений;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		Перечисление_Статусы = Модуль_Ядро.Контрагенты_СоответствиеСтатусовКонтрагентов();
		
		Результат.Добавить(Перечисление_Статусы.Получить("RejectsMe"), "Заблокировал вас");
		Результат.Добавить(Перечисление_Статусы.Получить("IsRejectedByMe"), "Заблокирован вами");
		Результат.Добавить(Перечисление_Статусы.Получить("NotInCounteragentList"), "Без отношений");
		
	Иначе
		Перечисление_Статусы = Модуль_Ядро.Перечисление_СтатусыКонтрагентов();
		
		Результат.Добавить(Перечисление_Статусы.ПартнерскиеОтношения, "Обмениваемся документами");
		Результат.Добавить(Перечисление_Статусы.ПриглашаютВас, "Получили приглашение");
		Результат.Добавить(Перечисление_Статусы.ОжидаетсяОтвет, "Ждем ответ на приглашение");
		
	КонецЕсли;
	
	Результат.Добавить("Организация ликвидирована", "Организация ликвидирована");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВозможныеСтатусыКонтрагентовДляСинхронизации()
	
	Результат = Новый Массив;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Перечисление_Статусы = Модуль_Ядро.Перечисление_СтатусыКонтрагентов();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		Результат.Добавить("Rejected");
	Иначе
		Результат.Добавить(Перечисление_Статусы.ПартнерскиеОтношения);
		Результат.Добавить(Перечисление_Статусы.ПриглашаютВас);
		Результат.Добавить(Перечисление_Статусы.ОжидаетсяОтвет);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКонтрагентаВКэше(Знач IDКонтрагента, НовыйСтатус = Неопределено)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	КонтрагентыВКэшеФормы = ПолучитьИзВременногоХранилища(АдресВХранилищеСпискаКонтрагентовФормы);
	
	ПараметрыСпискаДляСпискаДокументов = Модуль_Ядро.Контрагенты_ПараметрыПолученияСпискаПартнеров(ДанныеОрганизации);
	КэшКонтрагентовДляСпискаДокументов = Модуль_Ядро.Контрагенты_ЗаполненныйСписок(ПараметрыСпискаДляСпискаДокументов);
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ID", IDКонтрагента);
	
	СтрокиСписка = СправочникСписок.НайтиСтроки(ПараметрыОтбораСтрок);
	СтрокаСписка = СтрокиСписка[СтрокиСписка.ВГраница()];
	
	ДанныеКонтрагента = ДанныеКонтрагентаПоСтрокеСписка(СтрокаСписка);
	
	Если ЗначениеЗаполнено(НовыйСтатус) Тогда
		
		ДанныеКонтрагента.Статус = НовыйСтатус;
		
	КонецЕсли;
	
	УдалитьДанныеКонтрагентаИзСписка(
		КэшКонтрагентовДляСпискаДокументов,
		ДанныеКонтрагента);
	
	УдалитьДанныеКонтрагентаИзСписка(
		КонтрагентыВКэшеФормы,
		ДанныеКонтрагента);
	
	УдалитьСопоставлениеКонтрагентаСФормы(ДанныеКонтрагента);
	
	ВозможныеСтатусыКонтрагентов = ВозможныеСтатусыКонтрагентов();
	НайденноеЗначение = ВозможныеСтатусыКонтрагентов.НайтиПоЗначению(ДанныеКонтрагента.Статус);
	
	Если НайденноеЗначение = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СвязанныеСправочники = Модуль_Ядро.Контрагенты_МассивСопоставленныхВ1С(ДанныеКонтрагента);
	ДанныеКонтрагента.СвязанныеСправочники = СвязанныеСправочники;
	
	Если ДанныеКонтрагента.Статус = Статус_МойКонтрагент() Тогда
		
		СтрокаТаблицы = КэшКонтрагентовДляСпискаДокументов.Добавить();
		СтрокаТаблицы.РеквизитыСвязанныхСправочников = ДанныеКонтрагента.СвязанныеСправочники;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеКонтрагента);
		
		Модуль_Ядро.Кэш_Поместить(
			ПараметрыСпискаДляСпискаДокументов.Ключ,
			КэшКонтрагентовДляСпискаДокументов);
		
	КонецЕсли;
	
	ДобавитьСтрокуИЗаполнить(
		КонтрагентыВКэшеФормы,
		ДанныеКонтрагента,
		ДанныеКонтрагента.СвязанныеСправочники,
		Модуль_Ядро);
	
	ЗаполнитьТаблицуСвязанныхСправочников(
		ДанныеКонтрагента.ID,
		ДанныеКонтрагента.СвязанныеСправочники);
	
	ПоместитьВоВременноеХранилище(КонтрагентыВКэшеФормы, АдресВХранилищеСпискаКонтрагентовФормы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеКонтрагентаИзСписка(Список, Знач НовыеДанныеКонтрагента)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ID", НовыеДанныеКонтрагента.ID);
	
	СтрокиСписка = Список.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаСписка Из СтрокиСписка Цикл
		
		Список.Удалить(СтрокаСписка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСопоставлениеКонтрагентаСФормы(Знач НовыеДанныеКонтрагента)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ID", НовыеДанныеКонтрагента.ID);
	КоллекцияСопоставленийКА = СопоставленныеКонтрагенты.НайтиСтроки(ПараметрыОтбораСтрок);
	Для Каждого СтрокаСопоставления Из КоллекцияСопоставленийКА Цикл
		СопоставленныеКонтрагенты.Удалить(СтрокаСопоставления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОРезультатеДействия(Знач Действие, Знач РезультатВыполненияУспешный)
	
	Если РезультатВыполненияУспешный Тогда
		
		ТекстСообщения = ТекстУспешногоВыполнения()[Действие];
		
	Иначе
		
		ТекстСообщения = ТекстНеуспешногоВыполнения()[Действие];
		
	КонецЕсли;
	
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ДанныеКонтрагентаПоСтрокеСписка(СтрокаСписка)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ТекущиеДанныеКонтрагента = КонтрагентИзСтрокиДанных(СтрокаСписка.ДанныеКонтрагента);
	
	КонтрагентаСсылка = ТекущиеДанныеКонтрагента.Ссылка;
	ИдентификаторЯщика = ТекущиеДанныеКонтрагента.ID;
	
	Идентификаторы = Модуль_Ядро.Новый_ИдентификаторыСправочника(КонтрагентаСсылка, ИдентификаторЯщика);
	
	НовыеДанныеКонтрагента = Модуль_Ядро.Контрагенты_ЗаполненныеРеквизиты(Идентификаторы);
	НовыеДанныеКонтрагента.Статус = ТекущиеДанныеКонтрагента.Статус;
	
	Возврат НовыеДанныеКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуОтправкиПриглашения(ИдентификаторыСтрок)
	
	Приглашение = ПустоеПриглашение();
	РежимОткрытия = "Новое";
	
	ПоказатьФормуПриглашения(Приглашение, РежимОткрытия, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуПриглашения(Приглашение, РежимОткрытия, ИдентификаторыСтрок)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Приглашение", Приглашение);
	ПараметрыФормы.Вставить("ТекущийРежим", РежимОткрытия);
	ПараметрыФормы.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма.НовыйОписаниеОповещения(
			"ЗакрытаФормаПриглашения",
			ЭтаФорма,
			ИдентификаторыСтрок
		);
	
	ОсновнаяФорма.ОткрытьФормуДиадокМодально(
		"ФормаПриглашенияУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеЗакрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаФормаПриглашения(Результат, ИдентификаторыСтрок) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = НРег(Результат.Команда);
	
	Если Команда = НРег("Отменить") Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда = НРег("Отозвать") Тогда
		
		ОтозватьПриглашение(ИдентификаторыСтрок);
		
	ИначеЕсли Команда = НРег("Отказать") Тогда
		
		ОтказатьВПриглашении(ИдентификаторыСтрок);
		
	ИначеЕсли Команда = НРег("Принять") Тогда
		
		ПринятьКонтрагентов(ИдентификаторыСтрок);
		
	ИначеЕсли Команда = НРег("Отправить") Тогда
		
		ОтправитьПриглашения(ИдентификаторыСтрок, Результат.Приглашение);
		
	Иначе
		
		Ошибка = СтрЗаменить(
				"Неожиданный идентификатор команды (%1)",
				"%1",
				Команда
			);
		
		ВызватьИсключение Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентВСтрокуДанных(СтруктураКонтрагента)
	
	Результат = ЗначениеВСтрокуВнутр(СтруктураКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтрагентИзСтрокиДанных(Знач ДанныеСтрокиТЧ)
	
	Результат = ЗначениеИзСтрокиВнутр(ДанныеСтрокиТЧ);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Приглашения_ВсеКонтрагенты(Знач АдресДанныхПриглашений)
	
	ДанныеВХ = ПолучитьИзВременногоХранилища(АдресДанныхПриглашений);
	
	Результат = ДанныеВХ.ВыгрузитьКолонку("Контрагент");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Приглашения_КонтрагентыДоступныеДляБлокировки(Знач АдресДанныхПриглашений)
	
	ДанныеВХ = ПолучитьИзВременногоХранилища(АдресДанныхПриглашений);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТребуетсяПодписатьВложение", Ложь);
	СтрокиКонтрагентов = ДанныеВХ.Скопировать(Отбор);
	
	Результат = СтрокиКонтрагентов.ВыгрузитьКолонку("Контрагент");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Приглашения_ВложенияСЗапросомОтветнойПодписи(Знач АдресДанныхПриглашений)
	
	ДанныеВХ = ПолучитьИзВременногоХранилища(АдресДанныхПриглашений);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТребуетсяПодписатьВложение", Истина);
	НайденныеСтроки = ДанныеВХ.Скопировать(Отбор);
	
	Результат = НайденныеСтроки.ВыгрузитьКолонку("Вложение");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусПозволяетОткрытьПриглашение(ТекущийСтатус)
	
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(Статус_ОжидаемОтветНаПриглашение());
	ДоступныеСтатусы.Добавить(Статус_ПригласилиНас());
	
	Результат = ДоступныеСтатусы.Найти(ТекущийСтатус) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ОжидаемОтветНаПриглашение()
	
	Возврат "IsInvitedByMe";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ПригласилиНас()
	
	Возврат "InvitesMe";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_МойКонтрагент()
	
	Возврат "IsMyCounteragent";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_РаботаетВДиадок()
	
	Возврат "Работает в Диадок";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗаблокировалМеня()
	
	Возврат "Заблокировал меня";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗаблокированМной()
	
	Возврат "isRejectedByMe";
	
КонецФункции

//} Вспомогательные функции и процедуры

// { Дополнительные действия

&НаКлиенте
Процедура ВыполнитьОбработчикПроизвольнойКнопки(Команда)
	
	ИмяКнопкиПМ = СтрЗаменить(Команда.Имя, "НажатиеДополнительнойКнопки_", "");
	ДанныеДляОбработки = ДанныеДляОбработкиПриНажатииДополнительнойКнопки();
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ИмяФормы", ИмяТекущейФормы());
	ПараметрыПМ.Вставить("РежимФормы", ТекущийРежимСписка);
	ПараметрыПМ.Вставить("ИмяКнопки", ИмяКнопкиПМ);
	ПараметрыПМ.Вставить("Данные", ДанныеДляОбработки);
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.НажатиеДополнительнойКнопкиДляВторостепеннойФормы(ПараметрыПМ);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляОбработкиПриНажатииДополнительнойКнопки()
	
	Результат = Новый Массив;
	
	ВыбранныеСтроки = ВыбранныеСтрокиСписка();
	
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		ТекДанные = Контракт_ДанныеДляОбработчикаДополнительнойКнопки();
		ЗаполнитьЗначенияСвойств(ТекДанные, ВыбраннаяСтрока);
		
		Результат.Добавить(ТекДанные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Контракт_ДанныеДляОбработчикаДополнительнойКнопки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ID", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ИдентификаторУчастникаЭДО", "");
	Результат.Вставить("Ссылка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// } Дополнительные действия

//{ Метрики

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ОткрытиеФормы()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеОткрытиеФормы();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПолучитьИзмененияПоТекущейОрганизации()
	
	НазваниеКнопки = Метрики_ДействиеПолучитьИзмененияИзДиадока();
	
	МеткаКнопки = "ПоТекущейОрганизации";
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки, МеткаКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПолучитьИзмененияПоВсемОрганизациям()
	
	НазваниеКнопки = Метрики_ДействиеПолучитьИзмененияИзДиадока();
	
	МеткаКнопки = "ПоВсемОрганизациям";
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки, МеткаКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ПолучитьИзмененияИзДиадока()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПолучитьИзмененияИзДиадока();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , , ,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ГрупповоеСопоставлениеКонтрагентов()
	
	НазваниеКнопки = Метрики_ДействиеГрупповоеСопоставлениеКонтрагентов();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ГрупповоеСопоставлениеКонтрагентов(
		ВсегоКонтрагентов,
		СопоставленоКонтрагентов,
		НайденоДублей)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеГрупповоеСопоставлениеКонтрагентов();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("ВсегоКА", ВсегоКонтрагентов);
	Переменные.Вставить("СопоставленоКА", СопоставленоКонтрагентов);
	Переменные.Вставить("НайденоДублей", НайденоДублей);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		Переменные,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ОбновлениеСписка()
	
	НазваниеКнопки = Метрики_ДействиеОбновлениеСписка();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ОбновлениеСписка()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеОбновлениеСписка();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("Фильтры", Метрики_ПолучитьУстановленныеФильтры());
	Переменные.Вставить("ИмяКолонок", Метрики_ПолучитьМассивИменВидимыхКолонок());
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		Переменные,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПоискИПриглашениеКонтрагентов()
	
	НазваниеКнопки = Метрики_ДействиеПоискИПриглашениеКонтрагентов();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ПоискИПриглашениеКонтрагентов()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПоискИПриглашениеКонтрагентов();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПосмотретьПриглашение()
	
	НазваниеКнопки = Метрики_ДействиеПосмотретьПриглашение();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ПосмотретьПриглашение()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПосмотретьПриглашение();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПринятьПриглашение()
	
	НазваниеКнопки = Метрики_ДействиеПринятьПриглашение();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ПринятьПриглашение()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПринятьПриглашение();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ОтказатьВПриглашении()
	
	НазваниеКнопки = Метрики_ДействиеОтказатьВПриглашении();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ОтказатьВПриглашении()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеОтказатьВПриглашении();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ОтозватьСвоеПриглашение()
	
	НазваниеКнопки = Метрики_ДействиеОтозватьСвоеПриглашение();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ОтозватьСвоеПриглашение()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеОтозватьСвоеПриглашение();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_Заблокировать()
	
	НазваниеКнопки = Метрики_ДействиеЗаблокировать();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_Заблокировать()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеЗаблокировать();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_СброситьСопоставление()
	
	НазваниеКнопки = Метрики_ДействиеСброситьСопоставление();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_СброситьСопоставление()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеСброситьСопоставление();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_НетНужногоКонтрагента()
	
	НазваниеКнопки = Метрики_ДействиеНетНужногоКонтрагента();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_НетНужногоКонтрагента()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеНетНужногоКонтрагента();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НетНужногоКонтрагента()
	
	Метрики_ЗаписатьСтатистику_НетНужногоКонтрагента();
	Метрики_ЗаписатьПоведение_НетНужногоКонтрагента();
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ПодсказкаСтатусОтношений()
	
	НазваниеКнопки = Метрики_ДействиеПодсказкаСтатус();
	
	Метрика_НажатиеСсылкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ПодсказкаСтатусОтношений(ПредставлениеСтатуса)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПодсказкаСтатус();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("ИмяСсылки", ПредставлениеСтатуса);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		ПеременныеМетрики,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ОтправитьПриглашение()
	
	НазваниеКнопки = Метрики_ДействиеОтправитьПриглашение();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура Метрики_ЗаписатьСтатистику_ОтправитьПриглашение(ВсегоКА, ОтправленоКА, КоллекцияBoxIDПриглашенных)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Действие = Метрики_ДействиеОтправитьПриглашение();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("ВсегоКА", ВсегоКА);
	Переменные.Вставить("ОтправленоКА", ОтправленоКА);
	Переменные.Вставить("toBoxId", КоллекцияBoxIDПриглашенных);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		Переменные,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ВыполнитьДействиеПоДоступнымПриглашениям()
	
	НазваниеКнопки = Метрики_ДействиеВыполнитьДействиеПоДоступнымПриглашениям();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ВыполнитьДействиеПоДоступнымПриглашениям(Операция)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеВыполнитьДействиеПоДоступнымПриглашениям();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("Действие", Операция);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		Переменные,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_Подробнее()
	
	НазваниеКнопки = Метрики_ДействиеПодробнее();
	
	Метрика_НажатиеСсылкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_Подробнее(Операция)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеПодробнее();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("Действие", Операция);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		Переменные,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_БыстрыйПоиск()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_БыстрыйПоиск();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ФильтрПоОрганизации()
	
	НазваниеКнопки = Метрики_ДействиеФильтрПоОрганизации();
	
	Метрика_РедактированиеПоляФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ФильтрПоОрганизации()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеФильтрПоОрганизации();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ФильтрПоСтатусу()
	
	НазваниеКнопки = Метрики_ДействиеФильтрПоСтатусу();
	
	Метрика_РедактированиеПоляФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_ФильтрПоСтатусу()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеФильтрПоСтатусу();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	ПредставлениеСтатуса = "";
	ВозможныеСтатусыКонтрагентов = ВозможныеСтатусыКонтрагентов();
	НайденноеЗначение = ВозможныеСтатусыКонтрагентов.НайтиПоЗначению(ОтборПоСтатусу);
	Если НайденноеЗначение <> Неопределено Тогда
		ПредставлениеСтатуса = НайденноеЗначение.Представление;
	КонецЕсли;
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("Статус", ПредставлениеСтатуса);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, ,
		ПеременныеМетрики,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_РасширенныеФильтры()
	
	НазваниеКнопки = Метрики_ДействиеРасширенныеФильтры();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_РасширенныеФильтры()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрики_ДействиеРасширенныеФильтры();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID,
		КатегорияМетрики,
		Действие, , ,
		НазваниеФормы,
		ИдентификаторТрассировки);
	
КонецПроцедуры


&НаКлиенте
Процедура Метрика_НажатиеКнопкиФормы(НазваниеКнопки, Метка = "")
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		НазваниеКнопки, 
		Метка, ,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_РедактированиеПоляФормы(НазваниеКнопки)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	МеткиМетрики = Модуль_Ядро.Метрика_НазваниеДействий();
	РедактироватьПоле = МеткиМетрики.РедактированиеПоля;
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		НазваниеКнопки,
		РедактироватьПоле, ,
		ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеСсылкиФормы(НазваниеКнопки)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	МеткиМетрики = Модуль_Ядро.Метрика_НазваниеДействий();
	НажатиеСсылки = МеткиМетрики.НажатиеСсылки;
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		НазваниеКнопки,
		НажатиеСсылки, ,
		ИдентификаторТрассировки);
	
КонецПроцедуры

//{ Замеры

&НаСервере
Функция Метрика_ОписаниеЗамера_ОбщийЗамерПолученияСпискаКонтрагентов()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	ДействиеМетрики = Метрика_ДействиеОбщийЗамерОбновленияСписка();
	
	ОписаниеЗамера = Модуль_Ядро.НачатьЗамерДлительнойОперации(КатегорияМетрики, ДействиеМетрики);
	
	Возврат ОписаниеЗамера;
	
КонецФункции

&НаСервере
Процедура Метрика_ЗавершитьЗамер_ОбщийЗамерПолученияСпискаКонтрагентов(Знач ОписаниеЗамера)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	BoxID = Модуль_Ядро.АдресЯщикаВИдентификатор(ДанныеОрганизации.ID);
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("BoxId", BoxID);
	ПеременныеМетрики.Вставить("КоличествоКА", СправочникСписок.Количество());
	ПеременныеМетрики.Вставить("ИдентификаторТрассировки", ИдентификаторТрассировки);
	
	Модуль_Ядро.ЗакончитьЗамердлительнойОперации(ОписаниеЗамера, КатегорияМетрики, ПеременныеМетрики);
	
КонецПроцедуры


&НаСервере
Функция Метрика_ОписаниеЗамера_КомпоновкаСпискаКонтрагентов()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	ДействиеМетрики = Метрика_ДействиеКомпоновкаСпискаКонтрагентов();
	
	ОписаниеЗамера = Модуль_Ядро.НачатьЗамерДлительнойОперации(КатегорияМетрики, ДействиеМетрики);
	
	Возврат ОписаниеЗамера;
	
КонецФункции

&НаСервере
Процедура Метрика_ЗавершитьЗамер_КомпоновкаСпискаКонтрагентов(Знач ОписаниеЗамера)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	BoxID = Модуль_Ядро.АдресЯщикаВИдентификатор(ДанныеОрганизации.ID);
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("BoxId", BoxID);
	ПеременныеМетрики.Вставить("Фильтры", Метрики_ПолучитьУстановленныеФильтры());
	ПеременныеМетрики.Вставить("ИдентификаторТрассировки", ИдентификаторТрассировки);
	
	Модуль_Ядро.ЗакончитьЗамердлительнойОперации(ОписаниеЗамера, КатегорияМетрики, ПеременныеМетрики);
	
КонецПроцедуры

&НаСервере
Функция Метрики_ПолучитьУстановленныеФильтры()
	
	Результат = Новый Массив;
	
	Отборы = КомпоновщикНастроекСКД.Настройки.Отбор;
	
	Для Каждого Отбор Из Отборы.Элементы Цикл
		
		Если Отбор.Использование Тогда
			Результат.Добавить(Строка(Отбор.ЛевоеЗначение));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция Метрика_ОписаниеЗамера_СинхронизацияКонтрагентов()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	ДействиеМетрики = Метрика_ДействиеСинхронизацияКонтрагентов();
	
	ОписаниеЗамера = Модуль_Ядро.НачатьЗамерДлительнойОперации(КатегорияМетрики, ДействиеМетрики);
	
	Возврат ОписаниеЗамера;
	
КонецФункции

&НаСервере
Процедура Метрика_ЗавершитьЗамер_СинхронизацияКонтрагентов(Знач ОписаниеЗамера)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	BoxID = Модуль_Ядро.АдресЯщикаВИдентификатор(ДанныеОрганизации.ID);
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("BoxId", BoxID);
	ПеременныеМетрики.Вставить("ИдентификаторТрассировки", ИдентификаторТрассировки);
	
	Модуль_Ядро.ЗакончитьЗамердлительнойОперации(ОписаниеЗамера, КатегорияМетрики, ПеременныеМетрики);
	
КонецПроцедуры


&НаСервере
Функция Метрика_ОписаниеЗамера_ОбновлениеСписка()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	ДействиеМетрики = Метрика_ДействиеОбновлениеСпискаКонтрагентов();
	
	ОписаниеЗамера = Модуль_Ядро.НачатьЗамерДлительнойОперации(КатегорияМетрики, ДействиеМетрики);
	
	Возврат ОписаниеЗамера;
	
КонецФункции

&НаСервере
Процедура Метрика_ЗавершитьЗамер_ОбновлениеСписка(Знач ОписаниеЗамера)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ТекущийРежимСписка = РежимПоискИПриглашение() Тогда
		КатегорияМетрики = Метрики_КатегорияДействияВСпискеПоискНовыхКА();
	Иначе
		КатегорияМетрики = Метрики_КатегорияДействияВОсновномСписке();
	КонецЕсли;
	
	BoxID = Модуль_Ядро.АдресЯщикаВИдентификатор(ДанныеОрганизации.ID);
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("BoxId", BoxID);
	ПеременныеМетрики.Вставить("ИдентификаторТрассировки", ИдентификаторТрассировки);
	
	Модуль_Ядро.ЗакончитьЗамердлительнойОперации(ОписаниеЗамера, КатегорияМетрики, ПеременныеМетрики);
	
КонецПроцедуры

//} Замеры

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОткрытиеФормы()
	
	Возврат "ОткрытиеФормы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеОбщийЗамерОбновленияСписка()
	
	Возврат "ОбщийЗамерОбновленияСписка";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеКомпоновкаСпискаКонтрагентов()
	
	Возврат "КомпоновкаСпискаКонтрагентов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеСинхронизацияКонтрагентов()
	
	Возврат "СинхронизацияКонтрагентов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеОбновлениеСпискаКонтрагентов()
	
	Возврат "ОбновлениеСпискаКонтрагентов";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегорииТехподдержка()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КатегорииМетрик = Модуль_Ядро.Метрика_НазваниеКатегории();
	Результат = КатегорииМетрик.Техподдержка;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегорииАннулироватьВложение()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КатегорииМетрик = Модуль_Ядро.Метрика_НазваниеКатегории();
	Результат = КатегорииМетрик.АннулироватьВложение;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеДействияАннулироватьВложение()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	ДействияМетрик = Модуль_Ядро.Метрика_НазваниеДействий();
	Результат = ДействияМетрик.АннулироватьВложение;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_КатегорияДействияВОсновномСписке()
	
	Возврат "ДействияВОсновномСписке";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_КатегорияДействияВСпискеПоискНовыхКА()
	
	Возврат "ДействияВСпискеПоискНовыхКА";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_КатегорияНевозможноВыполнитьДействие()
	
	Возврат "НевозможноВыполнитьДействие";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПолучитьИзмененияИзДиадока()
	
	Возврат "ПолучитьИзмененияИзДиадока";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеГрупповоеСопоставлениеКонтрагентов()
	
	Возврат "ГрупповоеСопоставлениеКонтрагентов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеФильтрПоОрганизации()
	
	Возврат "ФильтрПоОрганизации";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеФильтрПоСтатусу()
	
	Возврат "ФильтрПоСтатусу";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеРасширенныеФильтры()
	
	Возврат "РасширенныеФильтры";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОбновлениеСписка()
	
	Возврат "ОбновлениеСписка";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПриглашенияКонтрагентов()
	
	Возврат "ПриглашенияКонтрагентов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПоискИПриглашениеКонтрагентов()
	
	Возврат "ПоискИПриглашениеКонтрагентов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПосмотретьПриглашение()
	
	Возврат "ПосмотретьПриглашение";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПринятьПриглашение()
	
	Возврат "ПринятьПриглашение";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОтказатьВПриглашении()
	
	Возврат "ОтказатьВПриглашении";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОтозватьСвоеПриглашение()
	
	Возврат "ОтозватьСвоеПриглашение";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеЗаблокировать()
	
	Возврат "Заблокировать";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОтправитьПриглашение()
	
	Возврат "ОтправитьПриглашение";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеСброситьСопоставление()
	
	Возврат "СброситьСопоставление";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеНетНужногоКонтрагента()
	
	Возврат "НетНужногоКонтрагента";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПодсказкаСтатус()
	
	Возврат "СтатусКонтрагента";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеВыполнитьДействиеПоДоступнымПриглашениям()
	
	Возврат "ВыполнитьДействиеПоДоступнымПриглашениям";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПодробнее()
	
	Возврат "Подробнее";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_БыстрыйПоиск()
	
	Возврат "БыстрыйПоиск";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_НаименованиеФормы()
	
	Возврат "ФормаСпискаКонтрагентов";
	
КонецФункции

//} Метрики