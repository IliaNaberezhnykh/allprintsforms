//{		СЛУЖЕБНЫЕ МЕТОДЫ

&НаСервере	
Функция ВерсияОбработки() Экспорт
	
	Возврат "1.4";
	
	//1.4
	//Исправления смв_НовыйОписаниеОповещения и смв_ОткрытьФорму для управляемого приложения на 8.2.19
	
	//1.3
	//Исправления смв_НовыйОписаниеОповещения и смв_ОткрытьФорму для режима модальности Использовать 
	
	// 1.2
	// Работа с ДиалогВыборФайла
	
	// 1.1
	// Если для конфигурации свойство РежимИспользованияМодальности установлено в Использовать, то в процедуре смв_ДиалогРедактированияСтандартногоПериода_Показать при выполнении обработки оповещения не передавался Период
	
	// 1.0
	// Обертки для методов:
	
	// ОткрытьФорму()
	// ПоказатьПредупреждение()
	// ПоказатьВыборЭлемента()
	// ПоказатьЗначение()
	// Форма.ПоказатьВыборИзМеню()
	// ДиалогРедактированияСтандартногоПериода.Показать()
	// ПоказатьВопрос()
	// ПоказатьВводСтроки()
	// ПоказатьВводДаты()
	
КонецФункции
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура("РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Метаданные);
	
	СинхронныеВызовыНаКлиентеЗапрещены = Строка(СтруктураПараметров.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент) = "НеИспользовать";
	
	МодальностьЗапрещена = МодальностьЗапрещенаНаСервере();
	
КонецПроцедуры

&НаСервере
Функция МодальностьЗапрещенаНаСервере() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	ВерсияПлатформыМассивом = Служебные_РазложитьСтрокуВМассивСлов(СисИнфо.ВерсияПриложения, ".");
	ВтораяЦифраВерсии = Число(ВерсияПлатформыМассивом[1]);
	ТретьяЦифраВерсии = Число(ВерсияПлатформыМассивом[2]);
	
	Если (ВтораяЦифраВерсии = 3 И ТретьяЦифраВерсии >= 4) Или ВтораяЦифраВерсии > 3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности) = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе, что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТиповаяСтруктураДиалогаВыбораФайла(Заголовок = "", Каталог = "", МножественныйВыбор = Ложь, ПолноеИмяФайла = "", Фильтр = "")
	
	Возврат Новый Структура("Заголовок, Каталог, МножественныйВыбор, ПолноеИмяФайла, ПредварительныеПросмотр, ПроверятьСуществованиеФайла, Фильтр",
									?(ПустаяСтрока(Заголовок), "", Заголовок),
									?(ПустаяСтрока(Каталог), "", Каталог),
									МножественныйВыбор,
									?(ПустаяСтрока(ПолноеИмяФайла), "", ПолноеИмяФайла),
									Истина,
									Истина,
									?(ПустаяСтрока(Фильтр), "Все файлы (*.*)|*.*", Фильтр));
КонецФункции


&НаСервере
Функция Служебные_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = ",")
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка, Сред(РазделителиСлов, Сч, 1), Символы.ПС);
	КонецЦикла;
	
	Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
		
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка, Сч));
		Если ТекСлово <> "" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

&НаКлиенте
Процедура смв_ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат = Неопределено, КоличествоПараметровОбработчика = 2) Экспорт
	
	Если ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат)");
		Иначе 
			// Если модальность не запрещена, то в ОписаниеОповещения у нас будет Структура
			Если КоличествоПараметровОбработчика = 2 Тогда
				Выполнить("ОписаниеОповещения.Модуль." + ОписаниеОповещения.ИмяПроцедуры + "(Результат, ОписаниеОповещения.ДополнительныеПараметры)");
			ИначеЕсли КоличествоПараметровОбработчика = 1 Тогда
				Выполнить("ОписаниеОповещения.Модуль." + ОписаниеОповещения.ИмяПроцедуры + "(ОписаниеОповещения.ДополнительныеПараметры)"); 
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция смв_НовыйОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено, ИмяПроцедурыОбработкиОшибки = "", МодульОбработкиОшибки = Неопределено) Экспорт

	#Если ВебКлиент Тогда
		
		Возврат Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Возврат Вычислить("Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры)");
			// С ошибками пока не будем бороться, были какие-то сложности с типом параметров
		Иначе
			Возврат Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки"
									, ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки);
		КонецЕсли;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция смв_СтрокуДопустимоПередаватьВОбработчикВыполнения(Строка)
	
	Результат = Истина;
	// Пока что принудительно запретим вводить скобки и точки
	
	ЗапрещенныеСимволы = Новый Массив;
	ЗапрещенныеСимволы.Добавить(")");
	ЗапрещенныеСимволы.Добавить("(");
	ЗапрещенныеСимволы.Добавить(".");
	
	Для Каждого Символ Из ЗапрещенныеСимволы Цикл
		
		Если Найти(Строка, Символ) > 0 Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура смв_ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, РежимРаботы, ПараметрыВыбора) Экспорт 
	
	Диалог = Новый ДиалогВыбораФайла(РежимРаботы);
	ЗаполнитьЗначенияСвойств(Диалог, ПараметрыВыбора);
	
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			Диалог.Показать(ОписаниеОповещенияОЗавершении);
		Иначе
			смв_ПоказатьПредупреждение(,
									   "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.",
									   30);
		КонецЕсли;
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("Диалог.Показать(ОписаниеОповещенияОЗавершении)");
		Иначе
			Если Диалог.Выбрать() Тогда
				
				Если РежимРаботы = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
					РезультатВыбора = Новый Массив;
					РезультатВыбора.Добавить(Диалог.Каталог);
				Иначе
					РезультатВыбора = Диалог.ВыбранныеФайлы;
				КонецЕсли;
				
				смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, РезультатВыбора);
				
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Сравнить две строки версий.
// Версии типа "1.0.1b" сравнивать нельзя.
//
&НаКлиентеНаСервереБезКонтекста
Функция Служебные_СравнитьВерсии(Знач ПерваяВерсия, Знач ВтораяВерсия, Разделитель = ".")
	
	Результат = 0;
	
	Пока НЕ ПустаяСтрока(ПерваяВерсия) ИЛИ НЕ ПустаяСтрока(ВтораяВерсия) Цикл
		
		Поз = Найти(ПерваяВерсия, Разделитель);
		Если Поз > 0 Тогда
			НомерПервойВерсии = Число(Лев(ПерваяВерсия, Поз - 1));
			ПерваяВерсия = Сред(ПерваяВерсия, Поз + 1);
		Иначе
			НомерПервойВерсии = ?(ПустаяСтрока(ПерваяВерсия), 0, Число(ПерваяВерсия));
			ПерваяВерсия = "";
		КонецЕсли;
		
		Поз = Найти(ВтораяВерсия, Разделитель);
		Если Поз > 0 Тогда
			НомерВторойВерсии = Число(Лев(ВтораяВерсия, Поз - 1));
			ВтораяВерсия = Сред(ВтораяВерсия, Поз + 1);
		Иначе
			НомерВторойВерсии = ?(ПустаяСтрока(ВтораяВерсия), 0, Число(ВтораяВерсия));
			ВтораяВерсия = "";
		КонецЕсли;
		
		Результат = НомерПервойВерсии - НомерВторойВерсии;
		
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьРасширениеРаботыСФайламиВебКлиент()
	
	#Если ВебКлиент Тогда
		
		Возврат ПодключитьРасширениеРаботыСФайлами();
			
	#Иначе
		
		Возврат Истина;
		
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция СформироватьСтрокуФильтраПоРасширению(ЗНАЧ РасширениеФайла)
	
	РасширениеФайла = ВРег(РасширениеФайла);
	
	Результат		= "";
	Если РасширениеФайла = "CF" Тогда
		
		Результат	= "Файл конфигурации (cf) |*.%1";
		
	ИначеЕсли РасширениеФайла = "EPF" Тогда
		
		Результат	= "Внешняя обработка (epf)|*.%1";
		
	ИначеЕсли РасширениеФайла = "MXL" Тогда
		
		Результат	= "Табличный документ 1с (mxl)|*.%1";
		
	Иначе
		
		Результат	= "%1|*.%1";
		
	КонецЕсли;
	
	Возврат СтрЗаменить(Результат, "%1", РасширениеФайла);
	
КонецФункции

//}		СЛУЖЕБНЫЕ МЕТОДЫ


//{		СЛУЖЕБНЫЕ ОБРАБОТКИ ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ПолучениеКаталогаВременныхФайловДляСохраненияЗавершение(КаталогВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
		
		смв_ПолучитьФайлы(ДополнительныеПараметры.ОповещениеЗавершенияСохранения, 
							ДополнительныеПараметры.ДанныеДляСохранения,
							КаталогВременныхФайлов);
							
	КонецЕсли;
	
КонецПроцедуры

//}		СЛУЖЕБНЫЕ ОБРАБОТКИ ОПОВЕЩЕНИЯ

//{		ОБЕРТКИ ДЛЯ МОДАЛЬНЫХ ДИАЛОГОВ
	
// Правило присвоения имен методам:
//
// 1.	смв_<ИмяМетодаВБезмодальномВарианте>.  Например, "смв_ПоказатьПредупреждение". 
// 2.	смв_<ИмяТипаОбъекта>_<ИмяМетодаОбъектаВБезмодальномВарианте>.  Например, "смв_Форма_ПоказатьВыборИзМеню". 
//		В этом случае первым параметром метода должен идти сам объект, метод которого вызывается.
//
// Префикс "смв" - аббревиатура "Синхронные/модальные вызовы".
//
// Веб-клиент не поддерживает "Выполнить", поэтому вариант веб-клиента считаем всегда безмодальным и асинхронным. 
// По сути все методы по сигнатуре должны совпадать с исходными методами из самых последних версий платформы 8.3,
//		и лишь обеспечивать обратную совместимость с более старыми платформами.
// Т.е. основные модули пишем так, как если бы работали на последней платформе без режима совместимости.
// А модальные/синхронные методы вызываем через данную прослойку.

	
&НаКлиенте
Процедура смв_ОткрытьФорму(ИмяФормы
							, ПараметрыФормы = Неопределено
							, Владелец = Неопределено
							, Уникальность = Ложь
							, Окно = Неопределено
							, НавигационнаяСсылка = Неопределено
							, ОписаниеОповещенияОЗакрытии = Неопределено
							, РежимОткрытияОкна = Неопределено)  Экспорт

							
	// Синтаксис из 8.2.9 и 8.2.19:
	
	// ОткрытьФорму(<ИмяФормы>, <Параметры>, <Владелец>, <Уникальность>, <Окно>) 
	
	// Т.е. отсутствуют последние 3 параметра - а в них и РежимОткрытияОкна, и ОписаниеОповещенияОЗакрытии.
	// Значит, тут нам надо понять - открывать ли форму модально там, где запрета на модальность еще нет
	
	
	// Теперь варианты РежимОткрытияОкнаФормы в 8.2.9:
	// БлокироватьОкноВладельца (LockOwnerWindow)
	// Независимый (Independent)
	
	
	
	Если НЕ МодальностьЗапрещена Тогда
		
		ОткрыватьМодально = Истина;
		
		Если РежимОткрытияОкна = Неопределено
			Или РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый Тогда
			
			ОткрыватьМодально = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Владелец, Уникальность, , ,  ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, Владелец, Уникальность, , ,  ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна)");
			
		Иначе	
			
			Если ОткрыватьМодально ИЛИ ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
				РезультатОткрытия = Вычислить("ОткрытьФормуМодально(ИмяФормы, ПараметрыФормы, Владелец)");
				смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатОткрытия);
			Иначе	
				Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, Владелец, Уникальность, Окно)");
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении = Неопределено, ТекстПредупреждения = Неопределено, Таймаут = 0, Заголовок = "") Экспорт
	
	#Если ВебКлиент Тогда
		
		ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупреждения, Таймаут, Заголовок);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупреждения, Таймаут, Заголовок)");
		Иначе
			Выполнить("Предупреждение(ТекстПредупреждения, Таймаут)");
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении,,1);
		КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьВыборЭлемента(ОписаниеОповещенияОЗавершении = Неопределено, Заголовок = "", Элемент = Неопределено, Список) Экспорт
	
	#Если ВебКлиент Тогда
		
		Список.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗавершении, Заголовок, Элемент);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("Список.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗавершении, Заголовок, Элемент)");
		Иначе
			ВыбранныйЭлемент = Вычислить("Список.ВыбратьЭлемент(Заголовок, Элемент)");
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ВыбранныйЭлемент, 2);
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьЗначение(ОписаниеОповещенияОЗавершении = Неопределено, Значение) Экспорт
	
	#Если ВебКлиент Тогда
		
		ПоказатьЗначение(ОписаниеОповещенияОЗавершении, Значение);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьЗначение(ОписаниеОповещенияОЗавершении, Значение)");
		Иначе
			Выполнить("ОткрытьЗначение(Значение)");
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении);
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура смв_Форма_ПоказатьВыборИзМеню(Форма, ОписаниеОповещенияОЗавершении, СписокЗначений, ЭлементФормы = Неопределено, НачальноеЗначение = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		
		Форма.ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокЗначений, ЭлементФормы);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("Форма.ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокЗначений, ЭлементФормы)");  // вроде бы после 8.3.7, ПоказатьВыборИзМеню глючит - надо бы проверить.
		Иначе
			ВыбранноеЗначение = Форма.ВыбратьИзМеню(СписокЗначений, ЭлементФормы);
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ВыбранноеЗначение);
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура смв_ДиалогРедактированияСтандартногоПериода_Показать(Диалог, ОписаниеОповещения) Экспорт
	
	#Если ВебКлиент Тогда
		
		Диалог.Показать(ОписаниеОповещения);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			Выполнить("Диалог.Показать(ОписаниеОповещения)");
		Иначе
			Если Диалог.Редактировать() Тогда 
				смв_ВыполнитьОбработкуОповещения(ОписаниеОповещения, Диалог.Период);
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
							 ТекстВопроса,
							 Кнопки,
							 Таймаут = 0,
							 КнопкаПоУмолчанию = Неопределено,
							 Заголовок = "",
							 КнопкаТаймаута = Неопределено) Экспорт 
							 
	#Если ВебКлиент Тогда
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута);
	#Иначе
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута)");
		Иначе
			Ответ = Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута);
			Выполнить("ОписаниеОповещенияОЗавершении.Модуль." + ОписаниеОповещенияОЗавершении.ИмяПроцедуры + "(Ответ, ОписаниеОповещенияОЗавершении.ДополнительныеПараметры)");
		КонецЕсли;
	#КонецЕсли
							 
КонецПроцедуры						   

&НаКлиенте
Процедура смв_ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении,
							 Строка = "",
							 Подсказка = "",
							 Длина = 0,
							 Многострочность = Ложь) Экспорт 
							 
	#Если ВебКлиент Тогда
		ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Строка, Подсказка, Длина, Многострочность);
	#Иначе
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Строка, Подсказка, Длина, Многострочность)");
		Иначе
			Если ВвестиСтроку(Строка, Подсказка, Длина, Многострочность) Тогда
				
				// Здесь необходимо убедиться, что в строку не был передан вредоносный код
				// Поскольку в 8.2.19 она будет направлена в Выполнить()
				// UPD кажется, это в данном случае не имеет смысла.
				Если смв_СтрокуДопустимоПередаватьВОбработчикВыполнения(Строка) Тогда
					смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Строка);
				Иначе
					ВызватьИсключение "Некорректно введена строка";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
							 
КонецПроцедуры						   

&НаКлиенте
Процедура смв_ПоказатьВводДаты(ОписаниеОповещенияОЗавершении,
							 ВыбраннаяДата = "",
							 Подсказка = "",
							 ЧастьДаты = Неопределено) Экспорт 
							 
	#Если ВебКлиент Тогда
		ПоказатьВводДаты(ОписаниеОповещенияОЗавершении, ВыбраннаяДата, Подсказка, ЧастьДаты);
	#Иначе
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводДаты(ОписаниеОповещенияОЗавершении, ВыбраннаяДата, Подсказка, ЧастьДаты)");
		Иначе
			Если ВвестиДату(ВыбраннаяДата, Подсказка, ЧастьДаты) Тогда
				смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ВыбраннаяДата);
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
							 
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьДиалогВыбораКаталога(ОписаниеОповещенияОЗавершении, Заголовок = Неопределено, Каталог = Неопределено,
										   МножественныйВыбор = Ложь) Экспорт
	
	ПараметрыДиалога = ТиповаяСтруктураДиалогаВыбораФайла();
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		ПараметрыДиалога.Заголовок = Заголовок;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Каталог) Тогда
		ПараметрыДиалога.Каталог = Каталог;
	КонецЕсли;
	
	ПараметрыДиалога.МножественныйВыбор = МножественныйВыбор;
	
	смв_ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, РежимДиалогаВыбораФайла.ВыборКаталога, ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьДиалогОткрытие(ОписаниеОповещенияОЗавершении,
											Фильтр				= Неопределено,
											Заголовок			= Неопределено,
                                            Каталог				= Неопределено,
											ПолноеИмяФайла		= Неопределено,
											МножественныйВыбор	= Ложь) Экспорт
											
	ПараметрыДиалога = ТиповаяСтруктураДиалогаВыбораФайла();
	Если Не ПустаяСтрока(Фильтр) Тогда
		ПараметрыДиалога.Фильтр			= Фильтр;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		ПараметрыДиалога.Заголовок			= Заголовок;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Каталог) Тогда
		ПараметрыДиалога.Каталог			= Каталог;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПолноеИмяФайла) Тогда
		ПараметрыДиалога.ПолноеИмяФайла	= ПолноеИмяФайла;
	КонецЕсли;
	ПараметрыДиалога.МножественныйВыбор = МножественныйВыбор;
	
	смв_ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, 
									РежимДиалогаВыбораФайла.Открытие,
									ПараметрыДиалога);
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьДиалогСохранение(ОписаниеОповещенияОЗавершении,
											Фильтр				= Неопределено,
											Заголовок			= Неопределено,
                                            Каталог				= Неопределено,
											ПолноеИмяФайла		= Неопределено) Экспорт
											
	ПараметрыДиалога = ТиповаяСтруктураДиалогаВыбораФайла();
	Если Не ПустаяСтрока(Фильтр) Тогда
		ПараметрыДиалога.Фильтр			= Фильтр;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		ПараметрыДиалога.Заголовок			= Заголовок;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Каталог) Тогда
		ПараметрыДиалога.Каталог			= Каталог;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПолноеИмяФайла) Тогда
		ПараметрыДиалога.ПолноеИмяФайла	= ПолноеИмяФайла;
	КонецЕсли;
	ПараметрыДиалога.ПроверятьСуществованиеФайла = Истина;

	смв_ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, 
									РежимДиалогаВыбораФайла.Сохранение,
									ПараметрыДиалога);
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьОтметкуЭлементов(СписокЗначений, ОписаниеОповещенияОЗакрытии, Заголовок) Экспорт 
	
	#Если ВебКлиент Тогда
		СписокЗначений.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, Заголовок);
	#Иначе
		Если МодальностьЗапрещена Тогда
			Выполнить("СписокЗначений.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, Заголовок)");
		Иначе
			
			Результат = Неопределено;
			
			Если СписокЗначений.ОтметитьЭлементы(Заголовок) Тогда
				Результат = СписокЗначений;
			КонецЕсли;
			
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Результат);
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоказатьДиалогВыбораИзСписка(СписокЗначений, ОписаниеОповещенияОЗакрытии, Форма, ЭлементФормы, Значение = Неопределено) Экспорт
	
	НачальноеЗначение = СписокЗначений.НайтиПоЗначению(Значение);
	
	#Если ВебКлиент Тогда
		Форма.ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, СписокЗначений, ЭлементФормы, НачальноеЗначение);
	#Иначе
		Если МодальностьЗапрещена Тогда
			Выполнить("Форма.ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, СписокЗначений, ЭлементФормы, НачальноеЗначение)");
		Иначе
			
			Результат = Форма.ВыбратьИзСписка(СписокЗначений, ЭлементФормы, НачальноеЗначение);
			
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Результат);
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

//}		ОБЕРТКИ ДЛЯ МОДАЛЬНЫХ ДИАЛОГОВ




//{		ОБЕРТКИ ДЛЯ СИНХРОННЫХ МЕТОДОВ КЛИЕНТА

&НаКлиенте
Процедура смв_НачатьСозданиеДвоичныхДанныхИзФайла(ОписаниеОповещенияОЗавершении, ИмяФайла) Экспорт 
	
	СисИнфо = Новый СистемнаяИнформация;
	
	АсинхронныйРежим = Служебные_СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.9") >= 0;
	
	Если АсинхронныйРежим Тогда
		Выполнить("НачатьСозданиеДвоичныхДанныхИзФайла(ОписаниеОповещенияОЗавершении, ИмяФайла)");
	Иначе
		Результат = Новый ДвоичныеДанные(ИмяФайла);
		смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Результат);
	КонецЕсли;
							 
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоместитьФайлы(ОписаниеОповещенияОЗавершении, 
										ПомещаемыеФайлы) Экспорт
										
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			
			Выполнить("НачатьПомещениеФайлов(ОписаниеОповещенияОЗавершении, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор)");
			
		Иначе
			
			смв_ПоказатьПредупреждение(, "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
			
		КонецЕсли;
		
		
	#Иначе
		
		ПомещенныеФайлы = Новый Массив;
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьПомещениеФайлов(ОписаниеОповещенияОЗавершении, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор)");
			
		ИначеЕсли ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, Новый УникальныйИдентификатор) Тогда
				
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ПомещенныеФайлы);
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПоместитьФайлыЧерезДиалог(ОписаниеОповещенияОЗавершении, 
											Фильтр				= Неопределено,
											Заголовок			= Неопределено,
                                            Каталог				= Неопределено,
											ПолноеИмяФайла		= Неопределено,
											МножественныйВыбор	= Ложь) Экспорт
											
	ПараметрыДиалога	= ТиповаяСтруктураДиалогаВыбораФайла(Заголовок, Каталог, МножественныйВыбор, ПолноеИмяФайла, Фильтр);
	ДиалогОткрытияФайла	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ЗаполнитьЗначенияСвойств(ДиалогОткрытияФайла, ПараметрыДиалога);
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			
			Выполнить("НачатьПомещениеФайлов(ОписаниеОповещенияОЗавершении, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);");
			
		Иначе
			
			смв_ПоказатьПредупреждение(, "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
			
		КонецЕсли;
		
		
	#Иначе
		
		ПомещенныеФайлы = Новый Массив;
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьПомещениеФайлов(ОписаниеОповещенияОЗавершении, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);");
			
		ИначеЕсли ПоместитьФайлы(, ПомещенныеФайлы, ДиалогОткрытияФайла, Истина, Новый УникальныйИдентификатор) Тогда
				
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ПомещенныеФайлы);
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПолучитьФайлы(ОписаниеОповещенияОЗавершении, 
										СохраняемыеФайлы,
										КаталогСохранения) Экспорт
										
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			
			Выполнить("НачатьПолучениеФайлов(ОписаниеОповещенияОЗавершении, СохраняемыеФайлы, КаталогСохранения, Ложь)");
			
		Иначе
			
			смв_ПоказатьПредупреждение(, "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
			
		КонецЕсли;
		
		
	#Иначе
		
		СохраненныеФайлы = Новый Массив;
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьПолучениеФайлов(ОписаниеОповещенияОЗавершении, СохраняемыеФайлы, КаталогСохранения, Ложь)");
			
		ИначеЕсли ПолучитьФайлы(СохраняемыеФайлы, СохраненныеФайлы, КаталогСохранения, Ложь) Тогда
				
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, СохраненныеФайлы);
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПолучитьФайлыЧерезДиалог(ОписаниеОповещенияОЗавершении, 
										СохраняемыеФайлы,
										Заголовок	= "",
										Каталог		= ""
										) Экспорт
										
	Если СохраняемыеФайлы.Количество() = 1 Тогда
		
		ТестФайл	= Новый Файл(СохраняемыеФайлы[0].Имя);
		Расширение	= СтрЗаменить(ВРег(ТестФайл.Расширение), ".", "");
		Фильтр		= СформироватьСтрокуФильтраПоРасширению(Расширение);
		
		ПараметрыДиалога	= ТиповаяСтруктураДиалогаВыбораФайла(Заголовок, Каталог, Ложь, ТестФайл.Имя, Фильтр);
		ДиалогВыбораКаталог	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	    
	Иначе
		
		ПараметрыДиалога	= ТиповаяСтруктураДиалогаВыбораФайла(Заголовок, Каталог);
		ДиалогВыбораКаталог	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДиалогВыбораКаталог, ПараметрыДиалога);
										
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			
			Выполнить("НачатьПолучениеФайлов(ОписаниеОповещенияОЗавершении, СохраняемыеФайлы, ДиалогВыбораКаталог, Истина)");
			
		Иначе
			
			смв_ПоказатьПредупреждение(, "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
			
		КонецЕсли;
		
		
	#Иначе
		
		СохраненныеФайлы = Новый Массив;
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьПолучениеФайлов(ОписаниеОповещенияОЗавершении, СохраняемыеФайлы, ДиалогВыбораКаталог, Истина)");
			
		ИначеЕсли ПолучитьФайлы(СохраняемыеФайлы, СохраненныеФайлы, ДиалогВыбораКаталог, Истина) Тогда
				
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, СохраненныеФайлы);
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ПолучитьФайлыВоВременныйКаталог(ОписаниеОповещенияОЗавершении, 
										СохраняемыеФайлы) Экспорт
										
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДляСохранения",				СохраняемыеФайлы);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершенияСохранения",	ОписаниеОповещенияОЗавершении); 
			
	ОписаниеОповещения = смв_НовыйОписаниеОповещения("ПолучениеКаталогаВременныхФайловДляСохраненияЗавершение", ЭтаФорма, ДополнительныеПараметры);
										
	смв_КаталогВременныхФайлов(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура смв_КаталогВременныхФайлов(ОписаниеОповещенияОЗавершении) Экспорт
	
	#Если ВебКлиент Тогда
		
		Если ПроверитьРасширениеРаботыСФайламиВебКлиент() Тогда
			
			НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещенияОЗавершении);
			
		Иначе
			
			смв_ПоказатьПредупреждение(, "Не подключено Расширения для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
			
		КонецЕсли;
		
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещенияОЗавершении)");
			
		Иначе
			
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КаталогВременныхФайлов());
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_ЗапуститьПриложение(ОписаниеОповещенияОЗавершении, 
									СтрокаЗапускаПриложения,
									ТекущийКаталог		= "",
									ДождатьсяЗавершения = Ложь,
									КодВозврата			= Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
										
		НачатьЗапускПриложения(ОписаниеОповещенияОЗавершении, СтрокаЗапускаПриложения, ТекущийКаталог, ДождатьсяЗавершения);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьЗапускПриложения(ОписаниеОповещенияОЗавершении, СтрокаЗапускаПриложения, ТекущийКаталог, ДождатьсяЗавершения)");
			
		Иначе
			
			ЗапуститьПриложение(СтрокаЗапускаПриложения, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозврата);
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура смв_УстановитьРасширениеРаботыСФайлами(ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		
		
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияОЗавершении);
		
	#Иначе
		
		Если МодальностьЗапрещена Тогда
			
			Выполнить("НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияОЗавершении)");
			
		Иначе
			
			УстановитьРасширениеРаботыСФайлами();;
			смв_ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении);
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

//}		ОБЕРТКИ ДЛЯ СИНХРОННЫХ МЕТОДОВ КЛИЕНТА
