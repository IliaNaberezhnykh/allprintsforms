
&НаСервере
Перем мОбработкаОбъект;

//{ Сервисные методы
	
&НаСервере
Функция ОбработкаОбъект()
	
	Если мОбработкаОбъект = Неопределено Тогда
		мОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат мОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоУправляемаяФорма()
	
	Возврат (СтрДлина(ТипЗнч(ЭтаФорма))>5);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФорму(ПараметрыФормы) Экспорт
	
	ОбработатьПараметрыФормы(ПараметрыФормы);
	
	Модуль_ЯдроНаСервере	= Модуль_ЯдроНаСервере();
	TraceId					= Модуль_ЯдроНаСервере.TraceId();
	
	ТипыКонтентов = Модуль_ЯдроНаСервере.Перечисление_ТипыКонтентов();
	
	РезультатПриемкиДопустимыеЗначения = Модуль_ЯдроНаСервере.ВидыРезультатовПриемки_Значения();
	ИтогиСверкиДопустимыеЗначения = Модуль_ЯдроНаСервере.ВидыИтоговСверки_Значения();
	
	ВидТитула = Модуль_ЯдроНаСервере.Документы_ВидТитула(ТипКонтента);
	ПредставлениеПодписанта = Модуль_ЯдроНаСервере.Подписант_ПредставлениеПодписанта(АдресЯщика);
	КонфигурацияПоддерживаетСверкуВзаиморасчетов = Модуль_ЯдроНаСервере.КонфигурацияПоддерживаетСверкуВзаиморасчетов();
	
	Если ЗначениеЗаполнено(ТипКонтента) Тогда
		
		ПолномочияПодписантаПокупателя	= Модуль_ЯдроНаСервере.ПолномочияПодписанта_Покупателя(АдресЯщика, ТипКонтента);
		ПолномочияПодписанта			= ПолномочияПодписантаПокупателя.ПолномочияПодписанта;
		ОписаниеПодписанта				= ПолномочияПодписантаПокупателя.ОписаниеПодписанта;
		
		ЗаполнитьСписокВыбора_ГрузПринял();
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбора_РезультатПриемки();
	ЗаполнитьСписокВыбора_ДокументОРазногласияхВид();
	ЗаполнитьСписокВыбора_ИтогиСверки();
	
	ОтобразитьСведенияИзПолномочийПодписанта();
	НастроитьМЧДНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыФормы(ПараметрыФормы)
	
	ТипДокумента = ПараметрыФормы.ТипДокумента;
	ТипКонтента = ПараметрыФормы.ТипКонтента;
	ДатаДокумента = ПараметрыФормы.ДатаДокумента;
	ПараметрыФормы.Свойство("ГрупповоеДействие"	, ГрупповоеДействие);
	ПараметрыФормы.Свойство("КонтрагентПоддерживаетМЧД"	, КонтрагентПоддерживаетМЧД);
	ПараметрыФормы.Свойство("КонтентОтвета"	, КонтентОтвета);
	
	Если ПараметрыФормы.Свойство("АдресЯщика") Тогда
		АдресЯщика = ПараметрыФормы.АдресЯщика;
	ИначеЕсли ПараметрыФормы.Свойство("ИдентификаторЯщика") Тогда
		АдресЯщика = ПараметрыФормы.ИдентификаторЯщика;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НазваниеФормы()
	
	Результат = "ТитулПокупателя";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоФормализованныйАктСверки405()
	
	Возврат Нрег(ТипКонтента) = "reconciliationact405";
	
КонецФункции

//} Сервисные методы

//{ обработчики событий формы и элементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	ВосстановитьСохраненныеЗначенияОснованийПолномочийИхХранилища();
	
	ИнициализироватьФорму(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьЗначенияПоУмолчанию();
	УправлениеФормой();
	УстановитьЗаголовокФормы();
	Метрика_ПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Метрика_ПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриемкиПриИзменении(Элемент)
	
	ДокументОРазногласиях_УправлениеДоступностью();
	
	ЗаполнитьЗначенияПоКодуИтога_СодержаниеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиСверкиПриИзменении(Элемент)
	
	ЗаполнитьЗначенияПоИтогуСверки_СодержаниеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузПринялВидПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ГрузПринялОснованиеПолномочий)
		И (ГрузПринялВид = "СотрудникИнойОрганизации"
		ИЛИ ГрузПринялВид = "ДругойСотрудник") Тогда
		ГрузПринялОснованиеПолномочий = "Должностные обязанности";
	КонецЕсли;
	
	ОбновитьПанельГрузПринял();
	ЗаполнитьДанныеГрузПринялПолучательГруза();

	Метрика_ДобавитьСтатистику_ГрузПринял();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузПринялВидНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	Метрика_ДобавитьПоведение_ГрузПринял();

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСтарыеФорматыИзменитьДатуНажатие(Элемент)
	
	ИзменитьДату(Элементы.ГиперссылкаСтарыеФорматыИзменитьДату, ДатаПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНовыеФорматыСведенияО_ДоговореИзменитьДатуНажатие(Элемент)
	
	ИзменитьДату(Элементы.ГиперссылкаНовыеФорматыСведенияО_ДоговореИзменитьДату, ДатаПолученияВещи);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДату(ЭлементГиперссылкаИзменитьДату, РеквизитДата)
	
	ТекЗаголовок = ЭлементГиперссылкаИзменитьДату.Заголовок;
		
	РеквизитДата = ?(ТекЗаголовок = "Сегодня", ТекущаяДата(), ДатаДокумента);

	ЭлементГиперссылкаИзменитьДату.Заголовок = ?(ТекЗаголовок = "Сегодня", "Дата документа", "Сегодня");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНовыеФорматыЗаполнитьСведенияО_ДоговореНажатие(Элемент)
	
	ТекЗаголовок = Элементы.ГиперссылкаНовыеФорматыЗаполнитьСведенияО_Договоре.Заголовок;
	
	Элементы.ГруппаНовыеФорматыСведенияО_ДоговореДанные.Видимость = ?(ТекЗаголовок = "Заполнить", Истина, Ложь);
	
	Элементы.ГиперссылкаНовыеФорматыЗаполнитьСведенияО_Договоре.Заголовок = ?(ТекЗаголовок = "Заполнить", "Скрыть", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСтарыеФорматыЗаполнитьГрузПринял(Элемент)
	
	ТекЗаголовок = Элементы.ГиперссылкаСтарыеФорматыЗаполнитьГрузПринял.Заголовок;
	
	Элементы.ГруппаСтарыеФорматыГрузПринялДанные.Видимость = ?(ТекЗаголовок = "Заполнить", Истина, Ложь);
	
	Элементы.ГруппаДоверенность.Видимость = ?(ТекЗаголовок = "Заполнить", Истина, Ложь);
	ОбновитьДанныеДоверенности();
	
	Элементы.ГиперссылкаСтарыеФорматыЗаполнитьГрузПринял.Заголовок = ?(ТекЗаголовок = "Заполнить", "Скрыть", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузПринялСовпадаетС_ПолучателемПриИзменении(Элемент)
	
	Элементы.ГрузПринялФамилия.Доступность 	= Не ГрузПринялСовпадаетС_Получателем;
	Элементы.ГрузПринялИмя.Доступность 		= Не ГрузПринялСовпадаетС_Получателем;
	Элементы.ГрузПринялОтчество.Доступность = Не ГрузПринялСовпадаетС_Получателем;
	
	Если ЗначениеЗаполнено(ОписаниеПодписанта) Тогда
		
		ГрузПринялФамилия	= ОписаниеПодписанта.Фамилия;
		ГрузПринялИмя 		= ОписаниеПодписанта.Имя;
		ГрузПринялОтчество 	= ОписаниеПодписанта.Отчество;
		ГрузПринялДолжность = ОписаниеПодписанта.Должность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРедактироватьДоверенностьНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеДоверенности", ДанныеДоверенности);
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьДоверенностьПослеЗакрытия", ЭтаФорма);		
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("РедактированиеДоверенностиУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеЗакрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДоверенностьПослеЗакрытия(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ДанныеДоверенности = РезультатЗакрытия;
		ОбновитьДанныеДоверенности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНовыеФорматыРедактироватьПолномочияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("АдресЯщика", АдресЯщика);
	ПараметрыФормы.Вставить("ТипКонтента", ТипКонтента);
	ПараметрыФормы.Вставить("ПокупательПродавец", "Покупатель");
	
	ОписаниеЗакрытияФормы = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьПолномочияПослеЗакрытия", ЭтаФорма);		
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("РедактированиеПолномочийУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеЗакрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПолномочияПослеЗакрытия(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ПолномочияПодписанта = РезультатЗакрытия;
		ОтобразитьСведенияИзПолномочийПодписанта();
		ЗаполнитьДанныеГрузПринялПолучательГруза();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеГрузПринялПолучательГруза()
	
	Если НЕ ЗначениеЗаполнено(ГрузПринялФамилия) Тогда
		
		ГрузПринялФамилия	= ОписаниеПодписанта.Фамилия;
		ГрузПринялИмя 		= ОписаниеПодписанта.Имя;
		ГрузПринялОтчество 	= ОписаниеПодписанта.Отчество;
		ГрузПринялДолжность = ОписаниеПодписанта.Должность;
		ГрузПринялДолжность255 = ОписаниеПодписанта.Должность;
		
		Если ТипЗнч(ПолномочияПодписанта) = Тип("Структура") И ПолномочияПодписанта.Свойство("SignerPowersBase") Тогда
			ГрузПринялОснованиеПолномочий = ПолномочияПодписанта.SignerPowersBase;
		КонецЕсли;
			
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ОсновнаяФорма		= ОсновнаяФорма();
	КатегорияМетрики	= ОсновнаяФорма.Метрика_НазваниеКатегории().ПодписаниеВходящегоДокумента;
	ДействиеМетрики		= "Подписать";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Подписание документа", КатегорияМетрики, ДействиеМетрики, , , TraceId);
	
	Отказ = Ложь;
	
	Если ТипКонтента = ТипыКонтентов.utd970 Тогда
		ПроверкаЗаполненияДанныхУПД970(Отказ)
	Иначе
		ПроверкаЗаполненияДанных(Отказ);
	КонецЕсли;
	
	ПроверитьКонтентОтвета(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения("ПодписатьПослеПроверкиМЧД", ЭтаФорма);
	
	Если ТребуетсяМЧД И КонтрагентПоддерживаетМЧД Тогда
		ДействияЭДО				 = ОсновнаяФорма.ДействияЭДО();
		КонтрактВыбраннойМЧД	 = КонтекстМЧД.СписокМЧД.Получить(ВыбраннаяМЧД);
		ПараметрыДляПроверкиМЧД	 = ОсновнаяФорма.ПараметрыДляПроверкиМЧД(Оповещение, АдресЯщика, КонтрактВыбраннойМЧД, ДействияЭДО.ПодписатьВходящий, ГрупповоеДействие);
		ПараметрыДляПроверкиМЧД.ВызовИзТитулаИлиОтказа = Истина;
		ОсновнаяФорма.ПроверитьМЧДИВыполнитьОповещение(ПараметрыДляПроверкиМЧД);
	Иначе
		РезультатВыбораМЧД = ОсновнаяФорма.РезультатВыбораМЧД(Истина, Неопределено);
		ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(Оповещение, РезультатВыбораМЧД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбновитьПолномочияПодписантаУПД970()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	ТипПодписанта = МодульЯдро.ПолномочияПодписанта_SignerType(АдресЯщика);
	
	НовыеПолномочияПодписанта = МодульЯдро.АПИ_Новый_ExtendedSignerDetailsToPost(
		,
		,
		,
		ДолжностьПодписанта,
		ДопСведенияОПодписанте);
		
	СторонаПодписания = "Покупатель";	
	МодульЯдро.ПолномочияПодписанта_Сохранить(АдресЯщика, ВидТитула, СторонаПодписания, НовыеПолномочияПодписанта);
	
	ОписаниеПолномочийПодписанта = МодульЯдро.ПолномочияПодписанта_Получить(АдресЯщика, ВидТитула, СторонаПодписания);
	ПолномочияПодписанта = ОписаниеПолномочийПодписанта.Данные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеПроверкиМЧД(Результат, ДополнительныеПараметры) Экспорт
	
	РазрешитьДействие = Результат.РазрешитьДействие;
	
	Если РазрешитьДействие Тогда
		
		ТитулПокупателя = ТитулПокупателя();
		
		Если ТитулПокупателя.Свойство("ЕстьОшибки")
			И ТитулПокупателя.ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		
		ТитулПокупателя.ДополнительныеПараметры.Вставить("КонтрактМЧД",	Результат.КонтрактМЧД);
		
		Если ТипКонтента = ТипыКонтентов.utd970
			И ПолномочияПодписантаИзменены Тогда
			СохранитьОбновитьПолномочияПодписантаУПД970();
		КонецЕсли;
		
		Закрыть(ТитулПокупателя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияДанных(Отказ)
	
	Если ЗначениеЗаполнено(ВидТитула)
		И ТипЗнч(ПолномочияПодписанта) <> Тип("Структура")
		И НЕ ЭтоФормализованныйАктСверки405() Тогда
		ОсновнаяФорма().ВывестиСообщениеПользователю("Заполните полномочия подписанта",, ЭтаФорма);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДатаПодписания", "Дата");
	
	Если ЗначениеЗаполнено(ВидТитула) Тогда
		
		Синоним = "Содержание операции";
		Если ТипКонтента = "torg2" Тогда
			Синоним = "Сведения о приемке";
		ИначеЕсли ЭтоФормализованныйАктСверки405() Тогда
			Синоним = "Итоги сверки";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РезультатПриемки) Или Не ЗначениеЗаполнено(ИтогиСверки) Тогда
			ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "СодержаниеОперации", Синоним);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрузПринялВид) И ГрузПринялВид <> "НеЗаполнять" Тогда // проверка ГрузПринял для новых форматов
		
		ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялФамилия", "Фамилия");
		ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялИмя"	 , "Имя");
		
		Если ГрузПринялВид = "ПолучательГруза" ИЛИ ГрузПринялВид = "ДругойСотрудник" ИЛИ ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
			
			ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялДолжность", "Должность");
			
			Если ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
				ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялОрганизация", "Организация");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГиперссылкаСтарыеФорматыЗаполнитьГрузПринял.Заголовок = "Скрыть" Тогда // проверка ГрузПринял для старых форматов
		
		ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялФамилия"	, "Фамилия");
		ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялИмя"		, "Имя");
		ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялДолжность"	, "Должность");
		
	КонецЕсли;
	

	Если ТипКонтента = "tovtorg"
		Или ТипКонтента = "utd820"
		Или ТипКонтента = "torg12"
		Или ТипКонтента = "torg2" Тогда
		
		ПроверитьЗаполнениеДополнительныхПолей(Отказ);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияДанныхУПД970(Отказ)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДатаПодписания", "Дата");
	ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДолжностьПодписанта", "Должность на вкладке ""Основное""");
	
	Если Не ЗначениеЗаполнено(РезультатПриемки) Тогда
		
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "СодержаниеОперации", "Содержание операции");
		
	ИначеЕсли (РезультатПриемки = РезультатПриемкиДопустимыеЗначения.ПринятоСРазногласиями
			Или РезультатПриемки = РезультатПриемкиДопустимыеЗначения.НеПринято)
		И НеобходимоПроверитьЗаполнениеСведенийОДокументеРазногласий() Тогда
		
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДокументОРазногласияхНаименование", "Наименование документа о разногласиях");
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДокументОРазногласияхНомер", "Номер документа о разногласиях");
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ДокументОРазногласияхДата", "Дата документа о разногласиях");		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрузПринялВид)
		И ГрузПринялВид <> "НеЗаполнять" Тогда
		
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялФамилия", "Фамилия");
		ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялИмя", "Имя");
		
		Если ГрузПринялВид = "ПолучательГруза"
			ИЛИ ГрузПринялВид = "ДругойСотрудник"
			ИЛИ ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
			
			ОсновнаяФорма.ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялДолжность255", "Должность на вкладке ""Дополнительно""");
			
			Если ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
				ПроверитьЗаполнениеПриГрузПринялСотрудникИнойОрганизацииДляУПД970(Отказ);
			КонецЕсли;
			
		ИначеЕсли ГрузПринялВид = "ФизЛицо" Тогда
			
			ПроверитьЗаполнениеПриГрузПринялИноеФизЛицоДляУПД970(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДополнительныхПолей(Отказ);
	
КонецПроцедуры

&НаКлиенте
Функция НеобходимоПроверитьЗаполнениеСведенийОДокументеРазногласий()
	
	Результат = ЗначениеЗаполнено(ДокументОРазногласияхНаименование)
		Или ЗначениеЗаполнено(ДокументОРазногласияхНомер)
		Или ЗначениеЗаполнено(ДокументОРазногласияхДата)
		Или ЗначениеЗаполнено(ДокументОРазногласияхВид);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеПриГрузПринялИноеФизЛицоДляУПД970(Отказ)
	
	Если ПустаяСтрока(ГрузПринялИННФизЛица)
		И Не РеквизитыДокументаЗаполнены(РеквизитыОснованияПолномочий) Тогда
		
		СообщитьОбОшибке("Необходимо заполнить поле ""Основание полномочий""/""ИНН"" на закладке Дополнительно", Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(ГрузПринялИННФизЛица) Тогда
		
		Если НЕ СтрДлина(ГрузПринялИННФизЛица) = 12 Тогда
			СообщитьОбОшибке("ИНН должен иметь длину 12 цифр", Отказ);
		ИначеЕсли Лев(ГрузПринялИННФизЛица, 2) = "00" Тогда
			СообщитьОбОшибке("ИНН не должен начинаться с двух нулей", Отказ);
		Иначе
			ПроверитьИННТребованиямФНС(ГрузПринялИННФизЛица, Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПриГрузПринялСотрудникИнойОрганизацииДляУПД970(Отказ)
	
	ОсновнаяФорма().ПроверитьЗаполнениеПоляФормы(Отказ, ЭтаФорма, "ГрузПринялОрганизация255", "Организация");

	Если ПустаяСтрока(ГрузПринялИННОрганизации)
		И Не РеквизитыДокументаЗаполнены(РеквизитыОснованияПолномочийИнойОрганизации) Тогда
		
		СообщитьОбОшибке("Необходимо заполнить поле ""Основание полномочий организации""/""ИНН"" на закладке Дополнительно", Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(ГрузПринялИННОрганизации) Тогда
		
		Если НЕ СтрДлина(ГрузПринялИННОрганизации) = 10 Тогда
			СообщитьОбОшибке("ИНН организации должен иметь длину 10 цифр", Отказ);
		ИначеЕсли Лев(ГрузПринялИННОрганизации, 2) = "00" Тогда
			СообщитьОбОшибке("ИНН не должен начинаться с двух нулей", Отказ);
		Иначе
			ПроверитьИННТребованиямФНС(ГрузПринялИННОрганизации, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИННТребованиямФНС(ИНН, Отказ)
	
	МассивИНН = Новый Массив;
	МассивИНН.Добавить(ИНН);
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	РезультатПроверки = Модуль_Ядро.Контрагенты_МассивПроверенныхИНН(МассивИНН);
	
	Если РезультатПроверки.Количество() = 0 Тогда
		СообщитьОбОшибке("ИНН ("+ИНН+") неверный (не совпадает контрольная сумма)", Отказ);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтентОтвета(Отказ)
	
	Если НЕ ЗначениеЗаполнено(КонтентОтвета) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтентОтвета.Свойство("ОшибкиВДанных")
		И КонтентОтвета.ОшибкиВДанных.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр(
			"ru = 'Не удалось сформировать ответный титул.
			|Исправьте ошибки, указанные на форме пакета электронного документа.'"
		);
		Данные = Неопределено;
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ОсновнаяФорма.ВывестиСообщениеПользователю(
			ТекстСообщения,
			Данные,
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеДополнительныхПолей(Отказ)
	
	Для НомерСведения = 1 По КоличествоДопСведений Цикл
		
		ИмяРеквизитаКлюч = ИмяПоляКлюч(НомерСведения);
		ИмяРеквизитаЗначение = ИмяПоляЗначение(НомерСведения);
		
		КлючСведения = ЭтаФорма[ИмяРеквизитаКлюч];
		ЗначениеСведения = ЭтаФорма[ИмяРеквизитаЗначение];
		
		ОшибкаЗаполнения1 = ЗначениеЗаполнено(КлючСведения)		И Не ЗначениеЗаполнено(ЗначениеСведения);
		ОшибкаЗаполнения2 = ЗначениеЗаполнено(ЗначениеСведения)	И Не ЗначениеЗаполнено(КлючСведения);
		
		Если ОшибкаЗаполнения1 Или ОшибкаЗаполнения2 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнены поля в дополнительных сведениях!'");
			ОсновнаяФорма().ВывестиСообщениеПользователю(ТекстСообщения,, ЭтаФорма);
			Отказ = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительноеСведение(Команда)
	
	КоличествоДопСведений = КоличествоДопСведений + 1;
	ДобавитьПоляВводаДополнительногоСведения(КоличествоДопСведений);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляВводаДополнительногоСведения(ПорядковыйНомер)
	
	КвалификаторСтроки50 = Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная);
	ТипСтрока50 = Новый ОписаниеТипов("Строка", , КвалификаторСтроки50);
	ИмяРеквизитаКлюч = ИмяПоляКлюч(ПорядковыйНомер);
	РеквизитКлюч = Новый РеквизитФормы(ИмяРеквизитаКлюч, ТипСтрока50);

	КвалификаторСтроки2000 = Новый КвалификаторыСтроки(2000, ДопустимаяДлина.Переменная);
	ТипСтрока2000 = Новый ОписаниеТипов("Строка", , КвалификаторСтроки2000);
	ИмяРеквизитаЗначение = ИмяПоляЗначение(ПорядковыйНомер);
	РеквизитЗначение = Новый РеквизитФормы(ИмяРеквизитаЗначение, ТипСтрока2000);
	
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(РеквизитКлюч);
	НовыеРеквизиты.Добавить(РеквизитЗначение);
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	НоваяГруппа = НоваяГруппаДополнительногоСведения(ПорядковыйНомер);
	
	ЭлементКлюч = НовоеПолеФормы(ИмяРеквизитаКлюч, НоваяГруппа);
	ЭлементКлюч.ПодсказкаВвода = "Тип";
	ЭлементКлюч.Ширина = 15;
	
	ЭлементЗначение = НовоеПолеФормы(ИмяРеквизитаЗначение, НоваяГруппа);
	ЭлементЗначение.ПодсказкаВвода = "Значение";
	ЭлементЗначение.Ширина = 35;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляКлюч(ПорядковыйНомер)
	
	Возврат "КлючСведения" + ПорядковыйНомер;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляЗначение(ПорядковыйНомер)
	
	Возврат "ЗначениеСведения" + ПорядковыйНомер;
	
КонецФункции

&НаСервере
Функция НоваяГруппаДополнительногоСведения(ПорядковыйНомер)
	
	ИмяГруппы = "ГруппаДополнительноеСведение" + ПорядковыйНомер;
	
	Результат = Элементы.Добавить(ИмяГруппы
		, Тип("ГруппаФормы")
		, Элементы.ГруппаКоллекцияДополнительныхСведений);
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.ОтображатьЗаголовок = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовоеПолеФормы(ИмяПоля, ЭлементРодитель = Неопределено)
	
	Результат = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ЭлементРодитель);
	Результат.Вид = ВидПоляФормы.ПолеВвода;
	Результат.ПутьКДанным = ИмяПоля;
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Результат.АвтоМаксимальнаяШирина = Ложь;
	Результат.РастягиватьПоГоризонтали = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВариантЗаполненияДатыПодписанияПриИзменении(Элемент)
	
	НастроитьДоступностьДатыСобытияОтветногоТитула();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьМЧД(Команда) 
	
	Метрика_НастроитьМЧД();
	ОсновнаяФорма().ОткрытьФормуСпискаДоверенностей(АдресЯщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяМЧДПриИзменении(Элемент)
	
	Метрика_ВыбраннаяМЧДПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяМЧДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
		КонтрактМЧД = КонтекстМЧД.СписокМЧД.Получить(ВыбраннаяМЧД);
		ОсновнаяФорма().МЧД_ПоказатьСведенияОДоверенности(КонтрактМЧД, ЭтаФорма);
		Метрика_ПоказатьСведенияОДоверенности();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьаОснованиеПолномочийФизЛицаНажатие(Элемент)
	
	Метрика_РедактированиеОснованияПолномочий();
	
	ПараметрыОткрытияФормы = НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыОснованияПолномочий);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьОснованиеПолномочийЗавершение", ЭтаФорма);
	
	ОткрытьФормуРедактированияОснованияПолномочий(ПараметрыОткрытияФормы, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийСотрудникаИнойОрганизацииНажатие(Элемент)

	Метрика_РедактированиеОснованияПолномочий();
	
	ПараметрыОткрытияФормы = НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыОснованияПолномочий);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьОснованиеПолномочийЗавершение", ЭтаФорма);
	
	ОткрытьФормуРедактированияОснованияПолномочий(ПараметрыОткрытияФормы, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийОрганизацииНажатие(Элемент)
	
	Метрика_РедактированиеОснованияПолномочийСоставителяФайла();
	
	ПараметрыОткрытияФормы = НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыОснованияПолномочийОрганизации);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьОснованиеПолномочийОрганизацииЗавершение", ЭтаФорма);
	
	ОткрытьФормуРедактированияОснованияПолномочий(ПараметрыОткрытияФормы, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийИнойОрганизацииНажатие(Элемент)
	
	Метрика_РедактированиеОснованияПолномочийИнойОрганизации();
	
	ПараметрыОткрытияФормы = НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыОснованияПолномочийИнойОрганизации);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("РедактироватьОснованиеПолномочийИнойОрганизацииЗавершение", ЭтаФорма);
	
	ОткрытьФормуРедактированияОснованияПолномочий(ПараметрыОткрытияФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПодписантаПриИзменении(Элемент)
	
	ПолномочияПодписантаИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСведенияОПодписантеПриИзменении(Элемент)
	
	ПолномочияПодписантаИзменены = Истина;	

КонецПроцедуры

//} обработчики событий формы и элементов

//{	Настройка формы

&НаСервере
Процедура ЗаполнитьСписокВыбора_РезультатПриемки()
	
	СписокВыбора = Элементы.РезультатПриемки.СписокВыбора;
	
	Если ТипКонтента = ТипыКонтентов.utd970
		И ТипДокумента = ТипДокумента_ИУПД() Тогда
		
		ЗаполнитьСписокВидамиРезультатовПриемкиДляИУПД970(СписокВыбора);
		
	Иначе
		
		ЗаполнитьСписокВидамиРезультатовПриемки(СписокВыбора);
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора_ДокументОРазногласияхВид()
	
	Значения 		= Модуль_ЯдроНаСервере().ВидыДокументовОРазногласиях_Значения();
	Представления 	= Модуль_ЯдроНаСервере().ВидыДокументовОРазногласиях_Представления();
	
	СписокВыбора = Элементы.ДокументОРазногласияхВид.СписокВыбора;  
	
	Для каждого ЭлементКоллекции Из Представления Цикл
		
		ЗначениеВидаДокумента = Значения[ЭлементКоллекции.Значение]; 
		СписокВыбора.Добавить(ЗначениеВидаДокумента, ЭлементКоллекции.Представление);
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора_ИтогиСверки()
	
	Представления = Модуль_ЯдроНаСервере().ВидыИтоговСверки_Представления();
	
	СписокВыбора = Элементы.ИтогиСверки.СписокВыбора;
	
	Для каждого ЭлементКоллекции Из Представления Цикл
		ЗначениеИтогиСверки = ИтогиСверкиДопустимыеЗначения[ЭлементКоллекции.Значение];
		СписокВыбора.Добавить(ЗначениеИтогиСверки, ЭлементКоллекции.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора_ГрузПринял()
	
	ВидыГрузПринял = Модуль_ЯдроНаСервере().ВидыГрузПринял();
	
	СписокВыбора = Элементы.ГрузПринялВид.СписокВыбора;
	
	СписокВыбора.Добавить("НеЗаполнять",				ВидыГрузПринял["НеЗаполнять"]);
	СписокВыбора.Добавить("ПолучательГруза",			ВидыГрузПринял["ПолучательГруза"]);
	СписокВыбора.Добавить("ДругойСотрудник",			ВидыГрузПринял["ДругойСотрудник"]);
	СписокВыбора.Добавить("СотрудникИнойОрганизации",	ВидыГрузПринял["СотрудникИнойОрганизации"]);
	СписокВыбора.Добавить("ФизЛицо",					ВидыГрузПринял["ФизЛицо"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоКодуИтога_СодержаниеОперации()
	
	ЭтоКонтентУПД = ЭтоТипКонтентаУПД();
					
	Если РезультатПриемки = РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий
		И ЭтоКонтентУПД Тогда
		СодержаниеОперации = "Товары и услуги получены, работы приняты";
	ИначеЕсли РезультатПриемки = РезультатПриемкиДопустимыеЗначения.ПринятоСРазногласиями Тогда
		СодержаниеОперации = "Принято с разногласиями";
	ИначеЕсли РезультатПриемки = РезультатПриемкиДопустимыеЗначения.НеПринято Тогда
		СодержаниеОперации = "Не принято";
	Иначе
		СодержаниеОперации = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоИтогуСверки_СодержаниеОперации()
	
	Если ИтогиСверки = ИтогиСверкиДопустимыеЗначения.НетРазногласий Тогда
		СодержаниеОперации = "Принято без разногласий";
	ИначеЕсли ИтогиСверки = ИтогиСверкиДопустимыеЗначения.ЕстьРазногласия Тогда
		СодержаниеОперации = "Принято с разногласиями";
	Иначе
		СодержаниеОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	ДатаПодписания = ТекущаяДата();
	
	ВариантЗаполненияДатыПодписания = ЗначениеДатыПодписанияПроизвольнаяДата();
	
 	ЗаполнитьЗначенияПоУмолчанию_ГрузПринялВид();
	ЗаполнитьЗначенияПоУмолчанию_СодержаниеОперации();	
	ЗаполнитьЗначенияПоУмолчанию_РезультатПриемки();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию_ГрузПринялВид()
	
	Если НЕ ЗначениеЗаполнено(ГрузПринялВид) Тогда
		
		ЭтоКонтентУПД = ЭтоТипКонтентаУПД();
		
		Если ЭтоКонтентУПД ИЛИ ТипКонтента = ТипыКонтентов.tovtorg Тогда
			ГрузПринялВид = "НеЗаполнять";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию_СодержаниеОперации()
	
	ЭтоКонтентУПД = ЭтоТипКонтентаУПД();
	
	Если ЭтоКонтентУПД Тогда
		СодержаниеОперации = "Товары и услуги получены, работы приняты";
	ИначеЕсли ТипКонтента = ТипыКонтентов.ucd Или ТипКонтента = ТипыКонтентов.ucd736 Тогда
		СодержаниеОперации = "С изменением стоимости согласен";
	ИначеЕсли ТипКонтента = ТипыКонтентов.tovtorg Тогда
		СодержаниеОперации = "Перечисленные в документе ценности приняты без претензий";
	ИначеЕсли ТипКонтента = ТипыКонтентов.rezru Тогда
		СодержаниеОперации = "Результаты работ переданы (услуги оказаны)";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию_РезультатПриемки()
	
	Если ТипКонтента = ТипыКонтентов.utd970
		Или ТипКонтента = ТипыКонтентов.utd820 Тогда
		
		РезультатПриемки = РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ДопСведенияВидимость = Ложь;
	
	Если ТипКонтента = ТипыКонтентов.utd970 Тогда // УПД + СФ в формате 820 приказа
		
		НастроитьФормуПодписанияУПД_970();
		
		ДопСведенияВидимость = Истина;

	ИначеЕсли ТипКонтента = ТипыКонтентов.utd820 Тогда // УПД + СФ в формате 820 приказа
		
		НастроитьФормуПодписанияУПД_820();
		
		ДопСведенияВидимость = Истина;
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.utd Тогда // УПД + СФ в формате 155 приказа 
		
		НастроитьФормуПодписанияУПД();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.tovtorg Тогда // Торг12 в формате 551 приказа
		
		НастроитьФормуПодписанияНакладной_551();
		
		ДопСведенияВидимость = Истина;

	ИначеЕсли ТипКонтента = ТипыКонтентов.ucd			// УКД + КСФ в формате 189 приказа 
		Или ТипКонтента = ТипыКонтентов.ucd736 Тогда	// УКД в формате 736 приказа 
		
		НастроитьФормуПодписанияУКД();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.rezru Тогда // Акт в формате 552 приказа 
		
		НастроитьФормуПодписанияАкта_552();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.torg12 Тогда // Торг12 в формате 172 приказа
		
		НастроитьФормуПодписанияНакладной_172();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.act Тогда // Акт в формате 172 приказа
		
		НастроитьФормуПодписанияАкта_172();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.torg2 Тогда // Торг2 с доп. сведениями
		
		НастроитьФормуПодписанияТорг2();
		
		ДопСведенияВидимость = Истина;

	ИначеЕсли ЭтоФормализованныйАктСверки405() Тогда // Акт сверки в формате 405 приказа
		
		НастроитьФормуПодписанияАктаСверки();
		
	Иначе // полуформализованный/неформализованный
		
		НастроитьФормуПодписанияПФ_НФ();
		
	КонецЕсли;
	
	Элементы.ГруппаДополнительныеСведения.Видимость	= ДопСведенияВидимость;
	
	НастроитьЭлементыВариантовДатыСобытияОтветногоТитула();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияУПД_970()
	
	ПоказатьНовыеФорматы();
	ПоказатьСтраницуГруппаНовыеФорматыДоп_УПД_551();

	ОбновитьПанельГрузПринял();

	ДокументОРазногласиях_УправлениеДоступностью();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияУПД_820()
	
	ПоказатьНовыеФорматы();
	ПоказатьСтраницуГруппаНовыеФорматыДоп_УПД_551();

	ОбновитьПанельГрузПринял();
	ДокументОРазногласиях_УправлениеДоступностью();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияУПД()
	
	ПоказатьНовыеФорматы();
	ПоказатьСтраницуГруппаНовыеФорматыДоп_УПД_551();
		
	ОбновитьПанельГрузПринял();
	СкрытьСведенияОРезультатеПриемки();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияНакладной_551()

	ПоказатьНовыеФорматы();
	ПоказатьСтраницуГруппаНовыеФорматыДоп_УПД_551();

	ОбновитьПанельГрузПринял();
	СкрытьСведенияОРезультатеПриемки();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияУКД()
	
	ПоказатьНовыеФорматы();
	Элементы.ГруппаНовыеФорматыДоп.Видимость = Ложь;
	Элементы.ГруппаДополнительныеСведения.Видимость = Ложь;
	Элементы.ГруппаОснованиеСоставленияФайлаОрганизацией.Видимость = Ложь;
	
	СкрытьСведенияОРезультатеПриемки();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияАкта_552()
	
	ПоказатьНовыеФорматы();
	Элементы.ГруппаНовыеФорматыДоп.ТекущаяСтраница	= Элементы.ГруппаНовыеФорматыДоп_552;
		
	Элементы.ГруппаНовыеФорматыСведенияО_ДоговореДанные.Видимость = Ложь;
	
	ОбновитьПанельГрузПринял();
	
	СкрытьСведенияОРезультатеПриемки();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияНакладной_172()
	
	ПоказатьСтарыеФорматы();
		
	Элементы.ГруппаСтарыеФорматыТорг.Видимость	= Истина;
	Элементы.ГруппаДоверенность.Видимость		= Ложь;
	
	Элементы.ГруппаСтарыеФорматыГрузПринялДанные.Видимость = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияАкта_172()
	
	ПоказатьСтарыеФорматы();
		
	Элементы.ГруппаСтарыеФорматыТорг.Видимость 	= Ложь;
	Элементы.ГруппаДоверенность.Видимость 		= Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияТорг2()
	
	ПоказатьНовыеФорматы();
	Элементы.ГруппаНовыеФорматыДоп.Видимость = Ложь;
	
	Элементы.НовыеФорматыДатаПодписания.Заголовок = "Дата составления";
	Элементы.СодержаниеОперации.Заголовок = "Сведения о приемке";
	
	СкрытьСведенияОРезультатеПриемки();
	СкрытьСведенияОбИтогахСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияАктаСверки()
	
	ПоказатьНовыеФорматы();
	
	Элементы.ГруппаНовыеФорматыДоп.Видимость = Ложь;
	Элементы.ГруппаДополнительныеСведения.Видимость = Ложь;
	Элементы.СодержаниеОперации.Видимость = Ложь;
	Элементы.ГруппаНовыеФорматыПолномочия.Видимость = Ложь;
	Элементы.ГруппаНовыеФорматыДолжностьПодписанта.Видимость = Ложь;
	Элементы.ГруппаОснованиеСоставленияФайлаОрганизацией.Видимость = Ложь;
	Элементы.ВариантЗаполненияДатыПодписанияНовыеФорматы.Видимость = Ложь;
	
	СкрытьСведенияОРезультатеПриемки();
	
	Если КонфигурацияПоддерживаетСверкуВзаиморасчетов Тогда
		ЗаголовокНадписиПодписанияБезРазногласий = НСтр("ru = 'Для подписания акта сверки с разногласиями создайте документ 1С, выполните в нем сверку и проведите.'");
	Иначе
		ЗаголовокНадписиПодписанияБезРазногласий = НСтр("ru = 'Формализованный акт сверки можно подписать из модуля только с итогами сверки ""Нет разногласий"". 
															  |Если не согласны с актом, то можно воспользоваться действием ""Отказ в подписи"".'");
	КонецЕсли;
	
	Элементы.НадписьАктСверкиМожноПодписатьТолькоБезРазногласий.Заголовок = ЗаголовокНадписиПодписанияБезРазногласий;
	
	Если ЗначениеЗаполнено(КонтентОтвета) Тогда
		ЭтаФорма.ИтогиСверки = КонтентОтвета.SignDisagreement;
		
		Элементы.НадписьАктСверкиМожноПодписатьТолькоБезРазногласий.Видимость = Ложь;
		
		Если ЭтаФорма.ИтогиСверки = ИтогиСверкиДопустимыеЗначения.НетРазногласий Тогда
			Элементы.ИтогиСверки.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Элементы.ИтогиСверки.ТолькоПросмотр = Истина;
		ЭтаФорма.ИтогиСверки = ИтогиСверкиДопустимыеЗначения.НетРазногласий;
	КонецЕсли;
	
	Если ГрупповоеДействие = Истина Тогда
		Элементы.НадписьАктСверкиМожноПодписатьТолькоБезРазногласий.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияПоИтогуСверки_СодержаниеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПодписанияПФ_НФ()
	
	Элементы.ГруппаТипыФорматовОсновное.Видимость			 = Ложь;
	Элементы.ГруппаТипыФорматовДополнительно.Видимость		 = Ложь;
	Элементы.ДекорацияПодписантЗаголовок.Видимость					 = Ложь;
	Элементы.Декорация_ДокументыБудутПодписаныСертификатом.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНовыеФорматы()
	
	Элементы.ГруппаНовыеФорматыОсновное.Видимость = Истина;
	Элементы.ГруппаНовыеФорматыДополнительно.Видимость = Истина;
	
	Элементы.ГруппаСтарыеФорматыОсновное.Видимость = Ложь;
	Элементы.ГруппаСтарыеФорматыДополнительно.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуГруппаНовыеФорматыДоп_УПД_551()
	
	НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыДоп_УПД_551;
	ОсновнаяФорма().ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыДоп, "ТекущаяСтраница", НоваяТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтарыеФорматы()
	
	Элементы.ГруппаНовыеФорматыОсновное.Видимость = Ложь;
	Элементы.ГруппаНовыеФорматыДополнительно.Видимость = Ложь;
	
	Элементы.ГруппаСтарыеФорматыОсновное.Видимость = Истина;
	Элементы.ГруппаСтарыеФорматыДополнительно.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСведенияОРезультатеПриемки()
	
	Элементы.РезультатПриемки.Видимость = Ложь;
	
	ДокументОРазногласиях_УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСведенияОбИтогахСверки()
	
	Элементы.ИтогиСверки.Видимость = Ложь;
	Элементы.НадписьАктСверкиМожноПодписатьТолькоБезРазногласий.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОРазногласиях_УправлениеДоступностью()
	
	НоваяДоступность = Ложь;
	
	Если 	РезультатПриемки = РезультатПриемкиДопустимыеЗначения.НеПринято
		Или РезультатПриемки = РезультатПриемкиДопустимыеЗначения.ПринятоСРазногласиями Тогда
		
		НоваяДоступность = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаДокументОРазногласиях.Видимость = НоваяДоступность;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ВозможныеЗаголовки = Новый Структура;
	
	ВозможныеЗаголовки.Вставить("XmlTorg12"	,							"Подписание ТОРГ-12");
	ВозможныеЗаголовки.Вставить("XmlAcceptanceCertificate",				"Подписание Акта");
	ВозможныеЗаголовки.Вставить("UniversalTransferDocument",			"Подписание УПД");
	ВозможныеЗаголовки.Вставить("UniversalTransferDocumentRevision",	"Подписание УПД");
	ВозможныеЗаголовки.Вставить("UniversalCorrectionDocument",			"Подписание УКД");
	ВозможныеЗаголовки.Вставить("UniversalCorrectionDocumentRevision",	"Подписание УКД");
	ВозможныеЗаголовки.Вставить("Torg2",								"Подписание акта ТОРГ-2");
	ВозможныеЗаголовки.Вставить("ReconciliationAct",					"Подписание Акта сверки");
	
	Если ВозможныеЗаголовки.Свойство(ТипДокумента) Тогда
				
		Если ТипКонтента = ТипыКонтентов.utd970 Тогда
			ПостфиксЗаголовка = " в 970 формате";	
		Иначе
			ПостфиксЗаголовка = "";
		КонецЕсли;
		
		Заголовок = ВозможныеЗаголовки[ТипДокумента] + ПостфиксЗаголовка;
		
	Иначе
		Заголовок = "Подписание неформализованного документа";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДоверенности()
		
	ПредставлениеДоверенности =	"";
		
	Если ЗначениеЗаполнено(ДанныеДоверенности) Тогда
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.Номер) И ЗначениеЗаполнено(ДанныеДоверенности.Дата) Тогда
			ПредставлениеДоверенности =	"№" + ДанныеДоверенности.Номер + " от " + Формат(ДанныеДоверенности.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.Организация) Тогда
			ПредставлениеДоверенности =	ПредставлениеДоверенности + ", " + ДанныеДоверенности.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.Должность) Тогда
			ПредставлениеДоверенности =	ПредставлениеДоверенности + ?(ЗначениеЗаполнено(ПредставлениеДоверенности), ", ", "") + ДанныеДоверенности.Должность;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.Фамилия) 
			ИЛИ ЗначениеЗаполнено(ДанныеДоверенности.Имя) 
			ИЛИ ЗначениеЗаполнено(ДанныеДоверенности.Отчество) Тогда
			
			ПредставлениеДоверенности =	ПредставлениеДоверенности + ?(ЗначениеЗаполнено(ПредставлениеДоверенности), ", ", "") 
										+ ДанныеДоверенности.Фамилия + " " + ДанныеДоверенности.Имя + " " + ДанныеДоверенности.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеДоверенности) Тогда
		Элементы.ДекорацияДоверенностьЗначение.Видимость = Истина;
		Элементы.ДекорацияДоверенностьЗначение.Заголовок = ПредставлениеДоверенности;
	Иначе
		Элементы.ДекорацияДоверенностьЗначение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСведенияИзПолномочийПодписанта()
	
	ПанельСтраниц = Элементы.ГруппаНовыеФорматыСведенияОПолномочиях;
	
	Если ТипКонтента = ТипыКонтентов.utd970 Тогда
		
		МодульЯдро = Модуль_ЯдроНаСервере();

		ДолжностьПодписанта = МодульЯдро.СвойствоСтруктуры(ПолномочияПодписанта, "JobTitle");
		ДопСведенияОПодписанте = МодульЯдро.СвойствоСтруктуры(ПолномочияПодписанта, "SignerInfo");
		
		ПанельСтраниц.ТекущаяСтраница = ПанельСтраниц.ПодчиненныеЭлементы.ГруппаНовыеФорматыДолжностьПодписанта;
		
	Иначе
		
		ПредставлениеПолномочийПодписанта = ПредставлениеПолномочийПодписанта();
		Элементы.ДекорацияНовыеФорматыПолномочияЗначение.Заголовок = ПредставлениеПолномочийПодписанта;
		
		ПанельСтраниц.ТекущаяСтраница = ПанельСтраниц.ПодчиненныеЭлементы.ГруппаНовыеФорматыПолномочия
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПолномочийПодписанта()
	
	Результат = "Не заполнено";

	Если ТипЗнч(ПолномочияПодписанта) = Тип("Структура") Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаСервере();
		
		ОбластиПолномочий = Модуль_Ядро.ПолномочияПодписанта_ПредставленияПолномочий(ВидТитула);
		ПредставлениеОбластиПолномочий = ОбластиПолномочий[ПолномочияПодписанта.SignerPowers];
		
		ПредставленияСтатусов = Модуль_Ядро.ПолномочияПодписанта_ПредставленияСтатусовПодписанта(ВидТитула, "Покупатель"); 
		ПредставлениеСтатусаПодписанта = ПредставленияСтатусов[ПолномочияПодписанта.SignerStatus];
		
		СтрокиПредставления = Новый Массив;
		СтрокиПредставления.Добавить("• " + ПредставлениеОбластиПолномочий);
		СтрокиПредставления.Добавить("• " + ПредставлениеСтатусаПодписанта);
		СтрокиПредставления.Добавить("• " + СокрЛП(ПолномочияПодписанта.SignerPowersBase));
		
		Результат = Модуль_Ядро.СоединитьСтроку(СтрокиПредставления, Символы.ПС);
			
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПанельГрузПринял()
	
	Если ТипКонтента = ТипыКонтентов.utd970 Тогда
		
		ОбновитьПанельГрузПринялДляУПД970();
		
		ОбновитьПредставлениеОснованияПолномочий();
		ОбновитьПредставлениеОснованияПолномочийОрганизации();
		ОбновитьПредставлениеОснованияПолномочийИнойОрганизации();
		
	Иначе
		
		ОбновитьПанельГрузПринялДляПрочихФорматов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельГрузПринялДляУПД970()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииДолжность, "Видимость", Ложь);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииДолжность, "Видимость", Ложь);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииОрганизация, "Видимость", Ложь);
	
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииДолжность255, "Видимость", Истина);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииДолжность255, "Видимость", Истина);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииОрганизация255, "Видимость", Истина);
	
	Если Не ЗначениеЗаполнено(ГрузПринялВид) ИЛИ ГрузПринялВид = "НеЗаполнять" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялПустая;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
	ИначеЕсли ГрузПринялВид = "ПолучательГруза" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииОснованиеПолномочий, "Видимость", Ложь);
		
	ИначеЕсли ГрузПринялВид = "ДругойСотрудник" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииОснованиеПолномочий, "Видимость", Ложь);
		
	ИначеЕсли ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникИнойОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);

		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииСтрокой, "Видимость", Ложь);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииРеквизиты, "Видимость", Истина);

		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийИнойОрганизацииСтрокой, "Видимость", Ложь);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийИнойОрганизацииРеквизиты, "Видимость", Истина);

	Иначе // "ФизЛицо"
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялФизЛицо;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийФизЛицаСтрокой, "Видимость", Ложь);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийФизЛицаРеквизиты, "Видимость", Истина);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялИННФизЛица, "Видимость", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельГрузПринялДляПрочихФорматов()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииДолжность, "Видимость", Истина);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииДолжность, "Видимость", Истина);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииОрганизация, "Видимость", Истина);
	
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииДолжность255, "Видимость", Ложь);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииДолжность255, "Видимость", Ложь);
	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникИнойОрганизацииОрганизация255, "Видимость", Ложь);

	ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеСоставленияФайлаОрганизацией, "Видимость", Ложь);
	
	Если Не ЗначениеЗаполнено(ГрузПринялВид) ИЛИ ГрузПринялВид = "НеЗаполнять" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялПустая;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
	ИначеЕсли ГрузПринялВид = "ПолучательГруза" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялСотрудникОрганизацииОснованиеПолномочий, "Видимость", Истина);
		
	ИначеЕсли ГрузПринялВид = "ДругойСотрудник" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииСтрокой, "Видимость", Истина);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииРеквизиты, "Видимость", Ложь);
		
	ИначеЕсли ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялСотрудникИнойОрганизации;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииСтрокой, "Видимость", Истина);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийСотрудникаИнойОрганизацииРеквизиты, "Видимость", Ложь);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийИнойОрганизацииСтрокой, "Видимость", Истина);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийИнойОрганизацииРеквизиты, "Видимость", Ложь);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялИННОрганизации, "Видимость", Ложь);

	Иначе // "ФизЛицо"
		
		НоваяТекущаяСтраница = Элементы.ГруппаНовыеФорматыГрузПринялФизЛицо;
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаНовыеФорматыГрузПринялДанные, "ТекущаяСтраница", НоваяТекущаяСтраница);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийФизЛицаСтрокой, "Видимость", Истина);
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаОснованиеПолномочийФизЛицаРеквизиты, "Видимость", Ложь);
		
		ОсновнаяФорма.ОбновитьСвойствоЭлементаФормы(Элементы.ГрузПринялИННФизЛица, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьДатыСобытияОтветногоТитула()
	
	ДоступностьПоляДаты = (ВариантЗаполненияДатыПодписания = ЗначениеДатыПодписанияПроизвольнаяДата());
	
	Элементы.НовыеФорматыДатаПодписания.Доступность  = ДоступностьПоляДаты;
	Элементы.СтарыеФорматыДатаПодписания.Доступность = ДоступностьПоляДаты;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВариантовДатыСобытияОтветногоТитула()
	
	СписокВариантов = Новый_СписокВариантовЗаполненияДатыПодписания();
	
	СкопироватьСписокЗначений(СписокВариантов, Элементы.ВариантЗаполненияДатыПодписанияСтарыеФорматы.СписокВыбора);
	СкопироватьСписокЗначений(СписокВариантов, Элементы.ВариантЗаполненияДатыПодписанияНовыеФорматы.СписокВыбора);
	
	НастроитьДоступностьДатыСобытияОтветногоТитула();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьМЧДНаФорме()
	
	Если ГрупповоеДействие ИЛИ КонтрагентПоддерживаетМЧД Тогда
		Элементы.ГруппаКонтрагентНеПоддерживаетМЧД.Видимость = Ложь;
		ЗаполнитьСписокДоступныхМЧД();
	Иначе
		Элементы.ГруппаМЧД.Видимость = Ложь;
		Элементы.ГруппаКонтрагентНеПоддерживаетМЧД.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхМЧД()
	
	ТребуетсяМЧД = Модуль_ЯдроНаСервере().МЧД_ТребуетсяДоверенность(АдресЯщика);
	
	Если ТребуетсяМЧД Тогда
		
		КонтекстМЧД	 = Модуль_ЯдроНаСервере().МЧД_ДанныеПоИспользованиюДоверенностей(АдресЯщика);
		СписокВыбораМЧД		 = Элементы.ВыбраннаяМЧД.СписокВыбора;
		
		Для Каждого КлючЗначение Из КонтекстМЧД.СписокМЧД Цикл
			ДанныеМЧД = КлючЗначение.Значение;
			СписокВыбораМЧД.Добавить(ДанныеМЧД.Идентификатор, ДанныеМЧД.ПредставлениеМЧД);
		КонецЦикла;
		
		ВыбраннаяМЧД = КонтекстМЧД.МЧД;
		
	Иначе
		
		УстановитьВидимостьГруппыМЧД(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыМЧД(ЗначениеВидимости)
	Элементы.ГруппаМЧД.Видимость = ЗначениеВидимости;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеОснованияПолномочий()
	
	ПредставлениеДокумента = СформироватьПредставлениеДокумента(РеквизитыОснованияПолномочий);
	
	Элементы.ПредставлениеаОснованиеПолномочийФизЛица.Заголовок = ПредставлениеДокумента;
	Элементы.ПредставлениеОснованияПолномочийСотрудникаИнойОрганизации.Заголовок = ПредставлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеОснованияПолномочийИнойОрганизации()
	
	ПредставлениеДокумента = СформироватьПредставлениеДокумента(РеквизитыОснованияПолномочийИнойОрганизации);
	
	Элементы.ПредставлениеОснованияПолномочийИнойОрганизации.Заголовок = ПредставлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеОснованияПолномочийОрганизации()
	
	ПредставлениеДокумента = СформироватьПредставлениеДокумента(РеквизитыОснованияПолномочийОрганизации);
	
	Элементы.ПредставлениеОснованияПолномочийОрганизации.Заголовок = ПредставлениеДокумента;
	
КонецПроцедуры

//}	Настройка формы

//{	Формирование титула

&НаКлиенте
Функция ТитулПокупателя()
	
	Результат = Неопределено;
	
	Если ТипКонтента = ТипыКонтентов.rezru Тогда
		
		Результат = Act552BuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.tovtorg Тогда
		
		Результат = TovTorgBuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.utd
		Или ТипКонтента = ТипыКонтентов.ucd
		Или ТипКонтента = ТипыКонтентов.ucd736 Тогда
		
		Результат = UtdBuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.utd820 Тогда
		
		Результат = Utd820BuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.utd970 Тогда
		
		Результат = Utd970BuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.torg12 Тогда
		
		Результат = Torg12BuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.act Тогда
		
		Результат = ActBuyerContent();
		
	ИначеЕсли ТипКонтента = ТипыКонтентов.torg2 Тогда
		
		Результат = Torg2RecipientTitle();
		
	ИначеЕсли ЭтоФормализованныйАктСверки405() Тогда
		
		Результат = reconciliationact405RecipientTitle();
		
	Иначе // полуформализованный/неформализованный
		
		Результат = Новый Структура;
		
	КонецЕсли;
	
	ДополнитьТитулПокупателя(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Act552BuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator", DocumentCreator());
	
	CreatorBase = DocumentCreatorBase();
	Если ЗначениеЗаполнено(CreatorBase) Тогда
		Результат.Вставить("DocumentCreatorBase", CreatorBase);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПодписания) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.Вставить("OperationContent", СодержаниеОперации);
	КонецЕсли;
	
	Если Элементы.ГиперссылкаНовыеФорматыЗаполнитьСведенияО_Договоре.Заголовок = "Скрыть" Тогда // значит значения для заполнения отображены
		
		Если ЗначениеЗаполнено(ДатаПолученияВещи) Тогда
			Результат.Вставить("CreatedThingAcceptDate", ДатаПолученияВещи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияО_ПолученииВещи) Тогда
			Результат.Вставить("CreatedThingInfo", СведенияО_ПолученииВещи);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция TovTorgBuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator", DocumentCreator());
	
	CreatorBase = DocumentCreatorBase();
	Если ЗначениеЗаполнено(CreatorBase) Тогда
		Результат.Вставить("DocumentCreatorBase", CreatorBase);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПодписания) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.Вставить("OperationContent", СодержаниеОперации);
	КонецЕсли;
	
	ЗаполнитьДанныеТитулаГрузПринял(Результат);
	
	Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
    ЗаполнитьAdditionalInfos(Результат.AdditionalInfoId.StructedAdditionalInfos, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция UtdBuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Creator", DocumentCreator());
	
	CreatorBase = DocumentCreatorBase();
	Если ЗначениеЗаполнено(CreatorBase) Тогда
		Результат.Вставить("CreatorBase", CreatorBase);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПодписания) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПодписания);
	КонецЕсли;
	
	Результат.Вставить("OperationContent", СодержаниеОперации);
	
	ЗаполнитьДанныеТитулаГрузПринял(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Utd820BuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator", DocumentCreator());
	
	CreatorBase = DocumentCreatorBase();
	Если ЗначениеЗаполнено(CreatorBase) Тогда
		Результат.Вставить("DocumentCreatorBase", CreatorBase);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПодписания) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.Вставить("OperationContent", СодержаниеОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПриемки) Тогда
		
		ContentOperCode = Новый Структура;
		
		ContentOperCode.Вставить("TotalCode");
		ContentOperCode.Вставить("NameDiscrepDocument");
		ContentOperCode.Вставить("TypeDiscrepDocument");
		ContentOperCode.Вставить("NumberDiscrepDocument");
		ContentOperCode.Вставить("DateDiscrepDocument");
		ContentOperCode.Вставить("IdDiscrepDocument");
		
		ContentOperCode.TotalCode = РезультатПриемки;
		
		Если РезультатПриемки <> РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий Тогда
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхНаименование) Тогда
				ContentOperCode.NameDiscrepDocument = ДокументОРазногласияхНаименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхВид) Тогда
				ContentOperCode.TypeDiscrepDocument = ДокументОРазногласияхВид;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхНомер) Тогда
				ContentOperCode.NumberDiscrepDocument = ДокументОРазногласияхНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхДата) Тогда
				ContentOperCode.DateDiscrepDocument = ДокументОРазногласияхДата;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить("ContentOperCode", ContentOperCode);
		
	КонецЕсли;
	
	ЗаполнитьДанныеТитулаГрузПринял(Результат);
	
	Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
    ЗаполнитьAdditionalInfos(Результат.AdditionalInfoId.StructedAdditionalInfos, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Utd970BuyerContent()
	
	Результат = Модуль_ЯдроНаКлиенте().Контракт_ТитулПокупателяУПД970();
	
	Результат.DocumentCreator = DocumentCreator();
	
	ЗаполнитьСтруктуруОснованияПолномочий(Результат.DocumentCreatorBase, РеквизитыОснованияПолномочийОрганизации);
	
	Если ЗначениеЗаполнено(ДатаПодписания) Тогда
		Результат.AcceptanceDate = ДатаПодписания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.OperationContent = СодержаниеОперации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПриемки) Тогда
		
		ContentOperCode = Результат.ContentOperCode;
		
		ContentOperCode.TotalCode = РезультатПриемки;
		
		Если РезультатПриемки <> РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий Тогда
			
			DiscrepDocument	= ContentOperCode.DiscrepDocument;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхНаименование) Тогда
				DiscrepDocument.Name = ДокументОРазногласияхНаименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхНомер) Тогда
				DiscrepDocument.Number = ДокументОРазногласияхНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОРазногласияхДата) Тогда
				DiscrepDocument.Date = ДокументОРазногласияхДата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеТитулаГрузПринялУПД970(Результат);
	
    ЗаполнитьAdditionalInfos(Результат.AdditionalInfoId.StructedAdditionalInfos, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеТитулаГрузПринял(ТитулСтруктурой)
	
	Если ЗначениеЗаполнено(ГрузПринялВид) И ГрузПринялВид <> "НеЗаполнять" Тогда
		
		Если ГрузПринялВид = "ПолучательГруза" ИЛИ ГрузПринялВид = "ДругойСотрудник" Тогда
		
			ТитулСтруктурой.Вставить("Employee", Новый Структура);
			
			ТитулСтруктурой.Employee.Вставить("FirstName",	ГрузПринялИмя);
			ТитулСтруктурой.Employee.Вставить("Surname",	ГрузПринялФамилия);
			
			Если ЗначениеЗаполнено(ГрузПринялОтчество) Тогда
				ТитулСтруктурой.Employee.Вставить("Patronymic", ГрузПринялОтчество);
			КонецЕсли;
			
			ТитулСтруктурой.Employee.Вставить("EmployeePosition", 	ГрузПринялДолжность);
			ТитулСтруктурой.Employee.Вставить("EmployeeBase", 		ГрузПринялОснованиеПолномочий);
			
		Иначе
				
			ТитулСтруктурой.Вставить("OtherIssuer", Новый Структура);
			
			ТитулСтруктурой.OtherIssuer.Вставить("FirstName",	ГрузПринялИмя);
			ТитулСтруктурой.OtherIssuer.Вставить("Surname",		ГрузПринялФамилия);
			
			Если ЗначениеЗаполнено(ГрузПринялОтчество) Тогда
				ТитулСтруктурой.OtherIssuer.Вставить("Patronymic", ГрузПринялОтчество);
			КонецЕсли;
			
			Если ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
			
				ТитулСтруктурой.OtherIssuer.Вставить("EmployeePosition", ГрузПринялДолжность);
				ТитулСтруктурой.OtherIssuer.Вставить("OrganizationName", ГрузПринялОрганизация);
				
				Если ЗначениеЗаполнено(ГрузПринялОснованиеПолномочий) Тогда
					ТитулСтруктурой.OtherIssuer.Вставить("EmployeeBase", ГрузПринялОснованиеПолномочий);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ГрузПринялОснованиеПолномочийОрганизации) Тогда
					ТитулСтруктурой.OtherIssuer.Вставить("OrganizationBase", ГрузПринялОснованиеПолномочийОрганизации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТитулаГрузПринялУПД970(ТитулСтруктурой)
	
	Если ЗначениеЗаполнено(ГрузПринялВид) И ГрузПринялВид <> "НеЗаполнять" Тогда
		
		Если ГрузПринялВид = "ПолучательГруза" ИЛИ ГрузПринялВид = "ДругойСотрудник" Тогда
		
			ТитулСтруктурой.Employee.FirstName = ГрузПринялИмя;
			ТитулСтруктурой.Employee.Surname = ГрузПринялФамилия;
			
			Если ЗначениеЗаполнено(ГрузПринялОтчество) Тогда
				ТитулСтруктурой.Employee.Patronymic = ГрузПринялОтчество;
			КонецЕсли;
			
			ТитулСтруктурой.Employee.EmployeePosition = ГрузПринялДолжность255;
			
		Иначе
				
			ТитулСтруктурой.OtherIssuer.FirstName = ГрузПринялИмя;
			ТитулСтруктурой.OtherIssuer.Surname = ГрузПринялФамилия;
			
			Если ЗначениеЗаполнено(ГрузПринялОтчество) Тогда
				ТитулСтруктурой.OtherIssuer.Patronymic = ГрузПринялОтчество;
			КонецЕсли;
			
			Если ГрузПринялВид = "СотрудникИнойОрганизации" Тогда
			
				ТитулСтруктурой.OtherIssuer.EmployeePosition = ГрузПринялДолжность255;
				ТитулСтруктурой.OtherIssuer.OrganizationName = ГрузПринялОрганизация255;
				ТитулСтруктурой.OtherIssuer.Inn = ГрузПринялИННОрганизации;
				
				ЗаполнитьСтруктуруОснованияПолномочий(
					ТитулСтруктурой.OtherIssuer.EmployeeBase,
					РеквизитыОснованияПолномочий);
				
				ЗаполнитьСтруктуруОснованияПолномочий(
					ТитулСтруктурой.OtherIssuer.OrganizationBase,
					РеквизитыОснованияПолномочийИнойОрганизации);
					
			Иначе
				
				ТитулСтруктурой.OtherIssuer.Inn = ГрузПринялИННФизЛица;
				
				ЗаполнитьСтруктуруОснованияПолномочий(
					ТитулСтруктурой.OtherIssuer.EmployeeBase,
					РеквизитыОснованияПолномочий);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруОснованияПолномочий(Прото, Основание)

	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Прото.Name = Основание.Наименование;
	Прото.Number = Основание.Номер;
	Прото.Date = Основание.Дата;
	Прото.AdditionalInfo = Основание.ДопСведения;
	
КонецПроцедуры

&НаКлиенте
Функция DocumentCreator() 
	
	Результат = ОписаниеПодписанта.НаименованиеОрганизации;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция DocumentCreatorBase()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Результат = "";
	
	SignerOrgPowersBase = Ядро.СвойствоСтруктуры(
		ПолномочияПодписанта,
		"SignerOrgPowersBase"
	);
	
	Если ЗначениеЗаполнено(SignerOrgPowersBase) Тогда
		Результат = Лев(SignerOrgPowersBase, 120);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Torg12BuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ShipmentReceiptDate", 	ДатаПодписания);
	Результат.Вставить("Receiver", 				Official());
	
	Если Элементы.ГиперссылкаСтарыеФорматыЗаполнитьГрузПринял.Заголовок = "Скрыть" Тогда // значит значения для заполнения отображены
		
		Результат.Вставить("Accepter", Новый Структура);
		Результат.Accepter.Вставить("Surname", 		ГрузПринялФамилия);
		Результат.Accepter.Вставить("FirstName", 	ГрузПринялИмя);
		Результат.Accepter.Вставить("Patronymic",	ГрузПринялОтчество);
		Результат.Accepter.Вставить("JobTitle",		ГрузПринялДолжность);
		
		ЗаполнитьДанныеТитулаДоверенность(Результат);
		
	КонецЕсли;
	
	Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
    ЗаполнитьAdditionalInfos(Результат.AdditionalInfoId.StructedAdditionalInfos, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ActBuyerContent()
	
	Результат = Новый Структура;

	Результат.Вставить("SignatureDate", ДатаПодписания);
	Результат.Вставить("Official",		Official());
	
	ЗаполнитьДанныеТитулаДоверенность(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Official()
	
	Результат = Новый Структура;
	Результат.Вставить("Surname", 		ОписаниеПодписанта.Фамилия);
	Результат.Вставить("FirstName", 	ОписаниеПодписанта.Имя);
	Результат.Вставить("Patronymic",	ОписаниеПодписанта.Отчество);
	Результат.Вставить("JobTitle",		ОписаниеПодписанта.Должность);
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьДанныеТитулаДоверенность(ТитулСтруктурой)
	
	Если ЗначениеЗаполнено(ДанныеДоверенности) Тогда
		
		ТитулСтруктурой.Вставить("Attorney", Новый Структура);
		
		ТитулСтруктурой.Attorney.Вставить("Number",	ДанныеДоверенности.Номер);
		ТитулСтруктурой.Attorney.Вставить("Date",	ДанныеДоверенности.Дата);
		
		ТитулСтруктурой.Attorney.Вставить("IssuerOrganizationName",	ДанныеДоверенности.Организация);
		ТитулСтруктурой.Attorney.Вставить("IssuerAdditionalInfo",	ДанныеДоверенности.ДопСведения);
		
		ТитулСтруктурой.Attorney.Вставить("Issuer",	Новый Структура);
		
		ТитулСтруктурой.Attorney.Issuer.Вставить("Surname",		ДанныеДоверенности.Фамилия);
		ТитулСтруктурой.Attorney.Issuer.Вставить("FirstName",	ДанныеДоверенности.Имя);
		ТитулСтруктурой.Attorney.Issuer.Вставить("Patronymic",	ДанныеДоверенности.Отчество);
		ТитулСтруктурой.Attorney.Issuer.Вставить("JobTitle",	ДанныеДоверенности.Должность);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Torg2RecipientTitle()
	
	Результат = Новый_Torg2RecipientTitle();
	
	Результат.DocumentCreator = DocumentCreator();
	
	CreatorBase = DocumentCreatorBase();
	Если ЗначениеЗаполнено(CreatorBase) Тогда
		Результат.DocumentCreatorBase = CreatorBase;
	КонецЕсли;
	
	Результат.CompilationInfoDate = ДатаПодписания;
	Результат.TotalAcceptanceContent = СодержаниеОперации;
	
	ЗаполнитьAdditionalInfos(Результат.AdditionalInfoId.AdditionalInfo);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция reconciliationact405RecipientTitle()
	
	Результат = Новый_reconciliationact405RecipientTitle();
	
	Результат.DateCreateFile = ДатаПодписания;
	Результат.TimeCreateFile = Формат(ТекущаяДата(), "ДФ=HH:mm:ss");
	Результат.SignDisagreement = ИтогиСверки;
	
	Если ИтогиСверки = ИтогиСверкиДопустимыеЗначения.ЕстьРазногласия Тогда
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		ReconciliationActTable = Ядро.КопияКоллекцииЗначений(КонтентОтвета.ReconciliationAct.ReconciliationActTable);
		
		Результат.ReconciliationAct.Вставить("ReconciliationActTable", ReconciliationActTable);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// В титул покупателя добавляется свойство с описанием дополнительных параметров.
// Они не попадают в модель XDTO. Нужны для работы дальнейшей логики.
//
// Параметры:
//  Результат	 - Стуктура - Прото структура титула покупателя, имена свойств которой соответствуют объектной модели XDTO
//
&НаКлиенте
Процедура ДополнитьТитулПокупателя(Результат)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("BoxId",			АдресЯщика);
	ДополнительныеПараметры.Вставить("ТипДокумента",	ТипДокумента);
	ДополнительныеПараметры.Вставить("ТипКонтента",		ТипКонтента);
	ДополнительныеПараметры.Вставить("ЗаполнитьДатуПодписанияПоДатеДокумента", ЗаполнятьДатуПодписанияПоДатеДокумента());
	
	Результат.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
КонецПроцедуры

// Конструктор IdValue
//
// Параметры:
//  Id		 - Строка - Идентификатор
//  Value	 - Строка - Значение
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//   * Id	 - Строка - Идентификатор
//   * Value - Строка - Значение
//
&НаКлиенте
Функция Новый_IdValue(Id = Неопределено, Value = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Id", Id);
	Результат.Вставить("Value", Value);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_KeyValue(Key = Неопределено, Value = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Key", Key);
	Результат.Вставить("Value", Value);
	
	Возврат Результат;
	
КонецФункции

// Конструктор AdditionalInfoId_Torg2
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//   * InfoFileId - Строка(36) - Идентификатор файла информационного поля (ИдФайлИнфПол)
//   * AdditionalInfo - Массив из Структура - содержит:
//     ** IdValue - Структура - элемент текстовой информации (см. Новый_IdValue)
//
&НаКлиенте
Функция Новый_AdditionalInfoId_Torg2()
	
	Результат = Новый Структура;
	Результат.Вставить("InfoFileId");
	Результат.Вставить("AdditionalInfo", Новый Массив); // Новый_IdValue
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_AdditionalInfoId()
	
	Результат = Новый Структура;
	Результат.Вставить("InfoFileId");
	Результат.Вставить("StructedAdditionalInfos", Новый Массив); // Новый_KeyValue
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_Torg2RecipientTitle() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator");
	Результат.Вставить("DocumentCreatorBase");
	Результат.Вставить("CompilationInfoDate");
	Результат.Вставить("TotalAcceptanceContent");
	Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId_Torg2());
	
	Результат.Вставить("Signers", Новый Массив); // Новый_SignerTorg2()
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_reconciliationact405RecipientTitle()
	
	Результат = Новый Структура;
	Результат.Вставить("DateCreateFile");
	Результат.Вставить("TimeCreateFile");
	Результат.Вставить("SignDisagreement");
	Результат.Вставить("ReconciliationAct", Новый_ReconciliationAct());
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_ReconciliationAct()
	
	Результат = Новый Структура;
	Результат.Вставить("IdentityInfoSender", Новый_IdentityInfoSender());
	Результат.Вставить("Signer");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_IdentityInfoSender()
	
	Результат = Новый Структура;
	Результат.Вставить("BaseIdFile");
	Результат.Вставить("DateFileInfoSender");
	Результат.Вставить("TimeFileInfoSender");
	Результат.Вставить("SignSender");
	
	Возврат Результат;
	
КонецФункции

// Заполняет AdditionalInfos или StructedAdditionalInfos
// в зависимости от StructedAdditionalInfos = Истина/Ложь
//
// Параметры:
//  КоллекцияДопСведений	- Массив
//  StructedAdditionalInfos	- Булево - AdditionalInfos или StructedAdditionalInfos
//
&НаКлиенте
Процедура ЗаполнитьAdditionalInfos(КоллекцияДопСведений, StructedAdditionalInfos = Ложь)
	
	Для НомерСведения = 1 По КоличествоДопСведений Цикл
		
		ИмяРеквизитаКлюч = ИмяПоляКлюч(НомерСведения);
		ИмяРеквизитаЗначение = ИмяПоляЗначение(НомерСведения);
		
		КлючСведения = ЭтаФорма[ИмяРеквизитаКлюч];
		ЗначениеСведения = ЭтаФорма[ИмяРеквизитаЗначение];
		
		Если Не ЗначениеЗаполнено(КлючСведения)
			И Не ЗначениеЗаполнено(ЗначениеСведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если StructedAdditionalInfos = Истина Тогда 
			ДопСведение = Новый_KeyValue(КлючСведения, ЗначениеСведения);
		Иначе
			ДопСведение = Новый_IdValue(КлючСведения, ЗначениеСведения);
		КонецЕсли;	
		
		КоллекцияДопСведений.Добавить(ДопСведение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСписокЗначений(СписокИсточник, СписокПриемник)
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокПриемник.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция Новый_СписокВариантовЗаполненияДатыПодписания()
	
	СписокВыбора = Новый СписокЗначений;
	
	// По дате документа
	ЗначениеВарианта 		= ЗначениеДатыПодписанияДатаДокумента();
	ПредставлениеВарианта 	= ЗаголовокДатыСобытияОтветногоТитула() + " совпадает с датой документа";
	
	СписокВыбора.Добавить(ЗначениеВарианта, ПредставлениеВарианта);
	
	// Произвольная дата
	ЗначениеВарианта 		= ЗначениеДатыПодписанияПроизвольнаяДата();
	ПредставлениеВарианта 	= ЗаголовокДатыСобытияОтветногоТитула();
	
	СписокВыбора.Добавить(ЗначениеВарианта, ПредставлениеВарианта);
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Функция ЗначениеДатыПодписанияПроизвольнаяДата()
	
	Возврат "ПроизвольнаяДата";
	
КонецФункции

&НаКлиенте
Функция ЗначениеДатыПодписанияДатаДокумента()
	
	Возврат "ДатаДокумента";
	
КонецФункции

&НаКлиенте
Функция ЗаполнятьДатуПодписанияПоДатеДокумента()
	
	Возврат (ВариантЗаполненияДатыПодписания = ЗначениеДатыПодписанияДатаДокумента());
	
КонецФункции

&НаКлиенте
Функция ЗаголовокДатыСобытияОтветногоТитула()
	
	ЭтоУКД = Найти(ТипКонтента, "ucd") > 0;
	
	Если ЭтоУКД Тогда
		ЗаголовокЭлемента = "Дата согласования";
	ИначеЕсли ТипКонтента = "torg2" Тогда
		ЗаголовокЭлемента = "Дата составления";
	Иначе
		ЗаголовокЭлемента = "Дата приемки";
	КонецЕсли;
	
	Возврат ЗаголовокЭлемента;
	
КонецФункции

//}	Формирование титула


//{	Метрики

&НаКлиенте
Процедура Метрика_РедактированиеОснованияПолномочий()

	КатегорияДействий = "Заполнение основания полномочий";
	
	Метрика_ДобавитьПоведение_РедактированиеОснованияПолномочий(КатегорияДействий);
	Метрика_ДобавитьСтатистику_РедактированиеОснованияПолномочий(КатегорияДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_РедактированиеОснованияПолномочийСоставителяФайла()

	КатегорияДействий = "Заполнение основания для составителя файла ";

	Метрика_ДобавитьПоведение_РедактированиеОснованияПолномочий(КатегорияДействий);
	Метрика_ДобавитьСтатистику_РедактированиеОснованияПолномочий(КатегорияДействий);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_РедактированиеОснованияПолномочийИнойОрганизации()

	КатегорияДействий = "Заполнение основания полномочий организации";

	Метрика_ДобавитьПоведение_РедактированиеОснованияПолномочий(КатегорияДействий);
	Метрика_ДобавитьСтатистику_РедактированиеОснованияПолномочий(КатегорияДействий);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_ГрузПринял()
	
	КатегорияМетрики = Метрика_НазванияКатегорий().ДействиеВоВходящих; 
	ПредставлениеМетрики = НазваниеФормы();
	ДействиеМетрики = Метрика_Действие_ГрузПринял();

	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	МодульЯдро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		ПредставлениеМетрики,
		КатегорияМетрики,
		ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ГрузПринял()
	
	КатегорияМетрики = Метрика_НазванияКатегорий().ДействиеВоВходящих; 
	ПредставлениеМетрики = НазваниеФормы();
	ДействиеМетрики = Метрика_Действие_ГрузПринял();
	
	ПредставлениеГрузПринял = ПредставлениеЗначенияГрузПринял();
	
	ДопПеременныеМетрики = Новый Структура;
	ДопПеременныеМетрики.Вставить("Значение", ПредставлениеГрузПринял);
	
	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	МодульЯдро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		АдресЯщика,
		КатегорияМетрики,
		ДействиеМетрики,
		,
		ДопПеременныеМетрики,
		ПредставлениеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_РедактированиеОснованияПолномочий(КатегорияМетрики)
	
	ПредставлениеМетрики = НазваниеФормы();
	ДействиеМетрики = Метрика_НазванияДействий().ОткрытиеФормы;

	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	МодульЯдро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		ПредставлениеМетрики,
		КатегорияМетрики,
		ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_РедактированиеОснованияПолномочий(КатегорияМетрики)
	
	ПредставлениеМетрики = НазваниеФормы();
	ДействиеМетрики = Метрика_НазванияДействий().ОткрытиеФормы;

	МодульЯдро = Модуль_ЯдроНаКлиенте();
	
	МодульЯдро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		АдресЯщика,
		КатегорияМетрики,
		ДействиеМетрики,
		,
		,
		ПредставлениеМетрики);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ОбщиеДополнительныеПараметры()
	
	Результат = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
		Результат.Вставить("Рег.номер МЧД", ВыбраннаяМЧД);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция Метрика_ДополнительныеПараметрыАктаСверки()
	
	Результат = Новый Соответствие;
	
	НетРазногласий = "WithoutDisagreements";
	
	Если ИтогиСверки = НетРазногласий Тогда
		Результат.Вставить("ПризнРазн", 1);
	Иначе
		Результат.Вставить("ПризнРазн", 2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ПриОткрытии()

	КатегорияМетрики		= ОсновнаяФорма().Метрика_НазваниеКатегории().ДействиеВоВходящих;
	ДействиеМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().ОткрытиеФормы;
	ЛейблМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= "Титул покупателя";
	
	НазваниеФормы		= НазваниеФормы();
	ДопПеременные		= Метрика_ОбщиеДополнительныеПараметры();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, КатегорияМетрики, Истина, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ПриЗакрытии()

	КатегорияМетрики		= ОсновнаяФорма().Метрика_НазваниеКатегории().ДействиеВоВходящих;
	ДействиеМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().ЗакрытиеФормы;
	НазваниеФормы			= НазваниеФормы();
	ЛейблМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= "Титул покупателя";
	
	ДопПеременные		= Метрика_ОбщиеДополнительныеПараметры();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, КатегорияМетрики, Ложь, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);
	
	Если ЭтоФормализованныйАктСверки405() Тогда
		
		ДопПеременные = Метрика_ДополнительныеПараметрыАктаСверки();
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, КатегорияМетрики, Ложь, ЛейблМетрики, ПредставлениеМетрики, TraceId);
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ВыбраннаяМЧДПриИзменении()
	
	КатегорияМетрики		= ОсновнаяФорма().Метрика_НазваниеКатегории().ДействиеВоВходящих;
	ДействиеМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().РедактироватьПоле;
	НазваниеФормы			= НазваниеФормы();
	ЛейблМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= "Титул покупателя";
	ДопПеременные			= Метрика_ОбщиеДополнительныеПараметры();

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_НастроитьМЧД() 
	
	КатегорияМетрики		= ОсновнаяФорма().Метрика_НазваниеКатегории().ДействиеВоВходящих;
	ДействиеМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().НастроитьДоверенности;
	НазваниеФормы			= НазваниеФормы();
	ЛейблМетрики			= ОсновнаяФорма().Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= "Титул покупателя";
	ДопПеременные			= Метрика_ОбщиеДополнительныеПараметры();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ПоказатьСведенияОДоверенности() 
	
	КатегорияМетрики = Метрика_НазванияКатегорий().ДействиеВоВходящих;
	ДействиеМетрики	= Метрика_НазванияДействий().ПосмотретьДоверенность;
	НазваниеФормы = НазваниеФормы();
	ПредставлениеМетрики = "Титул покупателя";
	ДопПеременные = Метрика_ОбщиеДополнительныеПараметры();
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики, , ПредставлениеМетрики, TraceId);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(АдресЯщика, КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики, TraceId);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазванияДействий()
	
	ОсновнаяФорма = ОсновнаяФорма();
	Результат = ОсновнаяФорма.Метрика_НазваниеДействий();
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазванияКатегорий()
	
	ОсновнаяФорма = ОсновнаяФорма();
	Результат = ОсновнаяФорма.Метрика_НазваниеКатегории();
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_Категория_ЗаполнениеОснованияПолномочий()

	Возврат "Заполнение основания полномочий";
	
КонецФункции

&НаКлиенте
Функция Метрика_Действие_ГрузПринял()

	Возврат "Груз принял";
	
КонецФункции

//}	Метрики

//{	Служебные методы

&НаКлиенте
Функция ЭтоТипКонтентаУПД()
	
	Результат = Ложь;
	
	Если ТипКонтента = ТипыКонтентов.utd970
		Или ТипКонтента = ТипыКонтентов.utd820
		Или ТипКонтента = ТипыКонтентов.utd Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьПредставлениеДокумента(РеквизитыДокумента)
	
	Результат = "Не заполнено";

	Если РеквизитыДокумента <> Неопределено И ЗначениеЗаполнено(РеквизитыДокумента.Наименование) Тогда
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(РеквизитыДокумента.Наименование);
		ЧастиСтроки.Добавить(" № " + РеквизитыДокумента.Номер);
		ЧастиСтроки.Добавить(" от " + Формат(РеквизитыДокумента.Дата, "ДФ=dd.MM.yyyy"));
		
		Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(ЧастиСтроки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияОснованияПолномочий(СведенияОДокументе, ОписаниеОповещения)
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально(
		"РедактированиеОснованияПолномочийУправляемая",
		ЭтаФорма,
		СведенияОДокументе,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыДокумента)

	Если РеквизитыДокумента = Неопределено Тогда
		НаименованиеДокумента = "";
		Номер = "";
		Дата = '00010101';
		ДопСведения = "";
	Иначе
		НаименованиеДокумента = РеквизитыДокумента.Наименование;
		Номер = РеквизитыДокумента.Номер;
		Дата = РеквизитыДокумента.Дата;
		ДопСведения = РеквизитыДокумента.ДопСведения;
	КонецЕсли;
	
    Результат = НовыйРеквизитыДокумента(НаименованиеДокумента, Номер, Дата, ДопСведения);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыйРеквизитыДокумента(ДокНаименование, Номер, Дата, ДопСведения)

	Результат = Новый Структура;
	
	Результат.Вставить("Наименование", ДокНаименование);
	Результат.Вставить("Номер", Номер);
	Результат.Вставить("Дата", Дата);
	Результат.Вставить("ДопСведения", ДопСведения);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Номер) Тогда
		РеквизитыОснованияПолномочий = НовыйРеквизитыДокумента(
			Результат.Наименование,
			Результат.Номер,
			Результат.Дата,
			Результат.ДопСведения);
	Иначе
		РеквизитыОснованияПолномочий = Неопределено;
	КонецЕсли;
	
	ОбновитьПредставлениеОснованияПолномочий();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийИнойОрганизацииЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Номер) Тогда
		РеквизитыОснованияПолномочийИнойОрганизации = НовыйРеквизитыДокумента(
			Результат.Наименование,
			Результат.Номер,
			Результат.Дата,
			Результат.ДопСведения);
	Иначе
		РеквизитыОснованияПолномочийИнойОрганизации = Неопределено;
	КонецЕсли;
	
	ОбновитьПредставлениеОснованияПолномочийИнойОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОснованиеПолномочийОрганизацииЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Номер) Тогда
		РеквизитыОснованияПолномочийОрганизации = НовыйРеквизитыДокумента(
			Результат.Наименование,
			Результат.Номер,
			Результат.Дата,
			Результат.ДопСведения);
	Иначе
		РеквизитыОснованияПолномочийОрганизации = Неопределено;
	КонецЕсли;
	
	ОбновитьПредставлениеОснованияПолномочийОрганизации();
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыДокументаЗаполнены(РеквизитыДокумента)

	Результат = Ложь;
	
	Если РеквизитыДокумента <> Неопределено
		И ЗначениеЗаполнено(РеквизитыДокумента.Наименование)
		И ЗначениеЗаполнено(РеквизитыДокумента.Номер)
		И ЗначениеЗаполнено(РеквизитыДокумента.Дата) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВидамиРезультатовПриемки(СписокВыбора)

	//TODO: Изменить в ядре со списка на структуру, когда будет готово в ОФ
	//Представления = Модуль_Ядро().ВидыРезультатовПриемки_Представления();
	Представления = ВидыРезультатовПриемки_Представления();
	
	Для каждого ЭлементКоллекции Из РезультатПриемкиДопустимыеЗначения Цикл
		ПредставлениеРезультатаПриемки = Представления[ЭлементКоллекции.Значение]; 
		СписокВыбора.Добавить(ЭлементКоллекции.Значение, ПредставлениеРезультатаПриемки);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоЗначению();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидамиРезультатовПриемкиДляИУПД970(СписокВыбора)
	
	//TODO: Изменить в ядре со списка на структуру, когда будет готово в ОФ
	//Представления = Модуль_Ядро().ВидыРезультатовПриемки_Представления();
	Представления = ВидыРезультатовПриемки_Представления();
	
	СписокВыбора.Добавить(РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий,
		Представления[РезультатПриемкиДопустимыеЗначения.ПринятоБезРазногласий]);

	СписокВыбора.Добавить(РезультатПриемкиДопустимыеЗначения.ПринятоСРазногласиями,
		Представления[РезультатПриемкиДопустимыеЗначения.ПринятоСРазногласиями]);

КонецПроцедуры

//TODO: Изменить метод, когда будет реализация в ядре	
Функция ВидыРезультатовПриемки_Представления() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("1", "Принято без разногласий");
	Результат.Вставить("2", "Принято с разногласиями");
	Результат.Вставить("3", "Не принято");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипДокумента_ИУПД()
	Возврат "UniversalTransferDocumentRevision";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОбОшибке(ТекстОшибки, Отказ = Истина)
	
	Сообщить(ТекстОшибки);
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеЗначенияОснованийПолномочийИхХранилища()

	КлючОбъекта = ОбработкаОбъект().Метаданные().ПолноеИмя() + ".Форма.ТитулПокупателяУправляемая/ТекущиеДанные";
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Соответствие") Тогда
		РеквизитыОснованияПолномочий = СохраненныеНастройки.Получить("РеквизитыОснованияПолномочий");
		РеквизитыОснованияПолномочийОрганизации = СохраненныеНастройки.Получить("РеквизитыОснованияПолномочийОрганизации");
		РеквизитыОснованияПолномочийИнойОрганизации = СохраненныеНастройки.Получить("РеквизитыОснованияПолномочийИнойОрганизации");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПредставлениеЗначенияГрузПринял()
	
	ВидыГрузПринял = Элементы.ГрузПринялВид.СписокВыбора;
	
	ЭлементСписка = ВидыГрузПринял.НайтиПоЗначению(ГрузПринялВид);
	Результат = ЭлементСписка.Представление;
	
	Возврат Результат;
	
КонецФункции

//}	Служебные методы
