&НаКлиенте
Перем ОсновнаяФорма;

&НаСервере
Перем мОбработкаОбъект;

// Сервисные методы

&НаСервере
Функция ОбработкаОбъект()

	Если мОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			мОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если мОбработкаОбъект = Неопределено Тогда
			
			мОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", мОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат мОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Если ОсновнаяФорма = Неопределено Тогда
		ОсновнаяФорма = ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;
	
	Возврат ОсновнаяФорма;
	
КонецФункции

// Сервисные методы


// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	ВозможныеСостоянияУведомлений = Модуль_Ядро.Перечисление_СостоянияУведомленийПользователя();
	
	ОтборПрочитано = Истина;
	
	ЗаполнитьТабУведомлений();
	
	УстановитьСвойстваФормыТакси();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	НастройкиЭлемента = Новый Структура;
	НастройкиЭлемента.Вставить("ВертикальноеПоложениеВГруппе", ВертикальноеПоложениеЭлемента.Центр);
	НастройкиЭлемента.Вставить("ВертикальноеПоложение", ВертикальноеПоложениеЭлемента.Центр);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОнлайнКонсультант1, НастройкиЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьПисьмоВТехподдержку, НастройкиЭлемента);
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Если Модуль_Ядро.ПриложениеСтаршеВерсии("8.3.6") Тогда
		
		НастройкиЭлемента = Новый Структура;
		НастройкиЭлемента.Вставить("Ширина", 15);
		ЗаполнитьЗначенияСвойств(Элементы.НадписьОнлайнКонсультант1, НастройкиЭлемента);
		
		НастройкиЭлемента = Новый Структура;
		НастройкиЭлемента.Вставить("Ширина", 40);
		ЗаполнитьЗначенияСвойств(Элементы.НадписьПисьмоВТехподдержку, НастройкиЭлемента);
		
		НастройкиЭлемента = Новый Структура;
		НастройкиЭлемента.Вставить("Высота", 16);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиЭлемента);
		
	КонецЕсли;
	
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ТабУведомлений.Прочитано");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабУведомлений");
	ШрифтТаблицы = Элементы.ТабУведомлений.Шрифт;
	Шрифт = Новый Шрифт(ШрифтТаблицы,,,Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы = Ложь)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Метрика_НажатиеКнопкиФормы("Закрыть");
	
	ОповеститьВладельцаОЗакрытииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьВладельцаОЗакрытииФормы()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ИдентификаторОповещения = "Диадок_ЗакрытаФормаУведомлений";
	СостояниеУведомленийПользователя = СостояниеУведомленийПользователя();
	ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
	
	Оповестить(
		ИдентификаторОповещения,
		СостояниеУведомленийПользователя,
		ИсточникОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Функция СостояниеУведомленийПользователя()
	
	Результат = ВозможныеСостоянияУведомлений.НетУведомлений;
	
	Для Каждого Уведомление Из ТабУведомлений Цикл
		Если Уведомление.Важное 
			И НЕ Уведомление.Прочитано Тогда
			Результат = ВозможныеСостоянияУведомлений.ЕстьВажныеНеПрочитанные;
			Прервать;
		КонецЕсли;
		Если НЕ Уведомление.Прочитано Тогда
			Результат = ВозможныеСостоянияУведомлений.ЕстьНеПрочитанные;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуУведомлений(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьУведомление(Команда)
	
	УстановитьПометкуОПрочтении();
	
	УстановитьДоступностьКнопкиПрочитано();
	
КонецПроцедуры

// Обработчики событий формы


// Служебные процедуры и функции

&НаСервере
Процедура ЗаполнитьТабУведомлений()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	СписокУведомлений = Модуль_Ядро.УведомленияПользователей_СписокУведомлений();
	
	ТабУведомлений.Загрузить(СписокУведомлений);
	
	ТабУведомлений.Сортировать("ДатаНачала Desc, Важное Desc, Прочитано Desc");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуУведомленийНаСервере()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СостоянияУведомлений = ТабУведомлений.Выгрузить( , "ИД, Прочитано");
	
	Модуль_Ядро.УведомленияПользователей_СохранитьТаблицуСостояний(СостоянияУведомлений);
	
КонецПроцедуры

// Служебные процедуры и функции


// Обработчики событий элементов формы

&НаКлиенте
Процедура НадписьОнлайнКонсультантНажатие(Элемент)
	
	Метрика_НажатиеКнопкиФормы("Задать вопрос онлайн-консультанту");
	
	ОсновнаяФорма().ЦентрПоддержки_Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПисьмоВТехподдержкуНажатие(Элемент)
	
	Метрика_НажатиеКнопкиФормы("Написать письмо в техподдержку");
	
	СписокЗначений = Новый СписокЗначений;
	ПустойЭлемент = СписокЗначений.Добавить();
	
	ОсновнаяФорма().ОтправитьEmailПродолжение(ПустойЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабУведомленийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиПрочитано();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиПрочитано()
	
	Элементы.ПрочитатьУведомление.Доступность = Ложь;
	
	ТекДанные = Элементы.ТабУведомлений.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено
		И НЕ ТекДанные.Прочитано Тогда
		
		Элементы.ПрочитатьУведомление.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОПрочтении()
	
	Метрики_ЗаписатьПоведение_Прочитано();
	
	ТекДанные = Элементы.ТабУведомлений.ТекущиеДанные;
	
	ТекДанные.Прочитано = Истина;
	
	СохранитьТаблицуУведомленийНаСервере();
	
	Метрики_ЗаписатьСтатистику_Прочитано(ТекДанные.ИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочитанныеПриИзменении(Элемент)
	
	Метрики_ЗаписатьПоведение_ОтображатьПрочитанные();
	
	СтруктураПоиска = Новый Структура;
	
	Если НЕ ОтборПрочитано Тогда
		СтруктураПоиска.Вставить("Прочитано", Ложь);
	КонецЕсли;
	
	Элементы.ТабУведомлений.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
	Метрики_ЗаписатьСтатситику_ОтображатьПрочитанные();
	
КонецПроцедуры

// Обработчики событий элементов формы


// Метрики

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_Прочитано()
	
	НазваниеКнопки = Метрика_ПрочитатьУведомление();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_Прочитано(Идентификатор)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрика_ПрочитатьУведомление();
	Категория = Метрики_КатегорияЭкстренныеУведомления();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("ID", Идентификатор);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, , Переменные, НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ОтображатьПрочитанные()
	
	НазваниеКнопки = Метрика_ПоказатьПрочитанные();
	
	Метрика_НажатиеКнопкиФормы(НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатситику_ОтображатьПрочитанные()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Действие = Метрика_ПоказатьПрочитанные();
	Категория = Метрики_КатегорияЭкстренныеУведомления();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("КолВоУведомлений", КоличествоУведомлений());
	Переменные.Вставить("КолВоПрочитанных", КоличествоПрочитанныхУведомлений());
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, , Переменные, НазваниеФормы);
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоПрочитанныхУведомлений()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Прочитано", Истина);
	
	НайденныеСтроки = ТабУведомлений.НайтиСтроки(СтруктураПоиска);
	
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

&НаКлиенте
Функция КоличествоУведомлений()
	
	Возврат ТабУведомлений.Количество();

КонецФункции

&НаКлиенте
Процедура Метрика_НажатиеКнопкиФормы(НазваниеКнопки)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеФормы = Метрики_НаименованиеФормы();
	НазваниеКатегории = Метрики_КатегорияЭкстренныеУведомления();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, НазваниеКатегории, НазваниеКнопки);
	
КонецПроцедуры

&НаКлиенте
Функция Метрики_КатегорияЭкстренныеУведомления()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	НазваниеКатегории = Модуль_Ядро.Метрика_НазваниеКатегории();
	
	Возврат НазваниеКатегории.ЭкстренноеУведомление;

КонецФункции

&НаКлиенте
Функция Метрика_ПрочитатьУведомление()
	
	Возврат "ПрочитатьУведомление";

КонецФункции

&НаКлиенте
Функция Метрика_ПоказатьПрочитанные()
	
	Возврат "ПоказатьПрочитанные";

КонецФункции

&НаКлиенте
Функция Метрики_НаименованиеФормы()
	
	Возврат "Форма экстренного уведомления";
	
КонецФункции

// Метрики

