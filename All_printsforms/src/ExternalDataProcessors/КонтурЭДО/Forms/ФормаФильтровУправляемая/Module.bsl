&НаСервере
Перем ОбработкаОбъект;

//{		Сервисные методы

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	РежимОтображенияДокументов = Параметры.РежимОтображенияДокументов;
	ОбработкаОбъект().УстановитьСхемуСКДПоРежиму(РежимОтображенияДокументов);
	
	Объект.КомпоновщикНастроекОтбора = ОбработкаОбъект().КомпоновщикНастроекОтбора;
	
	Элементы.Применить.ЦветФона = Новый Цвет(255, 225, 0);
	
	УстановитьСвойстваФормыТакси();
	
	ЗаполнитьСписокТиповИсполнителей();
	
	УстановитьСобытияПоляОтбора_Исполнитель();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповИсполнителей()
	
	СписокТиповИсполнителей.Добавить("Подразделение");
	СписокТиповИсполнителей.Добавить("Пользователь");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	СвойствоГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаСбросить, СвойствоГоризонтальноеПоложениеВГруппе);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСобытияПоляОтбора_Исполнитель()
	
	ФильтрыСпискаДокументов_Установить_ОбработчикНачалоВыбора();
	ФильтрыСпискаДокументов_Установить_ОбработчикОчистка();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрыСпискаДокументов_Установить_ОбработчикНачалоВыбора()
	
	Элементы.ФильтрыСпискаДокументовПравоеЗначение.УстановитьДействие("НачалоВыбора", "ФильтрИсполнитель_ТипДанныхНачалоВыбора");
	
КонецПроцедуры

&НаСервере
Процедура ФильтрыСпискаДокументов_Установить_ОбработчикОчистка()
	
	Элементы.ФильтрыСпискаДокументовПравоеЗначение.УстановитьДействие("Очистка", "ФильтрИсполнитель_ОчисткаЗначений");
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрИсполнитель_ТипДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолеСравнения = Элементы.ФильтрыСпискаДокументов.ТекущиеДанные.ЛевоеЗначение;
	
	Если ЭтоПолеКомпоновкиДанныхИсполнитель(ПолеСравнения) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПолеЗаполнения", Элемент);
		
		Если НЕ ЗначениеЗаполнено(Элемент.СписокВыбора) Тогда
			ИмяМетода = "ВыборТипаИсполнителяЗавершение";
			СписокВыбора = СписокТиповИсполнителей;
		Иначе
			ИмяМетода = "ВыборИсполнителяЗавершение";
			СписокВыбора = Элемент.СписокВыбора;
		КонецЕсли;
		
		Исполнитель_ТипДанныхНачалоВыбора(
			ДополнительныеПараметры,
			ИмяМетода,
			СписокВыбора
		);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Исполнитель_ТипДанныхНачалоВыбора(ДополнительныеПараметры, ИмяМетода, СписокВыбора)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокФормыВыбора = ЗаголовокФормыВыбора_Исполнитель();
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
		ИмяМетода,
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ОсновнаяФорма.ПоказатьВыборЭлемента(
		СписокВыбора,
		Оповещение,
		ЗаголовокФормыВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаИсполнителяЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначенийФильтраИсполнитель = СписокЗначенийФильтраПоИсполнителю(РезультатВыбора.Значение);
	
	ПолеСравнения = Элементы.ФильтрыСпискаДокументов.ТекущиеДанные.ЛевоеЗначение;
	
	ПолеСКД = Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеСравнения);
	ПолеСКД.ДоступныеЗначения = СписокЗначенийФильтраИсполнитель;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокФормыВыбора = ЗаголовокФормыВыбора_Исполнитель();
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ЗаполнитьВариантыОтбораПоИсполнителю",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ОсновнаяФорма.ПоказатьВыборЭлемента(
		СписокЗначенийФильтраИсполнитель,
		Оповещение,
		ЗаголовокФормыВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсполнителяЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ЗаполнитьВариантыОтбораПоИсполнителю",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(
		Оповещение,
		РезультатВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантыОтбораПоИсполнителю(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	НастройкиКомпоновкиДанных = Объект.КомпоновщикНастроекОтбора.Настройки;
	
	ЭлементыОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы;
	
	Для Каждого Элемент Из ЭлементыОтбора Цикл
		
		Если ЭтоГруппаЭлементовОтбораКомпоновкиДанных(Элемент)
			ИЛИ НЕ ЭтоПолеКомпоновкиДанныхИсполнитель(Элемент.ЛевоеЗначение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			Элемент.ПравоеЗначение = РезультатВыбора.Значение;
		КонецЕсли;
		
		ЭлементУправления = Элементы.ФильтрыСпискаДокументов.ТекущийЭлемент;
		
		УстановитьКнопкиПоляОтбора_ВыборЗначенияОтбора(ЭлементУправления);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрИсполнитель_ОчисткаЗначений(Элемент, СтандартнаяОбработка)
	
	ПолеСравнения = Элементы.ФильтрыСпискаДокументов.ТекущиеДанные.ЛевоеЗначение;
	
	Если ЭтоПолеКомпоновкиДанныхИсполнитель(ПолеСравнения) Тогда
		
		ПолеСКД = Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеСравнения);
		ПолеСКД.ДоступныеЗначения.Очистить();
		
		ЭлементУправления = Элементы.ФильтрыСпискаДокументов.ТекущийЭлемент;
		
		УстановитьКнопкиПоляОтбора_ВыборТипаЗначения(ЭлементУправления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СписокЗначенийФильтраПоИсполнителю(РезультатВыбора)
	
	Если РезультатВыбора = "Подразделение" Тогда
		
		Список = СписокЗначенийФильтраПоИсполнителю_Подразделения();
		
	ИначеЕсли РезультатВыбора = "Пользователь" Тогда
		
		Список = СписокЗначенийФильтраПоИсполнителю_Пользователи();
		
	Иначе
		
		Список = Неопределено;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Функция СписокЗначенийФильтраПоИсполнителю_Пользователи()
	
	Если ЗначениеЗаполнено(СписокИсполнителей_Пользовалель) Тогда
		Возврат СписокИсполнителей_Пользовалель;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Организации = Ядро.Организации_СписокОрганизацийПоКонтексту();
	
	Для Каждого ДанныеОрганизации Из Организации Цикл
		
		КоллекцияПользователейОрганизации = Ядро.ПользователиОрганизации(ДанныеОрганизации.Id);
		
		Для Каждого ДанныеПользователя Из КоллекцияПользователейОрганизации.Users Цикл
			
			СписокИсполнителей_Пользовалель.Добавить(ДанныеПользователя.Name);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокИсполнителей_Пользовалель.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокИсполнителей_Пользовалель;
	
КонецФункции

&НаСервере
Функция СписокЗначенийФильтраПоИсполнителю_Подразделения()
	
	Если ЗначениеЗаполнено(СписокИсполнителей_Подразделение) Тогда
		Возврат СписокИсполнителей_Подразделение;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Организации = Ядро.Организации_СписокОрганизацийПоКонтексту();
	
	СписокИсполнителей_Подразделение.Добавить("Головное подразделение");
	
	Для Каждого ДанныеОрганизации Из Организации Цикл
		
		КоллекцияПодразделенийОрганизации = Ядро.Подразделения_СписокПодразделений(ДанныеОрганизации);
		
		Для Каждого ДанныеПодразделения Из КоллекцияПодразделенийОрганизации Цикл
			
			СписокИсполнителей_Подразделение.Добавить(ДанныеПодразделения.Наименование);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокИсполнителей_Подразделение;
	
КонецФункции

&НаКлиенте
Функция ЭтоПолеКомпоновкиДанныхИсполнитель(СравниваемоеПолеКД)
	
	ПолеКомпоновкиИсполнитель = Новый ПолеКомпоновкиДанных("ОбъектМаршрутизации");
	
	Результат = (СравниваемоеПолеКД = ПолеКомпоновкиИсполнитель);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоГруппаЭлементовОтбораКомпоновкиДанных(СравниваемоеПолеКД)
	
	Результат = (ТипЗнч(СравниваемоеПолеКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокФормыВыбора_Исполнитель()
	
	Результат = НСтр("ru='Диадок: Выбор исполнителя'");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКнопкиПоляОтбора_ВыборТипаЗначения(ЭлементУправления)
	
	ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементУправления.КнопкаВыпадающегоСписка = Ложь;
	ЭлементУправления.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкиПоляОтбора_ВыборЗначенияОтбора(ЭлементУправления)
	
	ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементУправления.КнопкаВыпадающегоСписка = Ложь;
	ЭлементУправления.КнопкаОчистки = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкуОтбораСКД(НаименованиеОтбора)
	
	СохраненныйТекст = ХранилищеНастроекДанныхФорм.Загрузить("Диадок_Фильтры_СКД", НаименованиеОтбора);
			
	Если ЗначениеЗаполнено(СохраненныйТекст) Тогда
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML; 
			ЧтениеXML.УстановитьСтроку(СохраненныйТекст); 
			СохраненнаяНастройка = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("НастройкиКомпоновкиДанных"));
			Объект.КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СохраненнаяНастройка);
		Исключение
			Сообщить("Не удалось восстановить настройки по причине: " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФильтрыНажатие(Элемент)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Сохранить выбранные";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Форма фильтров", КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	КоличествоАктивныхЭлементовОтбора = КоличествоАктивныхЭлементовОтбора();
	
	Если КоличествоАктивныхЭлементовОтбора = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ОсновнаяФорма().ПараметрыФормыВвода();
	ПараметрыФормы.Заголовок			 = "Сохранение фильтров";
	ПараметрыФормы.ТекстСообщения		 = "Введите название фильтра";
	ПараметрыФормы.ТекстКнопкиВыполнить	 = "Применить";
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикСохраненияФильтров", ЭтаФорма);
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("ФормаВводаУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоАктивныхЭлементовОтбора()
	
	Результат = 0;
	
	Для Каждого Элемент Из Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
		
		Если Элемент.Использование = Истина Тогда
			
			Результат = Результат + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикСохраненияФильтров(РезультатОбработчика, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеФильтра = РезультатОбработчика.Комментарий;	
	КоличествоСохраненныхФильтров = КоличествоСохраненныхФильтров();
	
	Если КоличествоСохраненныхФильтров < 10 Тогда
		
		КлючНастроекСКД 	= "Диадок_Фильтры_СКД";
		КлючНастроекОтборов = "Диадок_Фильтры_Отборы";
		
		СохранитьФильтр(НаименованиеФильтра, КлючНастроекСКД, КлючНастроекОтборов);
		
	Иначе
		
		ТекстОшибки = "Вы уже сохранили максимальное количество - 10 фильтров";
		Заголовок 	= "Нельзя сохранить фильтры";
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстОшибки, , Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоСохраненныхФильтров()
	
	СписокФильтров = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Диадок_Фильтры_СКД");
	
	Результат = СписокФильтров.Количество();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьФильтр(НаименованиеФильтра, КлючНастроекСКД, КлючНастроекОтборов = Неопределено)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML,
								Объект.КомпоновщикНастроекОтбора.Настройки,
								"Settings",
								"http://v8.1c.ru/8.1/data-composition-system/settings");
	
	Текст = ЗаписьXML.Закрыть();
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроекСКД, НаименованиеФильтра, Текст);
	
	Если КлючНастроекОтборов <> Неопределено Тогда
		
		МассивЭлементовОтбора = Новый Массив;
		
		Для Каждого Отбор Из Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
			
			Если Отбор.Использование Тогда
				
				ЭлементОтбора = Новый Структура;
				
				ЭлементОтбора.Вставить("Название", 		Отбор.ЛевоеЗначение);
				ЭлементОтбора.Вставить("ВидСравнения", 	Отбор.ВидСравнения);
				ЭлементОтбора.Вставить("Значение",		Отбор.ПравоеЗначение);
				
				МассивЭлементовОтбора.Добавить(ЭлементОтбора);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроекОтборов, НаименованиеФильтра, МассивЭлементовОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Применить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Форма фильтров", КатегорияМетрики, ДействиеМетрики);

	Если ЗначениеЗаполнено(НаименованиеОтбора) Тогда
		ВосстановитьНастройкуОтбораСКД(НаименованиеОтбора);
	КонецЕсли;
	
	ОсновнаяФорма().ПрименитьФильтры(Объект.КомпоновщикНастроекОтбора);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Отменить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Форма фильтров", КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОстальныеФильтрыНажатие(Элемент)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Показать остальные фильтры";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Форма фильтров", КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	СписокДополнительныхФильтров = СписокДополнительныхФильтров();
	УстановитьПометкиСпискаДополнительныхФильтров(СписокДополнительныхФильтров);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("УстановитьДополнительныеОтборы", ЭтаФорма, СписокДополнительныхФильтров);
	
	ОсновнаяФорма().ПоказатьОтметкуЭлементов(СписокДополнительныхФильтров, ОписаниеОповещения,
	"Дополнительные фильтры");
	
КонецПроцедуры

&НаКлиенте
Функция СписокДополнительныхФильтров()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("СуммаДокумента", 				"Сумма документа");
	Результат.Добавить("НомерДокумента", 				"Номер документа");
	Результат.Добавить("ТребуетсяРасшифровка", 			"Требуется расшифровка");
	Результат.Добавить("АнализПроведен", 				"Анализ проведен");
	Результат.Добавить("ВидПакета", 					"Вид пакета");
	Результат.Добавить("ВидПакетаID", 					"Вид пакета ID");
	Результат.Добавить("ВидЭлДокумента", 				"Вид эл. документа");
	Результат.Добавить("ВидЭлДокументаID", 				"Вид эл. документа ID");
	Результат.Добавить("ДействиеВ1С", 					"Действие в 1С");
	Результат.Добавить("ДействиеВДД", 					"Действие в ДД");
	Результат.Добавить("Документ");
	Результат.Добавить("ДокументЭДО", 					"Документ ЭДО");
	Результат.Добавить("ДопРеквизит1", 					"Доп. реквизит 1");
	Результат.Добавить("ДопРеквизит2", 					"Доп. реквизит 2");
	Результат.Добавить("ДопРеквизит3", 					"Доп. реквизит 3");
	Результат.Добавить("ДопРеквизит4", 					"Доп. реквизит 4");
	Результат.Добавить("ДопРеквизит5", 					"Доп. реквизит 5");
	Результат.Добавить("Шаблон");
	Результат.Добавить("ЗаблокированныйПакет", 			"Заблокированный пакет");
	Результат.Добавить("ИмяФайла", 						"Имя файла");
	Результат.Добавить("Метка");
	Результат.Добавить("ОшибкиПроверкиТекст", 			"Ошибки проверки текст");
	Результат.Добавить("ОшибкиПроверкиТекстПакета", 	"Ошибки проверки текст пакета");
	Результат.Добавить("Пакет");
	Результат.Добавить("СодержимоеПакета",				"Содержимое пакета");
	Результат.Добавить("ПредставлениеДокументаДиадок",	"Представление документа в диадоке");
	Результат.Добавить("ВнешнийСтатус",					"Внешний статус");
	
	Если РежимОтображенияДокументов <> "ОтправкаПакетов" Тогда
		Результат.Добавить("ОбъектМаршрутизации", "Исполнитель");
	КонецЕсли;
	
	Результат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкиСпискаДополнительныхФильтров(СписокДопФильтров)
	
	ЭлементыОтбора = Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		ИмяЭлементаОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
		
		ЭлементДопФильтра = СписокДопФильтров.НайтиПоЗначению(ИмяЭлементаОтбора);
		Если Не ЭлементДопФильтра = Неопределено Тогда
			
			ЭлементДопФильтра.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеФильтры_ЗначенияПоУмолчанию()
	
	Результат = Новый Соответствие;
	Результат.Вставить("АнализПроведен", Ложь);
	Результат.Вставить("ЗаблокированныйПакет", Ложь);
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("Метка", "");
	Результат.Вставить("НомерДокумента", "");
	Результат.Вставить("ОшибкиПроверкиТекст", "");
	Результат.Вставить("ОшибкиПроверкиТекстПакета", "");
	Результат.Вставить("ПредставлениеДокументаДиадок", "");
	Результат.Вставить("СодержимоеПакета", "");
	Результат.Вставить("СуммаДокумента", 0);
	Результат.Вставить("ТребуетсяРасшифровка", Ложь);
	Результат.Вставить("Шаблон", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДополнительныеОтборы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПоУмолчанию = ДополнительныеФильтры_ЗначенияПоУмолчанию();
	ЭлементыОтбора = ЭлементыОтбораКомпоновщикаНастроек();
	
	Для Каждого ЭлементДопФильтра Из Результат Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ЭлементДопФильтра.Значение];
		
		Если ЭлементДопФильтра.Пометка
			И ЭлементОтбора = Неопределено Тогда
			
			ЗначениеПоУмолчанию = ЗначенияПоУмолчанию.Получить(ЭлементДопФильтра.Значение);
			ДобавитьЭлементыОтбора(ЭлементДопФильтра.Значение, ЗначениеПоУмолчанию);
			
		ИначеЕсли Не ЭлементДопФильтра.Пометка
			И Не ЭлементОтбора = Неопределено Тогда
			
			УдалитьЭлементОтбора(ЭлементОтбора);
			
		Иначе
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементыОтбораКомпоновщикаНастроек()
	
	Результат = Новый Соответствие;
	
	ЭлементыОтбора = Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		ИмяЭлементаОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
		
		Результат.Вставить(ИмяЭлементаОтбора, ЭлементОтбора);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЭлементОтбора(ЭлементОтбора)
	
	Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыОтбора(ИмяЭлементаОтбора, ЗначениеПоУмолчанию)
	
	НовыйЭлементОтбора = Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	
	НовыйЭлементОтбора.ЛевоеЗначение	 = ПолеОтбора;
	НовыйЭлементОтбора.Использование	 = Ложь;
	НовыйЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение	 = ЗначениеПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НаименованиеОтбора= Неопределено;
	
	Если ТекущаяСтраница.Имя = "Сохраненные" Тогда
		
		ЗаполнитьТаблицуСохраненныхФильтров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСохраненныхФильтров()
	
	ДеревоФильтров = РеквизитФормыВЗначение("ДеревоСохраненныхФильтров");
	
	ДеревоФильтров.Строки.Очистить();
	
	СписокСКД = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Диадок_Фильтры_СКД");
	
	Для Каждого Элемент Из СписокСКД Цикл
		
		НаименованиеФильтра = ДеревоФильтров.Строки.Добавить();
		НаименованиеФильтра.НазваниеФильтр = Элемент.Значение;
		НаименованиеФильтра.ОтображениеПометки = Истина;
		
		Фильтр = ХранилищеНастроекДанныхФорм.Загрузить("Диадок_Фильтры_Отборы", Элемент.Значение);
		
		Для Каждого ЭлементФильтра Из Фильтр Цикл
			
			СтрокаФильтра = НаименованиеФильтра.Строки.Добавить();
			
			СтрокаФильтра.НазваниеФильтр		= ЭлементФильтра.Название;
			СтрокаФильтра.ВидСравнения			= ЭлементФильтра.ВидСравнения;
			СтрокаФильтра.Значение				= ЭлементФильтра.Значение;
			СтрокаФильтра.ОтображениеПометки	= Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоФильтров, "ДеревоСохраненныхФильтров");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНажатие(Элемент)
	
	УдалитьФильтр();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФильтр()
	
	Если НаименованиеОтбора = Неопределено Тогда
		//Не отмечен ни один фильтр
		Возврат;
	КонецЕсли;
	
	ИмяПользователя1С = ИмяПользователя();
	
	ХранилищеНастроекДанныхФорм.Удалить("Диадок_Фильтры_СКД", НаименованиеОтбора, ИмяПользователя1С);
	ХранилищеНастроекДанныхФорм.Удалить("Диадок_Фильтры_Отборы", НаименованиеОтбора, ИмяПользователя1С);
	
	ЗаполнитьТаблицуСохраненныхФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура Сбросить(Команда)
	
	КатегорияМетрики	= ОсновнаяФорма().Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Сбросить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки("Форма фильтров", КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ИмяТекущейСтраницы = ЭтаФорма.Элементы.ГруппаСтраницыФормы.ТекущаяСтраница.Имя;
	
	Если ИмяТекущейСтраницы = "ВсеФильтры" Тогда
		
		ЗначенияПоУмолчанию = ДополнительныеФильтры_ЗначенияПоУмолчанию();
		
		Для Каждого Отбор Из Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
			
			Отбор.ПравоеЗначение = ЗначенияПоУмолчанию.Получить(Строка(Отбор.ЛевоеЗначение));
			Отбор.Использование = Ложь;
			
		КонецЦикла;
		
	Иначе
		
		УдалитьПометкиИзДереваСохраненныхФильтров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПометкиИзДереваСохраненныхФильтров()
	
	ДеревоСохраненныхФильтровЗначение = РеквизитФормыВЗначение("ДеревоСохраненныхФильтров", Тип("ДеревоЗначений"));
	
	Для Каждого СтрокаПервогоУровня Из ДеревоСохраненныхФильтровЗначение.Строки Цикл
		
		СтрокаПервогоУровня.Пометка = Ложь;
		
		Для Каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл
			
			СтрокаВторогоУровня.Пометка = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСохраненныхФильтровЗначение, "ДеревоСохраненныхФильтров");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСохраненныхФильтровПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = Истина Тогда
		НаименованиеОтбора = ТекущиеДанные.НазваниеФильтр;
	Иначе
		НаименованиеОтбора = Неопределено;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоСохраненныхФильтров.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.НазваниеФильтр <> НаименованиеОтбора Тогда
			ЭлементДерева.Пометка = Ложь;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры
