
&НаСервере
Перем ОбработкаОбъект;

//{		Сервисные методы

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

//}		Сервисные методы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКонтекстФормы(Параметры);
	ВосстановитьНастройкиПереключателяОтбора();
	ДобавитьПолеКартинкиВДеревоЗначений();
	ДобавитьПолеЕдиницаИзмеренияВДеревоЗначений();
	ДобавитьПолеУпаковкаВДеревоЗначений(); 

	НовыеКолонки = СформироватьКолонкиДереваНоменклатуры();
	СформироватьЭлементыФормы(НовыеКолонки);
	
	ИнициализироватьКартинкиСтрок();
	ОтключитьВидимостьСлужебныхКолонок(); 
	УстановитьЗаголовокКнопкиОК(); 
	УстановитьУсловноеОформление();
	УстановитьДействиеПриСозданииНоменклатуры();
	ОтключитьИсториюВыбораПриВводеНоменклатуры();
	ИнициализироватьРеквизитКолонкиДерева();
	
	УстановитьСвойстваФормыТакси();
	
	ВключитьДекорациюДлительнойОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения = "", СтандартнаяОбработка = Ложь)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы = Истина
			И НЕ ПриложениеСтаршеВерсии("8.3.8") Тогда
			
			ТекстПредупреждения =
				"Настройки были изменены.
				|При завершении работы приложения настройки не будут сохранены.";
			
		Иначе
			
			ПоказатьВопросОСохраненииСопоставления();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииСопоставления()
	
	ТекстВопроса	= "Настройки были изменены. Сохранить изменения?";
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ЗакрытиеФормыСопоставленияЗавершение", ЭтаФорма);
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыСопоставленияЗавершение(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	Модифицированность = Ложь;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СопоставитьИЗакрыть();
	Иначе
		ЗакрытьБезСопоставления();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	Если Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.2") Тогда
		РедактируемыеСвойстваЭлемента = Новый Структура;
		РедактируемыеСвойстваЭлемента.Вставить("ВидПереключателя", Вычислить("ВидПереключателя.Тумблер"));
		
		ЗаполнитьЗначенияСвойств(Элементы.ПереключательОтбора, РедактируемыеСвойстваЭлемента);
	КонецЕсли;
	
	Если Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.6") Тогда
		РедактируемыеСвойстваЭлемента = Новый Структура;
		РедактируемыеСвойстваЭлемента.Вставить("АвтоМаксимальнаяШирина", Ложь);
		
		ЗаполнитьЗначенияСвойств(Элементы.ДекорацияЛегенда, РедактируемыеСвойстваЭлемента);
	КонецЕсли;
	
	Если Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.7") Тогда
		РедактируемыеСвойстваЭлемента = Новый Структура;
		РедактируемыеСвойстваЭлемента.Вставить("Объединенная", Ложь);
		
		ЗаполнитьЗначенияСвойств(Элементы.ДекоративныеОбертки, РедактируемыеСвойстваЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПереключателяОтбора()
	
	ПереключательОтбора = ОбработкаОбъект().ХранилищеОбщихНастроек_Загрузить(КлючНастроекПереключателяОтбора(), ПереключательОтбора_Все());
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьНастройкиПереключателяОтбора()
	
	ОбработкаОбъект().ХранилищеОбщихНастроек_Сохранить(КлючНастроекПереключателяОтбора(), ПереключательОтбора);

КонецПроцедуры

&НаСервере
Функция КлючНастроекПереключателяОтбора()
	
	Возврат "Диадок_СопоставлениеНоменклатуры_ПереключательОтбора";

КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Метрики_ЗафиксироватьОткрытиеФормыСопоставленияНоменклатуры();
	
	ЗапуститьПоискВариантовСопоставленияНоменклатурыОтложенно();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаНаИнструкциюАвтосопоставленияНоменклатуры()
	
	СсылкаНаИнструкцию = "https://support.kontur.ru/pages/viewpage.action?pageId=83865744";
	Возврат СсылкаНаИнструкцию;

КонецФункции   

&НаКлиенте
Процедура ПерейтиПоСсылкеНаИнструкциюАвтосопоставления(Элемент)
	
	СсылкаНаИнструкцию = СсылкаНаИнструкциюАвтосопоставленияНоменклатуры();
	ЗапуститьПриложение(СсылкаНаИнструкцию);
	Метрики_ДобавитьПоведение_НажатиеПодробнее();
	Метрики_ДобавитьСтатистику_НажатиеПодробнее();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКонтекстФормы(Параметры);
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	Параметры.Свойство("АдресТаблицыНоменклатурыДляСопоставления", АдресТаблицыНоменклатурыДляСопоставления);
	Параметры.Свойство("АдресСписокДокументов", АдресСписокДокументов);
	
	ЭтоАА6 = ЭтоАА6();
	
КонецПроцедуры

&НаСервере
Функция ЭтоАА6()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ИмяИнтеграционногоМодуля = Ядро.ИнтеграционныйМодуль_Получить();
	
	Возврат ИмяИнтеграционногоМодуля = "ПМ_ААА_6";
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПоискВариантовСопоставленияНоменклатурыОтложенно()
	
	Интервал = 0.1;
	Однократно = Истина;
	
	ПодключитьОбработчикОжидания(
		"ЗапуститьПоискВариантовСопоставленияНоменклатуры",
		Интервал,
		Однократно
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПоискВариантовСопоставленияНоменклатуры()
	
	ЗаполнитьВариантыСопоставленияНоменклатуры();

	ЗаполнитьДеревоНоменклатуры();
	
	ОтключитьДекорациюДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДекорациюДлительнойОперации()
	
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	Элементы.ГруппаСписокНоменклатуры.Видимость = Истина; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВключитьДекорациюДлительнойОперации(Форма)
	
	Форма.Элементы.ГруппаДлительнаяОперация.Видимость = Истина;
	Форма.Элементы.ГруппаСписокНоменклатуры.Видимость = Ложь; 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКартинкиСтрок()
	
	Картинки = Модуль_ЯдроНаСервере().БиблиотекаКартинок();
	Картинка_НоменклатураСохранена = Картинки.КартинкаНоменклатураСопоставлена;
	
	АдресГалочка = ПоместитьВоВременноеХранилище(Картинка_НоменклатураСохранена, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитКолонкиДерева()
	
	КолонкиДерева = Новый Структура;
	ТаблицаФормыСКолонками = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	
	Для Каждого Колонка Из ТаблицаФормыСКолонками.Колонки Цикл
		КолонкиДерева.Вставить(Колонка.Имя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаСлужебныхКолонок()
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Идентификатор");
	Результат.Добавить("НоменклатураКонтрагента");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПереключательОтбораПриИзменении(Элемент)
	
	СохранитьНастройкиПереключателяОтбора();
	Метрики_ДобавитьПоведение_ПереключениеФильтраСопоставленных();
	Метрики_ДобавитьСтатистику_ПереключениеФильтраСопоставленных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНоменклатуры()
	
	ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(АдресТаблицыНоменклатурыДляСопоставления);
	ТаблицаНоменклатурыДляСопоставленияСвернутая = ТаблицаНоменклатуры.Скопировать(); 
	ТаблицаНоменклатурыДляСопоставленияСвернутая.Свернуть("Контрагент");
	МассивКонтрагентов = ТаблицаНоменклатурыДляСопоставленияСвернутая.ВыгрузитьКолонку("Контрагент");
	
	Ядро = Модуль_ЯдроНаСервере();
	
	АвтоматическиНайденоЗаписей = 0;
	СопоставленоЗаписей			= 0;
	
	Для Каждого Контрагент Из МассивКонтрагентов Цикл 
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Контрагент", Контрагент);
		
		СтрокиСопоставления = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		
		ЭлементыДереваСопоставления = ДеревоНоменклатуры.ПолучитьЭлементы(); 
		УровеньКонтрагент = ЭлементыДереваСопоставления.Добавить();
		УровеньКонтрагент.Контрагент = Контрагент;
		
		ДетальныеЗаписи = УровеньКонтрагент.ПолучитьЭлементы();
		КоличествоСопоставленных = 0;
		Для Каждого СтрокаСопоставления Из СтрокиСопоставления Цикл
			
			НоменклатураКонтрагента = СтрокаСопоставления.НоменклатураКонтрагента;
			
			СтрокаДетальнойЗаписи = ДетальныеЗаписи.Добавить();
			СтрокаДетальнойЗаписи.ДетальнаяЗапись = Истина;
				
			Если ЗначениеЗаполнено(СтрокаСопоставления.Номенклатура) Тогда
				КоличествоСопоставленных = КоличествоСопоставленных + 1;
				СвойстваНоменклатуры = СвойствоНоменклатурыИнформационнойБазы(СтрокаСопоставления.Номенклатура);
				СтрокаДетальнойЗаписи.ИспользоватьХарактеристики = СвойстваНоменклатуры.ИспользоватьХарактеристики;
				СтрокаДетальнойЗаписи.ОбязательноеЗаполнениеХарактеристики = СвойстваНоменклатуры.ОбязательноеЗаполнениеХарактеристики;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДетальнойЗаписи, СтрокаСопоставления);
			ЗаполнитьДополнительныеКолонки(НоменклатураКонтрагента, СтрокаДетальнойЗаписи);
			
			УстановитьАдресКартинкиНаСервере(СтрокаДетальнойЗаписи);
			УстановитьСопоставлениеНоменклатуры(СтрокаДетальнойЗаписи, НоменклатураКонтрагента);
			
			Если ЕстьАвтоподборНоменклатуры(НоменклатураКонтрагента.Идентификатор, НоменклатураКонтрагента.Владелец) Тогда
				АвтоматическиНайденоЗаписей = АвтоматическиНайденоЗаписей + 1;	
			КонецЕсли;
			
		КонецЦикла;
		СопоставленоЗаписей = СопоставленоЗаписей + КоличествоСопоставленных;
		ПредставлениеСопоставления = Ядро.Общее_ПодставитьПараметрыВСтроку(
		"Сохранено %1/%2",
		Формат(КоличествоСопоставленных, "ЧН=0; ЧГ=0") ,
		Формат(СтрокиСопоставления.Количество(), "ЧН=0; ЧГ=0"));
		
		УровеньКонтрагент.ПредставлениеСопоставления = ПредставлениеСопоставления; 		
	КонецЦикла;
	
	ВсегоЗаписей = ТаблицаНоменклатуры.Количество();
	НеСопоставленоЗаписей = ВсегоЗаписей - СопоставленоЗаписей;
	
	УстановитьСвойстваЭлементаОтбораПоСопоставлению(ВсегоЗаписей, СопоставленоЗаписей, НеСопоставленоЗаписей);
	
	Метрики_ДобавитьСтастику_ЗаполнитьДеревоНоменклатуры(АвтоматическиНайденоЗаписей, НеСопоставленоЗаписей);
	
КонецПроцедуры

&НаСервере
Функция ЕстьАвтоподборНоменклатуры(НоменклатураКонтрагентаИдентификатор, НоменклатураКонтрагентаВладелец)
	
	Результат = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор"	, НоменклатураКонтрагентаИдентификатор);
	ПараметрыОтбора.Вставить("Владелец"			, НоменклатураКонтрагентаВладелец);
	
	ВариантыСопоставления = СписокВариантыСопоставления.НайтиСтроки(ПараметрыОтбора);
			
	Если ВариантыСопоставления.Количество() > 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеКолонки(Знач НоменклатураКонтрагента, Знач СтрокаДетальнойЗаписи)
	
	Характеристика = "";
	НоменклатураКонтрагента.Свойство("Характеристика", Характеристика);
	СтрокаДетальнойЗаписи.ХарактеристикаНоменклатурыКонтрагента = Характеристика;
	
	ЕдиницаИзмерения = "";
	НоменклатураКонтрагента.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтрокаДетальнойЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;

КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыФормы(НовыеКолонки)
	
	ТаблицаСопоставления = ПолучитьИзВременногоХранилища(АдресТаблицыНоменклатурыДляСопоставления);
	Колонки = ТаблицаСопоставления.Колонки;
	
	// Добавляем новые элементы колонок на форму
	Для каждого НоваяКолонка Из НовыеКолонки Цикл 
		
		ЭлементКолонки = Элементы.Добавить(НоваяКолонка.Путь + НоваяКолонка.Имя, Тип("ПолеФормы"), Элементы.ГруппаДанныеИБ);
		ЭлементКолонки.ПутьКДанным = НоваяКолонка.Путь + "." + НоваяКолонка.Имя;
		
		ЭлементКолонки.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонки.ТолькоПросмотр 	  = ЭтоОписаниеТипаСтрока(НоваяКолонка.ТипЗначения);
		ЭлементКолонки.МногострочныйРежим = Истина;
		ЭлементКолонки.АвтоВысотаЯчейки   = Истина;
		ЭлементКолонки.ОграничениеТипа 		= НоваяКолонка.ТипЗначения;
		
		ЭлементКолонки.УстановитьДействие("НачалоВыбора", "ДеревоНоменклатурыНоменклатураНачалоВыбора");
		
		ЭлементКолонки.УстановитьДействие("ОбработкаВыбора", "ДеревоНоменклатурыНоменклатураОбработкаВыбора");
		
		//Зададим ширину элемента колонки, если она указана в ТаблицаНоменклатуры.
		КолонкаТаблицы = Колонки.Найти(НоваяКолонка.Имя);
		Если КолонкаТаблицы <> Неопределено И ЗначениеЗаполнено(КолонкаТаблицы.Ширина) Тогда
			ЭлементКолонки.Ширина = КолонкаТаблицы.Ширина;
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьДополнительныеКолонкиДерева(Колонки);

КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеКартинкиВДеревоЗначений()
	
	ЭлементРодитель = "ДеревоНоменклатуры";
	ИмяЭлемента = "КартинкаСтрокиДерева";
	
	ЭлементКолонки = Элементы.Вставить(ЭлементРодитель + ИмяЭлемента, 
										Тип("ПолеФормы"), 
										Элементы.ДеревоНоменклатуры, 
										Элементы.ДеревоНоменклатурыКонтрагент);
										
	ЭлементКолонки.ПутьКДанным = ЭлементРодитель + "." + ИмяЭлемента;
	
	ЭлементКолонки.Вид 						= ВидПоляФормы.ПолеКартинки;
	ЭлементКолонки.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКолонки.ТолькоПросмотр 	  		= Истина;
	ЭлементКолонки.АвтоВысотаЯчейки   		= Истина;
	ЭлементКолонки.АвтоМаксимальнаяШирина 	= Истина;
	ЭлементКолонки.ОтображатьВШапке 		= Ложь; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеЕдиницаИзмеренияВДеревоЗначений()
	
	ЭлементРодитель = "ДеревоНоменклатуры";
	ИмяЭлемента = "ЕдиницаИзмерения";
	
	ЭлементКолонки = Элементы.Вставить(ЭлементРодитель + ИмяЭлемента, 
										Тип("ПолеФормы"), 
										Элементы.ДеревоНоменклатуры, 
										Элементы.ГруппаДанныеИБ);
										
	ЭлементКолонки.ПутьКДанным = ЭлементРодитель + "." + ИмяЭлемента;
	
	ЭлементКолонки.Вид 						= ВидПоляФормы.ПолеВвода;
	ЭлементКолонки.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКолонки.ТолькоПросмотр 	  		= Истина;
	ЭлементКолонки.АвтоВысотаЯчейки   		= Истина;
	ЭлементКолонки.АвтоМаксимальнаяШирина 	= Истина;
	ЭлементКолонки.ОтображатьВШапке 		= Ложь;
	ЭлементКолонки.Ширина					= 2; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеУпаковкаВДеревоЗначений()
	
	ЭлементРодитель = "ДеревоНоменклатуры";
	ИмяЭлемента = "Упаковка";
	
	ЭлементКолонки = Элементы.Добавить(ЭлементРодитель + ИмяЭлемента,
			Тип("ПолеФормы"),
			Элементы.ДеревоНоменклатуры);
	
	ЭлементКолонки.ПутьКДанным = ЭлементРодитель + "." + ИмяЭлемента;
	
	ЭлементКолонки.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКолонки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКолонки.ТолькоПросмотр = Истина;
	ЭлементКолонки.АвтоВысотаЯчейки = Истина;
	ЭлементКолонки.АвтоМаксимальнаяШирина = Истина;
	ЭлементКолонки.ОтображатьВШапке = Ложь;
	ЭлементКолонки.Ширина = 2;
	
	ЭлементКолонки.УстановитьДействие("НачалоВыбора", "ДеревоНоменклатурыУпаковкаНачалоВыбора");
	ЭлементКолонки.УстановитьДействие("ОбработкаВыбора", "ДеревоНоменклатурыУпаковкаОбработкаВыбора");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДополнительныеКолонкиДерева(Колонки)
	
	Если Колонки.Найти("Характеристика") = Неопределено Тогда
		Элементы.ДеревоНоменклатурыХарактеристика.Заголовок = "Номенклатура"; 
		Элементы.ДеревоНоменклатурыХарактеристика.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НоваяКолонкаУпаковка = Колонки.Найти("Упаковка");
	Если НоваяКолонкаУпаковка <> Неопределено Тогда
		Элементы.ДеревоНоменклатурыУпаковка.ТолькоПросмотр = Ложь;
		Элементы.ДеревоНоменклатурыУпаковка.ОграничениеТипа = НоваяКолонкаУпаковка.ТипЗначения;
	КонецЕсли;
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	МетаданныеСопоставления = МодульЯдро.МенеджерИнтеграции_МетаданныеСопоставленияНоменклатуры();
	
	Если МетаданныеСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(
			МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики, 
			"Элементы.ДеревоНоменклатуры.ТекущиеДанные.Номенклатура"); 
			
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		
		Элементы.ДеревоНоменклатурыХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(
			МетаданныеСопоставления.ИмяПараметраСвязиУпаковки, 
			"Элементы.ДеревоНоменклатуры.ТекущиеДанные.Номенклатура"); 
			
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		
		Элементы.ДеревоНоменклатурыУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьКолонкиДереваНоменклатуры()
	
	// Расчитываем новые колонки
	НовыеКолонки = Новый Массив; 
	
	ТаблицаСопоставления = ПолучитьИзВременногоХранилища(АдресТаблицыНоменклатурыДляСопоставления);
	
	Для Каждого КолонкаТаблицы Из ТаблицаСопоставления.Колонки Цикл
		
		ИмяКолонки = КолонкаТаблицы.Имя;
		
		ТипКолонки = КолонкаТаблицы.ТипЗначения;
		ЗаголовокКолонки = КолонкаТаблицы.Заголовок;
		
		ЭлементКолонки = КолонкаДереваСопоставления(ИмяКолонки);
		
		Если ЭлементКолонки = Неопределено Тогда
			
			НовыеКолонки.Добавить(Новый РеквизитФормы(ИмяКолонки, ТипКолонки, "ДеревоНоменклатуры", ЗаголовокКолонки));
			
		Иначе
			
			ЭлементКолонки.ОграничениеТипа = ТипКолонки;
			
			Если ЗначениеЗаполнено(ЗаголовокКолонки) Тогда
				ЭлементКолонки.Заголовок = ЗаголовокКолонки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеКолонки);
	
	Возврат НовыеКолонки;

КонецФункции

&НаСервере
Процедура УстановитьСопоставлениеНоменклатуры(ДетальнаяЗапись, НоменклатураКонтрагента)
	Если ЗначениеЗаполнено(ДетальнаяЗапись.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор",НоменклатураКонтрагента.Идентификатор);
	ПараметрыОтбора.Вставить("Владелец",НоменклатураКонтрагента.Владелец);
	
	ВариантыСопоставления = СписокВариантыСопоставления.НайтиСтроки(ПараметрыОтбора);
	
	Если ВариантыСопоставления.Количество() = 1 Тогда 
		ЗаполнитьСтрокуСопоставленияДаннымиВарианта(ВариантыСопоставления, ДетальнаяЗапись); 
	ИначеЕсли ВариантыСопоставления.Количество() > 1 Тогда 
		ДетальнаяЗапись.ПредставлениеСопоставления = ПредставлениеВариантаСопоставления(ВариантыСопоставления.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеВариантаСопоставления(КоличествоВариантов)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ПредставлениеСопоставления = Ядро.Общее_ПодставитьПараметрыВСтроку(
		"Номенклатура (%1)",
		Формат(КоличествоВариантов, "ЧН=0; ЧГ=0"));
		
	Возврат ПредставлениеСопоставления;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуСопоставленияДаннымиВарианта(ВариантыСопоставления, ДетальнаяЗапись)
	
	ЗаполнитьЗначенияСвойств(ДетальнаяЗапись, ВариантыСопоставления[0]);
	СвойстваНоменклатуры = СвойствоНоменклатурыИнформационнойБазы(ДетальнаяЗапись.Номенклатура);
	ДетальнаяЗапись.ИспользоватьХарактеристики = СвойстваНоменклатуры.ИспользоватьХарактеристики;
	ДетальнаяЗапись.ОбязательноеЗаполнениеХарактеристики = СвойстваНоменклатуры.ОбязательноеЗаполнениеХарактеристики;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыСопоставленияНоменклатуры() 
	
	СписокДокументов = ПолучитьИзВременногоХранилища(АдресСписокДокументов);
	
	ВариантыСопоставления = Модуль_ЯдроНаСервере().Номенклатура_ВариантыСопоставленияНоменклатуры(СписокДокументов);
	
	СписокВариантыСопоставления.Загрузить(ВариантыСопоставления);	
	
	Для Каждого ВариантСопоставления Из СписокВариантыСопоставления Цикл 
		СформироватьПредставлениеВарианта(ВариантСопоставления);
	КонецЦикла;   

КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВарианта(СтрокаСписка)
	
	ПредставлениеАртикула = ПолучитьПредставлениеАртикула(СтрокаСписка); 
	
	СтрокаСписка.ПредставлениеВарианта = СокрЛП(СтрокаСписка.Номенклатура) + ПредставлениеАртикула;

КонецПроцедуры 

&НаСервере
Функция ПолучитьПредставлениеАртикула(СтрокаСписка)
	
	АртикулНоменклатуры = ПолучитьАртикулНоменклатуры(СтрокаСписка);
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = "";
	
	Если ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		Результат  = Ядро.Общее_ПодставитьПараметрыВСтроку(
			" (арт. %1)",
			АртикулНоменклатуры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьАртикулНоменклатуры(СтрокаСписка)
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Артикул");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтрокаСписка.Номенклатура);
	
    Возврат ПараметрыЗаполнения.Артикул;
	
КонецФункции

&НаСервере
Процедура УстановитьАдресКартинкиНаСервере(ДанныеСтроки);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		ДанныеСтроки.КартинкаСтрокиДерева = АдресГалочка; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КолонкаДереваСопоставления(ИмяКолонки)
	
	Результат = Элементы.Найти("ДеревоНоменклатуры" + ИмяКолонки);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтключитьВидимостьСлужебныхКолонок()
	
	СлужебныеКолонки = ИменаСлужебныхКолонок();
	
	Для Каждого ИмяКолонки Из СлужебныеКолонки Цикл
		
		ЭлементФормы = КолонкаДереваСопоставления(ИмяКолонки);
		
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДействиеПриСозданииНоменклатуры()
	
	ЭтаФорма.УстановитьДействие("ОбработкаЗаписиНового", "ОбработкаЗаписиНового");
	ЭлементНоменклатура = Элементы.ДеревоНоменклатурыНоменклатура;
	ЭлементНоменклатура.УстановитьДействие("ОбработкаВыбора", "ДеревоНоменклатурыНоменклатураОбработкаВыбора");
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьИсториюВыбораПриВводеНоменклатуры()
	
	ЭлементНоменклатура = Элементы.ДеревоНоменклатурыНоменклатура;
	
	СтруктураИсторияВыбораПриВводе = Новый Структура;
	СтруктураИсторияВыбораПриВводе.Вставить("ИсторияВыбораПриВводе", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураИсторияВыбораПриВводе, ЭлементНоменклатура);
	
	Если СтруктураИсторияВыбораПриВводе.ИсторияВыбораПриВводе <> Неопределено Тогда
		ЭлементНоменклатура.ИсторияВыбораПриВводе = Вычислить("ИсторияВыбораПриВводе.НеИспользовать");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОтключитьОтображениеНоменклатурыВГруппировке();
	ОтключитьОтображениеХарактеристикиВГруппировке();
	ОтключитьОтображениеКонтрагентаВДетальныхЗаписях();
	НастройкаОтборовПоПереключателю(); 
	НастроитьПредставлениеСопоставления();
	НастроитьПредставлениеИтоговСопоставления();
	НастроитьДоступностьКолонкиХарактеристики();
	НастроитьОтметкуНеЗаполненногоКолонкиХарактеристики();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтметкуНеЗаполненногоКолонкиХарактеристики()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Истина);
	
	Отборы = НовыйЭлемент.Отбор.Элементы;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ОбязательноеЗаполнениеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыХарактеристика");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьКолонкиХарактеристики()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Доступность"	, Истина);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	Отборы = НовыйЭлемент.Отбор.Элементы;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина; 
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыХарактеристика");
	
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	Отборы = НовыйЭлемент.Отбор.Элементы;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь; 
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыХарактеристика");

КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеИтоговСопоставления()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТусклоСерый);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ПредставлениеСопоставления"));
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ложь;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ПредставлениеСопоставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");

КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСопоставления()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Истина);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", "Номенклатура");
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ПредставлениеСопоставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");
	
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Истина);
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ПредставлениеСопоставления"));
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ПредставлениеСопоставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");

КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовПоПереключателю()
	
	НастройкаОтборовПоПереключателюСопоставленные();
	НастройкаОтборовПоПереключателюНеСопоставленные();

КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовПоПереключателюСопоставленные()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь); 
	
	Отборы = НовыйЭлемент.Отбор.Элементы;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПереключательОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПереключательОтбора_НеСопоставленные(); 
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.КартинкаСтрокиДерева");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры");

КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовПоПереключателюНеСопоставленные()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Отборы = НовыйЭлемент.Отбор.Элементы;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПереключательОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПереключательОтбора_Сопоставленные(); 
	
	ОтборЭлемента = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.КартинкаСтрокиДерева");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПереключательОтбора_Все()
	Возврат 0
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПереключательОтбора_Сопоставленные()
	Возврат 1
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПереключательОтбора_НеСопоставленные()
	Возврат 2
КонецФункции

&НаСервере
Процедура ОтключитьОтображениеНоменклатурыВГруппировке()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОформляемыеПоля = НовыйЭлемент.Поля.Элементы;
	
	ПолеЭлемента = ОформляемыеПоля.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНаименование");
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьОтображениеХарактеристикиВГруппировке()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОформляемыеПоля = НовыйЭлемент.Поля.Элементы;
	
	ПолеЭлемента = ОформляемыеПоля.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыХарактеристика");
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьОтображениеКонтрагентаВДетальныхЗаписях()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = НовыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКонтрагент");

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоСопоставлению(ВсегоЗаписей, СопоставленоЗаписей, НеСопоставленоЗаписей)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Элементы.ПереключательОтбора.СписокВыбора[0].Представление = Ядро.Общее_ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все (%1)';
				|en = 'All (%1)'"), ВсегоЗаписей);
	Элементы.ПереключательОтбора.СписокВыбора[1].Представление = Ядро.Общее_ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохраненные (%1)';
				|en = 'Saved (%1)'"), СопоставленоЗаписей);
	Элементы.ПереключательОтбора.СписокВыбора[2].Представление = Ядро.Общее_ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Несохраненные (%1)';
				|en = 'Unsaved (%1)'"), НеСопоставленоЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиОК()
	
	ЗаголовокКнопки = "Сохранить";
	Если Параметры.Свойство("ЗаголовокКнопкиОК") Тогда
		ЗаголовокКнопки = Параметры.ЗаголовокКнопкиОК;
	КонецЕсли;
	
	Команды.КомандаОК.Заголовок = ЗаголовокКнопки;
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаОК(Команда)
	
	СопоставитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьИЗакрыть()
	
	СопоставлениеВыполнено = ВыполнитьСопоставлениеНоменклатуры();
	ЕстьНеСопоставленныеПозиции = ЕстьНеСопоставленныеПозиции();
	
	Если ЕстьНеСопоставленныеПозиции Тогда
		ПоказатьВопросНеВсеПозицииСопоставлены()
	ИначеЕсли СопоставлениеВыполнено Тогда
		Модифицированность = Ложь;
		Закрыть(Истина);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьВопросНеВсеПозицииСопоставлены()
	
	ТекстВопроса	= "Сопоставлены не все позиции номенклатуры. Закрыть форму сопоставления?";
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ЗакрытиеФормыСопоставленияПослеСохраненияЗавершение", ЭтаФорма);
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыСопоставленияПослеСохраненияЗавершение(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	Модифицированность = Ложь;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНеСопоставленныеПозиции()
	
	Результат = Ложь;
	
	ЭлементыДереваСопоставления = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого УровеньКонтрагент Из ЭлементыДереваСопоставления Цикл
		ЭлементыДетальныхЗаписей = УровеньКонтрагент.ПолучитьЭлементы();
		Для Каждого УровеньДетальнаяЗапись Из ЭлементыДетальныхЗаписей Цикл
			Если Не ЗначениеЗаполнено(УровеньДетальнаяЗапись.Номенклатура) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьСопоставлениеНоменклатуры()
	
	Метрики_ЗаписатьНажатие_Сопоставить();
	
	СопоставлениеВыполнено = СопоставитьНоменклатуруПоставщикаНаСервере();
	
	Возврат СопоставлениеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗакрытьБезСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезСопоставления()
	
	Метрики_ЗаписатьНажатие_Отменить();
	
	Закрыть(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина; // В дереве номенклатуры можно только удалять строки.
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)

	// Заполнение всех выделенных строк текущим значением номенклатуры.
	ТекущаяСтрока = Элементы.ДеревоНоменклатуры.ТекущаяСтрока;
	ТекущаяНоменклатура = Элементы.ДеревоНоменклатуры.ТекущиеДанные.Номенклатура;
	ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Для каждого ИдентификаторСтроки Из Элементы.ДеревоНоменклатуры.ВыделенныеСтроки Цикл
		
		Если ИдентификаторСтроки <> ТекущаяСтрока Тогда
			
			Строка = ДеревоНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если Строка.ДетальнаяЗапись И Строка.Номенклатура <> ТекущаяНоменклатура Тогда
				Строка.Номенклатура = ТекущаяНоменклатура; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьСтрокуДереваДаннымиОНоменклатуре(ТекущиеДанные);
	
	Если НЕ ТекущиеДанные.ИспользоватьХарактеристики Тогда
		ТекущиеДанные.Характеристика = Неопределено;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтрокуДереваДаннымиОНоменклатуре(ТекущиеДанные)
	
	СвойстваНоменклатуры = СвойствоНоменклатурыИнформационнойБазы(ТекущиеДанные.Номенклатура);
	ТекущиеДанные.ИспользоватьХарактеристики = СвойстваНоменклатуры.ИспользоватьХарактеристики;
	ТекущиеДанные.ОбязательноеЗаполнениеХарактеристики = СвойстваНоменклатуры.ОбязательноеЗаполнениеХарактеристики;

КонецПроцедуры

&НаСервере
Функция ТаблицаСопоставленияНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	
	// Создаем колонки ТаблицаНоменклатуры
	ДеревоНоменклатурыКолонки = ПолучитьРеквизиты("ДеревоНоменклатуры");
	Для Каждого КолонкаДерева Из ДеревоНоменклатурыКолонки Цикл
		Результат.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения);
	КонецЦикла;
	Результат.Колонки.Удалить("ДетальнаяЗапись"); // Удаляем служебную колонку.
	
	// Заполняем ТаблицаНоменклатуры данными ДеревоНоменклатуры
	ВеткиДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для каждого ВеткаДерева Из ВеткиДерева Цикл
		
		ДетальныеЗаписи = ВеткаДерева.ПолучитьЭлементы();
		Для каждого ДетальнаяЗапись Из ДетальныеЗаписи Цикл
			
			Если ЗначениеЗаполнено(ДетальнаяЗапись.Номенклатура) Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяЗапись);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СопоставитьНоменклатуруПоставщикаНаСервере()
	
	ТаблицаСопоставления = ТаблицаСопоставленияНоменклатуры();
	
	Ядро = Модуль_ЯдроНаСервере();
	ЗаписьВыполнена = Ядро.Интеграция_ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления);
	
	Возврат ЗаписьВыполнена;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элементы.ДеревоНоменклатуры.ТекущийЭлемент;
	
	ТипыКолонки = ТекущаяКолонка.ОграничениеТипа.Типы();
	Если ТипыКолонки.Количество() = 1 Тогда
		ТипЗначенияКолонки	 = ТипыКолонки[0];
		ИмяФормыВыбора		 = ИмяФормыВыбора(ТипЗначенияКолонки);
	КонецЕсли;
	
	Если ИмяФормыВыбора <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораНоменклатуры(Элемент, ИмяФормыВыбора, ТекущаяКолонка);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоНоменклатурыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыУпаковкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияСпискаВыбораНоменклатуры()  
	
	ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	ЭлементНоменклатура = Элементы.ДеревоНоменклатурыНоменклатура;
	СписокВыбора = ЭлементНоменклатура.СписокВыбора;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Идентификатор",ТекущиеДанные.НоменклатураКонтрагента.Идентификатор);
	ПараметрыОтбораСтрок.Вставить("Владелец",ТекущиеДанные.НоменклатураКонтрагента.Владелец);
	
	СтрокиВариантов = СписокВариантыСопоставления.НайтиСтроки(ПараметрыОтбораСтрок); 
	
	СписокВыбора.Очистить();
	ПредставлениеКоманды = ПредставлениеКомандыСоздатьНоменклатуру();
	ИдентификаторКоманды = ИдентификаторКомандыСоздатьНоменклатуру();
	СписокВыбора.Добавить(ИдентификаторКоманды, ПредставлениеКоманды, , БиблиотекаКартинок.СоздатьЭлементСписка);
	
	Для Каждого Строка Из СтрокиВариантов Цикл
		
		ИндексСтроки = СписокВариантыСопоставления.Индекс(Строка);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеСопоставления) Тогда
			СписокВыбора.Добавить(ИндексСтроки, Строка.ПредставлениеВарианта, , БиблиотекаКартинок.Справочник);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуВыбораНоменклатуры(Элемент, ИмяФормыВыбора, ТекущаяКолонка)
	
	СтрокаДанных = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	ДанныеСопоставления = Новый Структура;
	
	Для Каждого Колонка Из КолонкиДерева Цикл
		ДанныеСопоставления.Вставить(Колонка.Ключ, СтрокаДанных[Колонка.Ключ]);
	КонецЦикла;
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ДанныеСопоставления", ДанныеСопоставления);
	ПараметрыПМ.Вставить("ИмяКолонки", 			ТекущаяКолонка.Имя);
	
	Отбор = ОбработатьСобытиеПМ_ОтборСопоставленияНоменклатуры(ПараметрыПМ);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора",		Истина);
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", 		СтрокаДанных.Номенклатура);
	ПараметрыФормыВыбора.Вставить("Номенклатура", 		СтрокаДанных.Номенклатура);
	ПараметрыФормыВыбора.Вставить("Отбор",				Отбор);
	
	ОсновнаяФорма().смв().смв_ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьСобытиеПМ_ОтборСопоставленияНоменклатуры(ПараметрыПМ)
	
	Результат = Неопределено;
	
	Результат = ПодключаемыйМодуль_ОтборСопоставленияНоменклатуры(ПараметрыПМ);
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПодключаемыйМодуль_ОтборСопоставленияНоменклатуры(ПараметрыПМ)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ИмяСобытия = "ОтборСопоставленияНоменклатуры";
	
	Результат = Ядро.ПодключаемыйМодуль_ОбработатьСобытиеНаСервере(
		ИмяСобытия,
		ПараметрыПМ
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыВыбора(ТипЗначения)
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	ОбъектМетаданныхИмя = ОбъектМетаданных.Имя;
	ЭтоСправочник	 	= Метаданные.Справочники.Найти(ОбъектМетаданныхИмя) <> Неопределено;
	ЭтоДокумент 		= Метаданные.Документы.Найти(ОбъектМетаданныхИмя) <> Неопределено;
	
	Если ЭтоСправочник Тогда
		Если ОбъектМетаданныхИмя = "УпаковкиЕдиницыИзмерения" Тогда 
			ИмяФормыВыбора = ОбъектМетаданныхИмя + "." + "ФормаВыбора";
		Иначе	
			ИмяФормыВыбора = ОбъектМетаданныхИмя + "." + "Форма" + "." + ОбъектМетаданных.ОсновнаяФормаДляВыбора.Имя;
		КонецЕсли;
		Результат = "Справочник." + ИмяФормыВыбора;
	ИначеЕсли ЭтоДокумент Тогда
		ИмяФормыВыбора = ОбъектМетаданныхИмя + "." + ОбъектМетаданных.ОсновнаяФормаДляВыбора.Имя;
		Результат = "Документ." + ИмяФормыВыбора;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКомандыСоздатьНоменклатуру()
	Возврат "Создать номенклатуру по данным контрагента";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторКомандыСоздатьНоменклатуру()
	Возврат "СоздатьНоменклатуруПоДаннымКонтрагента";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОписаниеТипаСтрока(ОписаниеТипа)
	
	Результат = Ложь;
	
	ИспользуемыеТипы = ОписаниеТипа.Типы();
	Если ИспользуемыеТипы.Количество() = 1
		И ИспользуемыеТипы[0] = Тип("Строка") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	СозданиеНоменклатурыИнформационнойБазыНачало(Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура СозданиеНоменклатурыИнформационнойБазыНачало(Элемент)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Элемент.ОграничениеТипа.Типы());
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("СозданиеНоменклатурыИнформационнойБазыПослеВыбораТипа", ЭтаФорма);
	
	Если СписокВыбора.Количество() = 1 Тогда
		
		ТипЗначенияЭлемента = СписокВыбора[0];
		ОсновнаяФорма().ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, ТипЗначенияЭлемента);
		
	Иначе
		
		ОсновнаяФорма().ПоказатьВыборЭлемента(СписокВыбора, ОписаниеОповещения, "Выбор типа данных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНоменклатурыИнформационнойБазы(ТипЗначенияЭлемента)
	
	ТекущиеДанные	 = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	ИмяОсновнойФормы = ИмяОсновнойФормыОбъекта(ТипЗначенияЭлемента);
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ИмяОсновнойФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = СозданиеНоменклатурыДанныеЗаполнения(ТекущиеДанные);
	
	Модуль_СМВ = ОсновнаяФорма().смв();
	Модуль_СМВ.смв_ОткрытьФорму(ИмяОсновнойФормы, ДанныеЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СозданиеНоменклатурыДанныеЗаполнения(ТекущиеДанные)

	НоменклатураКонтрагента = ТекущиеДанные.НоменклатураКонтрагента;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента) 
		И ЗначениеЗаполнено(НоменклатураКонтрагента.Наименование) Тогда
		ДанныеЗаполнения = ДанныеЗаполненияНоменклатурыИБ(НоменклатураКонтрагента);
	Иначе
		ДанныеЗаполнения = ДанныеЗаполненияНоменклатурыИБ(ТекущиеДанные);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура СозданиеНоменклатурыИнформационнойБазыПослеВыбораТипа(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ОткрытьФормуСозданияНоменклатурыИнформационнойБазы(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекДанные.Номенклатура = НовыйОбъект;
	Элементы.ДеревоНоменклатуры.ЗакончитьРедактированиеСтроки(Ложь);
	
	ДополнитьСтрокуДереваДаннымиОНоменклатуре(ТекДанные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	Если ВыбранноеЗначение = ИдентификаторКомандыСоздатьНоменклатуру() Тогда
		
		СтандартнаяОбработка = Ложь; 
		
		СозданиеНоменклатурыИнформационнойБазыНачало(Элемент);
		
	ИначеЕсли ВыбранИндексСтрокиСопоставления(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
		СтрокаВыбораАвтосопоставления = СписокВариантыСопоставления[ВыбранноеЗначение];
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаВыбораАвтосопоставления, "Номенклатура");
		
		ДополнитьСтрокуДереваДаннымиОНоменклатуре(ТекущиеДанные);
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры 

&НаСервере
Функция СвойствоНоменклатурыИнформационнойБазы(Номенклатура)
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьХарактеристики", Ложь);
	Результат.Вставить("ОбязательноеЗаполнениеХарактеристики", Ложь); 
	
	Ядро = Модуль_ЯдроНаСервере();
	СвойстваЭлементаНоменклатуры = Ядро.МенеджерИнтеграции_СвойстваНоменклатурыИнформационнойБазы(Номенклатура);
	Если НЕ ЗначениеЗаполнено(СвойстваЭлементаНоменклатуры) Тогда
		Возврат Результат;	
	КонецЕсли;
	
	СвойстваНоменклатуры = СвойстваЭлементаНоменклатуры.Получить(Номенклатура);
	Если НЕ ЗначениеЗаполнено(СвойстваНоменклатуры) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СвойстваНоменклатуры); 
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция ВыбранИндексСтрокиСопоставления(ВыбранноеЗначение)
	
	Возврат ТипЗнч(ВыбранноеЗначение) = Тип("Число");
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ОбновитьЗначенияСпискаВыбораНоменклатуры();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстФормы(ЭтотОбъект, Элемент = Неопределено)
	
	Если Элемент = ЭтотОбъект.Элементы.ДеревоНоменклатурыХарактеристика Тогда
		СтандартныйЭлемент = "Характеристика";
	ИначеЕсли Элемент = ЭтотОбъект.Элементы.ДеревоНоменклатурыУпаковка Тогда
		СтандартныйЭлемент = "Упаковка";
	Иначе
		СтандартныйЭлемент = Неопределено;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Назначение", "СопоставлениеНоменклатуры");
	Контекст.Вставить("СтандартныйЭлемент", СтандартныйЭлемент);
	
	Возврат Новый ФиксированнаяСтруктура(Контекст);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтаФорма, Элемент);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.СобытияФорм_ЭлементФормыНачалоВыбора(
		Контекст,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтаФорма, Элемент);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.СобытияФорм_ЭлементФормыОбработкаВыбора(
		Контекст,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОсновнойФормыОбъекта(ТипЗначения)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	ЭтоСправочник = Метаданные.Справочники.Найти(ОбъектМетаданных.Имя) <> Неопределено;
	ЭтоДокумент = Метаданные.Документы.Найти(ОбъектМетаданных.Имя) <> Неопределено;
	
	Если ЭтоСправочник Тогда
		ИмяФормыВыбора = ОбъектМетаданных.Имя + "." + "Форма" + "." + ОбъектМетаданных.ОсновнаяФормаОбъекта.Имя;
		Результат = "Справочник." + ИмяФормыВыбора;
	ИначеЕсли ЭтоДокумент Тогда
		ИмяФормыВыбора = ОбъектМетаданных.Имя + "." + ОбъектМетаданных.ОсновнаяФормаОбъекта.Имя;
		Результат = "Документ." + ИмяФормыВыбора;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеЗаполненияНоменклатурыИБ(НоменклатураКонтрагента)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	АртикулНоменклатуры = НоменклатураКонтрагента.Артикул;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
		НаименованиеНоменклатуры = Ядро.Общее_ПодставитьПараметрыВСтроку("%1 (%2)"
				, НоменклатураКонтрагента.Наименование
				, НоменклатураКонтрагента.Характеристика);
	Иначе
		НаименованиеНоменклатуры = НоменклатураКонтрагента.Наименование;
	КонецЕсли;
	
	НоменклатураКонтрагентаБЭД = НовыйНоменклатураКонтрагентаБЭД();
	
	ЗаполнитьЗначенияСвойств(НоменклатураКонтрагентаБЭД, НоменклатураКонтрагента);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Артикул", АртикулНоменклатуры);
	ДанныеЗаполнения.Вставить("Наименование", НаименованиеНоменклатуры);
	ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеНоменклатуры);
	ДанныеЗаполнения.Вставить("НоменклатурныйНомер", АртикулНоменклатуры); // БГУ
	ДанныеЗаполнения.Вставить("НаименованиеНоменклатурыПоставщика", НоменклатураКонтрагентаБЭД.Наименование);
	ДанныеЗаполнения.Вставить("НаименованиеНоменклатурыПартнера", НоменклатураКонтрагентаБЭД.Наименование);
	ДанныеЗаполнения.Вставить("АртикулНоменклатурыПоставщика", НоменклатураКонтрагентаБЭД.Артикул);
	ДанныеЗаполнения.Вставить("АртикулНоменклатурыПартнера", НоменклатураКонтрагентаБЭД.Артикул);
	ДанныеЗаполнения.Вставить("ДополнительныеПараметры", Новый Структура);
	
	ДанныеЗаполнения.ДополнительныеПараметры.Вставить("СопоставлениеНоменклатурыКонтрагентов", Новый Структура);
	ДанныеЗаполнения.ДополнительныеПараметры.СопоставлениеНоменклатурыКонтрагентов.Вставить(
		"НоменклатураКонтрагента", 
		НоменклатураКонтрагентаБЭД);
	
	ДанныеЗаполнения.ДополнительныеПараметры.Вставить("ОбменСКонтрагентами", Новый Структура);
	ДанныеЗаполнения.ДополнительныеПараметры.ОбменСКонтрагентами.Вставить(
		"НоменклатураКонтрагента",
		НоменклатураКонтрагентаБЭД);
	
	Если ЭтоАА6 Тогда
		
		НоменклатураКонтрагентаАА6 = НовыйНоменклатураКонтрагентаАА6();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагентаАА6, НоменклатураКонтрагента);
		
		ДанныеЗаполнения.Вставить("ЗначенияЗаполнения", НоменклатураКонтрагентаАА6);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйНоменклатураКонтрагентаБЭД()
	
	Результат = Новый Структура;
	Результат.Вставить("Владелец", "");
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Код");
	Результат.Вставить("КодНоменклатуры");
	Результат.Вставить("Артикул");
	Результат.Вставить("Сорт");
	Результат.Вставить("Наименование");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Описание");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("ЕдиницаИзмеренияКод");
	Результат.Вставить("Штрихкод", "");
	Результат.Вставить("ШтрихкодыНоменклатуры", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйНоменклатураКонтрагентаАА6()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Артикул");
	Результат.Вставить("Наименование");
	Результат.Вставить("Источник", "ЭДО");
	
	Возврат Результат;
	
КонецФункции

// Сравнивает текущую версию приложения с указанной версией.
// 
// Параметры:
//  Версия - Строка - номер версии, с которой нужно сравнить текущую версию приложения.
//
// Возвращаемое значение:
//   Булево - Истина, если текущая версия приложения старше чем версия параметра.
//            Например, 8.2 старше чем 8.3.
//
&НаКлиенте
Функция ПриложениеСтаршеВерсии(Версия)
	
	Результат = (СравнитьВерсии(ОписаниеСистемнойИнформации().ВерсияПриложения, Версия) < 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает системную информацию
// 
// Возвращаемое значение:
//  СистемнаяИнформация
//
&НаКлиенте
Функция ОписаниеСистемнойИнформации()
	
	Результат = Новый СистемнаяИнформация;
	
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий. Версии типа "1.0.1b" сравнивать нельзя.
//
// Параметры
//  СтрокаВерсии1 - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2 - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаКлиенте
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Результат = 0;
	
	Пока НЕ ПустаяСтрока(СтрокаВерсии1) ИЛИ НЕ ПустаяСтрока(СтрокаВерсии2) Цикл
		
		Поз = Найти(СтрокаВерсии1, ".");
		Если Поз > 0 Тогда
			НомерПервойВерсии = Число(Лев(СтрокаВерсии1, Поз - 1));
			СтрокаВерсии1 = Сред(СтрокаВерсии1, Поз + 1);
		Иначе
			НомерПервойВерсии = ?(ПустаяСтрока(СтрокаВерсии1), 0, Число(СтрокаВерсии1));
			СтрокаВерсии1 = "";
		КонецЕсли;
		
		Поз = Найти(СтрокаВерсии2, ".");
		Если Поз > 0 Тогда
			НомерВторойВерсии = Число(Лев(СтрокаВерсии2, Поз - 1));
			СтрокаВерсии2 = Сред(СтрокаВерсии2, Поз + 1);
		Иначе
			НомерВторойВерсии = ?(ПустаяСтрока(СтрокаВерсии2), 0, Число(СтрокаВерсии2));
			СтрокаВерсии2 = "";
		КонецЕсли;
		
		Результат = НомерПервойВерсии - НомерВторойВерсии;
		
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

//{ Метрики

&НаКлиенте
Процедура Метрики_ЗафиксироватьОткрытиеФормыСопоставленияНоменклатуры();
	
	НазваниеФормы 			= Метрики_НазваниеФормы();
	НазваниеКатегории 		= Метрики_КатегорияАвтопоискНоменклатуры();
	ЭтоОткрытиеФормы		= Истина;
	НазваниеМетки 			= "";
	ПредставлениеМетрики	= "Сопоставление номенклатуры";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, НазваниеКатегории, ЭтоОткрытиеФормы, НазваниеМетки, ПредставлениеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьПоведение_ПереключениеФильтраСопоставленных()
	
	НазваниеФормы		= Метрики_НазваниеФормы();
	КатегорияМетрики	= Метрики_КатегорияСопоставлениеНоменклатуры();
	ДействиеМетрики		= Метрики_ПредставлениеПереключателяОтбора();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьСтатистику_ПереключениеФильтраСопоставленных()
	
	МеткаМетрики = "";
	ПредставлениеПереключателя = Метрики_ПредставлениеПереключателяОтбора();
	
	КатегорияМетрики	= Метрики_КатегорияСопоставлениеНоменклатуры();
	ДействиеМетрики		= ПредставлениеПереключателя;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Фильтр", ПредставлениеПереключателя);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные
		);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьПоведение_НажатиеПодробнее()
	
	НазваниеФормы		= Метрики_НазваниеФормы();
	КатегорияМетрики	= Метрики_КатегорияСопоставлениеНоменклатуры();
	ДействиеМетрики		= Метрики_ДействиеНажатиеПодробнее();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьСтатистику_НажатиеПодробнее()
	
	МеткаМетрики = "";
	КатегорияМетрики	= Метрики_КатегорияСопоставлениеНоменклатуры();
	ДействиеМетрики		= Метрики_ДействиеНажатиеПодробнее();
	Переменные = Новый Соответствие;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные
		);
		
КонецПроцедуры

// Записывает поведение и статистику о нажатии кнопки "Сопоставить".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_Сопоставить()
	
	Действие = Метрики_ДействиеСопоставить();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоКонтексту(Действие);
	
КонецПроцедуры

// Записывает поведение и статистику о нажатии кнопки "Отменить".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_Отменить()
	
	Действие = Метрики_ДействиеОтменить();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоКонтексту(Действие);
	
КонецПроцедуры

// Добавляет запись в топик "Статистика" (DD_Statistics) по всем организациям (контекста).
//
// Параметры:
//  ДействиеМетрики - Строка - значение "Path_Action".
//
&НаКлиенте
Процедура Метрики_ДобавитьСтатистикуПоКонтексту(ДействиеМетрики)
	
	КатегорияМетрики 	= Метрики_КатегорияСопоставлениеНоменклатуры();
	МеткаМетрики 		= "";
	Переменные 			= Новый Соответствие;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные
		);
	
КонецПроцедуры

// Добавляет запись в топик "Поведение" (DD_Behavior).
//
// Параметры:
//  ДействиеМетрики - Строка - значение "Path_Action".
//
&НаКлиенте
Процедура Метрики_НажатиеКнопки(ДействиеМетрики)
	
	НазваниеФормы = Метрики_НазваниеФормы();
	КатегорияМетрики = Метрики_КатегорияСопоставлениеНоменклатуры();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Функция Метрики_НазваниеФормы()
	Возврат "Сопоставление номенклатуры";
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеСопоставить()
	Возврат "Сопоставить";
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеОтменить()
	Возврат "Отменить";
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеОткрытьФорму()
	Возврат "Открыть форму";
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеНажатиеПодробнее()
	Возврат "Подробнее";
КонецФункции

&НаКлиенте
Функция Метрики_КатегорияСопоставлениеНоменклатуры()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Категории = Ядро.Метрика_НазваниеКатегории();
	Результат = Категории.СопоставлениеНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрики_КатегорияАвтопоискНоменклатуры()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Категории = Ядро.Метрика_НазваниеКатегории();
	Результат = Категории.АвтопоискНоменклатуры;
			
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция Метрики_ПредставлениеПереключателяОтбора()
	
	Результат = Неопределено;

	Если ПереключательОтбора = ПереключательОтбора_Все() Тогда
		Результат = "Все";
	ИначеЕсли ПереключательОтбора = ПереключательОтбора_Сопоставленные() Тогда
		Результат = "Сохраненные";
	ИначеЕсли ПереключательОтбора = ПереключательОтбора_НеСопоставленные() Тогда
		Результат = "Несохраненные";
	Иначе
		Результат = "Переключатель не определен";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура Метрики_ДобавитьСтастику_ЗаполнитьДеревоНоменклатуры(АвтоматическиНайденоЗаписей, НеСопоставленоЗаписей)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Категории = Модуль_Ядро.Метрика_НазваниеКатегории();
	КатегорияМетрики = Категории.АвтопоискНоменклатуры;
	
	ДействиеМетрики = "Обновление дерева номенклатуры";
		
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Количество несохраненных строк"		, Строка(НеСопоставленоЗаписей));
	ДопПеременные.Вставить("Количество найденной номенклатуры"	, Строка(АвтоматическиНайденоЗаписей));
		
	Модуль_Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, , ДопПеременные);
	
КонецПроцедуры

//} Метрики
