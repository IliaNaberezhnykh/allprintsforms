
&НаКлиенте
Перем ОбщийКэш;

&НаКлиенте
Перем КонтекстСеансаКлиентСервер;

&НаКлиенте
Перем ЯщикиНеТребующиеОплаты;

&НаКлиенте
Перем КлючТекущейСтроки;


// {	СЕРВИСНЫЕ МЕТОДЫ

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Возврат ЭтаФорма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущейФормы()
	
	Возврат "Форма";
	
КонецФункции

&НаКлиенте
Функция ИдентификаторОсновнойФормы() Экспорт
	
	Результат = ЭтаФорма.УникальныйИдентификатор;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	АдресОбработки = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ОбщийКонтекстКлиентСервер) Тогда
		Объект.ОбщийКонтекстКлиентСервер.Свойство("АдресОбработкаОбъект", АдресОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОбработки) Тогда
		Результат = ХранилищеОбработки_Прочитать(АдресОбработки);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Результат = РеквизитФормыВЗначение("Объект");
		
		Если ЗначениеЗаполнено(АдресОбработки) Тогда
			ХранилищеОбработки_Поместить(Результат, АдресОбработки)
		КонецЕсли;
		
	Иначе
		
		Результат.ОбщийКонтекстКлиентСервер = Объект.ОбщийКонтекстКлиентСервер;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помещает во временное хранилище объект обработки
//
// Параметры:
//  Обработка      - ОбработкаОбъект - объект обработки;
//  АдресОбработки - Строка          - адрес во временном хранилище;
//
&НаСервере
Процедура ХранилищеОбработки_Поместить(Обработка, АдресОбработки)
	
	СтруктураОбработки = Новый Структура("ОбработкаОбъект", Обработка);
	
	ПоместитьВоВременноеХранилище(СтруктураОбработки, АдресОбработки);
	
КонецПроцедуры

// Возвращает объект обработки из временного хранилища
//
// Параметры:
//  АдресОбработки - Строка - адрес обработки во временном хранилище
// 
// Возвращаемое значение:
//  ОбработкаОбъект - если обект обработки все еще загружен в память
//  Неопределено    - если объект обработки уже уничтожен
//
&НаСервере
Функция ХранилищеОбработки_Прочитать(АдресОбработки)
	
	Результат = Неопределено;
	
	СтруктураОбработки = ПолучитьИзВременногоХранилища(АдресОбработки);
	
	Если ЗначениеЗаполнено(СтруктураОбработки) Тогда
		СтруктураОбработки.Свойство("ОбработкаОбъект", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ВозвращатьРезультат, 
								ИмяМетода, 
								Параметр0 = Неопределено, 
								Параметр1 = Неопределено,
								Параметр2 = Неопределено, 
								Параметр3 = Неопределено, 
								Параметр4 = Неопределено) Экспорт
								
	Возврат Модуль_Платформа().МетодСервераБезКонтекста(ВозвращатьРезультат,
														ИмяМетода,
														Параметр0,
														Параметр1,
														Параметр2,
														Параметр3,
														Параметр4
	);
	
	
КонецФункции

// Возвращает объект обработки ядра
// 
// Возвращаемое значение:
//  ОбработкаОбъект
//
&НаСервере
Функция Модуль_ЯдроНаСервере() Экспорт
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

// Возвращает форму клиентских вызовов обработки ядра
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция Модуль_ЯдроНаКлиенте() Экспорт
	
	Результат = Кэш_Прочитать("МодульЯдроНаКлиенте");
	
	Если Результат <> Неопределено
		И Результат.НеобходимоПереподключитьЯдро() Тогда
		
		// Подключение новой обработки ядра
		МетодСервераБезКонтекста(Ложь, "Модуль_Ядро");
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		УстановитьКонтекстВызываемойФормы(Результат);
		Возврат Результат;
	КонецЕсли;
	
	ПолноеИмяФормы = ПолноеИмяФормыБиблиотеки("КонтурДиадокЯдро");
	// BSLLS:GetFormMethod-off
	Попытка
		
		Результат = ПолучитьФорму(ПолноеИмяФормы, , ЭтаФорма);
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		// Необходимо подключить обработку ядра
		// и получить форму снова
		
		МетодСервераБезКонтекста(Ложь, "Модуль_Ядро");
		Результат = ПолучитьФорму(ПолноеИмяФормы, , ЭтаФорма);
		
	КонецПопытки;
	// BSLLS:GetFormMethod-on
	ПодключенныеОбработки = МетодСервераБезКонтекста(
			Истина,
			"Модуль_Ядро().ОбщийКонтекст_Прочитать",
			"ПодключенныеОбработки");
	
	Объект.ОбщийКонтекстКлиентСервер["ПодключенныеОбработки"] = ПодключенныеОбработки;
	
	Результат.Инициализировать(ЭтаФорма, Объект.ОбщийКонтекстКлиентСервер);
	Кэш_Поместить("МодульЯдроНаКлиенте", Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолноеИмяФормыБиблиотеки(ИмяМодуля, ИмяФормыБиблиотеки = "КлиентскиеВызовы")
	
	ПодключенныеОбработки = Объект.ОбщийКонтекстКлиентСервер["ПодключенныеОбработки"];
	ОписаниеОбработки = ПодключенныеОбработки[ИмяМодуля];
	
	Результат = "Обработка." + ОписаниеОбработки.Имя + ".Форма." + ИмяФормыБиблиотеки;
	
	Если ОписаниеОбработки.ИсточникБиблиотеки <> "Конфигурация" Тогда
		ПрефиксДляВнешнейОбработки = "Внешняя";
		Результат = ПрефиксДляВнешнейОбработки + Результат;
	КонецЕсли;
    
	Возврат Результат;
	
КонецФункции

// Синхронизирует контекст вызываемой формы с контекстом текущей формы.
//
// Параметры:
//  ВызываемаяФорма - ФормаКлиентскогоПриложения - форма корневой обработки или ядра.
//
&НаКлиенте
Процедура УстановитьКонтекстВызываемойФормы(ВызываемаяФорма)
	
	ВызываемаяФорма.Объект.ОбщийКонтекстКлиентСервер = Объект.ОбщийКонтекстКлиентСервер;
	
КонецПроцедуры

// Возвращает форму для вызова сервера без контекста вызывающей формы
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция Модуль_Платформа() Экспорт
	
	Результат = Кэш_Прочитать("МодульПлатформа");
	
	Если Результат <> Неопределено Тогда
		УстановитьКонтекстВызываемойФормы(Результат);
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПолучитьФормуОбработки("Модуль_ПлатформаУправляемая", ЭтаФорма);
	
	Кэш_Поместить("МодульПлатформа", Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает модуль синхронных/модальных вызовов
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция смв() Экспорт
	
	Результат = Кэш_Прочитать("МодульСинхронныхВызовов");
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПолучитьФорму(ПутьКФормам + "Модуль_СинхронныеМодальныеВызовы", , ЭтаФорма);
	
	Кэш_Поместить("МодульСинхронныхВызовов", Результат);
	
	Возврат Результат;
	
КонецФункции

// }	СЕРВИСНЫЕ МЕТОДЫ


// {	КЭШИРОВАНИЕ

// Возвращает значение из общего кэша
//
// Параметры:
//  Ключ - Строка - см. процедуру Кэш_Поместить
//
// Возвращаемое значение: 
//   Произвольный
//
&НаКлиенте
Функция Кэш_Прочитать(Ключ) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОбщийКэш) Тогда
		Результат = ОбщийКэш.Получить(Ключ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помещает значение в общий для кэш
//
// Параметры:
//  Ключ     - Строка       - уникальный ключ помещаемого значения;
//  Значение - Произвольный - помещаемое значение;
//
&НаКлиенте
Процедура Кэш_Поместить(Ключ, Значение) Экспорт
	
	Если ОбщийКэш = Неопределено Тогда
		ОбщийКэш = Новый Соответствие;
	КонецЕсли;
	
	ОбщийКэш.Вставить(Ключ, Значение);
	
КонецПроцедуры

// Очищает все вложенные в общий кэш коллекции
// с помощью метода Очистить()
//
&НаКлиенте
Процедура ОчиститьКэшНаКлиенте()
	
	Если Не ЗначениеЗаполнено(ОбщийКэш) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыКоллекций = Новый Соответствие;
	ТипыКоллекций.Вставить(Тип("Массив")		, Истина);
	ТипыКоллекций.Вставить(Тип("Структура")		, Истина);
	ТипыКоллекций.Вставить(Тип("Соответствие")	, Истина);
	ТипыКоллекций.Вставить(Тип("СписокЗначений"), Истина);
	
	Для Каждого КлючИЗначение Из ОбщийКэш Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		
		Если ТипыКоллекций[ТипЗначения] = Истина Тогда
			КлючИЗначение.Значение.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщийКэш.Очистить();
	
КонецПроцедуры

// }	КЭШИРОВАНИЕ


// {	МЕТОДЫ ИНТЕРАКТИВНОЙ РАБОТЫ

&НаКлиенте
Процедура мОткрытьФорму(мИмяФормы,
						СтруктураДополнительныхПараметры = Неопределено,
						ОписаниеОповещенияОЗакрытии = Неопределено,
						Владелец = Неопределено,
						КлючФормы = Неопределено) Экспорт
	
	// Не блокирующее открытие
	ПараметрыФормы = Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	Если СтруктураДополнительныхПараметры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураДополнительныхПараметры Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПараметрыФормы.Свойство("Объект") Тогда
		ПараметрыФормы.Вставить("Объект", Объект);
	КонецЕсли;
	
	Если Владелец = Неопределено Тогда
		Владелец = ЭтаФорма;
	КонецЕсли;
	
    смв().смв_ОткрытьФорму(ПутьКФормам + мИмяФормы, ПараметрыФормы, Владелец, КлючФормы, , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДиадокМодально(мИмяФормы,
									мВладелецФормы,
									ПараметрыФормы = Неопределено,
									ОписаниеОповещения = Неопределено,
									РежимБлокирования = Неопределено) Экспорт

    // Обертка. Открывает форму текущей обработки в модальном/блокирующем режиме и выполняет ОписаниеОповещения в конце.

    Если РежимБлокирования = Неопределено Тогда
        РежимБлокирования = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
    КонецЕсли;

    // Добавим стандартные параметры: Объект и ЗакрыватьПриЗакрытииВладельца
    Если ПараметрыФормы = Неопределено Тогда
        ПараметрыФормы = Новый Структура;
    КонецЕсли;

    ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
    ПараметрыФормы.Вставить("Объект",                       Объект);

    смв().смв_ОткрытьФорму(ПутьКФормам + мИмяФормы, ПараметрыФормы, мВладелецФормы, , , , ОписаниеОповещения, РежимБлокирования);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы,
								парамВладелецФормы = Неопределено,
								ПараметрыФормы = Неопределено,
								КлючУникальности = Неопределено,
								ЗакрыватьПриЗакрытииВладельца = Ложь) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыФормы.Свойство("Объект") Тогда
		ПараметрыФормы.Вставить("Объект",	Объект);
	КонецЕсли;
	
	Если парамВладелецФормы = Неопределено Тогда
		парамВладелецФормы = ЭтаФорма;
	КонецЕсли;
	
	Если ЗакрыватьПриЗакрытииВладельца Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", ЗакрыватьПриЗакрытииВладельца);
	КонецЕсли;
	
	Результат = ПолучитьФорму(ПутьКФормам + ИмяФормы, ПараметрыФормы, парамВладелецФормы, КлючУникальности);
	
	УстановитьКонтекстВызываемойФормы(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыйОписаниеОповещения(ИмяПроцедуры,
								Модуль,
								ДополнительныеПараметры = Неопределено,
								ИмяПроцедурыОбработкиОшибки = "",
								МодульОбработкиОшибки = Неопределено) Экспорт
	
	Возврат смв().смв_НовыйОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеПереопределенная(ОписаниеОповещения = Неопределено,
												Текст = Неопределено,
												Таймаут = 0,
												Заголовок = "") Экспорт
												
	смв().смв_ПоказатьПредупреждение(ОписаниеОповещения, Текст, Таймаут, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПереопределенная(ОписаниеОповещенияОЗавершении,
										ТекстВопроса,
										Кнопки,
										Таймаут = 0,
										КнопкаПоУмолчанию = Неопределено,
										Заголовок = "",
										КнопкаТаймаута = Неопределено) Экспорт 
							 
							 
	смв().смв_ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
							 ТекстВопроса,
							 Кнопки,
							 Таймаут,
							 КнопкаПоУмолчанию,
							 Заголовок,
							 КнопкаТаймаута);
	
КонецПроцедуры						   

&НаКлиенте
Процедура ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, РезультатОповещения = Неопределено) Экспорт
	
	смв().смв_ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборЭлемента(Список, ОписаниеОповещенияОЗавершении = Неопределено, Заголовок = "", Элемент = Неопределено) Экспорт
	
	смв().смв_ПоказатьВыборЭлемента(ОписаниеОповещенияОЗавершении, Заголовок, Элемент, Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеПереопределенная(Значение, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	смв().смв_ПоказатьЗначение(ОписаниеОповещенияОЗавершении, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогСохранение(ОписаниеОповещенияОЗавершении,
									Знач Фильтр = Неопределено,
									Заголовок = Неопределено,
									Каталог = Неопределено,
									ПолноеИмяФайла = Неопределено)
								
	смв().смв_ПоказатьДиалогСохранение(ОписаниеОповещенияОЗавершении, Фильтр, Заголовок, Каталог, ПолноеИмяФайла);								
								
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораКаталога(ОписаниеОповещенияОЗавершении,
										Заголовок = Неопределено,
										Каталог = Неопределено,
										МножественныйВыбор = Ложь) Экспорт
	
	смв().смв_ПоказатьДиалогВыбораКаталога(ОписаниеОповещенияОЗавершении, Заголовок, Каталог, МножественныйВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, РежимРаботы, ПараметрыВыбора) Экспорт 
	
	смв().смв_ПоказатьДиалогВыбораФайла(ОписаниеОповещенияОЗавершении, РежимРаботы, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводДатыПереопределенная(ОписаниеОповещенияОЗавершении,
											ВыбраннаяДата = "",
											Подсказка = "",
											ЧастьДаты = Неопределено) Экспорт
	
	смв().смв_ПоказатьВводДаты(ОписаниеОповещенияОЗавершении, ВыбраннаяДата, Подсказка, ЧастьДаты);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьДиалогВыбораИзСписка(СписокЗначений, ОписаниеОповещенияОЗавершении, Форма, ЭлементФормы, Значение = Неопределено) Экспорт
	
	смв().смв_ПоказатьДиалогВыбораИзСписка(СписокЗначений, ОписаниеОповещенияОЗавершении, Форма, ЭлементФормы, Значение);
	
КонецПроцедуры

// Получает форму для отображения прогресса выполнения
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция Форма_ПрогрессВыполнения() 
	
	Результат = Кэш_Прочитать("ФормаПрогресса");
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПолучитьФормуОбработки("ИндикацияПрогрессаОбработкиДанныхУправляемая", ЭтаФорма);
	Кэш_Поместить("ФормаПрогресса", Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Форма_ПоказатьВыборИзМеню(Форма,
									ОписаниеОповещенияОЗавершении,
									СписокЗначений,
									ЭлементФормы = Неопределено,
									НачальноеЗначение = Неопределено) Экспорт
	
	смв().смв_Форма_ПоказатьВыборИзМеню(Форма, ОписаниеОповещенияОЗавершении, СписокЗначений, ЭлементФормы, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеПользователю(Текст, Данные = Неопределено, ФормаВывода = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения = ?(ФормаВывода = Неопределено, ЭтаФорма, ФормаВывода).УникальныйИдентификатор;
	Сообщение.Текст = Текст;	
	
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтметкуЭлементов(СписокЗначений, ОписаниеОповещенияОЗакрытии, Заголовок) Экспорт 
	
	смв().смв_ПоказатьОтметкуЭлементов(СписокЗначений, ОписаниеОповещенияОЗакрытии, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыВвода() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Заголовок",					"");
	Результат.Вставить("ТекстСообщения",			"");
	Результат.Вставить("ТекстКнопкиВыполнить",		"");
	Результат.Вставить("ВозможноПустоеЗначение",	Истина);
	Результат.Вставить("ДлинаПоляВвода",			Неопределено);
	Результат.Вставить("РежимПароля",				Ложь);
	Результат.Вставить("ИдентификаторыДокумента",	Неопределено);
	Результат.Вставить("Действие",					"");
	Результат.Вставить("ИдентификаторЯщика",		"");
	Результат.Вставить("ГрупповоеДействие",			Ложь);
	Результат.Вставить("КатегорияМетрикиДокумента",	"");
	Результат.Вставить("КонтрагентПоддерживаетМЧД",	Истина);
	
	Возврат Результат;
	
КонецФункции 


// }	МЕТОДЫ ИНТЕРАКТИВНОЙ РАБОТЫ


// {	ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
	Если НЕ ОбработкаОбъект().ВозможенЗапускВВебКлиенте() Тогда
		Сообщить("Для работы модуля в веб-клиенте требуется версия платформы 8.3.3.721 или выше");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	ИнициализироватьОбщийКонтекстКлиентСерверНаСервере();
	
	ИспользуетсяПодсистемаДиадок = Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	
	ПутьКФормам = ОбработкаОбъект().Метаданные().ПолноеИмя() + ".Форма.";
	ВерсияОбработки = ОбработкаОбъект().ВерсияОбработки();
	
	Ядро = Модуль_ЯдроНаСервере();
	СохраненнаяВерсияПриЗапуске = Ядро.ЗначениеНастройки_СохраненнаяВерсияМодуля();
	СтруктураДанныхСтрокиСпискаСтрокой = Ядро.КолонкиСпискаДокументовСтрокой();
	
	Параметры.РезультатИнициализации = Ядро.РезультатИнициализацииОсновногоМодуля();
	
	ЗаполнитьФормуИзСохраненныхНастроек();
	ЗаполнитьНастройкиПериодаПриЗапуске();
	УстановитьВидимостьКнопок();
	НастроитьФорму();
	СкрытьНастройкиПлагинов();
	УстановитьЗаголовокФормы();
	УстановитьЗаголовокКнопкиАвторизацииПоУмолчанию();
	
	СоздатьРеквизитФормы_ПорядковыйНомерОперацииЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВключитьДекорациюДлительнойОперации();
	
	ПоказатьИндикаторДлительнойОперации();
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	ПодключитьОбработчикОжидания(
		"ПослеОткрытия",
		0.1,
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	
	ПроверитьУстановкуОграниченияТипаВОтборах();
	
	ДвоичныеДанныеФайлаОбработки = ДвоичныеДанныеМодуля();
	ДвоичныеДанныеКонфигурационногоФайла = ДвоичныеДанныеКонфигурационногоФайла();
	
	ВыполнитьДействияНаСервереПриОткрытииФормы(ДвоичныеДанныеФайлаОбработки, ДвоичныеДанныеКонфигурационногоФайла);
	
	Отказ = Ложь;
	ДополнитьДанныеДляОбновленияМодуля();
	ОбновитьМодульАвтоматически(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовокКнопкиПериода();
	УстановитьПредставлениеТекущегоПользователяДиадок();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), "Инициализация модуля");
	
	ПроверитьНаличиеУведомлений();
	УстановитьОбновитьМодульПродуктовойАналитики();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбновитьМодульПродуктовойАналитики()
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.ПродуктоваяАналитика_УстановитьОбновитьМодульБезопасно();
	
КонецПроцедуры

&НаКлиенте
Функция ДвоичныеДанныеМодуля()
	
	#Если ВебКлиент Тогда
	Возврат Неопределено;
	#КонецЕсли
	
	Если НЕ СистемаХраненияОпределена() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеРасположенияМодуля = Объект.ОбщийКонтекстКлиентСервер.РасположениеМодуля;
	
	Если НЕ ЗначениеЗаполнено(ОписаниеРасположенияМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Перечисление_МестоположенияМодуля = Модуль_ЯдроНаКлиенте().Перечисление_МестоположенияМодуля();
	
	Если ОписаниеРасположенияМодуля.РасположениеМодуля = Перечисление_МестоположенияМодуля.ЭлементСправочника Тогда
		Результат = ОписаниеРасположенияМодуля.ИмяФайлаМодуля;
	ИначеЕсли ОписаниеРасположенияМодуля.РасположениеМодуля = Перечисление_МестоположенияМодуля.ФайлНаДиске Тогда
		Результат = Модуль_ЯдроНаКлиенте().ДвоичныеДанныеФайла(ОписаниеРасположенияМодуля.ИмяФайлаМодуля);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДвоичныеДанныеКонфигурационногоФайла()
	
	Результат = Неопределено;
	
	ПутьКФайлу = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ПутьККонфигурационномуФайлуИзПараметровЗапуска", ПараметрЗапуска);
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		
		Модуль_Ядро = Модуль_ЯдроНаКлиенте();
		
		Результат = Модуль_Ядро.ДвоичныеДанныеФайла(ПутьКФайлу);
		
		Если Результат = Неопределено Тогда
			Ошибка = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку("Конфигурационный файл не найден (%1)!", ПутьКФайлу);
			_ОбработатьОшибку("ЧтениеКонфигурационногоФайла", Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьДействияНаСервереПриОткрытииФормы(Знач ДвоичныеДанныеИлиАдрес, ДвоичныеДанныеКонфигурационногоФайла)
	
	Ядро = Модуль_ЯдроНаСервере();

	Если ДвоичныеДанныеКонфигурационногоФайла <> Неопределено Тогда
		Ядро.ЗагрузитьПараметрыИзКонфигурационногоФайла(ДвоичныеДанныеКонфигурационногоФайла);
	КонецЕсли;
	
	ПодготовитьДанныеДляОбновленияМодуля();
	
	Ядро.ОбновлениеМодуля_ПроверитьУстановитьПризнакМодульДоработан(
		ДвоичныеДанныеИлиАдрес,
		ДанныеДляОбновленияМодуля.ОписаниеРасположенияМодуля.Местоположение);
	
	Ядро.Метрика_ДобавитьСтатистику_СистемнаяИнформация();
	
	Возврат ОбщийКонтекстОбработки();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФормуИзСохраненныхНастроек()
	
	КлючОбъекта = ОбработкаОбъект().Метаданные().ПолноеИмя() + ".Форма.ФормаУправляемая/ТекущиеДанные";
	
	СохраненныеНастройки = СохраненноеЗначениеВСистемномХранилище(КлючОбъекта);
	
	Если ЗначениеЗаполнено(СохраненныеНастройки) Тогда
		
		СтруктураНастроек = Новый Структура;
		
		Если ТипЗнч(СохраненныеНастройки) = Тип("Соответствие") Тогда
			
			РежимОтображенияПриЗапуске	= СохраненныеНастройки.Получить("РежимОтображенияПриЗапуске");
			НастройкаВыбораПериода		= СохраненныеНастройки.Получить("НастройкаВыбораПериода");
			РазмерСтраницы				= СохраненныеНастройки.Получить("РазмерСтраницы");
			НомерСтраницы				= СохраненныеНастройки.Получить("НомерСтраницы");
			ПоказыватьЗавершенные		= СохраненныеНастройки.Получить("ПоказыватьЗавершенные");
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимОтображенияПриЗапуске) Тогда
		РежимОтображенияПриЗапуске = РежимыОтображения().ДляОтправки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РазмерСтраницы) Тогда
		РазмерСтраницы = 500;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСтраницы) Тогда
		НомерСтраницы = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СохраненноеЗначениеВСистемномХранилище(КлючОбъекта, КлючНастроек = Неопределено, ИмяПользователя = Неопределено)

	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек,, ИмяПользователя);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиПериодаПриЗапуске()
	
	НастройкаВыбораПериода = НовыйНастройкаВыбораПериода();
	
	СохраненныеНастройки = ОбработкаОбъект().ПользовательскиеНастройкиПериодаПрочитать();
	
	НастройкаВыбораПериода.РежимОтбораПоПериоду = СохраненныеНастройки.РежимОтбораПоПериоду;
	
	Интервал = Новый СтандартныйПериод(СохраненныеНастройки.ВариантВыбораПериода);
	
	НастройкаВыбораПериода.ДатаНачала = Интервал.ДатаНачала;
	НастройкаВыбораПериода.ДатаОкончания = Интервал.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Функция НовыйНастройкаВыбораПериода()
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОтбораПоПериоду", Неопределено);
	Результат.Вставить("ДатаНачала", Неопределено);
	Результат.Вставить("ДатаОкончания", Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОбщийКонтекстКлиентСерверНаСервере()
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	ОбработкаОбъект.ИнициализироватьОбщийКонтекст(УникальныйИдентификатор);
	
	Объект.ОбщийКонтекстКлиентСервер = ОбработкаОбъект.ОбщийКонтекстКлиентСервер;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	ТипПоляОрганизации = МодульЯдро.Справочники_ТипЗначенияОбъекта("Организации");
	ТипПоляКонтрагенты = МодульЯдро.Справочники_ТипЗначенияОбъекта("Контрагенты");
	
	ИмяСправочника = СтрЗаменить(ТипПоляОрганизации, "СправочникСсылка.", "");
	Если Метаданные.Справочники.Найти(ИмяСправочника) <> Неопределено Тогда
		Элементы.ОтборПоОрганизации.ОграничениеТипа = Новый ОписаниеТипов(ТипПоляОрганизации);
	КонецЕсли;
	
	ИмяСправочника = СтрЗаменить(ТипПоляКонтрагенты, "СправочникСсылка.", "");
	Если Метаданные.Справочники.Найти(ИмяСправочника) <> Неопределено Тогда
		Элементы.ОтборПоКонтрагенту.ОграничениеТипа = Новый ОписаниеТипов(ТипПоляКонтрагенты);
	КонецЕсли;
	
	ОтборПоОрганизации = МодульЯдро.Справочники_ПустаяСсылкаСправочника("Организации");
	ОтборПоКонтрагенту = МодульЯдро.Справочники_ПустаяСсылкаСправочника("Контрагенты");
	
	ИнтерфейсныеПравкиДляПлатформы835();
	УстановитьСвойстваФормыТакси();
	
	ПрочитатьНастройкуИспользоватьСопоставлениеПодразделений();
	
	УстановитьУсловноеОформлениеСпискаДокументов();
	ИнициализироватьНастройкиТематическогоПоздравления();
	
	Попытка
		МодульЯдро.ПодключаемыйМодуль_ОбработатьСобытие("УстановитьУсловноеОформление", Новый Структура("Форма", ЭтаФорма));
	Исключение
		Сообщить("Не удалось применить для формы условное оформление из ПМ!", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиТематическогоПоздравления()
	
	ДатаНачалаПроверки = '20241218';
	ДатаОкончанияПроверки = '20250114';
	
	ТематическаяКартинкаДоступна = ТекущаяДатаСеанса() > ДатаНачалаПроверки
		И ТекущаяДатаСеанса() < ДатаОкончанияПроверки;
	
	Если НЕ ТематическаяКартинкаДоступна Тогда
		Возврат;
	КонецЕсли;
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	БиблиотекаКартинокЯдра = МодульЯдро.БиблиотекаКартинок();
	КартинкаПодарочек = БиблиотекаКартинокЯдра.КартинкаПодарочек;
	
	АдресТематическойКартинки = ПоместитьВоВременноеХранилище(КартинкаПодарочек, УникальныйИдентификатор);
	
	Элементы.ТематическаяКартинка.Подсказка = НСтр("ru='Нажми на подарок'");
	Элементы.ТематическаяКартинка.Видимость = ТематическаяКартинкаДоступна;
	Элементы.ТематическаяКартинка.Доступность = ТематическаяКартинкаДоступна;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусПоддержкиКонфигурации_КонфигурацияПоддерживается()
	
	Возврат "Поддерживается";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусПоддержкиКонфигурации_КонфигурацияНеПоддерживается()
	
	Возврат "НеПоддерживается";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусПоддержкиКонфигурации_КонфигурацияУстарела()
	
	Возврат "Устарела";
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере()
	
	УстановитьУсловноеОформлениеДляТарифа();
	УстановитьУсловноеОформлениеДляТиповДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляТарифа()
	
	УстановитьДоступностьФункцийТарифа();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляТиповДокументов()
	
	УдалитьУсловноеОформлениеДляТиповДокументов();
	ДобавитьУсловноеОформлениеДляТиповДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеДляТиповДокументов()

	ОбработанныеТипыДокументовAPI = Новый Массив;
	
	ТипыДокументовAPI = Модуль_ЯдроНаСервере().ПредопределенныеСписки_ТипыДокументовAPI();
			
	Для Каждого ТипДокументаAPI Из ТипыДокументовAPI Цикл
		
		TypeNamedId = ТипДокументаAPI.TypeNamedId;
		
		Если ЗначениеЗаполнено(TypeNamedId)
			И ОбработанныеТипыДокументовAPI.Найти(TypeNamedId) = Неопределено Тогда
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовТипДокумента");
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= TypeNamedId;
			
			Если TypeNamedId = "Nonformalized" Тогда
				ТекстДляОформления = "";
			Иначе
				ТекстДляОформления = ТипДокументаAPI.Title;
			КонецЕсли;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстДляОформления);
			
			ОбработанныеТипыДокументовAPI.Добавить(TypeNamedId);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьУсловноеОформлениеДляТиповДокументов()
	
	ЭлементыДляУдаления	= Новый Массив;
	ПолеТипаДокумента	= Новый ПолеКомпоновкиДанных("СписокДокументовТипДокумента");
	
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		
		Для Каждого ПолеЭлементаОформления Из ЭлементОформления.Поля.Элементы Цикл
			
			Если ПолеЭлементаОформления.Поле = ПолеТипаДокумента Тогда
				
				ЭлементыДляУдаления.Добавить(ЭлементОформления);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементОформления Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеОткрытияФормы()
	
	РезультатИнициализации = Параметры.РезультатИнициализации;
	
	Если НЕ СистемаХраненияОпределена() Тогда
		
		ПараметрыФормы = Неопределено;
		
		ОписаниеОповещения = НовыйОписаниеОповещения("ПослеОткрытияФорм", ЭтаФорма);
		ОткрытьФормуДиадокМодально("НастройкаХраненияДанныхУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
		
		Возврат;
	
	КонецЕсли;
	
	Платформа = Модуль_Платформа();
	Платформа.УстановитьНовуюВерсиюМодуля();
	
	МодульБылОбновлен = ДанныеДляОбновленияМодуля.МодульБылОбновлен;
	Если МодульБылОбновлен Тогда
		УведомитьПользователяОбУспешномАвтообновлении();
		Возврат;
	КонецЕсли;
	
	ПроверитьСоединениеССерверомДиадок();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПользователяОбУспешномАвтообновлении()
	
	ПараметрыФормы = Неопределено;
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ПослеУведомленияПользователяОбУспешномАвтообновлении", ЭтаФорма);
	
	ОткрытьФормуДиадокМодально("УведомлениеОбУспешномАвтообновленииУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУведомленияПользователяОбУспешномАвтообновлении(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверитьСоединениеССерверомДиадок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединениеССерверомДиадок()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СоединениеУстановлено = Ядро.АПИ_ПроверитьСоединениеDiadocAPI();
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ПроверитьСоединениеССерверомДиадокЗавершение", ЭтаФорма);
	
	Если СоединениеУстановлено Тогда
		
		ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, СоединениеУстановлено);
		
	Иначе
		
		ОткрытьФормуДиадокМодально("ОшибкаСоединенияССерверомДиадокУправляемая", ЭтаФорма,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединениеССерверомДиадокЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		
		ОбновитьНадписьДекорацииДлительнойОперации();
		
		ОткрытьФормуАвторизации(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФорм(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ИнтерфейсныеПравкиДляПлатформы835()
	
	СистемнаяИнформация	= Новый СистемнаяИнформация;
	ВерсияПлатформы		= СистемнаяИнформация.ВерсияПриложения;
	
	ВерсияПлатформыМассивом = ОбработкаОбъект().РазделитьСтроку(СистемнаяИнформация.ВерсияПриложения, ".");
	
	ВтораяЦифраВерсии	= Число(ВерсияПлатформыМассивом[1]);
	ТретьяЦифраВерсии	= Число(ВерсияПлатформыМассивом[2]);
	
	Если ((ВтораяЦифраВерсии = 3 И ТретьяЦифраВерсии >= 4) Или ВтораяЦифраВерсии > 3) Тогда
		
		Пользователь	= ПользователиИнформационнойБазы.ТекущийПользователь();
		Настройка		= СохраненноеЗначениеВСистемномХранилище("Общее/НастройкиКлиентскогоПриложения",,Пользователь.Имя); 
		
		Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
			Настройка = Новый НастройкиКлиентскогоПриложения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	СвойствоГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаАвторизацииИНастроек, СвойствоГоризонтальноеПоложениеВГруппе);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаРазмераСтраницы, СвойствоГоризонтальноеПоложениеВГруппе);
	
	СвойстваКнопкаСпискаВыбора = Новый Структура("КнопкаСпискаВыбора, КнопкаВыпадающегоСписка", Истина, Истина);
	ЗаполнитьЗначенияСвойств(Элементы.РазмерСтраницы, СвойстваКнопкаСпискаВыбора);
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	ЗаполнитьЗначенияСвойств(Элементы.ДекорацияНавигации, СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьОкончанияОплаченногоПериода, СвойствоАвтоМаксимальнаяШирина);
	
	СвойствоЦветФонаНадписиСпискаОнлайнСчетов = Новый Структура("ЦветФона", Новый Цвет(255, 237, 166));
	ГоризонтальноеПоложениеЦентр = Новый Структура("ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаОкончанияОплаченногоПериода, СвойствоЦветФонаНадписиСпискаОнлайнСчетов);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаОкончанияОплаченногоПериода, ГоризонтальноеПоложениеЦентр);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаОценкаРаботыМодуля, СвойствоЦветФонаНадписиСпискаОнлайнСчетов);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаОценкаРаботыМодуля, ГоризонтальноеПоложениеЦентр);
	
	СвойствоПодсказкаВвода = Новый Структура("ПодсказкаВвода");
	
	СвойствоПодсказкаВвода.ПодсказкаВвода = "Организация";
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоОрганизации, СвойствоПодсказкаВвода);
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Если НЕ Ядро.ПриложениеСтаршеВерсии("8.3.3") Тогда
		
		СвойствоОтображениеКнопкиВыбора = Новый Структура("ОтображениеКнопкиВыбора", Вычислить("ОтображениеКнопкиВыбора.ОтображатьВПолеВвода"));
		ЗаполнитьЗначенияСвойств(Элементы.ОтборПоОрганизации, СвойствоОтображениеКнопкиВыбора);
		
	КонецЕсли;
	
	СвойствоПодсказкаВвода.ПодсказкаВвода = "Контрагент";
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоКонтрагенту, СвойствоПодсказкаВвода);
	
	СвойствоПодсказкаВвода.ПодсказкаВвода = "Статус";
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоСтатусу, СвойствоПодсказкаВвода);
	
	СвойствоПодсказкаВвода.ПодсказкаВвода = "Вид пакета";
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоВидуПакета, СвойствоПодсказкаВвода);
	
	СвойствоПодсказкаВвода.ПодсказкаВвода = Неопределено;
	
	ЗаполнитьЗначенияСвойств(СвойствоПодсказкаВвода, Элементы.ОтборПоОрганизации);
	
	Если ЗначениеЗаполнено(СвойствоПодсказкаВвода.ПодсказкаВвода) Тогда
		
		Элементы.ВключитьОтборПоОрганизации.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ВключитьОтборПоКонтрагенту.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ВключитьОтборПоСтатусу.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ВключитьОтборПоВидуПакета.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЕсли;
	
	Если Не Ядро.ПриложениеСтаршеВерсии("8.3.7") Тогда
		
		РедактируемыеСвойстваЭлемента = Новый Структура;
		РедактируемыеСвойстваЭлемента.Вставить("Объединенная", Ложь);
		
		ЗаполнитьЗначенияСвойств(Элементы.ДекоративныеОбертки, РедактируемыеСвойстваЭлемента);
		
		ГруппаРазделовВертикальноеПоложениеПодчиненных = Новый Структура("ВертикальноеПоложениеПодчиненных", ВертикальноеПоложениеЭлемента.Центр);
		ЗаполнитьЗначенияСвойств(Элементы.ГруппаРазделов, ГруппаРазделовВертикальноеПоложениеПодчиненных);
		
	КонецЕсли;
	
	ГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаКружок, ГоризонтальноеПоложениеВГруппе);
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаПредупреждение, ГоризонтальноеПоложениеВГруппе);
	
	Если НЕ Ядро.ПриложениеСтаршеВерсии("8.3.5") Тогда
		
		ИмяСвойства = "ПоложениеСостоянияПросмотра";
		ЗначениеСвойства = Вычислить("ПоложениеСостоянияПросмотра.Верх");
		
		СвойствоПоложениеСостоянияПросмотра = Новый Структура(ИмяСвойства, ЗначениеСвойства);
		ЗаполнитьЗначенияСвойств(Элементы.СписокДокументов, СвойствоПоложениеСостоянияПросмотра);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопок()
	
	Элементы.ВыполнитьОбмен.Видимость = ИспользуетсяПодсистемаДиадок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботыПрограммы = Ложь)
	
	Если ЗавершениеРаботыПрограммы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Платформа = Модуль_Платформа();
	Платформа.ПриЗавершенииРаботыМодуля(ДлительнаяОперацияПродуктоваяАналитика);
	
	ОчиститьКэшНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИсточникОповещения = ИдентификаторОсновнойФормы();
	
	Если Не ЭтаФорма.Открыта()
		ИЛИ ИсточникОповещения <> Источник Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Диадок_ОбновитьГлавныйСписок" Тогда
		
		НовыйРежимОтображенияДокументов = Неопределено;
		
		УстановитьЗаголовокФормы();
		
		ОбновитьСписок(
			НовыйРежимОтображенияДокументов,
			Параметр
		);
		
	ИначеЕсли ИмяСобытия = "Диадок_ЗакрытаФормаУведомлений" Тогда
		
		УстановитьОформлениеКнопкиУведомления(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

//{Тариф

&НаСервере
Процедура УстановитьДоступностьФункцийТарифа()
	
	ОтключитьВключитьВыполнитьПередатьНаСогласование();
	ОтключитьВключитьВыполнитьПередатьПоМаршруту();
	ОтключитьВключитьВыделениеДокументов();
	ОтключитьВключитьГруппаАнализИОбработка();
	ОтключитьВключитьВыполнитьРасшифроватьДокументы();
	ОтключитьВключитьСписокДокументовФлажок();
	ОтключитьВключитьВыполнитьЗагрузкуНовогоПакета();
	ОтключитьВключитьДекорацииТариф();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьПередатьНаСогласование()
	
	Элементы.ВыполнитьПередатьНаСогласование.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьПередатьНаСогласованиеЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьПередатьПоМаршруту()
	
	Элементы.ВыполнитьПередатьПоМаршруту.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьПередатьПоМаршрутуЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыделениеДокументов()
	
	Элементы.ВыделениеДокументов.Доступность = НЕ ЕстьОграниченияПоТарифу;
	
	НастроитьПодсказкуВыделениеДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПодсказкуВыделениеДокументов()
	
	КомандаВыделение = Команды.Найти("ВыделениеДокументов");
	
	Если ЕстьОграниченияПоТарифу Тогда
		КомандаВыделение.Подсказка = "Массовая обработка документов доступна только на тарифе ""Универсальный""";
	Иначе
		КомандаВыделение.Подсказка = "Выделение документов на странице";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьЗагрузкуНовогоПакета()
	
	Элементы.ВыполнитьЗагрузкуНовогоПакета.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьЗагрузкуНовогоПакетаЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьГруппаАнализИОбработка()
	
	Элементы.ГруппаАнализИОбработка.Доступность = НЕ ЕстьОграниченияПоТарифу;
	
	Если ЕстьОграниченияПоТарифу Тогда
		Элементы.ГруппаАнализИОбработка.Подсказка = "Анализ и обработка входящих документов доступны только на тарифе ""Универсальный"".";
	Иначе
		Элементы.ГруппаАнализИОбработка.Подсказка = "Анализ и обработка входящих документов";
	КонецЕсли;
	
	ОтключитьВключитьВыполнитьАнализВыбранныхПакетов();
	ОтключитьВключитьВыполнитьОтправитьГотовыеОтветы();
	ОтключитьВключитьВыполнитьВыполнитьТребуемоеДействие();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьАнализВыбранныхПакетов()
	
	Элементы.ВыполнитьАнализВыбранныхПакетов.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьАнализВыбранныхПакетовЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьОтправитьГотовыеОтветы()
	
	Элементы.ВыполнитьОтправитьГотовыеОтветы.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьОтправитьГотовыеОтветыЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьВыполнитьТребуемоеДействие()
	
	Элементы.ВыполнитьВыполнитьТребуемоеДействие.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьВыполнитьТребуемоеДействиеЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьВыполнитьРасшифроватьДокументы()
	
	РежимыОтображения = РежимыОтображения();
	РежимВходящие = (РежимОтображенияДокументов = РежимыОтображения.Входящие);
	
	Элементы.ВыполнитьРасшифроватьДокументы.Видимость = РежимВходящие 
		И ИспользуетсяПодсистемаДиадок И НЕ ЕстьОграниченияПоТарифу;
	Элементы.ВыполнитьРасшифроватьДокументыЗаглушка.Видимость = РежимВходящие 
		И ИспользуетсяПодсистемаДиадок И ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьСписокДокументовФлажок()
	
	Элементы.СписокДокументовФлажок.Доступность = НЕ ЕстьОграниченияПоТарифу;
	
	Если ЕстьОграниченияПоТарифу Тогда
		Элементы.СписокДокументовФлажок.Подсказка = "Функциональность доступна только на тарифе ""Универсальный"".";
	Иначе
		Элементы.СписокДокументовФлажок.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьДекорацииТариф()
	
	Элементы.ГруппаФункциональностьТарифаЗаглушка.Видимость = ЕстьОграниченияПоТарифу;
	Элементы.ДекорацияНавигации.Видимость = НЕ ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТарифаМиниНажатие(Элемент)
	
	Метрика_ПоказатьПредупреждениеОТарифе();
	
	Модуль_Платформа = Модуль_Платформа();
	
	НаименованиеФормы = Метрика_НазваниеФормы();
	
	Модуль_Платформа.ПоказатьПредупреждениеОТарифе(НаименованиеФормы);
	
КонецПроцедуры

//}Тариф

&НаКлиенте
Процедура ПроверитьНеобходимостьПереходаСПлагинаСчетВПакете()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ТребуетсяВыполнитьПереходСПлагина = Ядро.КонтурПлагины_СчетВПакете_ТребуетсяВыполнитьПереходСПлагина();
	
	Если ТребуетсяВыполнитьПереходСПлагина Тогда
		ПредложитьПользователюПерейтиСПлагинаСчетВПакете();
	Иначе
		ОбработчикПослеАвторизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюПерейтиСПлагинаСчетВПакете()
	
	ЗаголовокСообщения = НСтр("ru = 'Плагин ""Первичные документы и счет на оплату""'");
	
	ТекстСообщения = НСтр("ru = 'Плагин ""Первичные документы и счет на оплату"" больше не поддерживается. '") +
	НСтр("ru = 'Объединение счета реализовано в самом модуле.
	|Воспользуйтесь кнопкой ""Продолжить"" для перехода с плагина на коробочное решение.
	|
	|Если в плагине использовались отборы по контрагентам, выполните индивидуальную настройку счетов. '") +
	НСтр("ru = 'Подробнее смотрите по кнопке ""Инструкция"".'");
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Продолжить");
	СписокКнопок.Добавить(КодВозвратаДиалога.Пропустить, "Инструкция");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Закрыть");
	
	ОповещениеОЗавершении = НовыйОписаниеОповещения("ПослеЗакрытияПредложенияПерейтиСПлагинаСчетВПакете", ЭтаФорма);
	
	ПоказатьВопросПереопределенная(ОповещениеОЗавершении, ТекстСообщения, СписокКнопок, , КнопкаПоУмолчанию, ЗаголовокСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредложенияПерейтиСПлагинаСчетВПакете(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	КатегорияМетрики = "КонвертацияНастроекПлагинаСчетВПакете";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДействиеМетрики = "Продолжить";
		Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
		
		КонвертацияВыполнена = Ядро.КонтурПлагины_СчетВПакете_ВыполнитьПереходСПлагина();
		
		Если КонвертацияВыполнена Тогда
			Сообщить(НСтр("ru = 'Настройки плагина успешно перенесены.'"));
		КонецЕсли;
		
	Иначе
		
		Если Результат = КодВозвратаДиалога.Пропустить Тогда
			
			ДействиеМетрики = "Инструкция";
			ЗапуститьПриложение("https://support.kontur.ru/diadoc-1s8x/41609-plagin_pervichnye_dokumenty_i_schet_na_oplatu#header_43830_1");
			
		Иначе
			ДействиеМетрики = "Закрыть";
		КонецЕсли;
		
		Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
		Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Пропустить Тогда
		ПредложитьПользователюПерейтиСПлагинаСчетВПакете();
	Иначе
		ОбработчикПослеАвторизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановкуОграниченияТипаВОтборах()
	
	ИменаОтсутствующихСправочников = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Элементы.ОтборПоОрганизации.ОграничениеТипа) Тогда
		ИменаОтсутствующихСправочников.Добавить("Организации");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Элементы.ОтборПоКонтрагенту.ОграничениеТипа) Тогда
		ИменаОтсутствующихСправочников.Добавить("Контрагенты");
	КонецЕсли;
	
	Если ИменаОтсутствующихСправочников.Количество() > 0 Тогда 
		
		// Типовой справочник в конфигурации не был найден - требуется переопределение имени справочника в ПМ.
		
		ШаблонСообщения = НСтр("ru = 'В текущей конфигурации отсутствует справочник ""%1"". Необходимо переопределить имя данного справочника в событии ПМ ""ОпределитьТипЗначенияОбъекта""'");
		
		Для Каждого ИмяСправочника Из ИменаОтсутствующихСправочников Цикл
			
			ТекстСообщения = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСправочника);
			ВывестиСообщениеПользователю(ТекстСообщения);
									
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

// }	ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ

// {	ОБРАБОТЧИКИ ПОСЛЕ АВТОРИЗАЦИИ

&НаКлиенте
Процедура ПослеВыбораИнтеграционногоМодуля(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗакрытьМодульСПредупреждением();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеАвторизации() Экспорт
	
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	Платформа = Модуль_Платформа();
	Платформа.ПроверитьОбновитьТипыДокументов(СохраненнаяВерсияПриЗапуске);
	
	ПодключитьОбработчикОжидания("ОжиданиеОбновленияСписка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОбновленияСписка() Экспорт
	
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	НовыйРежимОтображенияДокументов = Неопределено;
	ОтборПоПакету = Неопределено;
	КоличествоДокументов = 0;
	
	ОбновитьСписок(
		НовыйРежимОтображенияДокументов,
		ОтборПоПакету,
		КоличествоДокументов
	);
	
	ДополнительныеПеременные = Новый Соответствие;
	ДополнительныеПеременные.Вставить("КоличествоДокументов", КоличествоДокументов);
	
	ПодключитьОбработчикОжидания("ОжиданиеУстановкиУсловногоОформления", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеУстановкиУсловногоОформления() Экспорт
	
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	УстановитьУсловноеОформлениеНаСервере();
	УстановитьЗаголовокКнопкиПериода();
	УстановитьПредставлениеТекущегоПользователяДиадок();
	
	ПоказатьКнопкуТребуетсяОплата();
	ПоказатьКнопкуСкачатьОбновление();
	ПоказатьПанельОкончанияОплаченногоПериода();
	НастроитьВидимостьКнопкиНастроекДоверенности();
	
	ПодключитьОбработчикОжидания("ОжиданиеОплатыСервисаИОшибокМЧД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОплатыСервисаИОшибокМЧД()
	
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	НачатьПроверкуНеобходимостиОплатыСервиса();
	
	НачатьПроверкуОшибокКЭП();
	
	НачатьПроверкуОшибкокМЧДПоУмолчанию();
	
	ОтключитьДекорациюДлительнойОперацииОтложенно();
	
	ПродуктоваяАналитика_ЗапуститьПодготовкуДанных();
	
	Если ТематическаяКартинкаДоступна Тогда
		
		ИнтервалОжидания = 0.1;
		ВыполнитьОднократно = Истина;
		
		ПодключитьОбработчикОжидания(
			"Поздравление_ПоказатьПриЗапуске",
			ИнтервалОжидания,
			ВыполнитьОднократно
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктоваяАналитика_ЗапуститьПодготовкуДанных()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	ДлительнаяОперацияПродуктоваяАналитика = Ядро.ПродуктоваяАналитика_ПодготовитьДанные(УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СинонимКонфигурации()
	Возврат Метаданные.Синоним;
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуВыбораИнтеграционногоМодуляКонфигурацияНеПоддерживается()

	ОповещениеОЗакрытииФормы = НовыйОписаниеОповещения("ПослеВыбораИнтеграционногоМодуля", ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сценарий", "НеподдерживаемаяКонфигурация");
	
	ОткрытьФормуДиадокМодально(
		"ФормаВыбораИМУправляемая",
		ЭтаФорма,
		ДополнительныеПараметры,
		ОповещениеОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораИнтеграционногоМодуляКонфигурацияУстарела()
	
	ОповещениеОЗакрытииФормы = НовыйОписаниеОповещения("ПослеВыбораИнтеграционногоМодуля", ЭтаФорма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сценарий", "УстаревшаяКонфигурация");
	
	ОткрытьФормуДиадокМодально(
		"ФормаВыбораИМУправляемая",
		ЭтаФорма,
		ДополнительныеПараметры,
		ОповещениеОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельОкончанияОплаченногоПериода()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	НужноПоказатьПанель = Ядро.ОнлайнСчета_НаличиеСчетов();
	
	Элементы.ГруппаОкончанияОплаченногоПериода.Видимость = НужноПоказатьПанель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКнопкуСкачатьОбновление()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	РежимТестирования = Модуль_Ядро.РежимАвтотест();
	ЭтоСборкаДляПровайдераСервиса = Модуль_Ядро.ЭтоСборкаДляПровайдераСервиса();
	
	ВидимостьКнопки = (ЕстьНоваяВерсияМодуля ИЛИ РежимТестирования) И НЕ ЭтоСборкаДляПровайдераСервиса;
	
	ГруппаТехподдержка = Элементы.ГруппаНастройкиИТехподдержки.ПодчиненныеЭлементы.ГруппаТехподдержка;
	ГруппаТехподдержка.ПодчиненныеЭлементы.ТехподдержкаИнформация.ПодчиненныеЭлементы.КнопкаСкачатьОбновление.Видимость = ВидимостьКнопки;
	
	Если ВидимостьКнопки Тогда
		
		ГруппаТехподдержка.Заголовок = "Обновите модуль";
		
		Если НЕ Модуль_ЯдроНаКлиенте().ПриложениеСтаршеВерсии("8.3.8") Тогда
			ГруппаТехподдержка.ЦветФона = Новый Цвет(250, 227, 143);
		КонецЕсли;
		
		Элементы.ГруппаНастройкиИТехподдержки.Ширина = 21;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКнопкуТребуетсяОплата()
	
	ВидимостьКнопки = ДляТекущегоКонтекстаЕстьПредложенияДляПокупки();
	
	ГруппаГлавная = Элементы.ГруппаОсновная.ПодчиненныеЭлементы.ГруппаГлавная;
	ГруппаГлавная.ПодчиненныеЭлементы.ТребуетсяОплата.Видимость = ВидимостьКнопки;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуНеобходимостиОплатыСервиса() Экспорт
	
	Если ПроверкаОплатыСервисаВыполненаПриЗапускеМПЗ() Тогда
		Возврат;
	КонецЕсли;
	
	НужноПоказатьФорму = Модуль_ЯдроНаКлиенте().ЗаблокированныеОрганизации_Наличие();
	
	Если НужноПоказатьФорму Тогда
		
		ПодключитьОбработчикОжидания("ОткрытьФормуОплатыСервиса", 0.1, Истина);
		
	Иначе
		
		УстановитьВидимостьКнопокОбратнойСвязи(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаОплатыСервисаВыполненаПриЗапускеМПЗ()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ИмяКлючаВКэше = "ПроверкаОплатыСервисаВыполненаПриЗапускеМПЗ";
	
	Результат = (Модуль_Ядро.Кэш_Прочитать(ИмяКлючаВКэше) = Истина);
	
	Если Результат Тогда
		Модуль_Ядро.Кэш_Поместить(ИмяКлючаВКэше, Неопределено)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОплатыСервиса() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим",			"ОплатаСервиса");
	
	ОповещениеОЗакрытииФормы = НовыйОписаниеОповещения("ПослеОбработкиОплатыСервиса", ЭтаФорма);
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиОплатыСервиса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПоказатьПлашкуОтзываПоРаботеСОплатойСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ТематическаяКартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьНовогоднееПоздравление();
	
КонецПроцедуры

&НаКлиенте
Процедура Поздравление_ПоказатьПриЗапуске() Экспорт
	
	Платформа = Модуль_Платформа();
	
	Если Платформа.Поздравление_ПоказыватьПриЗапуске() Тогда
		
		ПоказатьНовогоднееПоздравление();
		
		Платформа.Поздравление_Отключить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНовогоднееПоздравление()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "НовогоднееПоздравление");
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы
	);

КонецПроцедуры

// }	ОБРАБОТЧИКИ ПОСЛЕ АВТОРИЗАЦИИ


// {	БЫСТРЫЕ ОТБОРЫ

&НаКлиенте
Процедура ВключитьОтборПоОрганизацииПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборПоКонтрагентуПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Организация";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);

	ВключитьОтборПоОрганизации = ЗначениеЗаполнено(ОтборПоОрганизации);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ВключенОтбор", ВключитьОтборПоОрганизации);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентуПриИзменении(Элемент)
	
	КонтрагентСопоставлен = КонтрагентСопоставлен();
	
	Если КонтрагентСопоставлен Тогда
		
		ОбновитьОтборПоКонтрагенту();
		
	Иначе
		
		ПредложитьСопоставитьКонтрагента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоКонтрагенту()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Контрагенты";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ВключитьОтборПоКонтрагенту = ЗначениеЗаполнено(ОтборПоКонтрагенту);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ВключенОтбор", ВключитьОтборПоКонтрагенту);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборПоСтатусуПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборПоВидуПакетаПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусуПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Статус";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);

	ВключитьОтборПоСтатусу = ЗначениеЗаполнено(ОтборПоСтатусу);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ВключенОтбор", ВключитьОтборПоСтатусу);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуПакетаПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Вид пакета";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);

	ВключитьОтборПоВидуПакета = ЗначениеЗаполнено(ОтборПоВидуПакета);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ВключенОтбор", ВключитьОтборПоВидуПакета);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

// }	БЫСТРЫЕ ОТБОРЫ


// {	СОПОСТАВЛЕНИЕ КОНТРАГЕНТА

&НаКлиенте
Функция КонтрагентСопоставлен()
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
		
		Результат = КонтрагентСопоставленНаСервере();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонтрагентСопоставленНаСервере()
	
	Результат = Модуль_ЯдроНаСервере().Контрагенты_КонтрагентСопоставленСЯщикомДиадок(ОтборПоКонтрагенту);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСопоставитьКонтрагента()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики = "ПоказатьФормуКонтрагентНеСопоставлен";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ОписаниеЗакрытияФормы = НовыйОписаниеОповещения(
		"ОбработатьРезультатПредложенияСопоставленияКонтрагента",
		ЭтаФорма
	);
	
	ОткрытьФормуДиадокМодально(
		"ФормаВыбранныйКонтрагентНеСопоставленУправляемая",
		ЭтаФорма,
		,
		ОписаниеЗакрытияФормы
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПредложенияСопоставленияКонтрагента(РезультатПредложения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПредложения = КодВозвратаДиалога.Да Тогда
		
		ОписаниеЗакрытияФормы = НовыйОписаниеОповещения(
			"ОбработатьРезультатСопоставленияКонтрагента",
			ЭтаФорма
		);
		
		Платформа = Модуль_Платформа();
		Платформа.ПоказатьФормуСопоставленияКонтрагента(
			ОтборПоКонтрагенту,
			ОтборПоОрганизации,
			ОписаниеЗакрытияФормы
		);
	ИначеЕсли РезультатПредложения = КодВозвратаДиалога.Прервать Тогда
		
		ОтборПоКонтрагенту = "";
		
	Иначе
		
		ОбновитьОтборПоКонтрагенту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСопоставленияКонтрагента(РезультатСопоставления, ДополнительныеПараметры) Экспорт
	
	Если РезультатСопоставления = КодВозвратаДиалога.Да Тогда
		
		ОбновитьОтборПоКонтрагенту();
		
	Иначе
		
		ОтборПоКонтрагенту = "";
		
		Метрики_ЗаписатьПоведение_ЗакрытьСопоставление();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_ЗакрытьСопоставление()
	
	НазваниеФормы = "Упрощенная форма контрагентов";
	КатегорияМетрики = Метрика_НазваниеКатегории().Закрытие;
	ДействиеМетрики = "Закрыть";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

// }	СОПОСТАВЛЕНИЕ КОНТРАГЕНТА


// {	НАСТРОЙКИ

&НаКлиенте
Процедура НастройкиДокументы(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Документы";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("Документы");

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключаемыйМодуль(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Подключаемый модуль";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("ПодключаемыйМодуль");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервисныеФункции(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Сервисные функции";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("СервисныеФункции");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСкачиваниеДокументов(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Скачивание документов";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("СкачиваниеДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСоединениеССервером(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Соединение с сервером";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("СоединениеССервером");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(РазделНастроек)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РазделНастроек", РазделНастроек); 
	
	ОповещениеОЗакрытииНастроек = НовыйОписаниеОповещения("ОповещениеоЗакрытииФормыНастроек", ЭтаФорма, ДопПараметры);
	
	ОткрытьФормуДиадокМодально("НастройкиУправляемая", ЭтаФорма, ДопПараметры, ОповещениеОЗакрытииНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеоЗакрытииФормыНастроек(Параметры, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПерезапуститьМодуль Тогда
		ЗакрытьМодульСПредупреждением();
		Возврат;
	КонецЕсли;
	
	Если Параметры.НастройкиИзменены Тогда
		
		ОбновитьЗначенияПараметровОбщегоКонтекста();
		ОповещениеОЗакрытииФормыНастроекВызовСервера();
		ОбновитьСписок();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеОЗакрытииФормыНастроекВызовСервера()
	
	УстановитьЗаголовокФормы();
	ПрочитатьНастройкуИспользоватьСопоставлениеПодразделений();
	ПереключитьВидимостьКолонок(РежимОтображенияДокументов);
	
	УправлениеПМ_ВыгрузитьВСервис();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкуИспользоватьСопоставлениеПодразделений()
	
	Ядро = Модуль_ЯдроНаСервере();
	ИспользоватьСопоставлениеПодразделений = Ядро.ЗначениеНастройки_ИспользоватьСопоставлениеПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМодульСПредупреждением() 
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСлужебныеСообщения(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Служебные сообщения";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьФормуСпискаОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОрганизаций(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Организации";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	мОткрытьФорму("Организации_ФормаСпискаУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКонтрагентов(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Контрагенты";
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьСписокКонтрагентовЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКонтрагентовЗавершение()
	
	Организация = ПолучитьОрганизациюДляОткрытияСпискаКонтрагентов();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстПредупреждения = НСтр("ru = 'Список организаций пуст!'");
		ПоказатьПредупреждениеПереопределенная(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Платформа = Модуль_Платформа();
	Платформа.Контрагенты_ПоказатьСписокКонтрагентов(Организация);
	
	ПоказатьПлашкуОтзываПоРаботеСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОрганизациюДляОткрытияСпискаКонтрагентов()
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		ИДОрганизации = Организации_ИдентификаторПоССылке(ОтборПоОрганизации);
		Если ЗначениеЗаполнено(ИДОрганизации) Тогда
			Результат = ИДОрганизации;
			Возврат Результат; 
		КонецЕсли;
	КонецЕсли;
	
	СписокОрганизаций = Организации_СписокОрганизацийДляВыбора();
	Если СписокОрганизаций.Количество() > 0 Тогда
		Результат = СписокОрганизаций[0].Значение;
	КонецЕсли;

	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПоискНовыхКонтрагентов(Команда)
	
	КатегорияМетрики	= Метрика_КатегорияНастройка();
	ДействиеМетрики		= "Контрагенты";
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьПоискНовыхКонтрагентовЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоискНовыхКонтрагентовЗавершение()
	
	Организация = ПолучитьОрганизациюДляОткрытияСпискаКонтрагентов();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстПредупреждения = НСтр("ru = 'Список организаций пуст!'");
		ПоказатьПредупреждениеПереопределенная(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Платформа = Модуль_Платформа();
	Платформа.Контрагенты_ПоказатьФормуПоискаИПриглашения(Организация);
	
	ПоказатьПлашкуОтзываПоРаботеСКонтрагентами();
	
КонецПроцедуры

&НаСервере
Функция Организации_СписокОрганизацийДляВыбора(ДобавитьНеоплаченные = Ложь)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Результат = Модуль_Ядро.Организации_СписокОрганизацийДляВыбора(ДобавитьНеоплаченные);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Организации_ИдентификаторПоССылке(ОрганизацияИБ)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Результат = Модуль_Ядро.Организации_ИдентификаторПоССылке(ОрганизацияИБ);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСпискаКонтрагентовМодально() Экспорт
	
	ОткрытьСписокКонтрагентовЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПлагинов(Команда)
	
	КатегорияМетрики = Метрика_КатегорияНастройка();
	ДействиеМетрики = Метрика_ДействиеОткрытьСписокПлагинов();
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.КонтурПлагины_ОткрытьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиОтборов()
	
	Объект.ОбщийКонтекстКлиентСервер.АдресаСКД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвторизации(ВойтиАвтоматически = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВойтиАвтоматически", ВойтиАвтоматически);
	
	АвторизацияПройденаРаннее = НЕ КонтекстСеансаКлиентСервер = Неопределено
		И КонтекстСеансаКлиентСервер.Количество() > 0;
	Если АвторизацияПройденаРаннее Тогда
		ПараметрыФормы.Вставить("ТекущийРежимФормы", "ВыборОрганизаций");
		СброситьНастройкиОтборов();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОЗакрытииФормыАвторизации = НовыйОписаниеОповещения(
			"ПослеЗакрытияФормыАвторизации",
			ЭтаФорма,
			ДополнительныеПараметры);
	
	ОткрытьФормуДиадокМодально(
		"АвторизацияУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОповещениеОЗакрытииФормыАвторизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		
		ТипАвторизации = Результат.РежимАвторизации;
		
		ИнициализироватьПеременнуюКонтекстСеансаКлиентСервер();
		
		ИнициализироватьПеременныеПослеАвторизации();
		
		ОбработчикПродолжения = НовыйОписаниеОповещения(
				"АвторизацияЗавершение",
				ЭтаФорма
		);
		
		Если ПоказатьПредупреждениеОПроблемахСПоддержкой() Тогда
			Возврат;
		КонецЕсли;
		
		Если НеобходимоОткрытиеМастераПервогоЗапуска Тогда
			
			Платформа = Модуль_Платформа();
			Платформа.ПоказатьМастерПервогоЗапуска(
				Результат.РежимАвторизации,
				ОбработчикПродолжения
			);
			
		Иначе
			
			ВыполнитьОбработкуОповещенияПереопределенная(
				ОбработчикПродолжения,
				Результат
			);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьКнопкуСкачатьОбновление();
		
		ПоказатьПанельОкончанияОплаченногоПериода();
		
		ПоказатьИндикаторПредупреждения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПеременнуюКонтекстСеансаКлиентСервер()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	КонтекстСеансаКлиентСервер = Модуль_Ядро.КонтекстСеанса_СтрокиКонтекста();

	ЯщикиНеТребующиеОплаты = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из КонтекстСеансаКлиентСервер Цикл
		
		СтрокаКонтекста = ЭлементКоллекции.Значение;
		
		Если НЕ СтрокаКонтекста.ТребуетсяОплатаСервиса Тогда
			ЯщикиНеТребующиеОплаты.Вставить(СтрокаКонтекста.Box.BoxIdGuid, СтрокаКонтекста.ОрганизацияНаименование);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьНеобходимостьПереходаСПлагинаСчетВПакете();
	
	Справка_ПоказатьПриПервомЗапуске();
	
	УправлениеПМ_ВыгрузитьВСервис();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПеременныеПослеАвторизации()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	ЕстьОграниченияПоТарифу = МодульЯдро.ЕстьОграниченияПоТарифу();
	ПодключенИМИлиПМ = МодульЯдро.ЕстьИнтеграционныйИлиПодключаемыйМодуль();
	СтрокиКонтекста = МодульЯдро.КонтекстСеанса_СтрокиКонтекста();
	НеобходимоОткрытиеМастераПервогоЗапуска = (СтрокиКонтекста.Количество() > 0);
	
	Если МодульЯдро.КонфигурацияНеПоддерживается() Тогда
				
		СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияНеПоддерживается();			
		
	ИначеЕсли МодульЯдро.КонфигурацияУстарела() Тогда
			
		СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияУстарела();
			
	Иначе
		
		СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияПоддерживается();	
		
	КонецЕсли;
	
	Для Каждого СтрокаКонтекста Из СтрокиКонтекста Цикл
		
		КонтекстЯщика = СтрокаКонтекста.Значение;
		
		Идентификаторы = МодульЯдро.Новый_ИдентификаторыСправочника( , КонтекстЯщика.BoxId);
		
		Организация1С = МодульЯдро.ХранениеДанных_СопоставленнаяОрганизацияВ1С(Идентификаторы);
		
		Если ЗначениеЗаполнено(Организация1С) Тогда
			
			НеобходимоОткрытиеМастераПервогоЗапуска = Ложь;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МодульЯдро.ОблачныеНастройки_ДополнитьОбщийКонтекст();
	
КонецПроцедуры

&НаКлиенте
Функция ПоказатьПредупреждениеОПроблемахСПоддержкой()
	
	СтатусПоддержкиПроблема =
		СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияНеПоддерживается()
		ИЛИ СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияУстарела();
	
	Если ЕстьОграниченияПоТарифу
		И СтатусПоддержкиПроблема Тогда
		
		ПоказатьПредупреждениеКонфигурацияНеДоступнаНаТарифеСтартовом();
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ПодключенИМИлиПМ
		И СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияНеПоддерживается() Тогда
		
		ПоказатьФормуВыбораИнтеграционногоМодуляКонфигурацияНеПоддерживается();
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ПодключенИМИлиПМ
		И СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияУстарела() Тогда
		
		ПоказатьФормуВыбораИнтеграционногоМодуляКонфигурацияУстарела();
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеКонфигурацияНеДоступнаНаТарифеСтартовом()
	
	Если СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияНеПоддерживается() Тогда
		
		ПредставлениеКонфигурации = СинонимКонфигурации();
		
		ТекстСообщения = НСтр(
				"ru = 'Тариф ""Стартовый"" не предусматривает работу на конфигурации
				|" + ПредставлениеКонфигурации + "
				|Для продолжения работы перейдите на тариф ""Универсальный"".'");
		
	КонецЕсли;
	
	Если СтатусПоддержкиКонфигурации = СтатусПоддержкиКонфигурации_КонфигурацияУстарела() Тогда
		
		ВерсияСовместимости = МинимальнаяВерсияПоддерживаемойКонфигурации();
		
		ТекстСообщения = НСтр(
				"ru = 'Тариф ""Стартовый"" не поддерживает работу на версиях  
				|конфигурации ниже " + ВерсияСовместимости + ". Для продолжения работы обновите 
				|конфигурацию до актуальной версии или перейдите на тариф 
				|""Универсальный"".'");
		
	КонецЕсли;
	
	Метрика_ПоказатьПредупреждениеОНеДоступностиКонфигурацииНаТарифе();
	
	ПоказатьПредупреждениеОНеДоступнойКонфигурацииТарифа(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция МинимальнаяВерсияПоддерживаемойКонфигурации()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	Результат = МодульЯдро.МинимальнаяВерсияПоддерживаемойКонфигурации();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеОНеДоступнойКонфигурацииТарифа(ТекстСообщения) Экспорт
	
	ЗаголовокСообщения = "";
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, "Узнать подробнее");
	СписокКнопок.Добавить(КнопкаПоУмолчанию, "Вернуться к выбору организаций");
	
	ИмяОбработчикаПослеВызоваВопроса = "ПослеВызоваПредупрежденияОНеДоступнойКонфигурацииТарифа";
	Таймаут = 0;
	
	ОповещениеОЗавершении = НовыйОписаниеОповещения(
			ИмяОбработчикаПослеВызоваВопроса,
			ЭтаФорма);
	
	ПоказатьВопросПереопределенная(
		ОповещениеОЗавершении,
		ТекстСообщения,
		СписокКнопок,
		Таймаут,
		КнопкаПоУмолчанию,
		ЗаголовокСообщения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВызоваПредупрежденияОНеДоступнойКонфигурацииТарифа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Метрика_УзнатьПодробнееОНеДоступностиКонфигурацииНаТарифе();
		
		АдресСсылки = "https://promo.diadoc.ru/tariff-universal";
		
		ПерейтиПоСсылке(АдресСсылки);
		
		ПоказатьПредупреждениеКонфигурацияНеДоступнаНаТарифеСтартовом();
		
	Иначе
		
		Метрика_ЗаписатьВернутьсяКВыборуОрганизаций();
		
		ОткрытьФормуАвторизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаОшибок(ФормаВыполнения = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "СписокОшибок");
	
	Если ФормаВыполнения = Неопределено Тогда
		ФормаВыполнения = ЭтаФорма;
	КонецЕсли;
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ФормаВыполнения,
		ПараметрыФормы,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуHTMLСообщения(ТекстСообщения, ЗаголовокФормы, ДополнительныеПараметры = Неопределено, ФормаВыполнения = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	мОткрытьФорму("ФормаHTMLСообщенияУправляемая", ПараметрыФормы, ОписаниеОповещения , ФормаВыполнения);
	
КонецПроцедуры


// }	НАСТРОЙКИ


// {	ТЕХПОДДЕРЖКА

&НаКлиенте
Процедура ОткрытьБыструюНастройку(Команда)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().БыстраяНастройка;
	ДействиеМетрики = "Мастер первого запуска";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	Платформа = Модуль_Платформа();
	Платформа.ЗапуститьНастройкуОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРуководствоПользователя(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Руководство пользователя";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865676");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюОбновлений(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "История обновлений";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, "Открытие формы", ДействиеМетрики);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстОбновлений = ИсторияОбновлений();
	ТекстовыйДокумент.УстановитьТекст(ТекстОбновлений);
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	ТекстовыйДокумент.Показать("История обновлений");
	
КонецПроцедуры

&НаСервере
Функция ИсторияОбновлений()
	
	Возврат ОбработкаОбъект().ИсторияОбновлений();
	
КонецФункции

&НаКлиенте
Процедура ПровестиДиагностику(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Провести диагностику";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ЗапуститьПриложение("https://help.kontur.ru/diadoc");
	
КонецПроцедуры

&НаКлиенте
Процедура ДистанционнаяПомощь(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Дистанционная помощь VNC";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ЗапуститьПриложение("https://help.kontur.ru/vnc");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонТехподдержки(Команда)
	
	Сообщить("Телефон техподдержки 8-800-500-10-18");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказатьОбратныйЗвонок(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Заказать обратный звонок";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ЗапуститьПриложение("https://www.diadoc.ru/support#callback");
	
КонецПроцедуры

// Открывает окно выбора ораганизации и затем - страницу Центра поддержки
//
// Параметры:
//  КатегорияМетрики - Строка, Неопределено - категоря метрики
//  НазваниеФормы - Строка, Неопределено - Название формы для записи TraceId
//  РежимОткрытияЦП - Строка, Неопределено - см Ядро.ЦП_РежимыОткрытияЦП()
// 
&НаКлиенте
Процедура ЦентрПоддержки_Открыть(Знач КатегорияМетрики = Неопределено, Знач НазваниеФормы = Неопределено, РежимОткрытияЦП = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КатегорияМетрики) Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().Техподдержка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НазваниеФормы) Тогда
		НазваниеФормы = Метрика_НазваниеФормы();
	КонецЕсли;
	
	ДействиеМетрики = Метрика_НазваниеДействий().ЗадатьВопросОнлайнКонсультанту;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КатегорияМетрики"	, КатегорияМетрики);
	ДополнительныеПараметры.Вставить("РежимОткрытияЦП"	, РежимОткрытияЦП);
	
	ОбработкаВыбораОрганизации = НовыйОписаниеОповещения(
		"ОткрытьЦентрПоддержкиПродолжение",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ПоказатьПредупреждениеПриПустомСписке = Ложь;
	
	ВыбратьОрганизациюДляОбращения(
		ОбработкаВыбораОрганизации,
		ПоказатьПредупреждениеПриПустомСписке
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦентрПоддержки(Команда)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Техподдержка;
	
	ЦентрПоддержки_Открыть(КатегорияМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьВТехподдержку(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Написать письмо в техподдержку";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Обработчик_ОтправитьEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТехническуюИнформацию(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Техническая информация";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Обработчик_ОткрытьТехническуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ОткрытьТехническуюИнформацию()
	
	ОбработкаВыбораОрганизации = НовыйОписаниеОповещения("ОткрытьТехническуюИнформациюПродолжение", ЭтаФорма);
	
	ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТехническуюИнформациюПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	BoxId = "";
	
	Если ВыбранныйЭлемент <> Неопределено Тогда  
		BoxId = ВыбранныйЭлемент.Значение;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("BoxId", BoxId);
	
	ОткрытьФормуДиадокМодально("ФормаТехническаяИнформацияУправляемая", ЭтаФорма, ПараметрыФормы,);
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Открытие формы";
	МеткаМетрики		= "Форма технической поддержки";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики, МеткаМетрики);					
	
КонецПроцедуры

&НаКлиенте
Функция РежимПрокси(Настройки)
	
	Если Настройки.РежимПрокси = "NoProxy" Тогда
		Результат= "без прокси";
	ИначеЕсли Настройки.РежимПрокси = "UseDefaultProxy" Тогда
		Результат = "использовать системные настройки";
	Иначе
		Результат = "использовать настройки прокси";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЛогинДляОбмена(Настройки)
	
	Если ЗначениеЗаполнено(Настройки.СлужебнаяУчетнаяЗаписьЛогин) Тогда
		Результат = Настройки.СлужебнаяУчетнаяЗаписьЛогин;
	Иначе
		Результат = "не заполнен";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Обработчик_ОтправитьEmail(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		
	ОбработкаВыбораОрганизации = НовыйОписаниеОповещения("ОтправитьEmailПродолжение", ЭтаФорма, ДополнительныеПараметры);
	
	ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации);
	
КонецПроцедуры

// Обработчик оповещения. Продолжает метод ЦентрПоддержки_Открыть()
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений, Неопределено - выбранная организация, см. ВыбратьОрганизациюДляОбращения()
//  ДополнительныеПараметры - Структура
//
&НаКлиенте
Функция ОткрытьЦентрПоддержкиПродолжение(ВыбранныйЭлемент = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	КатегорияМетрики = ДополнительныеПараметры.КатегорияМетрики;
	РежимОткрытияЦП = ДополнительныеПараметры.РежимОткрытияЦП;
	
	Если ВыбранныйЭлемент = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ВыбранныйЭлемент.Значение) Тогда
		BoxId = "";
	Иначе
		BoxId = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ПараметрыИнициализации = Модуль_Платформа().ЦП_НовыйПараметрыОткрытияСессии(BoxId, РежимОткрытияЦП);
	
	МодульЯдро = Модуль_ЯдроНаКлиенте();
	РаботаСHTTP = МодульЯдро;
	РаботаСJson = МодульЯдро;
	
	Модуль_ЦП = МодульЯдро.Модуль_ЦентрПоддержки(ЭтаФорма);
	Модуль_ЦП.Инит(
		ПараметрыИнициализации.ИмяИнтеграции,
		РаботаСHTTP,
		РаботаСJson,
		ПараметрыИнициализации.ТестовоеОкружение
	);
	
	ПараметрыСессии = Модуль_ЦП.МодельПараметрыСессии();
	ПараметрыСессии.ИНН = ПараметрыИнициализации.ИНН;
	ПараметрыСессии.КПП = ПараметрыИнициализации.КПП;
	ПараметрыСессии.Организация = ПараметрыИнициализации.Организация;
	ПараметрыСессии.Логин = ПараметрыИнициализации.Логин;
	ПараметрыСессии.ДополнительныеПараметры = ПараметрыИнициализации.ДополнительныеПараметры;
	
	ОписаниеФайла = Модуль_ЦП.МодельФайла();
	ОписаниеФайла.Данные = ПараметрыИнициализации.ВложениеДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ПараметрыИнициализации.ВложениеИмяФайла;
	ПараметрыСессии.Файлы.Добавить(ОписаниеФайла);
	
	БраузерОткрылся = Ложь;
	МодульПоддержки = "Главная";
	
	Результат = Модуль_ЦП.ОткрытьЦентрПоддержки(
			ПараметрыСессии,
			МодульПоддержки,
			БраузерОткрылся);
	
	Если НЕ ЗначениеЗаполнено(КатегорияМетрики) Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().Техподдержка;
	КонецЕсли;
	
	ДействиеМетрики = Метрика_НазваниеДействий().ЗадатьВопросОнлайнКонсультанту;
	
	ПеременныеМетрики = Новый Структура;
	ПеременныеМетрики.Вставить("БраузерОткрылся", БраузерОткрылся);
	
	МодульЯдро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		BoxId,
		КатегорияМетрики,
		ДействиеМетрики,
		,
		ПеременныеМетрики);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьEmailПродолжение(ВыбранныйЭлемент = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент.Значение) Тогда
		
		// вызов из формы экстренного уведомления - авторизация не пройдена, и из формы авторизации
		BoxId = "";
		РеквизитыОрганизации = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Контракт_Организация");
		
	Иначе
		
		BoxId = ВыбранныйЭлемент.Значение; // BoxId
		РеквизитыОрганизации = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().РеквизитыОрганизацииИзКонтекста", BoxId);
		
	КонецЕсли;
	
	ИнформацияДляТехПоддержки = Новый ТекстовыйДокумент;
	
	ИнформацияДляТехподдержки.ДобавитьСтроку("Описание проблемы:");
	ИнформацияДляТехподдержки.ДобавитьСтроку("");
	ИнформацияДляТехподдержки.ДобавитьСтроку("");
	
	ИнформацияДляТехПоддержки.ДобавитьСтроку("----------------------------");
	ВывестиИнформациюОбОрганизацииВТекстовыйДокумент(ИнформацияДляТехПоддержки, РеквизитыОрганизации);
	
	ИнформацияДляТехПоддержки.ДобавитьСтроку("----------------------------");
	ТехническаяИнформация = МетодСервераБезКонтекста(Истина, "ОбработкаОбъект().СформироватьТехническуюИнформацию", BoxId, Ложь);
	ИнформацияДляТехподдержки.ДобавитьСтроку(ТехническаяИнформация);
	
	ПереводСтроки 	= "%0A";
	ТелоПисьма 		= ПереводСтроки;
	КоличествоСтрок = ИнформацияДляТехПоддержки.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		
		ТекСтрока 	= ИнформацияДляТехПоддержки.ПолучитьСтроку(НомерСтроки);
		ТекСтрока 	= СтрЗаменить(ТекСтрока, "\"	, "%2F");
		ТекСтрока 	= СтрЗаменить(ТекСтрока, """"	, "%22");
		
		ТелоПисьма 	= ТелоПисьма + ПереводСтроки + ТекСтрока;
		
	КонецЦикла;
	
	Гиперссылка = "mailto:[кому]?subject=[тема]&body=[тело]";
	Гиперссылка = СтрЗаменить(Гиперссылка, "[кому]", "diadoc@skbkontur.ru");
	Гиперссылка = СтрЗаменить(Гиперссылка, "[тема]", "Диадок. Модуль 1С");
	Гиперссылка = СтрЗаменить(Гиперссылка, "[тело]", ТелоПисьма);
	
	ЗапуститьПриложение(Гиперссылка);
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Техподдержка;
	ДействиеМетрики		= "Написать письмо в техподдержку";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОрганизациюДляОбращения(ОписаниеОповещения, ПоказатьПредупреждениеПриПустомСписке = Истина)
	
	СписокВыбора = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Организации_СписокОрганизацийДляВыбора", Истина);
	СписокПустой = СписокВыбора.Количество() = 0;
	
	Если СписокПустой 
		И ПоказатьПредупреждениеПриПустомСписке Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Список организаций пуст!'");
		ПоказатьПредупреждениеПереопределенная(Неопределено, ТекстПредупреждения, 60);
		
	ИначеЕсли СписокПустой Тогда
		
		ВыбранныйЭлемент = Неопределено;
		ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, ВыбранныйЭлемент);
		
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда 
		
		ВыбранныйЭлемент = СписокВыбора[0];
		ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, ВыбранныйЭлемент);
		
	Иначе
		
		ЗаголовокВыбораОрганизации	= НСтр("ru = 'Выберите организацию, от которой идет обращение'");
		ПоказатьВыборЭлемента(СписокВыбора, ОписаниеОповещения, ЗаголовокВыбораОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в текстовый документ сведения об организации:
// Наименование, ИНН, КПП
//
// Параметры:
//  ТекстовыйДокумент - ТекстовыйДокумент - заполняемый текстовый документ
&НаКлиенте
Процедура ВывестиИнформациюОбОрганизацииВТекстовыйДокумент(ТекстовыйДокумент, РеквизитыОрганизации)
	
	ТекстовыйДокумент.ДобавитьСтроку("Организация: " 	+ РеквизитыОрганизации.Наименование);
	ТекстовыйДокумент.ДобавитьСтроку("ИНН: " 			+ РеквизитыОрганизации.ИНН);
	ТекстовыйДокумент.ДобавитьСтроку("КПП: " 			+ РеквизитыОрганизации.КПП);
	
КонецПроцедуры

// Обертка для формирования ключей параметров, передаваемых в URL
&НаКлиенте
Функция ПродуктовыйПараметр(ИмяПараметра)
	
	Возврат СтрЗаменить("scope/1CDiadoc/%ИмяПараметра%", "%ИмяПараметра%", ИмяПараметра);
	
КонецФункции

// Обертка для формирования ключей параметров, передаваемых в URL
&НаКлиенте
Функция БазовыйПараметр(ИмяПараметра)
	
	Возврат СтрЗаменить("base/%ИмяПараметра%", "%ИмяПараметра%", ИмяПараметра);
	
КонецФункции

// Преобразует коллекцию элементов КлючИЗначение в строку параметров URI
//
// Параметры:
//  КоллекцияПараметров - Структура - коллекция элементов КлючИЗначение
// 
// Возвращаемое значение:
//  Строка - строка параметров в формате ?paramName1=paramValue1&paramName2=paramValue2&...&paramNameN=paramValueN
&НаКлиентеНаСервереБезКонтекста
Функция СтруктуруВСтрокуПараметровURI(КоллекцияПараметров)
	
	Результат = "";
	
	Для Каждого Параметр Из КоллекцияПараметров Цикл 
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат = Результат 
					+ "" + Параметр.Ключ
					+ "=" + СокрЛП(Параметр.Значение)
					+ "&";
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Результат = "?" + Лев(Результат, СтрДлина(Результат)-1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует коллекцию элементов КлючИЗначение в строку, представляющую собой массив параметров URI
//
// Параметры:
//  КоллекцияПараметров - Структура, Соответствие - коллекция элементов КлючИЗначение
// 
// Возвращаемое значение:
//  Строка - коллекция KeyValue в формате: {"key1":"value1","key2":"value2",...,"keyN":"valueN"}
&НаКлиентеНаСервереБезКонтекста
Функция СтруктуруВКоллекциюПараметровURI(КоллекцияПараметров)
	
	Результат = "";
	
	Для Каждого Параметр Из КоллекцияПараметров Цикл 
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		Ключ 		= Параметр.Ключ;
		Значение 	= СокрЛП(Параметр.Значение);
		Значение 	= СтрЗаменить(Значение, "\"	, "\\"	); // экранируем обратный слеш
		Значение 	= СтрЗаменить(Значение, """", "\"""	); // экранируем кавычки
		
		ПараметрСтрокой = """" + Ключ + """:""" + Значение + """";
		
		Результат = Результат + ПараметрСтрокой + ",";
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Результат = Лев(Результат, СтрДлина(Результат)-1);
		Результат = СтрЗаменить("{%Параметры%}", "%Параметры%", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// }	ТЕХПОДДЕРЖКА


// {	ПОСТРАНИЧНЫЙ ПРОСМОТР СПИСКА

&НаСервере
Процедура ОбновитьЗаголовокНомерСтраницы()
	
	НовыйЗаголовок = Строка(НомерСтраницы) + " из " + Строка(КоличествоСтраниц);
	Элементы.НомерСтраницы.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиНавигацииПоСтраницам()
	
	Элементы.ПерваяСтраница.Доступность		 = ?(НомерСтраницы > 1, Истина, Ложь);
	Элементы.ПредыдущаяСтраница.Доступность	 = ?(НомерСтраницы > 1, Истина, Ложь);
	Элементы.СледующаяСтраница.Доступность	 = ?(НомерСтраницы < КоличествоСтраниц, Истина, Ложь);
	Элементы.ПоследняяСтраница.Доступность	 = ?(НомерСтраницы < КоличествоСтраниц, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерваяСтраница(Команда)
	
	НомерСтраницы = 1;
	ОбновитьСтраницуСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	
	НомерСтраницы = НомерСтраницы - 1;
	ОбновитьСтраницуСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	
	НомерСтраницы = НомерСтраницы + 1;
	ОбновитьСтраницуСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследняяСтраница(Команда)
	
	НомерСтраницы = КоличествоСтраниц;
	ОбновитьСтраницуСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСтраницыПриИзменении(Элемент)
	
	Если РазмерСтраницы = 0 Тогда
		РазмерСтраницы = 1;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ПостраничныйПросмотр;
	ДействиеМетрики		= "Изменить показатель";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РазмерСтраницы);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ОбновитьСтраницуСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСтраницыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда // Подбор выполнен с помощью кнопки выбора из списка
		
		СписокВыбора		 = МетодСервераБезКонтекста(Истина, "ОбработкаОбъект().СписокДокументов_СписокВыбораРазмераСтраницы");
		ОписаниеОповещения	 = НовыйОписаниеОповещения("ОбработчикПослеВыбораИзМенюРазмераСтраницы", ЭтаФорма);
		
		Форма_ПоказатьВыборИзМеню(ЭтаФорма, ОписаниеОповещения, СписокВыбора, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеВыбораИзМенюРазмераСтраницы(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РазмерСтраницы = Результат.Значение;
		ОбновитьСтраницуСпискаДокументов();
		
	КонецЕсли;
	
КонецПроцедуры

// }	ПОСТРАНИЧНЫЙ ПРОСМОТР СПИСКА


// {	ОСНОВНЫЕ ДЕЙСТВИЯ

&НаКлиенте
Процедура ВыбратьРежимДляОтправки(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики		= "Для отправки";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ОбновитьСписок(РежимыОтображения().ДляОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимИсходящие(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики		= "Исходящие";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	Если НЕ ИспользуетсяПодсистемаДиадок Тогда
		СформироватьИзвещенияОПолучении();
	КонецЕсли;
	
	ОбновитьСписок(РежимыОтображения().Исходящие);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимВходящие(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики		= "Входящие";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	Если НЕ ИспользуетсяПодсистемаДиадок Тогда
		СформироватьИзвещенияОПолучении();
	КонецЕсли;
	
	ОбновитьСписок(РежимыОтображения().Входящие);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтбораПоСтатусу(РежимОтображения)
	
	Если РежимОтображения <> РежимыОтображения().ДляОтправки Тогда
		
		Элементы.ГруппаОтборСтатус.Видимость = Истина;
		
		УстановитьОтборПоСтатусу(РежимОтображения);
		
	Иначе
		
		Элементы.ГруппаОтборСтатус.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтбораПоВидуПакета(РежимОтображения)
	
	Если РежимОтображения = РежимыОтображения().ДляОтправки Тогда
		
		Элементы.ГруппаОтборПоВидуПакета.Видимость 	= Истина;
		
		УстановитьОтборПоВидуПакета();
		
	Иначе
		
		Элементы.ГруппаОтборПоВидуПакета.Видимость 	= Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПользователяНажатие(Элемент)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().ИнициализацияМодуля;
	ДействиеМетрики = "Сменить пользователя";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ПоказатьИндикаторДлительнойОперации();
	
	ОткрытьФормуАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделениеДокументов(Команда)
	
	УстановитьФлажки = ЕстьВыбранныеСтрокиСпискаДокументов();
	
	ОбработатьВыделениеДокументов(УстановитьФлажки);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВыбранныеСтрокиСпискаДокументов()
	
	Результат = Истина;
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		Если СтрокаСписка.Флажок Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузкуНовогоПакета(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Создать отдельный пакет";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	ОткрытьФормуНовогоПакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДокументовСДискаВВыбранныеПакеты(Команда)
	
	ДанныеВыделенныхСтрок = ДанныеВыделенныхСтрокТЧ(Ложь);
	КоличествоСтрок = ДанныеВыделенныхСтрок.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		ПоказатьПредупреждениеНеВыбраноНиОднойСтроки();
		
	Иначе
		
		КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
		ДействиеМетрики		= "Добавить в выбранные пакеты";
		
		Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
		
		ОткрытьФормуДобавленияДокументовСДискаВВыбранныеПакеты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НетНужногоДокумента(Команда)
	
	Метрика_НетНужногоДокумента();
	
	ПоказатьФормуНетНужногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуНетНужногоДокумента()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "НетНужногоДокумента");
	
	ОповещениеОЗакрытииФормы = НовыйОписаниеОповещения("ОповещениеОЗакрытииФормыНетНужногоДокумента", ЭтаФорма);
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормы
	);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_НетНужногоДокумента()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().НетНужногоДокумента;
	ДействиеМетрики		= Метрика_НазваниеДействий().ОткрытиеПомощника;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	ИдентификаторПользователя = Ядро.ИдентификаторТекущегоПользователяСервиса();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ИдентификаторПользователя = "Пользователь не авторизован";
	КонецЕсли;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("UserID", ИдентификаторПользователя);
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		Неопределено,
		ДопПеременные
	);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОЗакрытииФормыНетНужногоДокумента(ПараметрОповещения = Неопределено, ПараметрыОбработки = Неопределено) Экспорт
	
	ОбновитьГлавныйСписок();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГлавныйСписок()
	
	ИмяСобытия = "Диадок_ОбновитьГлавныйСписок";
	ПараметрыОповещения = Неопределено;
	ИсточникОповещения = ИдентификаторОсновнойФормы();
	
	Оповестить(
		ИмяСобытия,
		ПараметрыОповещения,
		ИсточникОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Переотправка(Команда)
	
	Метрика_Переотправка();
	
	ПоказатьФормуПереотправка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуПереотправка()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "Переотправка");
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы
	);

КонецПроцедуры

&НаКлиенте
Процедура Метрика_Переотправка()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Переотправка;
	ДействиеМетрики		= Метрика_НазваниеДействий().ОткрытиеПомощника;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	ИдентификаторПользователя = Ядро.ИдентификаторТекущегоПользователяСервиса();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ИдентификаторПользователя = "Пользователь не авторизован";
	КонецЕсли;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("UserID", ИдентификаторПользователя);
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		Неопределено,
		ДопПеременные
	);

КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрокаЭлементФормы, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрока = Элемент.ТекущиеДанные;
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		
		Если Поле.Имя = "СписокДокументовДокумент"
			И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
			
			ПоказатьЗначениеПереопределенная(ВыбраннаяСтрока.Документ);
			
		Иначе
			ОткрытьФормуПакета(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПакета(ВыбраннаяСтрока)
	
	СтрокаСписка = Новый_СтруктураДанныхСтрокиСписка(ВыбраннаяСтрока);
	
	КлючПакетаДокументов = КлючПакетаДокументов(ВыбраннаяСтрока);
	РежимФормы = РежимыФормыПакета().ОтображениеПакета;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("Ключ",								КлючПакетаДокументов);
	ПараметрыФормы.Вставить("СтрокаСписка",						СтрокаСписка);
	ПараметрыФормы.Вставить("ВыбранныеФайлы",					Неопределено);
	ПараметрыФормы.Вставить("РежимФормы",						РежимФормы);
	ПараметрыФормы.Вставить("РежимОтображенияДокументов",		РежимОтображенияДокументов);
	
	мОткрытьФорму("ФормаПакетаУправляемая", ПараметрыФормы, , ЭтаФорма, КлючПакетаДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоПакета()
	
	ВыбранныеФайлы = ВыбратьФайлыДляДобавленияВПакет();
	
	Если НЕ ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	КлючПакетаДокументов 	= КлючПакетаДокументов(Неопределено);
	СтрокаСписка 			= Новый_СтруктураДанныхСтрокиСписка(Неопределено);
	РежимФормы				= РежимыФормыПакета().СозданиеНовогоПакета;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("Ключ",								КлючПакетаДокументов);
	ПараметрыФормы.Вставить("СтрокаСписка",						СтрокаСписка);
	ПараметрыФормы.Вставить("ВыбранныеФайлы",					ВыбранныеФайлы);
	ПараметрыФормы.Вставить("РежимФормы",						РежимФормы);
	ПараметрыФормы.Вставить("РежимОтображенияДокументов",		РежимОтображенияДокументов);
	
	ПараметрОрганизация = Неопределено;
	ПараметрКонтрагент  = Неопределено;
	
	Если ВключитьОтборПоОрганизации 
		И ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		ПараметрОрганизация = ОтборПоОрганизации;
	КонецЕсли; 
	
	Если ВключитьОтборПоКонтрагенту 
		И ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
		ПараметрКонтрагент = ОтборПоКонтрагенту;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Организация",					ПараметрОрганизация);
	ПараметрыФормы.Вставить("Контрагент",					ПараметрКонтрагент);
	
	мОткрытьФорму("ФормаПакетаУправляемая", ПараметрыФормы, , ЭтаФорма, КлючПакетаДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияДокументовСДискаВВыбранныеПакеты()
	
	КлючФормыПакета = РежимыФормыПакета().ДобавлениеДокументовСДиска;
	РежимФормы = РежимыФормыПакета().ДобавлениеДокументовСДиска;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("Ключ",								КлючФормыПакета);
	ПараметрыФормы.Вставить("СтрокаСписка",						Неопределено);
	ПараметрыФормы.Вставить("ВыбранныеФайлы",					Неопределено);
	ПараметрыФормы.Вставить("РежимФормы",						РежимФормы);
	ПараметрыФормы.Вставить("РежимОтображенияДокументов",		РежимОтображенияДокументов);
	
	ФормаПакетаДобавленияДокументовСДиска = ПолучитьФормуОбработки("ФормаПакетаУправляемая", ЭтаФорма, ПараметрыФормы);
	
	Если ФормаПакетаДобавленияДокументовСДиска.Открыта() Тогда
		ФормаПакетаДобавленияДокументовСДиска.Активизировать();
	Иначе
		ФормаПакетаДобавленияДокументовСДиска = "";
		
		ВыбранныеФайлы = ВыбратьФайлыДляДобавленияВПакет();
		
		Если НЕ ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ВыбранныеФайлы", ВыбранныеФайлы);
		
		ОписаниеОповещения = НовыйОписаниеОповещения("ПослеДобавленияДокументовСДискаВВыбранныеПакеты", ЭтаФорма);
		
		мОткрытьФорму("ФормаПакетаУправляемая", ПараметрыФормы, ОписаниеОповещения, ЭтаФорма, КлючФормыПакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияДокументовСДискаВВыбранныеПакеты(ДокументыСДиска, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументыСДиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		Возврат;
	КонецЕсли;
	
	КлючиВыбранныхПакетов = Новый Массив;
	
	ДанныеВыделенныхСтрок = ДанныеВыделенныхСтрокТЧ(Ложь);
	
	Для Каждого СтрокаСписка Из ДанныеВыделенныхСтрок Цикл
		КлючиВыбранныхПакетов.Добавить(СтрокаСписка.Ключ);
	КонецЦикла;
	
	ПослеДобавленияДокументовСДискаВВыбранныеПакетыНаСервере(ДокументыСДиска, КлючиВыбранныхПакетов);
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДокументовСДискаВВыбранныеПакетыНаСервере(ДокументыСДиска, КлючиВыбранныхПакетов)
	
	МенеджерМодуля = ОбработкаОбъект();
	МенеджерМодуля.ПоместитьВКэшДобавленныеВВыбранныеВПакетыДокументыСДискаИОбновитьСписок(ДокументыСДиска, КлючиВыбранныхПакетов, СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайлыДляДобавленияВПакет() 
	
	Результат = Новый Массив;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок			= "Выберите файл";
	Диалог.ПолноеИмяФайла		= ""; 
	Диалог.Фильтр				= НСтр("ru = 'Все файлы(*.*)|*.*'"); 
    Диалог.МножественныйВыбор	= Истина;
	
	Если Диалог.Выбрать() Тогда
		Результат = Диалог.ВыбранныеФайлы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КлючПакетаДокументов(ВыбраннаяСтрока) 
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		
		Результат = Новый УникальныйИдентификатор;
		
	Иначе
		
		Результат = РежимОтображенияДокументов + " " + ВыбраннаяСтрока.Ключ;
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.ВидПакетаID) Тогда
			Результат = Результат + " " + ВыбраннаяСтрока.ВидПакетаID
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокДокументовСортироватьПоВозрастанию(Команда)
	
	СписокДокументовСортировать("Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовСортироватьПоУбыванию(Команда)

	СписокДокументовСортировать("Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовСортировать(НаправлениеСортировки)
	
	ИмяТекущейКолонки = СтрЗаменить(Элементы.СписокДокументов.ТекущийЭлемент.Имя, "СписокДокументов", "");
	
	СписокДокументов.Сортировать(ИмяТекущейКолонки + " " + НаправлениеСортировки);
	УбратьИконкиПакета();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьИконкиПакета()
	
	Для Каждого СтрокаСписка ИЗ СписокДокументов Цикл
		СтрокаСписка.ИндексИконкиПакета = 0;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)

	КатегорияМетрики	= Метрика_НазваниеКатегории().ОбменССервером;
	ДействиеМетрики		= "Обмен с сервером";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ВыполнитьОбменССерверомСФормойПрогресса();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьАвторизациюСлужебногоПользователя()

	ЛогинДляОбмена  = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ОбщиеНастройки_Прочитать", "СлужебнаяУчетнаяЗаписьЛогин");
	ПарольДляОбмена = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ОбщиеНастройки_Прочитать", "СлужебнаяУчетнаяЗаписьПароль");

	Результат = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Авторизация_ПроверкаАвторизации", , ЛогинДляОбмена, ПарольДляОбмена);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбменССерверомСФормойПрогресса() Экспорт
	
	СформироватьИзвещенияОПолучении();
	
	МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().ВнешнееХранение_ВыполнитьОчисткуУстаревшихДокументов");
	
	Если Объект.ОбщийКонтекстКлиентСервер.ИспользоватьСлужебнуюУчетнуюЗапись 
		 И Не ПроверитьАвторизациюСлужебногоПользователя() Тогда 
			
		ТекстОшибкиАвторизации	= "В настройках введен неверный логин или пароль.
								  |Не удалось выполнить обмен с сервером.";
					  
		ПоказатьПредупреждениеОбОшибкеАвторизацииСлужебногоПользователя(ТекстОшибкиАвторизации);
		
		Возврат;	
		
	КонецЕсли;
	
	КоличествоОрганизаций = КонтекстСеансаКлиентСервер.Количество();
		
	ОрганизацииСОшибкамиАвторизации	= Новый Массив;
	СчетчикОрганизаций				= 0;
	
	Для Каждого СтрокаКонтекста Из КонтекстСеансаКлиентСервер Цикл
		
		Если НЕ СтрокаКонтекста.Значение.Свойство("ОрганизацияДиадок") Тогда
			Продолжить;
		КонецЕсли;
		
		BoxId = СтрокаКонтекста.Ключ;
		
		КатегорияМетрики	= Метрика_НазваниеКатегории().ОбменССервером;
		ДействиеМетрики		= "Обмен с сервером";

		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики);
		
		СчетчикОрганизаций	= СчетчикОрганизаций + 1;
		ОрганизацияДиадок	= СтрокаКонтекста.Значение.ОрганизацияДиадок;
		
		ФормаПрогресса = Форма_ПрогрессВыполнения();
		ФормаПрогресса.МассоваяОбработка = Истина;
		ФормаПрогресса.УстановитьЗаголовок("Синхронизация (" + СчетчикОрганизаций + " из " + КоличествоОрганизаций + "): " + ОрганизацияДиадок);
		ФормаПрогресса.УстановитьЗначениеПрогресса(0);
		ФормаПрогресса.СброситьНадписи();
		
		Если СтрокаКонтекста.Значение.ПраваПользователя.DocumentAccessLevel <> "AllDocuments"
			И Не Объект.ОбщийКонтекстКлиентСервер.ИспользоватьСлужебнуюУчетнуюЗапись Тогда
			
			ОрганизацииСОшибкамиАвторизации.Добавить(ОрганизацияДиадок);
			
			Продолжить;
			
		КонецЕсли;
		
		СчетчикЦикла = 0;
		
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя();
			
			СчетчикЦикла = СчетчикЦикла + 1;
			
			ОписаниеОрганизации		= МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Организации_ЗаполненныеРеквизиты", ОрганизацияДиадок);
			ОсталосьСобытийВЯщике	= МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Лента_ОбработатьНовыеСобытияДокументов_v3", ОписаниеОрганизации, 1);
			ВсегоИтерацийКОбработке = СчетчикЦикла + Цел(ОсталосьСобытийВЯщике / 100);
			
			ФормаПрогресса.УстановитьМаксимальноеЗначение(ВсегоИтерацийКОбработке);
			ФормаПрогресса.УвеличитьЗначениеПрогресса();
			
			Если ОсталосьСобытийВЯщике = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаПрогресса.Закрыть();
		
	КонецЦикла;
	
	ОбновитьГлавныйСписок();
	
	Если ОрганизацииСОшибкамиАвторизации.Количество() > 0 Тогда
		
		ТекстОшибкиАвторизации	= "Не удалось выполнить обмен с сервером.
								  |Укажите служебную учетную запись с полным доступом ко всем подразделениям организаций: ";
					  
		ОрганизацииСтрокой		= Общее_СоединитьСтроку(ОрганизацииСОшибкамиАвторизации, ", ");
		ТекстОшибкиАвторизации	= ТекстОшибкиАвторизации + ОрганизацииСтрокой;
		
		ПоказатьПредупреждениеОбОшибкеАвторизацииСлужебногоПользователя(ТекстОшибкиАвторизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОшибкеАвторизацииСлужебногоПользователя(ТекстОшибкиАвторизации)
	
	Оповещение = НовыйОписаниеОповещения("ОбработчикОткрытьНастройкуСервисныеФункции", ЭтаФорма);

	КнопкаПерейтиКНастройке = "Перейти к настройке";
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КнопкаПерейтиКНастройке);
	КнопкиВопроса.Добавить("Закрыть");

	ПоказатьВопросПереопределенная(Оповещение, ТекстОшибкиАвторизации, КнопкиВопроса,, КнопкаПерейтиКНастройке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытьНастройкуСервисныеФункции(ПараметрОповещения = Неопределено, ПараметрыОбработки = Неопределено) Экспорт 
	
	Если ПараметрОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрОповещения <> "Перейти к настройке" Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ОбменССервером;
	ДействиеМетрики		= "Перейти к настройке";

	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьНастройки("СервисныеФункции");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИзвещенияОПолучении()
	
	ЕстьОтпечатокСертификата = Ложь;
	
	Для Каждого СтрокаКонтекста Из КонтекстСеансаКлиентСервер Цикл
		Если СтрокаКонтекста.Значение.Свойство("ОтпечатокСертификата")
			И ЗначениеЗаполнено(СтрокаКонтекста.Значение.ОтпечатокСертификата) Тогда
			ЕстьОтпечатокСертификата = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтпечатокСертификата Тогда
		
		Состояние("Формирование и отправка извещений о получении СФ...");
		
		Ядро = Модуль_ЯдроНаКлиенте();
		
		ПодготовленныеИзвещенияВсехОрганизаций = Ядро.ИоП_ПодготовитьИзвещенияОПолучении();
		
		Попытка
			Ядро.ИоП_ПодписатьИзвещенияОПолучении(ПодготовленныеИзвещенияВсехОрганизаций);
		Исключение
			
			ВидОперации = НСтр("ru = 'Формирование извещений о получении'");
			ТекстСообщения = НСтр("ru = 'Не удалось подписать извещения'");
			Ошибка = ИнформацияОбОшибке();
			
			_ОбработатьОшибку(
				ВидОперации,
				Ошибка,
				ТекстСообщения
			);
			
			Возврат;
			
		КонецПопытки;
		
		Ядро.ИоП_ОтправитьИзвещенияОПолучении(ПодготовленныеИзвещенияВсехОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Период";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаПериода",				НастройкаВыбораПериода);
	ПараметрыФормы.Вставить("РежимОтображенияДокументов",	РежимОтображенияДокументов);
	
	Оповещение = НовыйОписаниеОповещения("ОбработкаВыбораПериода", ЭтаФорма);
	ОткрытьФормуДиадокМодально("НастройкаПериодаУправляемая", ЭтаФорма, ПараметрыФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(РезультатВыбораПериода = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если РезультатВыбораПериода <> Неопределено Тогда
		
		НастройкаВыбораПериода = РезультатВыбораПериода;
		
		ОбновитьСписок();
		
		УстановитьЗаголовокКнопкиПериода();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтры(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Расширенные фильтры";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимОтображенияДокументов", РежимОтображенияДокументов);
	
	ОткрытьФормуДиадокМодально("ФормаФильтровУправляемая", ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтры(КомпоновщикНастроек) Экспорт
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Фильтры;
	ДействиеМетрики		= "Применить";

	Объект.КомпоновщикНастроекОтбора = КомпоновщикНастроек;
	
	МассивФильтров = МассивУстановленныхФильтров();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Массив фильтров", МассивФильтров);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьТекущиеОтборыНаСервере(КомпоновщикНастроек);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеОтборыНаСервере(КомпоновщикНастроек)
	
	ОбработкаОбъект().СохранитьНастройкуКомпановкиДанныхДляРежима(РежимОтображенияДокументов, КомпоновщикНастроек);
	ОбработкаОбъект().ТаблицаОтборов_УстановитьОтборыСпискаДокументов(РежимОтображенияДокументов);
	
	ОбновитьСтраницуСпискаДокументовНаСервере();
	
	КоличествоУстановленныхФильтров = КоличествоУстановленныхФильтров();	
	УстановитьЗаголовокКнопкиФильтров(КоличествоУстановленныхФильтров);
	
КонецПроцедуры

&НаСервере
Функция КоличествоУстановленныхФильтров()
	
	Результат = 0;
	
	КомпоновщикНастроекОтбора = ОбработкаОбъект().КомпоновщикНастроекОтбора;
	
	Для Каждого Отбор Из КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
		
		Если Отбор.Использование Тогда
			
			Результат = Результат + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МассивУстановленныхФильтров()
	
	Результат = Новый Массив;
	
	Для Каждого Отбор Из Объект.КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
		
		Если Отбор.Использование Тогда
			Результат.Добавить(Строка(Отбор.ЛевоеЗначение));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКнопкиФильтров(КоличествоУстановленныхФильтров)
	 
	Если ЗначениеЗаполнено(КоличествоУстановленныхФильтров) Тогда
		
		Если Элементы.Фильтры.Заголовок <> Строка(КоличествоУстановленныхФильтров) Тогда
			
			Элементы.Фильтры.Картинка 		= Элементы.КартинкаФильтрыАктивныеСкрытая.Картинка;
			Элементы.Фильтры.Отображение	= ОтображениеКнопки.КартинкаИТекст;
			Элементы.Фильтры.Ширина 		= 6;
			Элементы.Фильтры.Заголовок		= КоличествоУстановленныхФильтров;
			
		КонецЕсли;
		
	Иначе
		
		СброситьЗаголовокКнопкиФильтров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьЗаголовокКнопкиФильтров()
	 
	Элементы.Фильтры.Картинка 		= Элементы.КартинкаФильтрыНеактивныеСкрытая.Картинка;
	Элементы.Фильтры.Отображение	= ОтображениеКнопки.Картинка;
	Элементы.Фильтры.Ширина 		= 4;
	Элементы.Фильтры.Заголовок 		= "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусу(РежимОтображения)
	
	СписокВыбораСтатусов = Элементы.ОтборПоСтатусу.СписокВыбора;
	
	Если ЗначениеЗаполнено(СписокВыбораСтатусов) Тогда
		СписокВыбораСтатусов.Очистить();
	КонецЕсли;
	
	СписокЗначенийСтатусов = ОбработкаОбъект().СписокЗначенийСтатусов(РежимОтображения);
	
	Для Каждого Элемент Из СписокЗначенийСтатусов Цикл
	
		СписокВыбораСтатусов.Добавить(Элемент.Значение);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВидуПакета()
	
	СписокВыбораВидовПакета = Элементы.ОтборПоВидуПакета.СписокВыбора;
	
	Если Не ЗначениеЗаполнено(СписокВыбораВидовПакета) Тогда
		
		СписокЗначенийВидовПакета = ОбработкаОбъект().СписокЗначенийВидовПакета();
		
		Для Каждого Элемент Из СписокЗначенийВидовПакета Цикл
			СписокВыбораВидовПакета.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьСписок(Команда = Неопределено)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ОбменССервером;
	ДействиеМетрики		= "Обновить список";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	Если НЕ ИспользуетсяПодсистемаДиадок
		И ЗначениеЗаполнено(РежимОтображенияДокументов)
		И РежимОтображенияДокументов <> РежимыОтображения().ДляОтправки Тогда
		
		СформироватьИзвещенияОПолучении();
		
	КонецЕсли;
	
	ОбновитьСписок();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСкачатьОбновлениеНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СкачатьОбновление;
	ДействиеМетрики		= "Скачать обновление";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьФормуОбновления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбновления() Экспорт
	
	ТекущаяВерсия	= МетодСервераБезКонтекста(Истина, "ОбработкаОбъект().ВерсияОбработки");
	НоваяВерсия		= ДанныеДляОбновленияМодуля.ОписаниеОбновленияМодуля.Версия;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоваяВерсия",		НоваяВерсия);
	ПараметрыФормы.Вставить("ТекущаяВерсия",	ТекущаяВерсия);
	ПараметрыФормы.Вставить("ДанныеДляОбновленияМодуля", ДанныеДляОбновленияМодуля);
	
	мОткрытьФорму("ФормаОбновленияУправляемая", ПараметрыФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьОкончанияОплаченногоПериодаНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().ОнлайнСчета;
	ДействиеМетрики		= "Оплатить счет";
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
	ОткрытьФормуСпискаОнлайнСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаОнлайнСчетов()
	
	Модуль_ЯдроНаКлиенте().ОнлайнСчета_ОткрытьФорму(ЭтаФорма);
	
КонецПроцедуры

// }	ОСНОВНЫЕ ДЕЙСТВИЯ

// {	ДОПОЛНИТЕЛЬНЫЕ ДЕЙСТВИЯ

&НаСервере
Процедура ЗаполнитьМенюДействий(РежимОтображенияДокументов)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	РежимыОтображения = РежимыОтображения();
	
	РежимДляОтправки	= (РежимОтображенияДокументов = РежимыОтображения.ДляОтправки);
	РежимИсходящие		= (РежимОтображенияДокументов = РежимыОтображения.Исходящие);
	РежимВходящие		= (РежимОтображенияДокументов = РежимыОтображения.Входящие);
	
	ОтключитьАнализ = Модуль_ЯдроНаСервере().ОбщиеНастройки_Прочитать("ОтключитьАнализДляВходящихДокументов");
	
	Элементы.ГруппаЗагрузитьСКомпьютера.Видимость		= РежимДляОтправки;
	Элементы.ГруппаНетНужногоДокумента.Видимость		= РежимДляОтправки И НЕ Ядро.ДоступнаФункцияПоискаДокументов();
	Элементы.ВыполнитьПерезаполнениеПакета.Видимость 	= РежимДляОтправки И ИспользуетсяПодсистемаДиадок;
	Элементы.ВыполнитьПодписаниеИОтправку.Видимость		= РежимДляОтправки ИЛИ РежимИсходящие;
	Элементы.ОткрытьПомощникПоискаДокумента.Видимость = РежимДляОтправки И Ядро.ДоступнаФункцияПоискаДокументов();
	
	Элементы.ВыполнитьПередатьВПодразделение.Видимость	= НЕ РежимДляОтправки;
	Элементы.ВыполнитьСохранитьДокумент.Видимость		= НЕ РежимДляОтправки;
	Элементы.ВыполнитьПолучитьПечатнуюФорму.Видимость 	= НЕ РежимДляОтправки;
	Элементы.ГруппаОтборСтатус.Видимость				= НЕ РежимДляОтправки;
	
	Элементы.ВыполнитьПерезаполнитьИОтправить.Видимость	= РежимИсходящие;
	Элементы.ГруппаПереотправка.Видимость				= РежимИсходящие;
	
	Элементы.ГруппаПодписаниеВходящих.Видимость					= РежимВходящие;
	Элементы.ГруппаДействияВ1С.Видимость						= РежимВходящие;
	Элементы.ПоказыватьЗавершенные.Видимость					= РежимВходящие И ИспользуетсяПодсистемаДиадок;
	Элементы.ВыполнитьПометитьДокументыКакЗавершенные.Видимость	= РежимВходящие И ИспользуетсяПодсистемаДиадок;
	Элементы.ВыполнитьРасшифроватьДокументы.Видимость			= РежимВходящие И ИспользуетсяПодсистемаДиадок И НЕ ЕстьОграниченияПоТарифу;
	Элементы.ГруппаАнализИОбработка.Видимость					= РежимВходящие И ИспользуетсяПодсистемаДиадок И НЕ ОтключитьАнализ;
	
	Элементы.ГруппаАннулирование.Видимость = (РежимВходящие ИЛИ РежимИсходящие);
	
	ОбработкаОбъект().ЗаполнитьДополнительныеКнопкиИзПодключаемогоМодуля(ЭтаФорма, РежимОтображенияДокументов, Элементы.ДополнительныеДействия);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПроизвольнойКнопки(Команда)
	
	ИмяКнопкиВПМ = СтрЗаменить(Команда.Имя, "НажатиеДополнительнойКнопки_", "");
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ИмяФормы",                     ИмяТекущейФормы());
	ПараметрыПМ.Вставить("РежимОтображенияДокументов",	 РежимОтображенияДокументов);
	ПараметрыПМ.Вставить("ИмяКнопки",					 ИмяКнопкиВПМ);
	ПараметрыПМ.Вставить("ВыделенныеСтроки",			 ДанныеВыделенныхСтрокТЧ(Истина));
	
	НажатиеДополнительнойКнопки(ПараметрыПМ);
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеДополнительнойКнопки(ПараметрыПМ) Экспорт 
	
	// для совместимости со старыми ПМ добавим в ПараметрыПМ РежимОтображенияДокументов и ВыделенныеСтроки
	
	Если Не ПараметрыПМ.Свойство("РежимОтображенияДокументов") Тогда
		ПараметрыПМ.Вставить("РежимОтображенияДокументов", РежимОтображенияДокументов);
	КонецЕсли;
	
	Если Не ПараметрыПМ.Свойство("ВыделенныеСтроки") Тогда
		ПараметрыПМ.Вставить("ВыделенныеСтроки", ДанныеВыделенныхСтрокТЧ(Истина));
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	РезультатПМ = Ядро.ПодключаемыйМодуль_ОбработатьСобытие("НажатиеДополнительнойКнопки", ПараметрыПМ);
	
	ПараметрыПМ.Вставить("ДополнительныеПараметры", РезультатПМ);
	
	Ядро.ПодключаемыйМодуль_ОбработатьСобытиеНаСервере("НажатиеДополнительнойКнопки", ПараметрыПМ);
	
КонецПроцедуры

// Процедура - Нажатие дополнительной кнопки второстепенной формы
//
// Параметры:
//  ПараметрыПМ	 - Структура - параметры для выполнения события ПМ
//
&НаКлиенте
Процедура НажатиеДополнительнойКнопкиДляВторостепеннойФормы(ПараметрыПМ) Экспорт 
	
	ПараметрыПМ.Вставить("РежимОтображенияДокументов", Неопределено);
	ПараметрыПМ.Вставить("ВыделенныеСтроки", Неопределено);
	
	РезультатПМ = Модуль_ЯдроНаКлиенте().ПодключаемыйМодуль_ОбработатьСобытие("НажатиеДополнительнойКнопки", ПараметрыПМ);
	
	ПараметрыПМ.Вставить("ДополнительныеПараметры", РезультатПМ);
	
	РезультатПМ = Модуль_ЯдроНаКлиенте().ПодключаемыйМодуль_ОбработатьСобытиеНаСервере("НажатиеДополнительнойКнопки", ПараметрыПМ);
	
КонецПроцедуры

// }	ДОПОЛНИТЕЛЬНЫЕ ДЕЙСТВИЯ


// {	МАССОВАЯ ОБРАБОТКА ДОКУМЕНТОВ

// { Создание документов

&НаКлиенте
Функция ИспользоватьФормуСозданияДокументов()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Результат = Ядро.ПодключаемыйМодуль_ИспользоватьФормуСозданияДокументов();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСоздатьДокументы(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СозданиеДокументов;
	ДействиеМетрики		= "Создать";
	
	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().СоздатьДокумент, КатегорияМетрики, ДействиеМетрики);
	
	ДополнительныеПараметры = Новый Структура;
	ПараметрыОбработки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Если ИспользоватьФормуСозданияДокументов() Тогда
		ОбработчикСоздатьДокументы = "ПоказатьФормуСозданияДокументовУчета";
	Иначе
		ОбработчикСоздатьДокументы = "ОбработатьСоздатьДокументы";
	КонецЕсли;
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок(ОбработчикСоздатьДокументы, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НесопоставленныеЭлектронныеДокументы(КоллекцияДокументов)
	
	Результат = Новый Массив;
	
	Для Каждого Документ Из КоллекцияДокументов Цикл
		
		Если Не ЗначениеЗаполнено(Документ.ДокументУчета) Тогда
			Результат.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСозданияДокументовУчета(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ВыбранныеДокументы = ПараметрыОбработки.ДанныеДляОбработки;
	ДанныеДляОбработки = НесопоставленныеЭлектронныеДокументы(ВыбранныеДокументы);
	
	Если Не ЗначениеЗаполнено(ДанныеДляОбработки) Тогда
		
		ТекстПредупреждения = "Выбранные электронные документы уже сопоставлены с документами учета!";
		ТаймаутПредупреждения = 60;
		ЗаголовокПредупреждения = "Создание документов учета";
		
		ПоказатьПредупреждениеПереопределенная(
			Неопределено,
			ТекстПредупреждения,
			ТаймаутПредупреждения,
			ЗаголовокПредупреждения
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ДанныеДляОбработки", ДанныеДляОбработки);
	
	ОписаниеОповещения = НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыСозданияДокументов",
		ЭтаФорма,
		ПараметрыОбработки
	);
	
	ОткрытьФормуДиадокМодально(
		"СозданиеДокументовУчетаУправляемая",
		ЭтаФорма,
		ПараметрыСоздания,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСоздатьДокументыВерсия2(ПараметрыОбработки) Экспорт
	
	Перем ОбщиеПараметрыОбработки;
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ПараметрыОбработки.Свойство("ДополнительныеПараметры", ОбщиеПараметрыОбработки);
	
	ПослеСозданияДокументов = НовыйОписаниеОповещения(
		"ОбработчикЗавершенияСозданияДокументовВерсия2",
		ЭтаФорма,
		ПараметрыОбработки
	);
	
	ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
	
	ВыполнитьМассовуюОбработкуДанных(
		"СоздатьДокументыПоПравилу",
		ПакетыДокументов,
		Действие,
		ОбщиеПараметрыОбработки,
		ПослеСозданияДокументов
	);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияДокументов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	Действие		 = ДействияЭДО().СоздатьДокумент;
	КатегорияМетрики = Метрика_НазваниеКатегории().СозданиеДокументов;
	ДействиеМетрики	 = Метрика_ДействиеСоздатьДокументы();
	ФормаВыполнения	 = СвойствоСтруктуры(ДополнительныеПараметры, "ФормаВыполнения");
	
	ОбщиеПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(
		РезультатЗакрытия,
		Действие,
		КатегорияМетрики,
		ДействиеМетрики,
		ФормаВыполнения
	);
	
	ПараметрыОбработки.Вставить("ДополнительныеПараметры", ОбщиеПараметрыОбработки);
	
	ОбработатьСоздатьДокументыВерсия2(ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗавершенияСозданияДокументовВерсия2(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ФормаВыполнения = ПараметрыОбработки.ФормаВыполнения;
	Действие = ДействияЭДО().СоздатьДокумент;
	
	ЗавершениеОбработкиДокументов(Действие, ФормаВыполнения);
	
	ВыполнениеИзФормыПакета = (Этаформа <> ФормаВыполнения);
	
	Если ВыполнениеИзФормыПакета Тогда
		ФормаВыполнения.ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйАдресТаблицыСопоставленияНоменклатуры()
	
	Результат = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыСозданияДокументов()
	
	АдресВХ = НовыйАдресТаблицыСопоставленияНоменклатуры();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресНоменклатурыДляСопоставления", АдресВХ);
	Результат.Вставить("ИдентификаторОперации");
	Результат.Вставить("ДополнительныеПараметры");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСоздатьДокументы(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт 
	
	Перем ДополнительныеПараметры;
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ПараметрыОбработки.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		
		ХранилищеКонтента = Ядро.Документы_Расшифровать(Документ.Идентификаторы);
		Документ.Документооборот.Вставить("ХранилищеКонтента", ХранилищеКонтента);
		
	КонецЦикла;
	
	ПараметрыСоздания = ДополнительныеПараметрыСозданияДокументов();
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСоздания, ДополнительныеПараметры);
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("АдресНоменклатурыДляСопоставления", ПараметрыСоздания.АдресНоменклатурыДляСопоставления);
	
	ОписаниеОповещения = НовыйОписаниеОповещения(
		"ОбработчикЗавершенияСозданияДокументов",
		ЭтаФорма,
		ПараметрыОбработки
	);
	
	ВыполнитьМассовуюОбработкуДанных(
		"СоздатьДокументы",
		ДанныеДляОбработки,
		Действие,
		ПараметрыСоздания,
		ОписаниеОповещения
	);
	
	Ядро.Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗавершенияСозданияДокументов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ФормаВыполнения	= ПараметрыОбработки.ФормаВыполнения;
	АдресВХ			= ПараметрыОбработки.АдресНоменклатурыДляСопоставления;
	
	ЕстьНесопоставленнаяНоменклатура = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ЗначениеЗаполненоИзВременногоХранилища", АдресВХ);
	
	Если ЕстьНесопоставленнаяНоменклатура Тогда
		
		АдресСписокДокументов = ПоместитьВоВременноеХранилище(ПараметрыОбработки.ДанныеДляОбработки, Новый УникальныйИдентификатор);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокКнопкиОК",						"Сопоставить номенклатуру и создать документы");
		ПараметрыФормы.Вставить("АдресТаблицыНоменклатурыДляСопоставления"	, АдресВХ);
		ПараметрыФормы.Вставить("АдресСписокДокументов"						, АдресСписокДокументов);
		
		ОписаниеОповещения = НовыйОписаниеОповещения("ОбработчикЗавершенияСопоставленияНоменклатуры", ЭтаФорма, ПараметрыОбработки);
		ОткрытьФормуДиадокМодально("СопоставлениеНоменклатурыУправляемая", ФормаВыполнения, ПараметрыФормы, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ЗавершениеОбработкиДокументов(ПараметрыОбработки.Действие, ФормаВыполнения);
		
		ВыполнениеИзФормыПакета = (Этаформа <> ФормаВыполнения);
		
		Если ВыполнениеИзФормыПакета Тогда
			ФормаВыполнения.ОбновитьФорму();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗавершенияСопоставленияНоменклатуры(ПовторитьОбработку, ПараметрыОбработки) Экспорт
	
	Если ПовторитьОбработку = Истина Тогда
		ОбработатьСоздатьДокументы(, ПараметрыОбработки);
	Иначе
		ЗавершениеОбработкиДокументов(ПараметрыОбработки.Действие, ПараметрыОбработки.ФормаВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(КонтекстФункции)
	
	ИмяМетода = "Документы_СоздатьДокументы";
	
	ДокументыДляОбработки				= КонтекстФункции.Данные;
	ИдентификаторОперации				= КонтекстФункции.Параметры.ИдентификаторОперации;
	ДополнительныеПараметры				= КонтекстФункции.Параметры.ДополнительныеПараметры;
	АдресНоменклатурыДляСопоставления	= КонтекстФункции.Параметры.АдресНоменклатурыДляСопоставления;
	
	ПараметрыМетода = ПараметрыВМассив(
		ДокументыДляОбработки,
		ИдентификаторОперации,
		ДополнительныеПараметры,
		АдресНоменклатурыДляСопоставления
	);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПоПравилу(КонтекстФункции)
	
	Пакеты = КонтекстФункции.Данные;
		
	ИмяМетода = "Пакеты_СоздатьДокументыПоПравилу";
	ПараметрыМетода = ПараметрыВМассив(Пакеты);
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Создание документов


// { Сопоставление документов

&НаКлиенте
Процедура ВыполнитьСопоставитьДокументы(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СопоставлениеДокументов;
	ДействиеМетрики		= "Сопоставить";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().СопоставитьДокумент, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьСопоставитьДокументы", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставитьДокументы(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ВыполнитьМассовуюОбработкуДанных("СопоставитьДокументы", ДанныеДляОбработки, Действие);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДокументы(КонтекстФункции)
	
	ИмяМетода = "Документы_СопоставитьДокументы";
	
	ДокументыДляОбработки = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Сопоставление документов


// { Анализ документов

&НаКлиенте
Процедура ВыполнитьАнализДокументов(Команда)
	
	КатегорияМетрики = Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики = "Выполнить анализ документов";
	
	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(
			ДанныеДляОбработки,
			ДействияЭДО().АнализДокумента,
			КатегорияМетрики,
			ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьАнализДокументов", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАнализДокументов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	
	ВыполнитьМассовуюОбработкуДанных("АнализДокументов", ДанныеДляОбработки, Действие);
		
КонецПроцедуры

&НаКлиенте
Процедура АнализДокументов(КонтекстФункции)
	
	ИмяМетода = "Документы_ПровестиАнализВходящихДокументов";
	
	ДокументЭДО = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументЭДО);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Анализ документов


// { Анализ пакетов

&НаКлиенте
Процедура ВыполнитьАнализПакетов(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Выполнить анализ";
	
	ДанныеВыделенныхСтрок = ДанныеВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеВыделенныхСтрок.Количество());

	ВыбранныеПакеты = Новый Соответствие;
		
	Для Каждого СтрокаСписка Из ДанныеВыделенныхСтрок Цикл
		ВыбранныеПакеты.Вставить(СтрокаСписка.Пакет);
	КонецЦикла;
	
	ДанныеДляОбработки = Новый Массив;
	
	Для Каждого КлючЗначение Из ВыбранныеПакеты Цикл
		ДанныеДляОбработки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().АнализПакета, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьАнализаПакетов", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАнализаПакетов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;

	ВыполнитьМассовуюОбработкуДанных("АнализПакетов", ДанныеДляОбработки, Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура АнализПакетов(КонтекстФункции)
	
	ИмяМетода = "Пакеты_ПровестиАнализВходящихПакетов";
	
	ПакетыДляОбработки = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(ПакетыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Анализ пакетов


// { Выполнить требуемые действия

&НаКлиенте
Процедура ВыполнитьТребуемоеДействие(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Выполнить действие в 1С";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ВыполнитьДействие, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьТребуемоеДействие", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТребуемоеДействие(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ВыполнитьМассовуюОбработкуДанных("ТребуемоеДействие", ДанныеДляОбработки, Действие);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуемоеДействие(КонтекстФункции)
	
	ИмяМетода = "Документы_ВыполнитьТребуемоеДействиеПоВходящимДокументам";
	
	ДокументыДляОбработки = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Выполнить требуемые действия


// { Пометка документов завершенными

&НаКлиенте
Процедура ВыполнитьПометитьДокументыКакЗавершенные(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Пометить как завершенный";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ПометитьКакЗавершенный, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПометитьДокументыКакЗавершенные", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПометитьДокументыКакЗавершенные(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("ТребуемоеДействиеВ1С", "");
	ОбновляемыеРеквизиты.Вставить("ТребуемоеДействиеВДД", "");
	ОбновляемыеРеквизиты.Вставить("АнализПроведен",		 Истина);
		
	ВыполнитьМассовуюОбработкуДанных("ПометитьДокументыКакЗавершенные", ДанныеДляОбработки, Действие, ОбновляемыеРеквизиты);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьДокументыКакЗавершенные(КонтекстФункции)
	
	ИмяМетода = "ХранениеДанных_ОбновлениеРеквизитовДокументов";
	
	ДокументыДляОбработки	= КонтекстФункции.Данные;
	ОбновляемыеРеквизиты	= КонтекстФункции.Параметры; 
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки, ОбновляемыеРеквизиты);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Пометка документов завершенными


// { Расшифровка

&НаКлиенте
Процедура ВыполнитьРасшифроватьДокументы(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Расшифровать";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ();
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	Действие = ДействияЭДО().Расшифровать;
	
	ДействиеДоступно = ДействиеДоступно(Действие, ТипАвторизации, КатегорияМетрики, ДействиеМетрики);
	
	Если ДействиеДоступно Тогда
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики);
		
		ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьРасшифроватьДокументы", ПараметрыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифроватьДокументы(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ВыполнитьМассовуюОбработкуДанных("РасшифроватьДокументы", ДанныеДляОбработки, Действие);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьДокументы(КонтекстФункции)
	
	ДокументыДляРасшифровки = КонтекстФункции.Данные;
	
	Для каждого Документ Из ДокументыДляРасшифровки Цикл
	
		ХранилищеКонтента = Модуль_ЯдроНаКлиенте().Документы_Расшифровать(Документ.Идентификаторы);
	
	КонецЦикла;
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции);
	
КонецПроцедуры

// } Расшифровка


// { Сохранение документов на диск

&НаКлиенте
Процедура ВыполнитьСохранитьДокумент(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СкачиваниеДокументов;
	ДействиеМетрики		= "Скачать документы";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ПакетыДокументов, ДействияЭДО().СохранитьДокумент, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьСохранитьДокумент", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранитьДокумент(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ВыполнитьМассовуюОбработкуДанных("СохранитьДокументы", ДанныеДляОбработки, Действие);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументы(КонтекстФункции)
	
	ИмяМетода = "Сохранение_СохранитьДокументы";
	
	ДокументыДляОбработки = ОчередьЗадач_ВыгрузитьДокументыИзМассиваПакетов(КонтекстФункции.Данные);
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Сохранение документов на диск


// { Получение печатных форм

&НаКлиенте
Процедура ВыполнитьПолучитьПечатнуюФорму(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().СкачиваниеДокументов;
	ДействиеМетрики		= "Получить печатную форму";

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ПолучитьПечатнуюФорму, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПолучитьПечатнуюФорму", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучитьПечатнуюФорму(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		ПолучитьПечатнуюФормуСервераДиадок(Документ); // Без прогресса обработки, т.к. используется ЗапуститьПриложение.
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПечатнуюФормуСервераДиадок(Документ) Экспорт
	
	ДвоичныеДанныеПечатнойФормы = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ПечатнаяФормаСервераДиадок", Документ.Идентификаторы);
	
	МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().Метрика_ДобавитьСтатистику_СкачиваниеДокументов", "Получить печатную форму", Документ);
	
	Если ТипЗнч(ДвоичныеДанныеПечатнойФормы) = Тип("ДвоичныеДанные") Тогда
		
		ПредставлениеДокумента = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ПредставлениеДокумента", Документ);
		
		ИмяФайлаПечатнойФормы = ПредставлениеДокумента + " - " + Документ.Идентификаторы.DocumentId + ".pdf";
		ИмяФайлаПечатнойФормы = ЗаменитьНедопустимыеСимволыИмениФайла(ИмяФайлаПечатнойФормы);
		
		#Если ВебКлиент Тогда
			
			АдресПечатнойФормы = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПечатнойФормы, УникальныйИдентификатор);
			
			ПолучитьФайл(АдресПечатнойФормы, ИмяФайлаПечатнойФормы, Истина);
			
		#Иначе
			
			ПутьКФайлуПечатнойФормы = КаталогВременныхФайлов() + ИмяФайлаПечатнойФормы;
			
			ДвоичныеДанныеПечатнойФормы.Записать(ПутьКФайлуПечатнойФормы);
			
			ЗапуститьПриложение(ПутьКФайлуПечатнойФормы);
			
		#КонецЕсли
		
	Иначе
		
		ОчиститьСообщения();
		Сообщить("Печатная форма не сформирована!", СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецПроцедуры

// } Получение печатных форм


// { Передача в подразделение

&НаКлиенте
Процедура ВыполнитьПередатьВПодразделение(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Передать в подразделение";
	
	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(Истина, Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ПередатьВПодразделение, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПередатьВПодразделение", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПередатьВПодразделение(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ДанныеДляОбработки = ПараметрыОбработки.ДанныеДляОбработки;
	
	ВыбранныеBoxId	= BoxIdИзДокументов(ДанныеДляОбработки);
	BoxId			= ОбщийBoxId(ВыбранныеBoxId);
	
	Если НЕ ЗначениеЗаполнено(BoxId) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("BoxId", BoxId);
	
	ПараметрыФормы = Новый Структура("BoxId, Действие", ПараметрыОбработки.BoxId, ПараметрыОбработки.Действие);
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ПередатьВПодразделениеОкончаниеВыбора", ЭтаФорма, ПараметрыОбработки);
	
	ОткрытьФормуДиадокМодально("СогласованиеУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВПодразделениеОкончаниеВыбора(ПараметрыПеремещения, ПараметрыОбработки) Экспорт 
	
	Если ПараметрыПеремещения <> Неопределено Тогда
		
		Действие			= ПараметрыОбработки.Действие;
		ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
		КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
		ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
		ОписаниеОповещения	= СвойствоСтруктуры(ПараметрыОбработки, "ОписаниеОповещения");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("BoxId",			ПараметрыПеремещения.BoxId);
		ДополнительныеПараметры.Вставить("DepartmentId",	ПараметрыПеремещения.DepartmentId);
		
		ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
		
		ВыполнитьМассовуюОбработкуДанных("ПередатьВПодразделение", ПакетыДокументов, Действие, ДополнительныеПараметры, ОписаниеОповещения);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВПодразделение(КонтекстФункции)
	
	ИмяМетода				= "Документы_ПереместитьМассивДокументовВПодразделение";
	
	ДокументыДляОбработки	= ОчередьЗадач_ВыгрузитьДокументыИзМассиваПакетов(КонтекстФункции.Данные);
	BoxId					= КонтекстФункции.Параметры.BoxId;
	DepartmentId			= КонтекстФункции.Параметры.DepartmentId;
		
	ПараметрыМетода = ПараметрыВМассив(BoxId, DepartmentId, ДокументыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Передача в подразделение


// { Согласование

&НаКлиенте
Процедура ВыполнитьПередатьНаСогласование(Команда)
	
	ВыполнитьДействиеПоМаршрутизации(ДействияЭДО().ПередатьНаСогласование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПередатьНаПодпись(Команда)
	
	ВыполнитьДействиеПоМаршрутизации(ДействияЭДО().ПередатьНаПодпись);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПередатьПоМаршруту(Команда)
	
	ВыполнитьДействиеПоМаршрутизации(ДействияЭДО().ПередатьПоМаршруту);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСогласовать(Команда)
	
	ВыполнитьДействиеПоМаршрутизации(ДействияЭДО().Согласование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтказатьВСогласовании(Команда)
	
	ВыполнитьДействиеПоМаршрутизации(ДействияЭДО().ОтказВСогласовании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПоМаршрутизации(Действие)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= Метрика_НазваниеДействияМаршрутизации(Действие);
	
	Если РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		
		ДанныеДляОбработки	= ДанныеВыделенныхСтрокТЧ(Ложь);
		ДокументыОтправлены = Ложь;
		
	Иначе
		
		ДанныеДляОбработки	= ДанныеДокументовВыделенныхСтрокТЧ(, Истина);
		ДокументыОтправлены = Истина;
		
	КонецЕсли;
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики);
	ПараметрыОбработки.Вставить("ДокументыОтправлены", ДокументыОтправлены);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьДействиеПоМаршрутизации", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПоМаршрутизации(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	ДокументыОтправлены	= ПараметрыОбработки.ДокументыОтправлены;
	ФормаВыполнения		= ПараметрыОбработки.ФормаВыполнения;
	
	Если ДокументыОтправлены 
        ИЛИ ФормаВыполнения <> ОсновнаяФорма() Тогда
		ВыбранныеBoxId = BoxIdИзДокументов(ДанныеДляОбработки);
	Иначе
		ВыбранныеBoxId = BoxIdИзСтрокСписка(ДанныеДляОбработки);
	КонецЕсли;
	
	BoxId = ОбщийBoxId(ВыбранныеBoxId);
	
	Если НЕ ЗначениеЗаполнено(BoxId) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("BoxId", BoxId);
	
	ОтправкаИзФормыНовогоПакета = НЕ ДокументыОтправлены И (ФормаВыполнения <> ОсновнаяФорма());
	
	Если ОтправкаИзФормыНовогоПакета Тогда
		ДокументыДляОбработки = ДокументыПакетов(ДанныеДляОбработки);
	Иначе
		ДокументыДляОбработки = ДанныеДляОбработки;
	КонецЕсли;
	
	Если РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		ДокументыДоступныеДляОбработки = ДокументыДляОбработки;
	Иначе
		ДокументыДоступныеДляОбработки = МетодСервераБезКонтекста(Истина, 
										"Модуль_Ядро().Документы_ДоступныеДляСогласованияДокументы", ДокументыДляОбработки, Действие);
	КонецЕсли;
	
	КоличествоВыбранныхДокументов = ДокументыДляОбработки.Количество();
	КоличествоДоступныхДокументов = ДокументыДоступныеДляОбработки.Количество();
	ДоступныНеВсеДокументы = (КоличествоВыбранныхДокументов <> КоличествоДоступныхДокументов);
	
	Если КоличествоДоступныхДокументов = 0
		Или ДоступныНеВсеДокументы И ОтправкаИзФормыНовогоПакета Тогда
		
		ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки);
		
	Иначе
		
		Если ДоступныНеВсеДокументы Тогда
			
			ПараметрыОбработки.ДанныеДляОбработки = ДокументыДоступныеДляОбработки;
			
			ОписаниеОповещенияЗавершения = НовыйОписаниеОповещения("ПослеВопросаОЧастичномСогласовании", ЭтаФорма, ПараметрыОбработки);
			ПоказатьВопросОЧастичномВыполненииДействия(ПараметрыОбработки, ОписаниеОповещенияЗавершения);
			
		Иначе
			ОткрытьФормуСогласования(ПараметрыОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСогласования(ПараметрыОбработки)
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ФормаСогласованияПослеЗакрытия", ЭтаФорма, ПараметрыОбработки);
	
	ПараметрыФормы = Новый Структура("BoxId, Действие", ПараметрыОбработки.BoxId, ПараметрыОбработки.Действие);
	ОткрытьФормуДиадокМодально("СогласованиеУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСогласованияПослеЗакрытия(ПараметрыСогласования = Неопределено, ПараметрыОбработки) Экспорт
	
	Если ПараметрыСогласования <> Неопределено Тогда
		
		ВыполнениеИзФормыПакета = (ПараметрыОбработки.ФормаВыполнения <> ОсновнаяФорма());
		
		Если ВыполнениеИзФормыПакета Тогда
			ОбработатьДействиеПоМаршрутизацииДляФормыПакета(ПараметрыСогласования, ПараметрыОбработки);
		Иначе
			ОбработатьДействиеПоМаршрутизацииДляОсновнойФормы(ПараметрыСогласования, ПараметрыОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПоМаршрутизацииДляОсновнойФормы(ПараметрыСогласования, ПараметрыОбработки)
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	ДокументыОтправлены	= ПараметрыОбработки.ДокументыОтправлены;
	
	Если ДокументыОтправлены Тогда
		
		Для Каждого Документ Из ДанныеДляОбработки Цикл
			Документ.СлужебнаяИнформация.Вставить("Маршрутизация", ПараметрыСогласования);
		КонецЦикла;
		
		ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
		
		ВыполнитьМассовуюОбработкуДанных("ОтправитьДокументыНаМаршрутизацию", ПакетыДокументов, Действие);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
		
	Иначе
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().Отправить, КатегорияМетрики, ДействиеМетрики);
		ПараметрыОбработки.Вставить("ПараметрыСогласования", ПараметрыСогласования);
		
		ОбработатьПакетыНаОтправку(, ПараметрыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыНаМаршрутизацию(КонтекстФункции)
	
	ИмяМетода				 = "Пакеты_МаршрутизироватьДокументыПакетов";
	ДокументыДляОбработки	 = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПоМаршрутизацииДляФормыПакета(ПараметрыСогласования, ПараметрыОбработки)
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	ДокументыОтправлены	= ПараметрыОбработки.ДокументыОтправлены;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	Если ДокументыОтправлены Тогда
		
		Для Каждого Документ Из ДанныеДляОбработки Цикл
			Документ.СлужебнаяИнформация.Вставить("Маршрутизация", ПараметрыСогласования);
		КонецЦикла;
		
		ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
		
		Для Каждого Пакет Из ПакетыДокументов Цикл
			
			РезультатМаршрутизации = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Пакеты_МаршрутизироватьДокументы", Пакет);
			
			Пакет = РезультатМаршрутизации.Пакет;
			Отказ = РезультатМаршрутизации.Отказ;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Пакет Из ДанныеДляОбработки Цикл
			
			Для Каждого Документ Из Пакет.Документы Цикл
				Документ.СлужебнаяИнформация.Вставить("Маршрутизация", ПараметрыСогласования);
			КонецЦикла;
			
			ЗашифрованныйПакет = СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ЗашифрованныйПакет");
			
			Если ЗашифрованныйПакет = Истина Тогда
				Модуль_ЯдроНаКлиенте().Пакеты_ЗашифроватьФайлыВПакете(Пакет);
			КонецЕсли;
			
			РезультатОтправки = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Пакеты_ОтправитьИСохранить", Пакет);
			
			Отказ = РезультатОтправки <> Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормаВыполнения = ПараметрыОбработки.ФормаВыполнения;
	
	Если Отказ Тогда
		ЗавершениеОбработкиДокументов(Действие, ФормаВыполнения);
	Иначе	
		
		ФормаВыполнения.ОбновитьФорму(Пакет);
		ФормаВыполнения.ОповеститьОбИзмененииПакета();
		
		Если НЕ ДокументыОтправлены Тогда
			ФормаВыполнения.Закрыть();
		КонецЕсли;
		
		Пакеты_ВыполнитьОчисткуУстаревшихПодготовленных(Действие);
		
		Если ФормаВыполнения.РежимОтображенияДокументов = РежимОтображенияДокументов
			И ПараметрыОбработки.ГрупповоеДействие Тогда
			ОбновитьГлавныйСписок();
		КонецЕсли;
		
		УведомитьОбУспешномВыполненииОперации(ПараметрыОбработки);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОбУспешномВыполненииОперации(ПараметрыОбработки) Экспорт
	
	Перем ДокументыОтправлены;
	
	Действие = ПараметрыОбработки.Действие;
	
	ДействияЭДО	= ДействияЭДО();
	
	Если Действие = ДействияЭДО.ПередатьНаСогласование Тогда
		
		ТекстСообщения = "Документ передан на согласование";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьНаПодпись Тогда
		
		ТекстСообщения = "Документ передан на подпись";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьПоМаршруту Тогда
		
		ТекстСообщения = "Документ передан по маршруту";
		
	ИначеЕсли Действие = ДействияЭДО.Согласование Тогда
		
		ТекстСообщения = "Документ согласован";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказВСогласовании Тогда
		
		ТекстСообщения = "Отказано в согласовании документа";
		
	ИначеЕсли Действие = ДействияЭДО.Аннулировать Тогда
		
		ТекстСообщения = "Документ аннулирован";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказатьВАннулировании Тогда
		
		ТекстСообщения = "Отказано в аннулировании документа";
		
	ИначеЕсли Действие = ДействияЭДО.ПодписатьВходящий Тогда
		
		ТекстСообщения = "Документ подписан";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказатьВПодписи Тогда
		
		ТекстСообщения = "Отказано в подписании документа";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказВЗапросеПодписи Тогда
		
		ТекстСообщения = "Отказано в запросе подписи";
		
	ИначеЕсли Действие = ДействияЭДО.ЗапроситьУточнение Тогда
		
		ТекстСообщения = "Запрошено уточнение";	
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьВПодразделение Тогда
		
		ТекстСообщения = "Документ передан в подразделение";
		
	ИначеЕсли Действие = ДействияЭДО.ПометитьКакЗавершенный Тогда
		
		ТекстСообщения = "Документ помечен как завершенный";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		Если ПараметрыОбработки.Свойство("ДокументыОтправлены", ДокументыОтправлены)
			И ДокументыОтправлены = Ложь Тогда
			
			ТекстСообщения = СтрЗаменить(НРег(ТекстСообщения), "документ", "пакет");
			ТекстСообщения = Врег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
			
		КонецЕсли;
		
		Состояние(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЧастичномСогласовании(ПараметрОповещения, ПараметрыОбработки) Экспорт 
	
	Если ПараметрОповещения = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФормуСогласования(ПараметрыОбработки);
		
	ИначеЕсли ПараметрОповещения = КодВозвратаДиалога.Прервать Тогда
		
		ОткрытьФормуСпискаОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

// } Согласование


// { Аннулирование

&НаКлиенте
Процедура ВыполнитьАннулировать(Команда) Экспорт
	
	ВыполнитьДействиеПоАннулированию(ДействияЭДО().Аннулировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтказатьВАннулировании(Команда) Экспорт

	ВыполнитьДействиеПоАннулированию(ДействияЭДО().ОтказатьВАннулировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПоАннулированию(Действие)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= Метрика_НазваниеДействияАннулирования(Действие);

	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(, Истина);

	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ДействиеДоступно = ДействиеДоступно(Действие, ТипАвторизации, КатегорияМетрики, ДействиеМетрики);
	
	Если ДействиеДоступно Тогда
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики);
		
		ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьДействиеПоАннулированию", ПараметрыОбработки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПоАннулированию(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ОбработкаАннулирования(ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАннулирования(ПараметрыОбработки) Экспорт
	
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	Действие			= ПараметрыОбработки.Действие;
	ФормаВыполнения		= ПараметрыОбработки.ФормаВыполнения;
	
	ПараметрыОбработки.Удалить("ФормаВыполнения");
	
	ДоступныеДанныеДляОбработки = МетодСервераБезКонтекста(
		Истина,
		"Модуль_Ядро().Документы_ДоступныеДляАннулированияДокументы",
		ДанныеДляОбработки,
		Действие
	);
	
	КоличествоВыбранныхДокументов = ДанныеДляОбработки.Количество();
	КоличествоДоступныхДокументов = ДоступныеДанныеДляОбработки.Количество();
	
	Если КоличествоДоступныхДокументов = 0 Тогда
		
		ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки);
		
	Иначе
		
		ПараметрыОбработки.ДанныеДляОбработки = ДоступныеДанныеДляОбработки;
		
		ПараметрыФормы = ПараметрыФормыАннулированияОтказаВАннулировании(
			Действие,
			КоличествоВыбранныхДокументов,
			КоличествоДоступныхДокументов,
			ПараметрыОбработки
		);
		
		ОписаниеОповещения = НовыйОписаниеОповещения(
			"ОбработчикЗавершенияАннулированияОтказаВАннулировании",
			ЭтаФорма,
			ПараметрыОбработки
		);
		
		ОткрытьФормуДиадокМодально(
			"ФормаВводаУправляемая",
			ФормаВыполнения,
			ПараметрыФормы,
			ОписаниеОповещения
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыАннулированияОтказаВАннулировании(Действие, КоличествоДокументов, КоличествоДоступныхДокументов, ПараметрыОбработки)

	Результат = ПараметрыФормыВвода();
	Результат.Заголовок					 = "";
	Результат.ТекстСообщения			 = "";
	Результат.ТекстКнопкиВыполнить		 = "";
	Результат.РежимПароля				 = Ложь;
	Результат.ВозможноПустоеЗначение	 = Истина;
	Результат.Действие					 = "";
	Результат.ИдентификаторЯщика		 = ПараметрыОбработки.ИдентификаторЯщика;
	Результат.ГрупповоеДействие			 = ПараметрыОбработки.ГрупповоеДействие;
	Результат.КатегорияМетрикиДокумента	 = ПараметрыОбработки.КатегорияМетрики;
	Результат.КонтрагентПоддерживаетМЧД	 = ПараметрыОбработки.КонтрагентПоддерживаетМЧД;
	 
	Если НЕ Результат.ГрупповоеДействие 
		И КоличествоДоступныхДокументов = 1 Тогда
		
		Документ							 = ПараметрыОбработки.ДанныеДляОбработки[0];
		Результат.ИдентификаторыДокумента	 = Документ.Идентификаторы;
		
	КонецЕсли;
	
	Если КоличествоДокументов = КоличествоДоступныхДокументов Тогда
		
		Если Действие = "Аннулировать" Тогда
			
			Результат.Заголовок					= "Аннулирование документа";
			Результат.ТекстСообщения			= "По каждому документу будет подписано соответствующее уведомление или соглашение об аннулировании";
			Результат.ТекстКнопкиВыполнить		= "Аннулировать";
			Результат.ВозможноПустоеЗначение	= Ложь;
			Результат.Действие					= "Аннулировать";
			
			Если ПараметрыОбработки.Свойство("ДействиеАннулироватьВложение") Тогда
				Результат.Заголовок					= "Аннулирование приглашений с вложениями";
			КонецЕсли;
			
		Иначе
			
			Результат.Заголовок					= "Отказ в аннулировании";
			Результат.ТекстСообщения			= "Документ сохранит юридическую значимость после отказа в аннулировании";
			Результат.ТекстКнопкиВыполнить		= "Отказать";
			Результат.Действие					= "ОтказатьВАннулировании";
			
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов > КоличествоДоступныхДокументов
		И Не КоличествоДоступныхДокументов = 0 Тогда
		
		Если Действие = "Аннулировать" Тогда
			
			Результат.Заголовок					= "Аннулирование доступных документов";
			Результат.ТекстСообщения			= "Среди выбранных есть документы, которые уже аннулированы или недоступны для аннулирования. "
												+ "Для аннулирования доступных документов оставьте комментарий в поле ниже";
			Результат.ТекстКнопкиВыполнить		= "Аннулировать доступные документы (" + Формат(КоличествоДоступныхДокументов, "ЧГ=0") + ")";
			Результат.ВозможноПустоеЗначение	= Ложь;
			Результат.Действие					= "Аннулировать";
			
		Иначе
			
			Результат.Заголовок					= "Отказ в аннулировании";
			Результат.ТекстСообщения			= "Среди выбранных есть документы, которые уже аннулированы или недоступны для аннулирования";
			Результат.ТекстКнопкиВыполнить		= "Отказать в аннулировании доступных документов (" + Формат(КоличествоДоступныхДокументов, "ЧГ=0") + ")";
			Результат.Действие					= "ОтказатьВАннулировании";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
																
КонецФункции

&НаКлиенте
Процедура ОбработчикЗавершенияАннулированияОтказаВАннулировании(РезультатАннулирования, ПараметрыОбработки) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(РезультатАннулирования) Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = РезультатАннулирования.Комментарий;
	КонтрактМЧД = РезультатАннулирования.КонтрактМЧД;
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	ОписаниеОповещения	= СвойствоСтруктуры(ПараметрыОбработки, "ОписаниеОповещения");
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", Комментарий);
	КонецЦикла;
	
	Если НЕ ПараметрыОбработки.ГрупповоеДействие Тогда
		// при групповом дейтсвии контракт уже заполнен в документе
		ДополнитьДокументыСведениямиМЧДНаКлиенте(ДанныеДляОбработки, КонтрактМЧД);
	КонецЕсли;
	
	ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
	
	ВыполнитьМассовуюОбработкуДанных("ОбработатьДокументыСПодписанием", ПакетыДокументов, Действие, Действие, ОписаниеОповещения);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
КонецПроцедуры

// } Аннулирование


// { Отправка пакетов

&НаКлиенте
Процедура ВыполнитьПодписаниеИОтправку(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Подписать и отправить";
	
	ДанныеДляОбработки = ДанныеВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	Действие = ДействияЭДО().ПодписатьИОтправить;
	
	ДействиеДоступно = ДействиеДоступно(Действие, ТипАвторизации, КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
	
	Если ДействиеДоступно Тогда
	
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики);
		
		ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПакетыНаОтправку", ПараметрыОбработки);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДействиеДоступно(Действие, ТипАвторизации, КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки = Неопределено)
	
	Результат = Истина;
	
	Если ТипАвторизации <> "Сертификат" Тогда
		
		ДействияЭДО = ДействияЭДО();
		
		Если ЗначениеЗаполнено(ДанныеДляОбработки) Тогда
			ТребуетсяСертификат = ТребуетсяПодписьДокументов(ДанныеДляОбработки);
		Иначе
			ТребуетсяСертификат = Истина;
		КонецЕсли;
		
		Если ТребуетсяСертификат Тогда
			
			Если Действие = ДействияЭДО.ПодписатьИОтправить
				ИЛИ Действие = ДействияЭДО.ПодписатьВходящий 
				ИЛИ Действие = ДействияЭДО.ОтказатьВПодписи Тогда
				
				ТекстСообщения = "Подписание недоступно под логином.
								 |Авторизуйтесь с помощью сертификата или передайте документ на подпись сотруднику c сертификатом.";
				
			ИначеЕсли Действие = ДействияЭДО.Аннулировать
				ИЛИ Действие = ДействияЭДО.ОтказатьВАннулировании Тогда 
				
				ТекстСообщения = "Аннулирование недоступно под логином.
								 |Авторизуйтесь с помощью сертификата.";
				
			ИначеЕсли Действие = ДействияЭДО.Расшифровать Тогда 
				
				ТекстСообщения = "Расшифровка документов недоступна под логином.
								 |Авторизуйтесь с помощью сертификата.";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				
				Модуль_ЯдроНаКлиенте().Метрика_ДобавитьОшибку_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, ТекстСообщения);

				Сообщить(ТекстСообщения, СтатусСообщения.Информация);
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяПодписьДокументов(ВыбранныеДокументы)
	
	Результат = Ложь;
	
	Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
		Если Не ВыбранныйДокумент.Шаблон Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПакетыНаОтправку(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	РежимыОтображения = РежимыОтображения();
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;

	Если РежимОтображенияДокументов = РежимыОтображения.Исходящие Тогда
		
		ДанныеДляОбработки = МетодСервераБезКонтекста(Истина, 
													  "Модуль_Ядро().Документы_ОтложенныеДокументыДляОтправкиКонтрагенту",
													  ДанныеДляОбработки);
															  
		ОбрабатываемыеПакеты		= Новый Массив;
		ДоступныеДанныеДляОбработки	= Новый Массив;
		
		Для Каждого СтрокаСписка Из ДанныеДляОбработки Цикл
			
			Если ОбрабатываемыеПакеты.Найти(СтрокаСписка.LetterId) = Неопределено Тогда
				
				ОбрабатываемыеПакеты.Добавить(СтрокаСписка.LetterId);
				ДоступныеДанныеДляОбработки.Добавить(СтрокаСписка);
				
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		ДоступныеДанныеДляОбработки = ДанныеДляОбработки;
	КонецЕсли;
	
	КоличествоВыбранныхДокументов = ДанныеДляОбработки.Количество();
	КоличествоДоступныхДокументов = ДоступныеДанныеДляОбработки.Количество();
	
	Если КоличествоДоступныхДокументов = 0 Тогда
		
		ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки);
		
	Иначе
		
		ПараметрыСогласования = СвойствоСтруктуры(ПараметрыОбработки, "ПараметрыСогласования");
		
		ВыполнитьМассовуюОбработкуДанных("ПакетДляОтправки", ДоступныеДанныеДляОбработки, Действие, ПараметрыСогласования);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДоступныеДанныеДляОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетДляОтправки(КонтекстФункции)
	
	Пакеты = КонтекстФункции.Данные;
	ПараметрыСогласования = КонтекстФункции.Параметры;
	
	ТекущаяОперация = ДлительныеОперации_ПодготовитьПакетыДляОтправки(Пакеты);
	
	КонтекстФункции.Очистить();
	КонтекстФункции.Вставить("Обработчик", "ОтправитьПакет");
	КонтекстФункции.Вставить("ТекущаяОперация", ТекущаяОперация);
	КонтекстФункции.Вставить("ПараметрыСогласования", ПараметрыСогласования);
	
КонецПроцедуры

&НаСервере
Функция ДлительныеОперации_ПодготовитьПакетыДляОтправки(Знач Пакеты)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ПроверятьXDTO = Ложь;
	ПараметрыМетода = Ядро.ПараметрыВМассив(Пакеты, ПроверятьXDTO);
	
	Результат = Ядро.ДлительныеОперации_ВыполнитьОперацию(
		"Пакеты_ПодготовитьПакетыДляОтправки",
		ПараметрыМетода
	);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПакет(КонтекстФункции) 
	
	ТекущаяОперация = СвойствоСтруктуры(КонтекстФункции, "ТекущаяОперация");
	
	Если ТекущаяОперация = Неопределено Тогда
		Пакеты = КонтекстФункции.Данные;
	Иначе
		Пакеты = КонтекстФункции.ТекущаяОперация.Результат;
		КонтекстФункции.Удалить("ТекущаяОперация");
	КонецЕсли;
	
	ПакетыДляОтправки = Новый Массив;

	Для каждого Пакет Из Пакеты Цикл
	
		ОшибкиОтправки = СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ОшибкиОтправки");
		
		Если ЗначениеЗаполнено(ОшибкиОтправки) Тогда
			МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().Пакеты_Сохранить", Пакет);
		ИначеЕсли Пакет <> Неопределено Тогда
			ПакетыДляОтправки.Добавить(Пакет);
		КонецЕсли;
	
	КонецЦикла;
	
	ПараметрыСогласования = КонтекстФункции.ПараметрыСогласования;
	
	Если ПараметрыСогласования = Неопределено Тогда
		
		ПакетыДляОтправки = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Пакеты_ПередПодписаниемПакетовНаОтправку", ПакетыДляОтправки);
		
		Для каждого ПакетНаПодпись Из ПакетыДляОтправки Цикл
			
			Если НЕ ПакетНаПодпись.Шаблон Тогда
				Модуль_ЯдроНаКлиенте().Пакеты_ДобавитьПодписиФайловПакета(ПакетНаПодпись, "");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Пакет Из ПакетыДляОтправки Цикл
			Для Каждого ОписаниеДокумента Из Пакет.Документы Цикл
				ОписаниеДокумента.СлужебнаяИнформация.Вставить("Маршрутизация", ПараметрыСогласования);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПакетыДляОтправки) Тогда
	
		Для каждого Пакет Из ПакетыДляОтправки Цикл
			
			ЗашифрованныйПакет = СвойствоСтруктуры(Пакет.СлужебнаяИнформация, "ЗашифрованныйПакет");
			
			Если ЗашифрованныйПакет = Истина Тогда
				Модуль_ЯдроНаКлиенте().Пакеты_ЗашифроватьФайлыВПакете(Пакет);
			КонецЕсли;
			
		КонецЦикла; 
		
		ИмяМетода		= "Пакеты_ОтправитьИСохранитьПоСписку";
		ПараметрыМетода	= ПараметрыВМассив(ПакетыДляОтправки);
		
		ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
		
	КонецЕсли;

	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Отправка пакетов


// { Отправка готовых ответов

&НаКлиенте
Процедура ВыполнитьОтправитьГотовыеОтветы(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Ответить контрагенту";

	ДанныеДляОбработки	= ДанныеДокументовВыделенныхСтрокТЧ(, Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ОтправитьОтвет, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьОтправкуГотовыхОтветов", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтправкуГотовыхОтветов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	ДоступныеДанныеДляОбработки = Новый Массив;
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		Если ЗначениеЗаполнено(Документ.РезультатАнализа.ТребуемоеДействиеВДД) Тогда
			ДоступныеДанныеДляОбработки.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВыбранныхДокументов = ДанныеДляОбработки.Количество();
	КоличествоДоступныхДокументов = ДоступныеДанныеДляОбработки.Количество();
	
	Если КоличествоДоступныхДокументов = 0 Тогда
		
		ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки);
		
	Иначе
		
		Если КоличествоВыбранныхДокументов > КоличествоДоступныхДокументов Тогда
			
			ПараметрыОбработки.ДанныеДляОбработки = ДоступныеДанныеДляОбработки;
			
			ОписаниеОповещенияЗавершения = НовыйОписаниеОповещения("ОбработатьСогласиеОЧастичнойОтправкеГотовыхОтветов", ЭтаФорма, ПараметрыОбработки);
			ПоказатьВопросОЧастичномВыполненииДействия(ПараметрыОбработки, ОписаниеОповещенияЗавершения);
			
		Иначе
			
			ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДоступныеДанныеДляОбработки);

			ВыполнитьМассовуюОбработкуДанных("ОбработатьДокументыСПодписанием", ПакетыДокументов, Действие);
			
			Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДоступныеДанныеДляОбработки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСогласиеОЧастичнойОтправкеГотовыхОтветов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт 
	
	Если ПараметрОповещения = КодВозвратаДиалога.Да Тогда
		
		Действие			= ПараметрыОбработки.Действие;
		ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
		КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
		ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
		
		ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);

		ВыполнитьМассовуюОбработкуДанных("ОбработатьДокументыСПодписанием", ПакетыДокументов, Действие);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);
		
	ИначеЕсли ПараметрОповещения = КодВозвратаДиалога.Прервать Тогда
		
		ОткрытьФормуСпискаОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

// } Отправка готовых ответов


// { Подписать входящие

&НаКлиенте
Процедура ВыполнитьПодписатьВходящие(Команда)
	
	ВыполнитьПодписатьИлиОтказатьВходящие(ДействияЭДО().ПодписатьВходящий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодписатьИлиОтказатьВходящие(Действие)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= Метрика_НазваниеДействияПодписание(Действие);
	
	ДанныеДляОбработки = ДанныеДокументовВыделенныхСтрокТЧ(, Истина);

	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	ДействиеДоступно = ДействиеДоступно(Действие, ТипАвторизации, КатегорияМетрики, ДействиеМетрики);
	
	Если ДействиеДоступно Тогда
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, Действие, КатегорияМетрики, ДействиеМетрики);
		
		ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПодписатьВходящие", ПараметрыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодписатьВходящие(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	
	ДоступныеДанныеДляОбработки = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ДоступныеДляПодписанияВходящие", ДанныеДляОбработки, Действие);
	
	КоличествоВыбранныхДокументов = ДанныеДляОбработки.Количество();
	КоличествоДоступныхДокументов = ДоступныеДанныеДляОбработки.Количество();
	
	Если КоличествоДоступныхДокументов = 0 Тогда
		
		ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки);
		
	Иначе
		
		Если КоличествоВыбранныхДокументов > КоличествоДоступныхДокументов Тогда
			
			ПараметрыОбработки.ДанныеДляОбработки = ДоступныеДанныеДляОбработки;
			
			ОписаниеОповещенияЗавершения = НовыйОписаниеОповещения("ОбработатьСогласиеОЧастичномПодписанииВходящих", ЭтаФорма, ПараметрыОбработки);
			ПоказатьВопросОЧастичномВыполненииДействия(ПараметрыОбработки, ОписаниеОповещенияЗавершения);
			
		Иначе
			
			Если Действие = ДействияЭДО().ПодписатьВходящий Тогда
				ЗапроситьДанныеДляОтветныхТитулов(, ПараметрыОбработки);
			Иначе
				ЗапроситьКомментарийДляОтказаВПодписи(, ПараметрыОбработки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСогласиеОЧастичномПодписанииВходящих(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт 
	
	Если ПараметрОповещения = КодВозвратаДиалога.Да Тогда
		
		Действие = ПараметрыОбработки.Действие;
		
		Если Действие = ДействияЭДО().ПодписатьВходящий Тогда
			ЗапроситьДанныеДляОтветныхТитулов(, ПараметрыОбработки);
		Иначе
			ЗапроситьКомментарийДляОтказаВПодписи(, ПараметрыОбработки);
		КонецЕсли;
		
	ИначеЕсли ПараметрОповещения = КодВозвратаДиалога.Прервать Тогда
		
		ОткрытьФормуСпискаОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеДляОтветныхТитулов(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ДанныеДляОбработки = ПараметрыОбработки.ДанныеДляОбработки;
	
	ДанныеДляПодписания	= МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ВидыДокументовДляПодписания", ДанныеДляОбработки);
	ПараметрыОбработки.Вставить("ДанныеДляПодписания", ДанныеДляПодписания);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаДокумента", ТекущаяДата());
	ПараметрыФормы.Вставить("ГрупповоеДействие", ПараметрыОбработки.ГрупповоеДействие);
	
	Для Каждого КлючЗначение Из ДанныеДляПодписания Цикл 
		
		ВидДокумента = КлючЗначение.Значение;
		ТипКонтента = ВидДокумента.ТипКонтента;
		
		ТолькоАктыСРазногласиями = ВыбраныТолькоФормализованныеАктыСверокСРазногласиями(ДанныеДляОбработки, ТипКонтента);
		
		Если ТолькоАктыСРазногласиями Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИдентификаторЯщика",	ВидДокумента.BoxId);
		ПараметрыФормы.Вставить("ТипДокумента",	ВидДокумента.ТипДокумента);
		ПараметрыФормы.Вставить("ТипКонтента", 	ТипКонтента);
		ПараметрыФормы.Вставить("КонтрагентПоддерживаетМЧД"	, ПараметрыОбработки.КонтрагентПоддерживаетМЧД);
		
		ОписаниеОповещения = НовыйОписаниеОповещения("ЗапросДанныхДляОтветныхТитуловПослеЗакрытия", ЭтаФорма, ПараметрыОбработки);
		ОткрытьФормуДиадокМодально("ТитулПокупателяУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраныТолькоФормализованныеАктыСверокСРазногласиями(ДанныеДляОбработки, ТипКонтента)
	
	Результат = Ложь;
	
	Если ЭтоФормализованныйАктСверки405(ТипКонтента) Тогда
		
		АктыСверок = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ОпределитьНаличиеРазногласийВФормализованныхАктахСверок", ДанныеДляОбработки);
		АктыСРазногласиями = АктыСверок.АктыСРазногласиями;
		
		Если АктыСРазногласиями.Количество() > 0 Тогда
			ПоказатьСлужебноеСообщениеОНеобходимостиПодписатьАктыСверкиСРазногласиямиИзФормыДокументов();
			УдалитьАктыСверокСРазногласиямиИзДанныхДляОбработки(ДанныеДляОбработки, АктыСРазногласиями);
		КонецЕсли;
		
		Если АктыСверок.АктыБезРазногласий.Количество() = 0 Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьАктыСверокСРазногласиямиИзДанныхДляОбработки(ДанныеДляОбработки, АктыСРазногласиями)
	
	КлючиАктовСРазногласиями = Новый Массив;
	
	Для Каждого АктСРазногласиями Из АктыСРазногласиями Цикл
		КлючиАктовСРазногласиями.Добавить(АктСРазногласиями.Ключ);
	КонецЦикла;
	
	ИндексВМассиве = ДанныеДляОбработки.ВГраница();
	
	Пока ИндексВМассиве >= 0 Цикл
		
		ВыделенныйДокумент = ДанныеДляОбработки[ИндексВМассиве];
		
		Если НЕ КлючиАктовСРазногласиями.Найти(ВыделенныйДокумент.Ключ) = Неопределено Тогда
			ДанныеДляОбработки.Удалить(ИндексВМассиве);
		КонецЕсли;
		
		ИндексВМассиве = ИндексВМассиве - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДанныхДляОтветныхТитуловПослеЗакрытия(ДанныеОтвета, ПараметрыОбработки) Экспорт
	
	Если ДанныеОтвета <> Неопределено Тогда
		
		ДанныеДляПодписания	= ПараметрыОбработки.ДанныеДляПодписания;
		
		ДопПараметры = ДанныеОтвета.ДополнительныеПараметры;
		
		BoxId			= ДопПараметры.BoxId;
		ТипДокумента	= ДопПараметры.ТипДокумента;
		ТипКонтента		= ДопПараметры.ТипКонтента;
		
		КлючШаблонаОтветногоТитула = КлючШаблонаОтветногоТитула(BoxId, ТипДокумента, ТипКонтента);
		
		ДанныеДляПодписания[КлючШаблонаОтветногоТитула].ДанныеОтвета = ДанныеОтвета;
		
		ВсеВидыТитуловЗаполнены = Истина;
		
		Для Каждого КлючЗначение Из ДанныеДляПодписания Цикл
			
			ОтветДляДокумента = КлючЗначение.Значение;
			
			Если НЕ ЗначениеЗаполнено(ОтветДляДокумента.ДанныеОтвета) Тогда
				ВсеВидыТитуловЗаполнены = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеВидыТитуловЗаполнены Тогда
		
			ЗаполнитьКонтентОтвета(ПараметрыОбработки);

			ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
			
			ДополнитьАктыСверкиДаннымиОтправителяАктаСверки(ДанныеДляОбработки, ПараметрыОбработки.Действие);
			
			КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
			ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
			
			ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);

			ВыполнитьМассовуюОбработкуДанных("ОбработатьДокументыСПодписанием", ПакетыДокументов, ДействияЭДО().ОтправитьОтвет);
			
			Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);

		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтентОтвета(ПараметрыОбработки)
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	ДанныеДляПодписания	= ПараметрыОбработки.ДанныеДляПодписания;
	ОтветЭДО			= ОтветыЭДО()[Действие];
	Модуль_Ядро			= Модуль_ЯдроНаКлиенте();
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		
		BoxId			= Документ.Идентификаторы.BoxId;
		ТипДокумента	= Документ.Тип.ТипДокумента;
		ТипКонтента		= Документ.Тип.ТипКонтента;
		
		Если Не Модуль_Ядро.Документы_ФормироватьОтветныйТитул(Документ) Тогда
			ТипКонтента = "";
		КонецЕсли;
		
		КлючШаблонаОтветногоТитула = КлючШаблонаОтветногоТитула(BoxId, ТипДокумента, ТипКонтента);
		
		ДанныеОтвета = ДанныеДляПодписания[КлючШаблонаОтветногоТитула].ДанныеОтвета;
		
		Если ЭтоФормализованныйАктСверки405(ТипКонтента) Тогда
			ДанныеОтвета = Модуль_Ядро.КопияКоллекцииЗначений(ДанныеОтвета);
		КонецЕсли;
		
		Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", ДанныеОтвета);
		Документ.СлужебнаяИнформация.Вставить("КонтрактМЧД", ДанныеОтвета.ДополнительныеПараметры.КонтрактМЧД);
		Документ.РезультатАнализа.ТребуемоеДействиеВДД = ОтветЭДО;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КлючШаблонаОтветногоТитула(BoxId, ТипДокумента, ТипКонтента)
	
	Возврат BoxId + "_" + ТипДокумента + "_" + ТипКонтента;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьАктыСверкиДаннымиОтправителяАктаСверки(ДанныеДляОбработки, Действие)
	
	Если Действие <> ДействияЭДО().ПодписатьВходящий Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		
		ТипКонтента = Документ.Тип.ТипКонтента;
		
		Если НЕ ЭтоФормализованныйАктСверки405(ТипКонтента) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтентОтвета = Документ.СлужебнаяИнформация.КонтентОтвета;
		
		IdentityInfoSender = КонтентОтвета.ReconciliationAct.IdentityInfoSender;
		
		МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().Документы_ЗаполнитьХранилищеКонтента", Документ);
		
		IdentityInfoSender.BaseIdFile = СтрЗаменить(Документ.Метаданные.FileName, ".xml", "");
		IdentityInfoSender.DateFileInfoSender = Документ.СлужебнаяИнформация.Контент.DateCreateFile;
		IdentityInfoSender.TimeFileInfoSender = Документ.СлужебнаяИнформация.Контент.TimeCreateFile;
		IdentityInfoSender.SignSender = Документ.Документооборот.ХранилищеКонтента.Подпись.ДанныеПодписи;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСлужебноеСообщениеОНеобходимостиПодписатьАктыСверкиСРазногласиямиИзФормыДокументов()
	
	ТекстHTML = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().HTMLАктыСверокСРазногласиямиНеобходимоПодписыватьИзФормыДокумента");
	ЗаголовокФормыСообщения = НСтр("ru = 'Служебные сообщения'");
	
	ОткрытьФормуHTMLСообщения(ТекстHTML, ЗаголовокФормыСообщения, , ЭтаФорма);
	
КонецПроцедуры

// } Подписать входящие


// { Отказ в подписи входящих

&НаКлиенте
Процедура ВыполнитьОтказатьВПодписиВходящих(Команда)
	
	ВыполнитьПодписатьИлиОтказатьВходящие(ДействияЭДО().ОтказатьВПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКомментарийДляОтказаВПодписи(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
	
	ВыбранныеBoxId = BoxIdИзДокументов(ПараметрыОбработки.ДанныеДляОбработки);
	
	Если ВыбранныеBoxId.Количество() = 1 Тогда
		BoxId = ВыбранныеBoxId[0];
		ПредставлениеПодписанта = Модуль_ЯдроНаКлиенте().Подписант_ПредставлениеПодписанта(BoxId);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеПодписанта"	, ПредставлениеПодписанта);
	ПараметрыФормы.Вставить("АдресЯщика"				, BoxId);
	ПараметрыФормы.Вставить("ГрупповоеДействие"			, ПараметрыОбработки.ГрупповоеДействие);
	ПараметрыФормы.Вставить("КонтрагентПоддерживаетМЧД"	, ПараметрыОбработки.КонтрагентПоддерживаетМЧД);
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ЗапросКомментарияДляОтказаВПодписиПослеЗакрытия", ЭтаФорма, ПараметрыОбработки);
	ОткрытьФормуДиадокМодально("ФормаОтветаПоДокументуУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросКомментарияДляОтказаВПодписиПослеЗакрытия(ДанныеОтвета, ПараметрыОбработки) Экспорт
	
	Если ДанныеОтвета <> Неопределено Тогда
		
		ЗаполнитьОтветДляОтказаВПодписи(ПараметрыОбработки, ДанныеОтвета);
		
		ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
		КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
		ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;

		ПакетыДокументов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СгруппироватьДокументыПоПакетам", ДанныеДляОбработки);
		
		ВыполнитьМассовуюОбработкуДанных("ОбработатьДокументыСПодписанием", ПакетыДокументов, ДействияЭДО().ОтправитьОтвет);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки);

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтветДляОтказаВПодписи(ПараметрыОбработки, ДанныеОтвета)
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	
	ОтветЭДО = ОтветыЭДО()[Действие];
	
	Для Каждого Документ Из ДанныеДляОбработки Цикл
		
		Документ.СлужебнаяИнформация.Вставить("КонтентОтвета", ДанныеОтвета);
		Документ.РезультатАнализа.ТребуемоеДействиеВДД = ОтветЭДО; 
		
	КонецЦикла;
	
	КонтрактМЧД = СвойствоСтруктуры(ДанныеОтвета.ДополнительныеПараметры, "КонтрактМЧД");
	ДополнитьДокументыСведениямиМЧДНаКлиенте(ДанныеДляОбработки, КонтрактМЧД);
	
КонецПроцедуры

// } Отказ в подписи входящих


// { Перезаполнение

&НаКлиенте
Процедура ВыполнитьПерезаполнениеПакета(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Перезаполнить";

	ДанныеДляОбработки	= ДанныеВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());
	
	ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ПерезаполнитьПакет, КатегорияМетрики, ДействиеМетрики);
	
	ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПерезаполнениеПакетов", ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПерезаполнениеПакетов(ПараметрОповещения = Неопределено, ПараметрыОбработки=Неопределено) Экспорт 
	
	Отказ = Ложь;
	
	Действие			= ПараметрыОбработки.Действие;
	ДанныеДляОбработки	= ПараметрыОбработки.ДанныеДляОбработки;
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	
	БылоПредыдущееДействие = ПараметрыОбработки.Свойство("ПредыдущееДействие");
	
	Если БылоПредыдущееДействие Тогда
	
		СписокОшибок = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СписокОшибок");
		
		Если ЗначениеЗаполнено(СписокОшибок) Тогда
			
			ПоказатьОшибкиОбработкиДанных(Действие, ЭтаФорма);
			
			ОбновитьСписок();
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ДанныеДляПерезаполнения	= Новый Массив;
		Пакеты					= Новый Массив;
		
		Для Каждого СтрокаСписка Из ДанныеДляОбработки Цикл
			
			Если ЗначениеЗаполнено(СтрокаСписка.Пакет) Тогда
				Ключ = СтрокаСписка.Пакет;
			Иначе
				Ключ = СтрокаСписка.LetterId;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ключ) Тогда
				
				Если Пакеты.Найти(Ключ) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Пакеты.Добавить(Ключ);
				
			КонецЕсли;
			
			ДанныеДляПерезаполнения.Добавить(СтрокаСписка);
			
		КонецЦикла;
		
		ВыполнитьМассовуюОбработкуДанных("ПерезаполнитьПакет", ДанныеДляПерезаполнения, Действие);
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_МассовоеДействиеПоДокументам(КатегорияМетрики, ДействиеМетрики, ДанныеДляПерезаполнения);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПакет(КонтекстФункции)
	
	ИмяМетода = "Пакеты_ПерезаполнитьПакетыПоСтрокамСписка";
	СтрокиСписка = КонтекстФункции.Данные;
	
	ПараметрыМетода = ПараметрыВМассив(СтрокиСписка);
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	КонтекстФункции.Вставить("Обработчик",				"ЗаполнитьПараметрыПереотправки");
	КонтекстФункции.Вставить("ТекущаяОперация",			ТекущаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПереотправки(КонтекстФункции)
	
	ОписаниеПакетов = КонтекстФункции.ТекущаяОперация.Результат;
	
	ПакетыДляОтправки	 = Новый Массив;
	ПакетыДляСохранения	 = Новый Массив;
	
	Для каждого ОписаниеПакета Из ОписаниеПакетов Цикл
	
		ПерезаполненныйПакет	= ОписаниеПакета.ПерезаполненныйПакет;
		СтрокаСписка			= ОписаниеПакета.СтрокаСписка;
		ПерезаполняемыйПакет	= ОписаниеПакета.ПерезаполняемыйПакет;
		ПакетОтправлен			= ОписаниеПакета.ПакетОтправлен;
		
		Если ПерезаполненныйПакет = Неопределено Тогда
			
			ЕстьОшибкиВалидации = ВыполнитьВалидациюПереотправляемогоПакета(СтрокаСписка);
			
			Если НЕ ЕстьОшибкиВалидации Тогда
				
				ТекстСообщения = "Не удалось переотправить пакет документов: " + ПерезаполняемыйПакет.ПакетЭДО;
				
				_ОбработатьОшибку(
					"Не удалось переотправить пакет документов",
					ТекстСообщения
				);
				
			КонецЕсли;
			
		Иначе
			
			ПараметрыПереотправки	 = ПерезаполненныйПакет.СлужебнаяИнформация.ПараметрыПереотправки;
			
			Если ПакетОтправлен Тогда
				
				ПараметрыПереотправки.ПереотправляемыйПакет = ПерезаполняемыйПакет;
				
				Если Не ЗначениеЗаполнено(ПерезаполняемыйПакет.ПакетЭДО) Тогда
					ПараметрыПереотправки.ВыполнитьУдалениеНеактуальныхДокументовПакета = Истина;
				КонецЕсли;	
				
				ПакетыДляОтправки.Добавить(ПерезаполненныйПакет);
				
			Иначе
				
				Если ПерезаполняемыйПакет <> Неопределено Тогда
					
					ПараметрыПереотправки.ВыполнитьУдалениеНеактуальныхДокументовПакета = Истина;
					ПерезаполненныйПакет.Идентификаторы.ПакетЭДО	= ПерезаполняемыйПакет.ПакетЭДО;
					СтрокаСписка.Пакет								= ПерезаполняемыйПакет.ПакетЭДО;
					
				КонецЕсли;
				
				ПакетыДляСохранения.Добавить(ПерезаполненныйПакет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПакетыДляСохранения.Количество() Тогда
		
		МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().Пакеты_СохранитьПоСписку", ПакетыДляСохранения);
	
	КонецЕсли;
	
	Если ПакетыДляОтправки.Количество() Тогда
		
		КонтекстФункции.Удалить("ТекущаяОперация");
		
		КонтекстФункции.Вставить("Данные"				, ПакетыДляОтправки);
		КонтекстФункции.Вставить("Обработчик"			, "ОтправитьПакет");
		КонтекстФункции.Вставить("ПараметрыСогласования", Неопределено);
		
	Иначе
		
		ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьВалидациюПереотправляемогоПакета(СтрокаСписка)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.СписокДокументов_ВалидацияПереотправляемогоПакета(СтрокаСписка);
	
	Возврат Результат;
	
КонецФункции

// } Перезаполнение


// { Перезаполнение и отправка

&НаКлиенте
Процедура ВыполнитьПерезаполнитьИОтправить(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегорииРежимаОтображения();
	ДействиеМетрики		= "Перезаполнить и отправить";
	
	ДанныеДляОбработки = ДанныеВыделенныхСтрокТЧ(Истина);
	
	Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, ДанныеДляОбработки.Количество());

	Если ТипАвторизации = "Сертификат" Тогда
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО().ПереотправитьПакет, КатегорияМетрики, ДействиеМетрики);
		
		ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок("ОбработатьПерезаполнитьИОтправитьПакеты", ПараметрыОбработки);
		
	Иначе
		
		ТекстОшибки = "Подписание недоступно под логином. Авторизуйтесь с помощью сертификата.";
		
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьОшибку_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, ТекстОшибки);

		Сообщить(ТекстОшибки, СтатусСообщения.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПерезаполнитьИОтправитьПакеты(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт 
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ОбработчикЗапросаАннулированияПереотправляемыхПакетов", ЭтаФорма, ПараметрыОбработки);
	
	ТекстВопроса = "Запросить аннулирование ранее отправленных документов?";
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да);
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет);
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	
	ПоказатьВопросПереопределенная(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,, КнопкаПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗапросаАннулированияПереотправляемыхПакетов(АннулироватьПредыдущийДокумент = Неопределено, ПараметрыОбработки) Экспорт 
	
	Если АннулироватьПредыдущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапроситьАннулирование = (АннулироватьПредыдущийДокумент = КодВозвратаДиалога.Да);
	ПараметрыОбработки.Вставить("ЗапроситьАннулирование", ЗапроситьАннулирование);
	
	ВыделенныеСтроки			= ДанныеВыделенныхСтрокТЧ(Истина);
	ДоступныеДляОбработкиСтроки	= МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Документы_ДоступныеДляПерезаполненияИОтправки", ВыделенныеСтроки);
	
	КоличествоВыбранныхДокументов	= ВыделенныеСтроки.Количество();
	КоличествоДоступныхДокументов	= ДоступныеДляОбработкиСтроки.Количество();
	
	Если КоличествоДоступныхДокументов = 0 Тогда
		
		ПоказатьОшибкиОбработкиДанных("ПереотправитьПакет", ЭтаФорма);
		
	ИначеЕсли КоличествоВыбранныхДокументов > КоличествоДоступныхДокументов Тогда
		
		ПараметрыОбработки.ДанныеДляОбработки = ДоступныеДляОбработкиСтроки;
		
		ОписаниеОповещенияЗавершения = НовыйОписаниеОповещения("ОбработатьСогласиеОЧастичномПерезаполненииИОтправке", ЭтаФорма, ПараметрыОбработки);
		ПоказатьВопросОЧастичномВыполненииДействия(ПараметрыОбработки, ОписаниеОповещенияЗавершения);
		
	Иначе
		
		ОбработатьПерезаполнениеИОтправкуПакетов(ПараметрыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСогласиеОЧастичномПерезаполненииИОтправке(ПараметрОповещения = Неопределено, ПараметрыОбработки) Экспорт
    
	Если ПараметрОповещения = КодВозвратаДиалога.Да Тогда
		ОбработатьПерезаполнениеИОтправкуПакетов(ПараметрыОбработки);
	ИначеЕсли ПараметрОповещения = КодВозвратаДиалога.Прервать Тогда
		ОткрытьФормуСпискаОшибок();
	Иначе
		Возврат;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПерезаполнениеИОтправкуПакетов(ПараметрыОбработки)
	
	КатегорияМетрики	= ПараметрыОбработки.КатегорияМетрики;
	ДействиеМетрики		= ПараметрыОбработки.ДействиеМетрики;
	ДействияЭДО			= ДействияЭДО();
	
	ПараметрыДляПереотправки = Новый_ПараметрыГрупповойОбработки(ПараметрыОбработки.ДанныеДляОбработки, ДействияЭДО.ПереотправитьПакет, КатегорияМетрики, ДействиеМетрики);
	ОписаниеОповещения = НовыйОписаниеОповещения("ОбработатьПерезаполнениеПакетов", ЭтаФорма, ПараметрыДляПереотправки);
	
	Если ПараметрыОбработки.ЗапроситьАннулирование Тогда
		
		ДанныеДляОбработки = ДокументыПакетовСтрокСписка(ПараметрыОбработки.ДанныеДляОбработки);
		
		ПараметрыОбработки = Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки, ДействияЭДО.Аннулировать, КатегорияМетрики, "Аннулировать");
		ПараметрыОбработки.Вставить("ОписаниеОповещения",	ОписаниеОповещения);
		
		ОбработатьДействиеПоАннулированию(, ПараметрыОбработки);
		
	Иначе
		
		ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// } Перезаполнение и отправка


// { Обработка документов для действий с подписанием

&НаКлиенте
Процедура ОбработатьДокументыСПодписанием(КонтекстФункции)
	
	ИмяМетода				 = "Документы_ДанныеДляMessagePatchToPost";
	ДокументыДляОбработки	 = ОчередьЗадач_ВыгрузитьДокументыИзМассиваПакетов(КонтекстФункции.Данные);
	Действие				 = КонтекстФункции.Параметры;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки, Действие);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	КонтекстФункции.Очистить();
	КонтекстФункции.Вставить("Обработчик", "ЗавершитьОбработкуДокументовСПодписанием");
	КонтекстФункции.Вставить("ТекущаяОперация", ТекущаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДокументовСПодписанием(КонтекстФункции)

	ПодготовленныеДанные = КонтекстФункции.ТекущаяОперация.Результат;
	
	КонтекстФункции.Удалить("ТекущаяОперация");
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	Модуль_Ядро.Документы_ПодписатьДанныеДляMessagePatchToPost(ПодготовленныеДанные);
	
	ИмяМетода = "Документы_ОтправитьДанныеДляMessagePatchToPost";
	
	ПараметрыМетода = ПараметрыВМассив(ПодготовленныеДанные);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Обработка документов для действий с подписанием


// { Обработка документов для действий без подписания

&НаКлиенте
Процедура ОбработатьДокументыБезПодписания(КонтекстФункции)
	
	ИмяМетода				 = "Документы_ВыполнитьДействиеСДокументами";
	ДокументыДляОбработки	 = ОчередьЗадач_ВыгрузитьДокументыИзМассиваПакетов(КонтекстФункции.Данные);
	Действие				 = КонтекстФункции.Параметры;
	
	ПараметрыМетода = ПараметрыВМассив(ДокументыДляОбработки, Действие);
	
	ТекущаяОперация = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ДлительныеОперации_ВыполнитьОперацию", ИмяМетода, ПараметрыМетода);
	
	ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация);
	
КонецПроцедуры

// } Обработка документов для действий без подписания


// { Обработка очереди задач

&НаКлиенте
Функция Новый_ПараметрыГрупповойОбработки(ДанныеДляОбработки
										, Действие
										, КатегорияМетрики
										, ДействиеМетрики
										, ФормаВыполнения = Неопределено
										, ИдентификаторЯщика = Неопределено
										, КонтрагентПоддерживаетМЧД = Истина
	) Экспорт
	
	Если ФормаВыполнения = Неопределено Тогда
		ФормаВыполнения = ЭтаФорма;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеДляОбработки",	ДанныеДляОбработки);
	Результат.Вставить("Действие",				Действие);
	Результат.Вставить("КатегорияМетрики",		КатегорияМетрики);
	Результат.Вставить("ДействиеМетрики",		ДействиеМетрики);
	Результат.Вставить("ФормаВыполнения",		ФормаВыполнения);
	Результат.Вставить("ГрупповоеДействие",		Ложь);
	Результат.Вставить("ИдентификаторЯщика",	ИдентификаторЯщика);
	Результат.Вставить("КонтрагентПоддерживаетМЧД"	, КонтрагентПоддерживаетМЧД);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_ОчередьАсинхронныхЗадач()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПулЗадач", Новый Массив);
	Результат.Вставить("КоличествоПотоков", 10);
	Результат.Вставить("ЗаголовокФормыПрогресса");
	Результат.Вставить("ЗаголовокВыполненнойОчереди");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	ДанныеДляОбработки = ПараметрыОбработки.ДанныеДляОбработки;
	КоличествоСтрок = ДанныеДляОбработки.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		ПоказатьПредупреждениеНеВыбраноНиОднойСтроки();
		
	ИначеЕсли КоличествоСтрок = 1
		И ЕстьОграниченияПоТарифу Тогда
		
		ПараметрыОбработки.ГрупповоеДействие = Истина;
		
		ОписаниеГрупповойОперации = Новый_ОписаниеГрупповойОперации(
				ИмяОбработчика,
				ПараметрыОбработки);
		
		ОбработчикСогласияНаГрупповуюОбработкуВыделенныхСтрок(
			КодВозвратаДиалога.Да,
			ОписаниеГрупповойОперации);
		
	Иначе
		
		Модуль_Ядро = Модуль_ЯдроНаКлиенте();
		
		ОбрабатываемаяСущность = ОбрабатываемаяСущность();
		ШаблонВопроса = "Вы собираетесь выполнить групповые действия. %1ов к обработке %2. Продолжить?";
		ТекстВопроса = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(
				ШаблонВопроса,
				ОбрабатываемаяСущность,
				КоличествоСтрок);
		
		ПараметрыОбработки.ГрупповоеДействие = Истина;
		
		ОписаниеГрупповойОперации = Новый_ОписаниеГрупповойОперации(
				ИмяОбработчика,
				ПараметрыОбработки);
		
		ОписаниеОповещения = НовыйОписаниеОповещения(
				"ОбработчикСогласияНаГрупповуюОбработкуВыделенныхСтрок",
				ЭтаФорма,
				ОписаниеГрупповойОперации);
		
		ПоказатьВопросПереопределенная(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеНеВыбраноНиОднойСтроки()
	
	ОбрабатываемаяСущность = ОбрабатываемаяСущность();
	ТекстПредупреждения = "Выберите хотя бы один " + НРег(ОбрабатываемаяСущность);
	
	ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения);
	
КонецПроцедуры

// Обработчик согласия на групповое действие
//
// Параметры:
//  Ответ - КодВозвратаДиалога - выбор пользователя в методе ПолучитьСогласиеНаГрупповуюОбработкуВыделенныхСтрок
//  ОписаниеГрупповойОперации - Структура - См. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура ОбработчикСогласияНаГрупповуюОбработкуВыделенныхСтрок(Ответ, ОписаниеГрупповойОперации) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПроверитьПараметрыГрупповойОперацииИВыполнитьОбработчик(ОписаниеГрупповойОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Новый_ОписаниеГрупповойОперации(ИмяОбработчика, ПараметрыОбработки) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИмяОбработчикаГрупповойОперации"	, ИмяОбработчика);
	Результат.Вставить("ПараметрыГрупповойОбработки"		, ПараметрыОбработки);
	
	Возврат Результат;
	
КонецФункции

// Проверяет данные перед выполнением групповой операции 
//	1. Проверяет сертификаты на КЭП
//	2. Проверяет данные МЧД
//	3. Выполняет обработчик групповой операции
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура ПроверитьПараметрыГрупповойОперацииИВыполнитьОбработчик(ОписаниеГрупповойОперации) 
	
	КЭП_НачатьПроверкуДанныхГрупповойОперации(ОписаниеГрупповойОперации);
	
КонецПроцедуры

// Непосредственно выполняет обработчик групповой операции после выполнения проверок и всех интерактивных действий
//
// Параметры:
//  Результат - Произвольный - Не используется
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура Обработчик_ВыполнитьГрупповуюОперациюПослеЗавершенияПроверок(Результат, ОписаниеГрупповойОперации) Экспорт
	
	ОписаниеОповещенияОбработчика = НовыйОписаниеОповещения(
		ОписаниеГрупповойОперации.ИмяОбработчикаГрупповойОперации, 
		ЭтаФорма, 
		ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки
	);
	
	ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещенияОбработчика, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОНевозможностиВыполненияДействия(ПараметрыОбработки)
	
	Действие = ПараметрыОбработки.Действие;
	
	ДействияЭДО = ДействияЭДО();
	
	ЗаголовокПредупреждения	= "";
	ТекстПредупреждения		= "";
	
	Если Действие = ДействияЭДО.ПередатьНаСогласование Тогда
		
		ЗаголовокПредупреждения	= "Невозможно передать документы на согласование";
		ТекстПредупреждения		= "Выбранные документы нельзя передать на согласование.";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьНаПодпись Тогда
		
		ЗаголовокПредупреждения	= "Невозможно передать документы на подпись";
		ТекстПредупреждения		= "Выбранные документы нельзя передать на подпись.";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьПоМаршруту Тогда
		
		ЗаголовокПредупреждения	= "Невозможно передать документы по маршруту";
		ТекстПредупреждения		= "Выбранные документы нельзя передать по маршруту";
		
	ИначеЕсли Действие = ДействияЭДО.Согласование Тогда
		
		ЗаголовокПредупреждения	= "Не удалось согласовать документы.";
		ТекстПредупреждения		= "Возможно, документы уже согласованы.";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказВСогласовании Тогда
		
		ЗаголовокПредупреждения	= "Не удалось отказать в согласовании по документам.";
		ТекстПредупреждения		= "Возможно, по документам уже отказано в согласовании.";
		
	ИначеЕсли Действие = ДействияЭДО.Аннулировать Тогда
		
		ЗаголовокПредупреждения = "Невозможно аннулировать документы по одной из причин:";
		ТекстПредупреждения = " - Документы уже аннулированы
							  | - Документы недоступны для аннулирования";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказатьВАннулировании Тогда
		
		ЗаголовокПредупреждения = "Невозможно отказать в аннулировании по одной из причин:";
		ТекстПредупреждения = " - Документы уже аннулированы
							  | - Документы не требуют аннулирования";
		
	ИначеЕсли Действие = ДействияЭДО.ПодписатьИОтправить Тогда
		
		ЗаголовокПредупреждения	= "Невозможно отправить документы";
		ТекстПредупреждения		= "Выбранные документы должны быть в статусе ""Требуется подписать и отправить"" и не быть на согласовании.";
		
	ИначеЕсли Действие = ДействияЭДО.ОтправитьОтвет Тогда
		
		ЗаголовокПредупреждения	= "Невозможно отправить готовые ответы";
		ТекстПредупреждения		= "Не найдены подготовленные ответы для выбранных документов";
		
	ИначеЕсли Действие = ДействияЭДО.ПодписатьВходящий Тогда
		
		ЗаголовокПредупреждения	= "Невозможно подписать документы";
		ТекстПредупреждения		= "Выбранные документы нельзя подписать по причине:
								  |статус документа не позволяет осуществить действие.";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказатьВПодписи Тогда
		
		ЗаголовокПредупреждения	= "Невозможно отказать в подписи по документам";
		ТекстПредупреждения		= "Выбранные документы нельзя отказать в подписи по причине:
								  |статус документа не позволяет осуществить действие.";
		
	ИначеЕсли Действие = ДействияЭДО.ПереотправитьПакет Тогда
		
		ЗаголовокПредупреждения = "Переотправка документов";
		ТекстПредупреждения = "Выбранные документы недоступны для переотправки";
		
	Иначе
		ВызватьИсключение "Попытка выполнить неизвестное действие!";
	КонецЕсли;
		
	ПоказатьПредупреждениеПереопределенная(Неопределено, ТекстПредупреждения, , ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЧастичномВыполненииДействия(ПараметрыОбработки, ОписаниеОповещенияЗавершения)
	
	ТекстВопроса		= "";
	КнопкиВопроса		= Новый СписокЗначений;
	КнопкаПоУмолчанию	= КодВозвратаДиалога.Да;
	ЗаголовокВопроса	= "";
	Действие			= ПараметрыОбработки.Действие;
	
	ДействияЭДО = ДействияЭДО();
	
	Если Действие = ДействияЭДО.ПередатьНаСогласование Тогда
		
		ЗаголовокВопроса	= "Невозможно передать на согласование все документы";
		ТекстВопроса		= "Среди выбранных есть документы, которые невозможно передать на согласование.";
		ТекстКнопки			= "Передать на согласование доступные документы";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьНаПодпись Тогда
		
		ЗаголовокВопроса	= "Невозможно передать на подпись все документы";
		ТекстВопроса 		= "Среди выбранных есть документы, которые невозможно передать на подпись.";
		ТекстКнопки			= "Передать на подпись доступные документы";
		
	ИначеЕсли Действие = ДействияЭДО.ПередатьПоМаршруту Тогда
		
		ЗаголовокВопроса	= "Невозможно передать по маршруту все документы";
		ТекстВопроса		= "Среди выбранных есть документы, которые невозможно передать по маршруту.";
		ТекстКнопки			= "Передать по маршруту доступные документы";
		
	ИначеЕсли Действие = ДействияЭДО.Согласование Тогда
		
		ЗаголовокВопроса	= "Невозможно согласовать все документы";
		ТекстВопроса		= "Среди выбранных есть документы, которые невозможно согласовать.";
		ТекстКнопки			= "Согласовать доступные документы";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказВСогласовании Тогда
		
		ЗаголовокВопроса	= "Невозможно отказать в согласовании всех документов";
		ТекстВопроса		= "Среди выбранных есть документы, по которым невозможно отказать в согласовании.";
		ТекстКнопки			= "Отказать в согласовании доступных документов";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказВЗапросеПодписи Тогда
		
		ЗаголовокВопроса	= "Невозможно отказать в запросе сотруднику всех документов";
		ТекстВопроса		= "Среди выбранных есть документы, по которым невозможно отказать в запросе сотруднику.";
		ТекстКнопки			= "Отказать в запросе сотруднику доступных документов";
		
	ИначеЕсли Действие = ДействияЭДО.ПодписатьВходящий Тогда
		
		ЗаголовокВопроса	= "Невозможно подписать все документы";
		ТекстВопроса		= "Среди выбранных есть документы, которые нельзя подписать.";
		ТекстКнопки			= "Подписать доступные документы";
		
	ИначеЕсли Действие = ДействияЭДО.ОтказатьВПодписи Тогда
		
		ЗаголовокВопроса	= "Невозможно отказать в подписи по всем документам";
		ТекстВопроса		= "Среди выбранных есть документы, по которым нельзя отказать в подписи.";
		ТекстКнопки			= "Отказать в подписи по доступным документам";
		
	ИначеЕсли Действие = ДействияЭДО.ОтправитьОтвет Тогда
		
		ЗаголовокВопроса	= "Невозможно отправить готовые ответы для всех документов";
		ТекстВопроса		= "Среди выбранных есть документы, по которым не подготовлены ответы.";
		ТекстКнопки			= "Отправить подготовленные ответы";
		
	ИначеЕсли Действие = ДействияЭДО.ПереотправитьПакет Тогда
		
		ЗаголовокВопроса	= "Невозможно переотправить все документы";
		ТекстВопроса		= "Среди выбранных есть документы, для которых нельзя выполнить действие ""Переотправить""";
		ТекстКнопки			= "Переотправить";
		
	КонецЕсли;
	
	КоличествоДоступныхПрописью = Формат(ПараметрыОбработки.ДанныеДляОбработки.Количество(), "ЧГ=0");
	
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, ТекстКнопки + " (" + КоличествоДоступныхПрописью + ")");
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Прервать, "Подробнее...");
	
	ПоказатьВопросПереопределенная(ОписаниеОповещенияЗавершения, ТекстВопроса, КнопкиВопроса,, КнопкаПоУмолчанию, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМассовуюОбработкуДанных(ИмяОбработчика,
											ДанныеДляОбработки,
											Действие,
											ДополнительныеПараметры = Неопределено,
											ОписаниеОповещения = Неопределено
	)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ОчередьЗадач = Новый_ОчередьАсинхронныхЗадач();
	
	ОчередьЗадач.ЗаголовокФормыПрогресса	 = ЗаголовокФормыПрогресса();
	ОчередьЗадач.ЗаголовокВыполненнойОчереди = ПредставлениеДействияЭДО(Действие);
	
	КатегорияМетрики = Метрика_НазваниеКатегорийМассовыхДействий(Действие);
	
	Если ЗначениеЗаполнено(КатегорияМетрики) Тогда
		Модуль_Ядро.Метрика_ДобавитьЗамер_СУчетомЗаполненияКонтекста(КатегорияМетрики);
	КонецЕсли;
	
	КоличествоПакетовВПорции = Модуль_Ядро.КоличествоПакетовВГрупповойОперации();
	
	ПорцииДанных = Модуль_Ядро.ПорцииДанныхМассива(ДанныеДляОбработки, КоличествоПакетовВПорции);
	
	Для Каждого ПорцияДанных Из ПорцииДанных Цикл
		
		КонтекстФункции = Новый Структура;
		КонтекстФункции.Вставить("Обработчик",	ИмяОбработчика);
		КонтекстФункции.Вставить("Данные",		ПорцияДанных);
		КонтекстФункции.Вставить("Параметры",	ДополнительныеПараметры);
		
		ОчередьЗадач.ПулЗадач.Добавить(КонтекстФункции);
		
	КонецЦикла;
	
	Модуль_Ядро.СписокОшибок_Очистить();
	
	ОбработатьОчередьЗадач(ОчередьЗадач);
	
	Если ЗначениеЗаполнено(КатегорияМетрики) Тогда
		
		КоличествоДокументов = ДанныеДляОбработки.Количество();
		
		ДопПеременные = Новый Соответствие;
		ДопПеременные.Вставить("Количество документов", КоличествоДокументов);

		Модуль_Ядро.Метрика_ДобавитьЗамер_СУчетомЗаполненияКонтекста(КатегорияМетрики, Ложь, ДопПеременные);
		
	КонецЕсли;
	
	Если ОписаниеОповещения = Неопределено Тогда
		
		ФормаВыполнения = СвойствоСтруктуры(ДополнительныеПараметры, "ФормаВыполнения");
		ЗавершениеОбработкиДокументов(Действие, ФормаВыполнения);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПредыдущееДействие", Истина);
		ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкиДокументов(Действие, ФормаВыполнения)
	
	Пакеты_ВыполнитьОчисткуУстаревшихПодготовленных(Действие);
	
	СписокОшибок = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().СписокОшибок");
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ПоказатьОшибкиОбработкиДанных(Действие, ФормаВыполнения);
	КонецЕсли;
	
	Если ФормаВыполнения = Неопределено
		ИЛИ ФормаВыполнения.РежимОтображенияДокументов = ЭтаФорма.РежимОтображенияДокументов Тогда
		ОбновитьСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчередьЗадач(ОчередьЗадач)
	
	КоличествоПотоков	 = ОчередьЗадач.КоличествоПотоков;
	НовыеЗадачи			 = ОчередьЗадач.ПулЗадач;
	ВсегоЗадач			 = НовыеЗадачи.Количество();
	ВыполненоЗадач		 = 0;

	КоличествоДокументовДляОбработки	 = ОчередьЗадач_КоличествоДокументовВЗадачах(НовыеЗадачи);
	
	Если КоличествоДокументовДляОбработки > 1 Тогда
		
		ФормаПрогресса = Форма_ПрогрессВыполнения();
		
		ФормаПрогресса.МассоваяОбработка = Истина;
		ФормаПрогресса.УстановитьМаксимальноеЗначение(КоличествоДокументовДляОбработки);
		ФормаПрогресса.УстановитьЗаголовок(СтрЗаменить(ОчередьЗадач.ЗаголовокФормыПрогресса, "%количество%", КоличествоДокументовДляОбработки));
		ФормаПрогресса.УстановитьЗаголовокВыполненнойОчереди(ОчередьЗадач.ЗаголовокВыполненнойОчереди);
		ФормаПрогресса.УстановитьНадписиПриОтправкеПакетов(КоличествоДокументовДляОбработки, 0);
		ФормаПрогресса.УстановитьЗначениеПрогресса(0);
		
	КонецЕсли;
	
	ТекущиеЗадачи = Новый Массив;
	НачалоОбработки = Истина;
	
	Пока ВсегоЗадач > ВыполненоЗадач Цикл
		
		ЕстьСвободныеПотоки				 = ТекущиеЗадачи.Количество() < КоличествоПотоков;
		МожноДобавитьЗадачиДляВыполнения = ЕстьСвободныеПотоки И ЗначениеЗаполнено(НовыеЗадачи);
		
		Если Не НачалоОбработки И Не МожноДобавитьЗадачиДляВыполнения Тогда
			ОчередьЗадач_ПодождатьЗавершенияЛюбойОперации(ТекущиеЗадачи);
		КонецЕсли;
		
		Если МожноДобавитьЗадачиДляВыполнения Тогда
			ОчередьЗадач_ДобавитьЗадачиДляВыполнения(ТекущиеЗадачи, НовыеЗадачи, КоличествоПотоков);
		КонецЕсли;
		
		ВыполненоЗадачДо = ВыполненоЗадач;
		
		ОчередьЗадач_ВыполнитьЗадачи(ТекущиеЗадачи);
		
		ВыполненоЗадач = ВсегоЗадач - НовыеЗадачи.Количество() - ТекущиеЗадачи.Количество();
		
		ОсталосьОбработатьДокументов = ОчередьЗадач_КоличествоДокументовВЗадачах(НовыеЗадачи);
		
		Если ФормаПрогресса <> Неопределено
			И ОсталосьОбработатьДокументов > 0 Тогда
			
			УжеОбработаноДокументов = КоличествоДокументовДляОбработки - ОсталосьОбработатьДокументов;
			ФормаПрогресса.УстановитьЗначениеПрогресса(УжеОбработаноДокументов);
			ФормаПрогресса.УстановитьНадписиПриОтправкеПакетов(КоличествоДокументовДляОбработки, УжеОбработаноДокументов);
		КонецЕсли;
		
		НачалоОбработки = Ложь;
		
	КонецЦикла;
	
	Если ФормаПрогресса <> Неопределено Тогда
		ФормаПрогресса.фЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОчередьЗадач_КоличествоДокументовВЗадачах(Задачи)
	
	Результат = 0;
	Для каждого Задача Из Задачи Цикл
	
		Результат = Результат + Задача.Данные.Количество();
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОчередьЗадач_ВыгрузитьДокументыИзМассиваПакетов(Пакеты)
	
	Результат = Новый Массив;
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Для каждого Пакет Из Пакеты Цикл
		Модуль_Ядро.ДополнитьМассив(Результат, Пакет.Документы, Ложь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОчередьЗадач_ДобавитьЗадачиДляВыполнения(ТекущиеЗадачи, НовыеЗадачи, МаксимальноеКоличествоЗадач)
	
	Для Сч = -НовыеЗадачи.ВГраница() По 0 Цикл
		
		Если ТекущиеЗадачи.Количество() >= МаксимальноеКоличествоЗадач Тогда
			Прервать;
		КонецЕсли;
		
		КонтекстФункции = НовыеЗадачи[-Сч];
		
		НовыеЗадачи.Удалить(-Сч);
		ТекущиеЗадачи.Вставить(0, КонтекстФункции);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадач_ВыполнитьЗадачи(ТекущиеЗадачи)
	
	Для Сч = -ТекущиеЗадачи.ВГраница() По 0 Цикл
		
		ИндексЗадачи = -Сч;
		
		КонтекстФункции = ТекущиеЗадачи[ИндексЗадачи];
		
		Если КонтекстФункции.Свойство("ТекущаяОперация")
			И НЕ КонтекстФункции.ТекущаяОперация.Завершено Тогда
			
			МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().ДлительнаяОперация_ПроверитьРезультат", КонтекстФункции.ТекущаяОперация);
			
			Если КонтекстФункции.ТекущаяОперация.Завершено Тогда
				
				Если ЗначениеЗаполнено(КонтекстФункции.ТекущаяОперация.ТекстОшибки) Тогда
					ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции);
				КонецЕсли;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КонтекстФункции.Свойство("ЗавершитьЗадачу") Тогда
			ТекущиеЗадачи.Удалить(ИндексЗадачи);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОчередьЗадач_ВыполнитьЗадачуБезопасно(КонтекстФункции);
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПричинаОшибки = ОчередьЗадач_ПричинаОшибки(ИнформацияОбОшибке);
			КраткийТекстОшибки = КраткоеПредставлениеОшибки(ПричинаОшибки);
			
			_ОбработатьОшибку(
				КонтекстФункции.Обработчик,
				КраткийТекстОшибки
			);
			
			ТекущиеЗадачи.Удалить(ИндексЗадачи);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадач_ЗавершитьЗадачу(КонтекстФункции, ТекущаяОперация = Неопределено)
	
	КонтекстФункции.Очистить();
	
	КонтекстФункции.Вставить("ЗавершитьЗадачу");
	
	Если ТекущаяОперация <> Неопределено Тогда
		КонтекстФункции.Вставить("ТекущаяОперация", ТекущаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОчередьЗадач_ПричинаОшибки(ИнформацияОбОшибке)
	
	Результат		= ИнформацияОбОшибке;
	ПричинаОшибки	= ИнформацияОбОшибке;
	
	Пока ПричинаОшибки <> Неопределено Цикл
		
		ПричинаОшибки = ПричинаОшибки.Причина;
		
		Если ПричинаОшибки <> Неопределено И ПричинаОшибки.НомерСтроки > 0 Тогда
			Результат = ПричинаОшибки;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОчередьЗадач_ВыполнитьЗадачуБезопасно(КонтекстФункции)
	
	Обработчик = КонтекстФункции.Обработчик;
	
	Если Обработчик = "ПакетДляОтправки" Тогда
		
		ПакетДляОтправки(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ОтправитьПакет" Тогда
		
		ОтправитьПакет(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ПерезаполнитьПакет" Тогда
		
		ПерезаполнитьПакет(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ЗаполнитьПараметрыПереотправки" Тогда
		
		ЗаполнитьПараметрыПереотправки(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ОтправитьДокументыНаМаршрутизацию" Тогда
		
		ОтправитьДокументыНаМаршрутизацию(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ПередатьВПодразделение" Тогда
		
		ПередатьВПодразделение(КонтекстФункции);
		
	ИначеЕсли Обработчик = "СохранитьДокументы" Тогда
		
		СохранитьДокументы(КонтекстФункции);
		
	ИначеЕсли Обработчик = "РасшифроватьДокументы" Тогда
		
		РасшифроватьДокументы(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ПометитьДокументыКакЗавершенные" Тогда
		
		ПометитьДокументыКакЗавершенные(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ТребуемоеДействие" Тогда
		
		ТребуемоеДействие(КонтекстФункции);
		
	ИначеЕсли Обработчик = "АнализДокументов" Тогда
		
		АнализДокументов(КонтекстФункции);
		
	ИначеЕсли Обработчик = "АнализПакетов" Тогда
		
		АнализПакетов(КонтекстФункции);
		
	ИначеЕсли Обработчик = "СопоставитьДокументы" Тогда
		
		СопоставитьДокументы(КонтекстФункции);
		
	ИначеЕсли Обработчик = "СоздатьДокументы" Тогда
		
		СоздатьДокументы(КонтекстФункции);
		
	ИначеЕсли Обработчик = "СоздатьДокументыПоПравилу" Тогда
		
		СоздатьДокументыПоПравилу(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ОбработатьДокументыСПодписанием" Тогда
		
		ОбработатьДокументыСПодписанием(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ЗавершитьОбработкуДокументовСПодписанием" Тогда
		
		ЗавершитьОбработкуДокументовСПодписанием(КонтекстФункции);
		
	ИначеЕсли Обработчик = "ОбработатьДокументыБезПодписания" Тогда
		
		ОбработатьДокументыБезПодписания(КонтекстФункции);
		
	Иначе
		
		ТекстОшибки = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неизвестный обработчик асинхронной задачи %1'"), Обработчик);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадач_ПодождатьЗавершенияЛюбойОперации(ОчередьЗадач)
	
	ИдентификаторыЗаданий = Новый Массив;
	
	Для каждого КонтекстФункции Из ОчередьЗадач Цикл
	
		ТекущаяОперация			= СвойствоСтруктуры(КонтекстФункции, "ТекущаяОперация");
		ИдентификаторЗадания	= СвойствоСтруктуры(ТекущаяОперация, "ИдентификаторЗадания");
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ИдентификаторыЗаданий.Добавить(ИдентификаторЗадания);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторыЗаданий) Тогда
		МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().ФоновоеЗадание_ПодождатьЗавершенияЛюбогоЗадания"
		, ИдентификаторыЗаданий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокФормыПрогресса()
	
	ОбрабатываемаяСущность = НРег(ОбрабатываемаяСущность());
	
	Результат = "Обработка %количество% " + ОбрабатываемаяСущность + "ов";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеДействияЭДО(Действие)
	
	ПредставленияДействийЭДО = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Перечисление_ПредставленияДействийЭДО");
	Результат = ПредставленияДействийЭДО[Действие];
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = "Обработка";
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбрабатываемаяСущность()
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		Результат = "Пакет";
	Иначе
		Результат = "Документ";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкиОбработкиДанных(Действие, ФормаВыполнения) Экспорт
	
	ТекстВопроса			= "";
	КнопкиВопроса			= Новый СписокЗначений;
	КнопкаПоУмолчанию		= КодВозвратаДиалога.ОК;
	ПредставлениеДействия	= ПредставлениеДействияЭДО(Действие);
	ЭтоМассоваяОбработка	= (ФормаВыполнения = Неопределено ИЛИ ФормаВыполнения = ЭтаФорма);
	
	Если ЭтоМассоваяОбработка Тогда
		ТекстСообщения = "Не для всех выделенных документов удалось выполнить операцию";
	Иначе
		ТекстСообщения = "Не удалось выполнить операцию";
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + ": " + ПредставлениеДействия;
	
	КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК);
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Посмотреть причины'"));
	
	ОписаниеОповещенияЗавершения = НовыйОписаниеОповещения("ПослеСообщенияОНеполномВыполненииДействия", ЭтаФорма, ФормаВыполнения);
	
	ПоказатьВопросПереопределенная(ОписаниеОповещенияЗавершения, ТекстСообщения, КнопкиВопроса,, КнопкаПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСообщенияОНеполномВыполненииДействия(ПараметрОповещения, ФормаВыполнения) Экспорт 
	
	Если ПараметрОповещения = КодВозвратаДиалога.Прервать Тогда
		ОткрытьФормуСпискаОшибок(ФормаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Пакеты_ВыполнитьОчисткуУстаревшихПодготовленных(ДействиеЭДО) Экспорт
	
	Если ИспользуетсяПодсистемаДиадок Тогда
		
		ДействияЭДО = ДействияЭДО();
		
		Если ДействиеЭДО = ДействияЭДО.ПодписатьИОтправить
			ИЛИ ДействиеЭДО = ДействияЭДО.ПередатьНаСогласование
			ИЛИ ДействиеЭДО = ДействияЭДО.ПередатьНаПодпись
			ИЛИ ДействиеЭДО = ДействияЭДО.ПередатьПоМаршруту Тогда
		
			МетодСервераБезКонтекста(Ложь, "Модуль_Ядро().Пакеты_ВыполнитьОчисткуУстаревшихПодготовленных");
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// } Обработка очереди задач

// }	МАССОВАЯ ОБРАБОТКА ДОКУМЕНТОВ


// {	ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Функция РежимыОтображения() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДляОтправки",	"ОтправкаПакетов");
	Результат.Вставить("Исходящие",		"ОтправленныеДокументы");
	Результат.Вставить("Входящие",		"ПолученныеДокументы");
	
	Возврат Результат
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбработкаОбъект = ОбработкаОбъект();
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	НомерРелиза = ОбработкаОбъект.ПолнаяВерсияОбработки();
	РежимОтладкиВключен = ОбработкаОбъект.РежимОтладкиВключен();
	РежимЛогированияВключен = Модуль_Ядро.РежимЛогированияВключен();
	
	СтрокаИмяМодуля = "Контур.Диадок / ";
	СтрокаНомерРелиза = Строка(НомерРелиза);
	СтрокаИмяТарифа = ?(ЕстьОграниченияПоТарифу, "Тариф ""Стартовый"" / ", "");
	СтрокаРежимОтладки = ?(РежимОтладкиВключен, " (РЕЖИМ ОТЛАДКИ)", "");
	СтрокаРежимЛогирования = ?(РежимЛогированияВключен, " (РЕЖИМ ЛОГИРОВАНИЯ)", "");
	
	НовыйЗаголовок = СтрокаИмяМодуля
		+ СтрокаИмяТарифа
		+ СтрокаНомерРелиза
		+ СтрокаРежимОтладки
		+ СтрокаРежимЛогирования;
	
	ЭтаФорма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокКнопкиАвторизацииПоУмолчанию()
	
	ЗаголовокПоУмолчанию = "Авторизация ...";
	Элементы.ПредставлениеПользователя.Заголовок = ЗаголовокПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиПериода()
	
	Элементы.ВыбратьПериод.Заголовок = ЗаголовокКнопкиВыбораПериода();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокКнопкиВыбораПериода()
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		ТекстРежимОтбораПоПериоду = "документа";
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения.Исходящие Тогда
		ТекстРежимОтбораПоПериоду = ?(НастройкаВыбораПериода.РежимОтбораПоПериоду = "ПоДатеДокумента", "документа", "отправки");
	Иначе
		ТекстРежимОтбораПоПериоду = ?(НастройкаВыбораПериода.РежимОтбораПоПериоду = "ПоДатеДокумента", "документа", "получения");
	КонецЕсли;
	
	ТекстРежимОтбораПоПериоду = "по дате " + ТекстРежимОтбораПоПериоду;
	
	Результат = СтруктураПериода().Представление + " " + "(" + ТекстРежимОтбораПоПериоду + ")";
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтруктураПериода()
	
	ДатаНачала		 = НастройкаВыбораПериода.ДатаНачала;
	ДатаОкончания	 = НастройкаВыбораПериода.ДатаОкончания;
	
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = '00010101';
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	
	Представление = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = "<период не установлен>";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецДня('39990101');
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачала",	ДатаНачала);
	Результат.Вставить("ДатаОкончания",	ДатаОкончания);
	Результат.Вставить("Представление",	Представление);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок(НовыйРежимОтображенияДокументов = Неопределено, ОтборПоПакету = Неопределено, КоличествоДокументов = 0) Экспорт
	
	Состояние("Обновление списка документов...");
	
	ФормаПрогресса = Форма_ПрогрессВыполнения();
	
	Если ФормаПрогресса.Открыта() И ФормаПрогресса.ПрогрессВыполнен() Тогда
		ФормаПрогресса.Закрыть();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйРежимОтображенияДокументов)
		И НЕ ЗначениеЗаполнено(РежимОтображенияДокументов) Тогда
		
		Если ЗначениеЗаполнено(РежимОтображенияПриЗапуске) Тогда
			НовыйРежимОтображенияДокументов = РежимОтображенияПриЗапуске;
		Иначе
			НовыйРежимОтображенияДокументов = РежимыОтображения().ДляОтправки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборПоПакету) Тогда
		СписокДокументов.Очистить();
	КонецЕсли;
	
	КатегорияМетрики = Метрика_НазваниеКатегорийПостроенияСписка(НовыйРежимОтображенияДокументов);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_НачатьЗамер_СУчетомЗаполненияКонтекстаПоКонтекстуОднойЗаписью(КатегорияМетрики);
	
	Отказ = Ложь;
	
	Попытка
	
		ПараметрыОбновленияСписка = ПараметрыОбновленияСпискаДокументов(НовыйРежимОтображенияДокументов, ОтборПоПакету);
		ОбновитьСписокНаСервере(ПараметрыОбновленияСписка);
		
	Исключение
	
		Отказ = Истина;
		Ошибка = ИнформацияОбОшибке();
		
		ТекстОшибкиРасширенный = "";
		
		Если Ошибка.Причина <> Неопределено Тогда
			Если Найти(Ошибка.Причина.Описание, "недостаточно прав") > 0 Тогда
				
				ТекстОшибкиРасширенный = Символы.ПС + "У пользователя недостаточно прав на исполнение операции над базой данных.";
				
			ИначеЕсли Ошибка.Причина.Причина <> Неопределено
				И Найти(Ошибка.Причина.Причина.Описание, "недостаточно прав") > 0 Тогда
				
				ТекстОшибкиРасширенный = Символы.ПС + "У пользователя недостаточно прав на исполнение операции над базой данных.";
				
			КонецЕсли;
		КонецЕсли;
		
		ТекстПредупреждения = НСтр("ru = 'При заполнении списка документов возникли ошибки."
		    + ТекстОшибкиРасширенный + "
			|Для просмотра подробной информации об ошибке перейдите в журнал регистрации 1С или обратитесь к техническому специалисту'");
		
		ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения);
		
	КонецПопытки;
	
	КоличествоДокументов = ПолучитьКоличествоДокументов(ОтборПоПакету);
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Количество документов", КоличествоДокументов);
	ДопПеременные.Вставить("Отказ", Отказ);
	
	Ядро.Метрика_ЗавершитьЗамер_СУчетомЗаполненияКонтекстаПоКонтекстуОднойЗаписью(КатегорияМетрики, ДопПеременные);
	
	УстановитьЗаголовокКнопкиПериода();
	
	УстановитьТекущуюСтрокуСпискаДокументов(); 
	
	ДействиеМетрики = РежимОтображенияДокументов; 
	
	Если НЕ ЗначениеЗаполнено(ДействиеМетрики) Тогда
		ДействиеМетрики = РежимыОтображения().ДляОтправки;
	КонецЕсли;
	
	Если Отказ Тогда
		
		ВидОперации		 = НСтр("ru = 'Обновление списка документов'");
		ТекстСообщения	 = НСтр("ru = 'Не удалось обновить список документов'");
		ТекстОшибки		 = КраткоеПредставлениеОшибки(Ошибка);
		
		_ОбработатьОшибку(
			ВидОперации,
			Ошибка,
			ТекстСообщения
		);
		
		Ядро.Метрика_ДобавитьОшибку_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, ТекстОшибки);
		
	КонецЕсли;
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Наименование колонок", Метрика_КолонкиФормыСписка());
	ПредставлениеМетрики = Метрика_НазваниеФормы();
	
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , ДопПеременные, ПредставлениеМетрики);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоДокументов(ОтборПоПакету)
	
	Результат = 1;
	
	Если Не ЗначениеЗаполнено(ОтборПоПакету) Тогда
		АдресСпискаДокументов = Объект.ОбщийКонтекстКлиентСервер.АдресКэшаСпискаДокументов;
		Результат = ПолучитьКоличествоДокументовИзКэша(АдресСпискаДокументов);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДокументовИзКэша(АдресСпискаДокументов)
	
	Результат = 0;
	
	КэшСпискаДокументовЛокальный = ПолучитьИзВременногоХранилища(АдресСпискаДокументов);
	
	Если ЗначениеЗаполнено(КэшСпискаДокументовЛокальный) Тогда
		
		Результат = КэшСпискаДокументовЛокальный.Количество();
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте 
Функция ПараметрыОбновленияСпискаДокументов(НовыйРежимОтображенияДокументов, ОтборПоПакету = Неопределено)
	
	Результат = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Контракт_ПараметрыПолученияСпискаДокументов");
	
	СтруктураПериода = СтруктураПериода();
	
	Если ЗначениеЗаполнено(НовыйРежимОтображенияДокументов) Тогда
		РежимДляОбновления = НовыйРежимОтображенияДокументов;
	Иначе
		РежимДляОбновления = РежимОтображенияДокументов;
	КонецЕсли;
	
	ВыбранныеВидыДокументов = ВыбранныеВидыДокументовНаСервере(РежимДляОбновления);
	
	Результат.Режим							 = РежимДляОбновления;
	Результат.НачалоПериода					 = СтруктураПериода.ДатаНачала;
	Результат.КонецПериода					 = СтруктураПериода.ДатаОкончания;
	Результат.МассивВыбранныхВидов			 = ВыбранныеВидыДокументов;
	Результат.ПоказыватьЗавершенные			 = ПоказыватьЗавершенные;
	Результат.РежимОтбораПоПериоду			 = НастройкаВыбораПериода.РежимОтбораПоПериоду;
	Результат.ВключитьОтборПоОрганизации	 = ВключитьОтборПоОрганизации;
	Результат.ВключитьОтборПоКонтрагенту	 = ВключитьОтборПоКонтрагенту;
	Результат.ВключитьОтборПоСтатусу		 = ВключитьОтборПоСтатусу;
	Результат.ОтборПоПакету					 = ОтборПоПакету;
	
	Результат.ОтборПоСтатусу				 = ?(ВключитьОтборПоСтатусу, ОтборПоСтатусу, Неопределено);
	
	Если ВключитьОтборПоКонтрагенту Тогда
		Результат.ОтборПоКонтрагенту		 = ?(ЗначениеЗаполнено(ОтборПоКонтрагенту), ОтборПоКонтрагенту, Неопределено);
	КонецЕсли;
	Если ВключитьОтборПоОрганизации Тогда
		Результат.ОтборПоОрганизации		 = ?(ЗначениеЗаполнено(ОтборПоОрганизации), ОтборПоОрганизации, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеВидыДокументовНаСервере(РежимДляОбновления)
	
	Результат = Новый Массив;
	
	Если РежимДляОбновления = РежимыОтображения().ДляОтправки Тогда
		
		Если ВключитьОтборПоВидуПакета Тогда
			Результат.Добавить(ОтборПоВидуПакета);
		Иначе
			
			МассивВидовПакетов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().МассивВидовПакетов");
			
			Для Каждого ВидПакета Из МассивВидовПакетов Цикл
				Результат.Добавить(ВидПакета.Идентификатор);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокНаСервере(Знач ПараметрыОбновленияСписка)
	
	// Проверяем, менялся ли режим отображения. Если менялся, то перерисуем колонки и перестроим СКД.
	мСтарыйРежимОтображенияДокументов = РежимОтображенияДокументов;
	РежимОтображенияДокументов = ПараметрыОбновленияСписка.Режим;
	
	Если мСтарыйРежимОтображенияДокументов <> РежимОтображенияДокументов Тогда
		
		РежимОтображенияПриЗапуске = РежимОтображенияДокументов;
		
		ПереключитьВидимостьКолонок(РежимОтображенияДокументов);
		
		УстановитьВидимостьОтбораПоСтатусу(РежимОтображенияДокументов);
		УстановитьВидимостьОтбораПоВидуПакета(РежимОтображенияДокументов);
		
		ЗаполнитьМенюДействий(РежимОтображенияДокументов);
		УстановитьЦветКнопокПереключенияРежимов();
		НастроитьДополнительныеКолонки();
		НастроитьФормуПриСменеРежима();
		
	КонецЕсли;
	
	МенеджерМодуля = ОбработкаОбъект();
	
	МенеджерМодуля.СписокДокументов_ОбновитьКэш(ПараметрыОбновленияСписка, СписокДокументов);
	МенеджерМодуля.ТаблицаОтборов_УстановитьОтборыСпискаДокументов(РежимОтображенияДокументов);
	
	ОбновитьСтраницуСпискаДокументовНаСервере();
	
	КоличествоУстановленныхФильтров = КоличествоУстановленныхФильтров();
	УстановитьЗаголовокКнопкиФильтров(КоличествоУстановленныхФильтров);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСменеРежима()
	
	Если РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		
		ЗаголовокКолонкиОшибок = "Ошибки";
		
		РазворачиватьПакетыНаОтправкуПоДокументам = Модуль_ЯдроНаСервере().ОбщиеНастройки_Прочитать("РазворачиватьПакетыНаОтправкуПоДокументам");
		
		Если РазворачиватьПакетыНаОтправкуПоДокументам Тогда
			ЗаголовокКолонкиСодержимоеПакета = "Документ";
		Иначе
			ЗаголовокКолонкиСодержимоеПакета = "Пакет документов";
		КонецЕсли;
		
		Элементы.СписокДокументовСодержимоеПакета.Заголовок = ЗаголовокКолонкиСодержимоеПакета;
		
	Иначе
		ЗаголовокКолонкиОшибок = "Ошибки проверки";
	КонецЕсли;
	
	Элементы.СписокДокументовОшибкиПроверкиТекст.Заголовок = ЗаголовокКолонкиОшибок;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидимостьКолонок(РежимОтображенияДокументов)
	
	ОтключитьВидимостьКолонок();

	ПереключаемыеКолонки = ОбработкаОбъект().МассивПереключаемыхКолонокСписка(РежимОтображенияДокументов);
	
	Для Каждого КолонкаФормы Из Элементы.СписокДокументов.ПодчиненныеЭлементы Цикл
		
		Для Каждого КолонкаТаблицы Из ПереключаемыеКолонки Цикл
			
			Если КолонкаФормы.Имя = "СписокДокументов" + КолонкаТаблицы Тогда
				
				КолонкаФормы.Видимость = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВидимостьКолонок()
	
	МассивНеизменныхКолонок = ОбработкаОбъект().МассивНеизменныхКолонок();
	
	Для Каждого КолонкаФормы Из Элементы.СписокДокументов.ПодчиненныеЭлементы Цикл
		
		ИмяКолонки = СтрЗаменить(КолонкаФормы.Имя, "СписокДокументов", "");
		
		Если МассивНеизменныхКолонок.Найти(ИмяКолонки) = Неопределено Тогда
			КолонкаФормы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНастройкиПлагинов()
	
	Если Объект.ОбщийКонтекстКлиентСервер.ИспользоватьПлагины Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаОткрытьСписокПлагинов = Элементы.ОткрытьСписокПлагинов;
	КнопкаОткрытьСписокПлагинов.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветКнопокПереключенияРежимов()
	
	ЦветАктивнойКнопки		= ЦветаСтиля.ЦветФонаКнопки;
	ЦветНеактивнойКнопки	= Новый Цвет(230, 230, 230);
	
	Элементы.ВыбратьРежимДляОтправки.ЦветФона	= ЦветНеактивнойКнопки;
	Элементы.ВыбратьРежимИсходящие.ЦветФона		= ЦветНеактивнойКнопки;
	Элементы.ВыбратьРежимВходящие.ЦветФона		= ЦветНеактивнойКнопки;
	
	РежимыОтображения = РежимыОтображения();
	
	Если РежимОтображенияДокументов = РежимыОтображения.ДляОтправки Тогда
		
		Элементы.ВыбратьРежимДляОтправки.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения.Исходящие Тогда
		
		Элементы.ВыбратьРежимИсходящие.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения.Входящие Тогда
		
		Элементы.ВыбратьРежимВходящие.ЦветФона = ЦветАктивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДополнительныеКолонки()
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("Режим", РежимОтображенияДокументов);
	НастройкиДопКолонок = Модуль_ЯдроНаСервере().ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьНастройкиДополнительныхКолонокСпискаДокументов", ПараметрыПМ);
	
	Для Сч = 1 По 5 Цикл
		Элементы["СписокДокументовДопРеквизит" + Формат(Сч, "ЧГ=0")].Видимость = Ложь;
	КонецЦикла;
	
	Если НастройкиДопКолонок<>Неопределено Тогда
		Для Сч = 0 По НастройкиДопКолонок.Количество() - 1 Цикл
			
			Если Сч > 4 Тогда
				ВызватьИсключение "Допускается не более 5 дополнительных колонок в списке документов";
			КонецЕсли;
			
			ТекКолонка = Элементы["СписокДокументовДопРеквизит" + Формат(Сч + 1, "ЧГ=0")];
			ТекКолонка.Заголовок = НастройкиДопКолонок[Сч].Заголовок;
			ТекКолонка.Видимость = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницуСпискаДокументов()
	
	СписокДокументов.Очистить();
	ОбновитьСтраницуСпискаДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуСпискаДокументовНаСервере() Экспорт
	
	РежимОтображенияДокументовДляОтправки = (РежимОтображенияДокументов = РежимыОтображения().ДляОтправки);
	
	ПараметрыСтраницы	 = ОбработкаОбъект().СписокДокументов_ЗагрузитьСтраницу(НомерСтраницы, РазмерСтраницы, РежимОтображенияДокументовДляОтправки, СписокДокументов);
	НомерСтраницы		 = ПараметрыСтраницы.НомерСтраницы;
	КоличествоСтраниц	 = ПараметрыСтраницы.КоличествоСтраниц;
	
	ОбновитьЗаголовокНомерСтраницы();
	ОбновитьКнопкиНавигацииПоСтраницам();
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("Режим", РежимОтображенияДокументов);
	НастройкиДопКолонок = Модуль_ЯдроНаСервере().ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьНастройкиДополнительныхКолонокСпискаДокументов", ПараметрыПМ);
	
	Для Сч = 1 По 5 Цикл
		Элементы["СписокДокументовДопРеквизит" + Сч].ТекстПодвала = "";
	КонецЦикла;
		
	Если ТипЗнч(НастройкиДопКолонок) = Тип("Массив") Тогда
		
		ОписаниеЧисла = Новый ОписаниеТипов("Число");
		Для Сч = 0 По НастройкиДопКолонок.ВГраница() Цикл
			Если НастройкиДопКолонок[Сч].Тип = ОписаниеЧисла Тогда
				ИмяКолонки = "ДопРеквизит" + (Сч + 1);
				Элементы["СписокДокументов" + ИмяКолонки].ТекстПодвала = СписокДокументов.Итог(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИтогСписокДокументовСуммаДокумента = СписокДокументов.Итог("СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Функция ОбщийBoxId(ВыбранныеBoxId)
	
	Результат = Неопределено;
	
	Если ВыбранныеBoxId.Количество() > 0 Тогда
		
		Если ВыбранныеBoxId.Количество() <> 1 Тогда
			ПоказатьПредупреждениеПереопределенная(,"В списке выбраны документы по различным организациям.
													|Выберите документы, относящиеся только к одной организации.");
		Иначе
			Результат = ВыбранныеBoxId[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция BoxIdИзДокументов(ДокументыДляОбработки)
	
	Результат = Новый Массив;
	
	Для Каждого Документ Из ДокументыДляОбработки Цикл
		
		BoxId = Документ.Идентификаторы.BoxId;
		
		Если Результат.Найти(BoxId) = Неопределено Тогда
			Результат.Добавить(BoxId);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция BoxIdИзСтрокСписка(СтрокиСписка)
	
	Результат		= Новый Массив;
	Организации1С	= Новый Массив;
	
	Для Каждого СтрокаСписка Из СтрокиСписка Цикл
		
		Организация = СтрокаСписка.Организация;
		
		Если Организации1С.Найти(Организация) = Неопределено Тогда
			Организации1С.Добавить(Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	УчастникиДО = ДанныеОрганизаций(Организации1С);
	
	Для Каждого УчастникДО Из УчастникиДО Цикл
		
		BoxId = УчастникДО.BoxId;
		
		Если Результат.Найти(BoxId) = Неопределено Тогда
			Результат.Добавить(BoxId);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеОрганизаций(Организации1С)
	
	Результат = Новый Массив;
	
	Для Каждого Организация1С Из Организации1С Цикл
		
		Идентификаторы			= Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(Организация1С);
		УчастникДО_Организации	= Модуль_ЯдроНаСервере().Организации_ЗаполнитьУчастникаДО(Идентификаторы);
		Результат.Добавить(УчастникДО_Организации);
		
	КонецЦикла;	
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыделенныеСтрокиСпискаДокументов()
	
	Результат = Новый Массив;
	
	Если ЕстьОграниченияПоТарифу Тогда
		ТекСтрока = Элементы.СписокДокументов.ТекущаяСтрока;
		Если НЕ ТекСтрока = Неопределено Тогда
			СтрокаСписка = СписокДокументов.НайтиПоИдентификатору(ТекСтрока);
			Если НЕ СтрокаСписка = Неопределено Тогда
				Результат.Добавить(СтрокаСписка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаСписка Из СписокДокументов Цикл
			Если СтрокаСписка.Флажок Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСписка.BoxId)
					ИЛИ ЯщикиНеТребующиеОплаты.Получить(СтрокаСписка.BoxId) <> Неопределено Тогда
						Результат.Добавить(СтрокаСписка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_СтруктураДанныхСтрокиСписка(Источник)
	
	Результат = Новый Структура(СтруктураДанныхСтрокиСпискаСтрокой);
	Если Источник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, Источник);
	КонецЕсли;
	Результат.СлужебнаяИнформация = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеВыделенныхСтрокТЧ(ОбрабатыватьШаблоны)

	Результат = Новый Массив;
	
	ВыделенныеСтроки = ВыделенныеСтрокиСпискаДокументов();
	
	Для Каждого СтрокаТЧ Из ВыделенныеСтроки Цикл
		
		Если СтрокаТЧ.Видимость И (НЕ СтрокаТЧ.Шаблон ИЛИ ОбрабатыватьШаблоны) Тогда
			
			СтруктураСтроки = Новый_СтруктураДанныхСтрокиСписка(СтрокаТЧ);
			
			Результат.Добавить(СтруктураСтроки);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеДокументовВыделенныхСтрокТЧ(ОбрабатыватьШаблоны = Ложь, ДобавитьЗаблокированные = Ложь)
	
	ДанныеДокументов = Новый Массив;
	ПакетыДокументов = Новый Массив;
	МассивПакетов	 = Новый Массив;
	
	ВыделенныеСтроки = ВыделенныеСтрокиСпискаДокументов();
	
	Для Каждого СтрокаТЧ Из ВыделенныеСтроки Цикл
		
		СтруктураСтроки = Новый_СтруктураДанныхСтрокиСписка(СтрокаТЧ);
		
		Если СтрокаТЧ.Видимость И (Не СтрокаТЧ.Шаблон Или ОбрабатыватьШаблоны) Тогда
			
			Если (СтрокаТЧ.ЗаблокированныйПакет И ДобавитьЗаблокированные) Тогда
				
				LetterId = СтруктураСтроки.LetterId;
				
				Если МассивПакетов.Найти(LetterId) = Неопределено Тогда
					
					ИдентификаторыПакета = ИдентификаторыПакетаДокумента(СтруктураСтроки);
					
					ПакетыДокументов.Добавить(ИдентификаторыПакета);
					МассивПакетов.Добавить(LetterId);
					
				КонецЕсли;
				
			Иначе
				
				ДанныеДокументов.Добавить(СтруктураСтроки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = МассивДокументовИзДанныхДокументов(ДанныеДокументов);
	ДополнитьМассивДокументовДокументамиПакетов(Результат, ПакетыДокументов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДокументыПакетовСтрокСписка(СтрокиСписка)
	
	Результат = Новый Массив;
	
	ПакетыДокументов	= Новый Массив;
	ОбработанныеПакеты	= Новый Массив;
	
	Для Каждого СтрокаСписка Из СтрокиСписка Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.Пакет) Тогда
			Ключ = СтрокаСписка.Пакет;
		Иначе
			Ключ = СтрокаСписка.LetterId;
		КонецЕсли;
		
		Если ОбработанныеПакеты.Найти(Ключ) = Неопределено Тогда
			
			ИдентификаторыПакета = ИдентификаторыПакетаДокумента(СтрокаСписка);
			ПакетыДокументов.Добавить(ИдентификаторыПакета);
			ОбработанныеПакеты.Добавить(Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьМассивДокументовДокументамиПакетов(Результат, ПакетыДокументов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторыПакетаДокумента(СтрокаСписка)
	
	Документ = ДокументИзДанныхСтрокиТЧ(СтрокаСписка);
	
	Результат = Модуль_ЯдроНаСервере().Контракт_ИдентификаторыПакета();
	
	Результат.BoxId		= Документ.Идентификаторы.BoxId;
	Результат.LetterId	= Документ.Идентификаторы.LetterId;
	Результат.ПакетЭДО	= Документ.Идентификаторы.ПакетЭДО;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДополнитьМассивДокументовДокументамиПакетов(МассивДокументов, ИдентификаторыПакетов)
	
	ДокументыПакетов = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Пакеты_ДокументыПакетов", ИдентификаторыПакетов);
	
	Модуль_ЯдроНаКлиенте().ДополнитьМассив(МассивДокументов, ДокументыПакетов);
	
КонецПроцедуры

&НаСервере
Функция МассивДокументовИзДанныхДокументов(СтрокиСпискаДокументов) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаСписка Из СтрокиСпискаДокументов Цикл
		
		Документ = ДокументИзДанныхСтрокиТЧ(СтрокаСписка);
		Результат.Добавить(Документ);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДокументИзДанныхСтрокиТЧ(СтрокаСписка) Экспорт
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Модуль_Ядро.Документ_ДокументИзДанныхСтрокиСписка(СтрокаСписка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДействияЭДО() Экспорт
	
	Результат = Модуль_ЯдроНаКлиенте().Перечисление_ДействияЭДО();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОтветыЭДО() Экспорт
	
	Результат = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Перечисление_ВариантыОтветаПоДокументу");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДокументыПакетов(Пакеты)
	
	Результат = Новый Массив;
	
	Для Каждого Пакет Из Пакеты Цикл
		
		Для Каждого Документ Из Пакет.Документы Цикл
			Результат.Добавить(Документ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	ИмяТекущейКолонки = Элементы.СписокДокументов.ТекущийЭлемент.Имя;
	
	Если ИмяТекущейКолонки <> "СписокДокументовФлажок" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделениеДокументов(УстановитьФлажки)
	
	ПолеФормыСписка = Элементы.СписокДокументов;
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		ИдентификаторСтроки = СтрокаСписка.ПолучитьИдентификатор();
		
		Если Не ПолеФормыСписка.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Флажок = УстановитьФлажки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеТекущегоПользователяДиадок()
	
	ПредставлениеТекущегоПользователя	= "Авторизуйтесь";
	СертификатыКонтекстаСеанса			= Новый Соответствие;
	
	ИнициализироватьПеременнуюКонтекстСеансаКлиентСервер();
	
	Если КонтекстСеансаКлиентСервер.Количество() > 0 Тогда
		
		Для Каждого текКлючЗначение Из КонтекстСеансаКлиентСервер Цикл
			
			ДанныеКонтекстаСеанса = текКлючЗначение.Значение;
			
			Если ДанныеКонтекстаСеанса.ТипАвторизации = "Сертификат" Тогда
				
				СертификатыКонтекстаСеанса.Вставить(ДанныеКонтекстаСеанса.ОтпечатокСертификата);
				ФИО = Модуль_ЯдроНаКлиенте().Сертификаты_ПредставлениеПодписанта(ДанныеКонтекстаСеанса.Сертификат, Ложь);
				
			Иначе
				ФИО = ДанныеКонтекстаСеанса.ОписаниеПользователя.ФИО;
			КонецЕсли;
			
			ФамилияИО = Модуль_ЯдроНаКлиенте().ФамилияИО(ФИО);
			
		КонецЦикла;
									
		Если СертификатыКонтекстаСеанса.Количество() > 1 Тогда
			ПредставлениеТекущегоПользователя = "Список сертификатов";
		ИначеЕсли ЗначениеЗаполнено(ФамилияИО) Тогда
			ПредставлениеТекущегоПользователя = ФамилияИО;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьАвторизацияПоСертификату = (СертификатыКонтекстаСеанса.Количество() > 0);
	
	Элементы.АвторизацияПодСертификатом.Видимость = ЕстьАвторизацияПоСертификату;
	Элементы.ПредставлениеПользователя.Заголовок = ПредставлениеТекущегоПользователя;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуСпискаДокументов()

	Если Не ЗначениеЗаполнено(КлючТекущейСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючТекущейСтроки);
	
	СтрокиСписка = СписокДокументов.НайтиСтроки(Отбор);
	Если СтрокиСписка.Количество() >= 1 Тогда
		Элементы.СписокДокументов.ТекущаяСтрока = СтрокиСписка[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияПараметровОбщегоКонтекста()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.ОбщийКонтекст_ДополнитьЗначениямиИзОбщихНастроек(Объект.ОбщийКонтекстКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазваниеКатегории() Экспорт
	
	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеКатегории();

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция Метрика_КатегорияНастройка()
	
	Результат = Метрика_НазваниеКатегории().Настройка;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_КатегорияНайтиНужныйДокумент()
	
	КатегорииМетрик = Метрика_НазваниеКатегории();
	
	Результат = КатегорииМетрик.НайтиНужныйДокумент;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеОткрытиеПомощника()
	
	ДействияМетрик = Метрика_НазваниеДействий();
	
	Результат = ДействияМетрик.ОткрытиеПомощника;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики)
	
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_НажатиеКнопкиПакетнойОбработки(КатегорияМетрики, ДействиеМетрики, КоличествоДанных = 1)
	
	НазваниеФормыДляМетрики = Метрика_НазваниеФормы();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_МассовоеДействиеНажатиеКнопки(НазваниеФормыДляМетрики,
		КатегорияМетрики,
		ДействиеМетрики,
		КоличествоДанных);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазваниеДействий() Экспорт
	
	Результат = Модуль_ЯдроНаКлиенте().Метрика_НазваниеДействий();

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеСоздатьДокументы()
	Возврат "Создать";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеОткрытьСписокПлагинов()
	Возврат "Плагины";
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегорииРежимаОтображения() Экспорт
	
	Результат = "";
	
	Если РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		Результат = "Действие в документах на отправку";
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения().Исходящие Тогда
		Результат = "Действие в исходящих";
	ИначеЕсли РежимОтображенияДокументов = РежимыОтображения().Входящие Тогда
		Результат = "Действие во входящих";	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// Возвращает наименование категории метрики для действия построения списка документов
// из метода Метрика_НазваниеКатегории Модуля Ядро.
// 
// Параметры:
//    ВариантРежимаОтображенияДокументов - Строка - Выбранный пользователем режим построения списка.
// 
// Возвращаемое значение:
//    Строка - Наименование категории метрики.
// 
&НаКлиенте
Функция Метрика_НазваниеКатегорийПостроенияСписка(ВариантРежимаОтображенияДокументов)
	
	Если ЗначениеЗаполнено(ВариантРежимаОтображенияДокументов) Тогда
		Метрика_РежимОтображенияДокументов = ВариантРежимаОтображенияДокументов;
	Иначе
		Метрика_РежимОтображенияДокументов = РежимОтображенияДокументов;
	КонецЕсли;
	
	Если Метрика_РежимОтображенияДокументов = РежимыОтображения().ДляОтправки Тогда
		Результат = Метрика_НазваниеКатегории().ПостроениеСпискаНаОтправку;
	ИначеЕсли Метрика_РежимОтображенияДокументов = РежимыОтображения().Исходящие Тогда
		Результат = Метрика_НазваниеКатегории().ПостроениеСпискаИсходящие;
	ИначеЕсли Метрика_РежимОтображенияДокументов = РежимыОтображения().Входящие Тогда
		Результат = Метрика_НазваниеКатегории().ПостроениеСпискаВходящие;
	Иначе
		Результат = Метрика_НазваниеКатегории().РежимОтображенияСпискаНеОпределен;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Возвращает категорию метрики на основании значения действия ЭДО.
// 
// Параметры:
//    Действие - Строка - Значение метода Перечисление_ДействияЭДО Модуля Ядро.
// 
// Возвращаемое значение:
//    Строка - Наименование категории метрики из метода Метрика_НазваниеКатегории Модуля Ядро.
// 
&НаКлиенте
Функция Метрика_НазваниеКатегорийМассовыхДействий(Действие)

	ВариантыДействий = ДействияЭДО();
	
	Если Действие = ВариантыДействий.СоздатьДокумент Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().СозданиеДокументов;
	ИначеЕсли Действие = ВариантыДействий.СопоставитьДокумент Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().СопоставлениеДокументов;
	ИначеЕсли Действие = ВариантыДействий.ПодписатьИОтправить Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().ОтправкаДокумента;
	ИначеЕсли Действие = ВариантыДействий.ОтправитьОтвет Тогда
		КатегорияМетрики = Метрика_НазваниеКатегории().ПодписаниеВходящегоДокумента;
	Иначе
		КатегорияМетрики = Метрика_НазваниеКатегории().ДействиеНеОпределено;
	КонецЕсли;
	
	Возврат КатегорияМетрики;

КонецФункции

&НаКлиенте
Функция Метрика_НазваниеДействияМаршрутизации(Действие) Экспорт
	
	Результат = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Метрика_НазваниеДействияМаршрутизации", Действие);	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция Метрика_НазваниеДействияАннулирования(Действие) Экспорт
	
	Результат = "";
	
	Если Действие = ДействияЭДО().Аннулировать Тогда
		Результат = "Аннулировать";
	ИначеЕсли Действие = ДействияЭДО().ОтказатьВАннулировании Тогда
		Результат = "Отказать в аннулировании";
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеДействияПодписание(Действие)
	
	Результат = "";
	
	Если Действие = ДействияЭДО().ПодписатьВходящий Тогда
		Результат = "Подписать";
	ИначеЕсли Действие = ДействияЭДО().ОтказатьВПодписи Тогда
		Результат = "Отказать контрагенту в подписи";
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Основная форма";
	
КонецФункции 

&НаКлиенте
Функция Метрика_КолонкиФормыСписка()

	МассивИменЭлементов = Новый Массив;
	
	Для каждого ПодчиненныйЭлементы Из Элементы.СписокДокументов.ПодчиненныеЭлементы Цикл
		
		Если ПодчиненныйЭлементы.Видимость = Истина Тогда
		
			МассивИменЭлементов.Добавить(ПодчиненныйЭлементы.Заголовок);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(МассивИменЭлементов, ";");
	Возврат Результат;
	
КонецФункции

// Возвращает признак что в конфигурации есть объекты для хранения данных, РегистрДопСведений или ПодсистемаДиадока.
//
// Возвращаемое значение:
//    Булево
//
&НаКлиенте
Функция СистемаХраненияОпределена()

	Результат = Истина;
	
	Если НЕ Параметры.РезультатИнициализации.УстановленРегистрДопСведений
		И НЕ Параметры.РезультатИнициализации.УстановленаПодсистемаДиадока Тогда
	
		Результат = Ложь;	
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВключитьДекорациюДлительнойОперации()
	
	Элементы.ГруппаДлительнаяОперация.Видимость = Истина;
	Элементы.СписокДокументов.Видимость = Ложь; 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитФормы_ПорядковыйНомерОперацииЗагрузки()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	НовыйРеквизит = Новый РеквизитФормы("ПорядковыйНомерОперацииЗагрузки", ТипЧисло);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтаФорма.ПорядковыйНомерОперацииЗагрузки = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьДекорацииДлительнойОперации()
	
	ЭтаФорма.ПорядковыйНомерОперацииЗагрузки = ЭтаФорма.ПорядковыйНомерОперацииЗагрузки + 1;
	КоличествоОпераций = 7;
	
	ШаблонЗаголовка = НСтр(
		"ru = 'Запускаем модуль %1/%2.
		|Это может занять несколько минут.'"
	);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	ТекстЗаголовкаДекорации = Ядро.Общее_ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка,
		ЭтаФорма.ПорядковыйНомерОперацииЗагрузки,
		КоличествоОпераций
	);
	
	Элементы.НадписьДлительнаяОперация.Заголовок = ТекстЗаголовкаДекорации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДекорациюДлительнойОперацииОтложенно()
	
	ПодключитьОбработчикОжидания("ОтключитьДекорациюДлительнойОперации", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДекорациюДлительнойОперации() Экспорт
	
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	Элементы.СписокДокументов.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторДлительнойОперации()
	
	Элементы.ГруппаКружок.Видимость = Истина;
	Элементы.ГруппаПредупреждение.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторПредупреждения()
	
	Элементы.ГруппаКружок.Видимость = Ложь;
	Элементы.ГруппаПредупреждение.Видимость = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимыФормыПакета()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СозданиеНовогоПакета", "СозданиеНовогоПакета");
	Результат.Вставить("ОтображениеПакета", "ОтображениеПакета");
	Результат.Вставить("ДобавлениеДокументовСДиска", "ДобавлениеДокументовСДиска");
	
	Возврат Результат
	
КонецФункции

// }	ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ФОРМЫ


// {	Уведомления пользователя

&НаКлиенте
Процедура ПроверитьНаличиеУведомлений()
	
	ОбновитьНадписьДекорацииДлительнойОперации();
	
	ЕстьУведомления = ПроверитьНаличиеУведомленийНаСервере();
	
	Если ЕстьУведомления Тогда
		ПоказатьУведомленияПриЗапуске();
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикПослеОткрытияФормы", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПроверитьНаличиеУведомленийНаСервере()
	
	СостояниеУведомленийПользователя = ПолучитьСостояниеУведомлений();
	ВозможныеСостоянияУведомлений = Перечисление_СостоянияУведомленийПользователя();
	
	УстановитьОформлениеКнопкиУведомления(СостояниеУведомленийПользователя);
	
	Результат = СостояниеУведомленийПользователя <> ВозможныеСостоянияУведомлений.НетУведомлений;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеКнопкиУведомления(СостояниеУведомленийПользователя)
	
	ВозможныеСостоянияУведомлений = Перечисление_СостоянияУведомленийПользователя();
	
	ОтображениеКнопкиУведомления = ОтображениеКнопки.Картинка; 
	Если СостояниеУведомленийПользователя = ВозможныеСостоянияУведомлений.ЕстьВажныеНеПрочитанные Тогда
		ЦветФонаКнопки = ЦветКнопкиЕстьВажныеНепрочитанные();
	ИначеЕсли СостояниеУведомленийПользователя = ВозможныеСостоянияУведомлений.ЕстьНеПрочитанные Тогда
		ЦветФонаКнопки = ЦветКнопкиЕстьНепрочитанные();
	Иначе
		ЦветФонаКнопки = ЦветКнопкиПоУмолчанию();
	КонецЕсли;
	
	Элементы.ОткрытьУведомления.ЦветФона = ЦветФонаКнопки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветКнопкиПоУмолчанию()
	
	Возврат ЦветаСтиля.ЦветФонаКнопки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветКнопкиЕстьВажныеНепрочитанные()
	
	Результат = Новый Цвет(237, 125, 125);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветКнопкиЕстьНепрочитанные()
	
	Результат = Новый Цвет(250, 227, 143);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьУведомленияПриЗапуске()
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ПослеЗакрытияФормыУведомленияПользователя", ЭтаФорма);
	
	ОткрытьФормуУведомлений(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУведомления()
	
	ОбработчикОповещения = Неопределено;
	ОткрытьФормуУведомлений(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУведомлений(ОбработчикОповещения = Неопределено)
	
	ПараметрыФормы = Неопределено;
	
	ОткрытьФормуДиадокМодально(
		"ФормаСпискаУведомленийУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОбработчикОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыУведомленияПользователя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	ПодключитьОбработчикОжидания("ОбработчикПослеОткрытияФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеУведомлений()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Модуль_Ядро.УведомленияПользователей_ТекущееСостояние();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Перечисление_СостоянияУведомленийПользователя()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Модуль_Ядро.Перечисление_СостоянияУведомленийПользователя();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьУведомления(Команда)
	
	Метрики_ЗаписатьНажатие_ОткрытьУведомления();
	
	ПоказатьУведомления();
	
	Метрики_ЗаписатьСтатситику_ОткрытьУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ОткрытьУведомления()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().ЭкстренноеУведомление;
	ДействиеМетрики = Метрика_ДействиеПоказатьУведомления();
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатситику_ОткрытьУведомления()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КатегорияМетрики = Метрика_НазваниеКатегории().ЭкстренноеУведомление;
	ДействиеМетрики = Метрика_ДействиеПоказатьУведомления();
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ДействиеПоказатьУведомления()
	
	Возврат "ПоказатьУведомления";
	
КонецФункции

// }	Уведомления пользователя

// {	ОБЩИЕ МЕТОДЫ

&НаКлиенте
Процедура ОбновитьСвойствоЭлементаФормы(Элемент, СвойствоЭлемента, ЗначениеСвойства) Экспорт
	
	Если Элемент[СвойствоЭлемента] <> ЗначениеСвойства Тогда
		Элемент[СвойствоЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПоляФормы(Отказ, Форма, ИмяПоля, Синоним = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма[ИмяПоля]) Тогда
		ВывестиСообщениеПользователю("Не заполнено поле """
									+ ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяПоля)
									+ """",, Форма);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ОткрытьФайл(ИмяВременногоФайла, ИмяФайла) Экспорт
		
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ЗапуститьПриложение(ИмяВременногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_КопироватьФайл(ИмяВременногоФайла, ИмяФайла) Экспорт 
	
	ОписаниеОповещения = НовыйОписаниеОповещения("Обработчик_КопироватьФайл_Завершение", ЭтаФорма, ИмяВременногоФайла);
	
	ПоказатьДиалогСохранение(ОписаниеОповещения,, "Сохранение документа на диск",, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_КопироватьФайл_Завершение(ВыбранныеФайлы, ИмяВременногоФайла) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		КопироватьФайл(ИмяВременногоФайла, ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НельзяРаботатьСФайлами()
	
	Результат = Ложь;
	
	#Если ВебКлиент Тогда
		
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ПоказатьПредупреждениеПереопределенная(, "Не подключено расширение для работы с файлами. Обратитесь к администратору для решения проблемы.", 30);
		Результат = Истина;
		
	КонецЕсли;
	
	#КонецЕсли

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СохранитьДвоичныеДанныеВоВременныйФайл(ДвоичныеДанные, ИмяФайла) Экспорт
	
	Если НельзяРаботатьСФайлами() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Каталог = Вычислить("КаталогВременныхФайлов()");
	
	Результат = СохранитьДвоичныеДанныеВФайл(ДвоичныеДанные, ИмяФайла, Каталог);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СохранитьДвоичныеДанныеВФайл(ДвоичныеДанные, Знач ИмяФайла, Каталог) Экспорт
	
	Если НельзяРаботатьСФайлами() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ЗаменитьНедопустимыеСимволыИмениФайла(ИмяФайла);
	Иначе
		ИмяФайла = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Модуль_ЯдроНаКлиенте().ОбъединитьПути(Каталог, ИмяФайла);
	
	#Если ВебКлиент Тогда
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла;
		ПолучаемыйФайл.Имя = Результат;
		
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ПолучаемыйФайл.Хранение = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Вычислить("УникальныйИдентификатор"));
		Иначе
			ПолучаемыйФайл.Хранение = ДвоичныеДанные;
		КонецЕсли;
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		РезультатПолученияФайлов = ПолучитьФайлы(МассивФайлов, ПолученныеФайлы, , Ложь);
		УдалитьИзВременногоХранилища(ПолучаемыйФайл.Хранение);
		
	#Иначе
		
		Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
		КонецЕсли;
		
		ДвоичныеДанные.Записать(Результат);
		
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаменитьНедопустимыеСимволыИмениФайла(ИмяФайла) Экспорт
	
	Результат = ИмяФайла;
	
	НедопустимыеСимволы = ":~!@/\#$%^&*=|`""?<>";
	КоличествоНедопустимыхСимволов = СтрДлина(НедопустимыеСимволы);
	
	Для Сч = 1 По КоличествоНедопустимыхСимволов Цикл
		Результат = СтрЗаменить(Результат, Сред(НедопустимыеСимволы, Сч, 1), "_");
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьИлиПерейтиПоСсылке(Знач АдресСсылки, ДополнительныеПараметры, ФормаСобытия) Экспорт
	
	Если ЭтоОповещение(АдресСсылки) Тогда
		
		ВыполнитьОповещение(АдресСсылки, ДополнительныеПараметры, ФормаСобытия);
		
	ИначеЕсли ЭтоАдресСсылки(АдресСсылки) Тогда
		
		ПерейтиПоСсылке(АдресСсылки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОповещение(Знач АдресСсылки)
	
	АдресСсылки = НРег(АдресСсылки);
	
	Результат = Найти(АдресСсылки, "alert:") > 0 ИЛИ Найти(АдресСсылки, "alertandclose:") > 0;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоАдресСсылки(Знач АдресСсылки)
	
	АдресСсылки = НРег(АдресСсылки);
	
	Результат = Ложь
	Или Найти(АдресСсылки, "e1cib/")	 = 1
	Или Найти(АдресСсылки, "http:")		 = 1
	Или Найти(АдресСсылки, "https:")	 = 1
	Или Найти(АдресСсылки, "e1c:")		 = 1
	Или Найти(АдресСсылки, "v8help:")	 = 1
	Или Найти(АдресСсылки, "mailto:")	 = 1
	Или Найти(АдресСсылки, "tel:")		 = 1
	Или Найти(АдресСсылки, "skype:")	 = 1;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОповещение(АдресСсылки, ДополнительныеПараметры, ФормаСобытия)
	
	ПараметрыОповещения		= МетодСервераБезКонтекста(Истина, "Модуль_Ядро().ПараметрыОповещенияИзСтрокиHTMLСообщения", АдресСсылки);
	ОбработчикОповещения	= ПараметрыОповещения.ОбработчикОповещения;
	РезультатОповещения		= ПараметрыОповещения.РезультатОповещения;
	
	ОписаниеОповещения = НовыйОписаниеОповещения(ОбработчикОповещения, ФормаСобытия, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещенияПереопределенная(ОписаниеОповещения, РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(АдресСсылки)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗапуститьПриложение(АдресСсылки);
	#Иначе
		ПерейтиПоНавигационнойСсылке(АдресСсылки);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ТипКлиента()
	
	Результат = Неопределено;
	
	#Если ТонкийКлиент Тогда
		Результат = "Тонкий клиент";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		Результат = "Толстый клиент обычное приложение";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Результат = "Толстый клиент управляемые формы";
	#ИначеЕсли ВебКлиент Тогда
		Результат = "Веб клиент";
	#ИначеЕсли НаСервере Тогда
		Результат = "Сервер";
	#ИначеЕсли ВнешнееСоединение Тогда
		Результат = "Внешнее соединение";
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Модуль_ЯдроНаКлиенте().СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВМассив(Параметр0 = NULL,
						 Параметр1 = NULL,
						 Параметр2 = NULL,
						 Параметр3 = NULL,
						 Параметр4 = NULL) Экспорт
	
	Результат = Модуль_ЯдроНаКлиенте().ПараметрыВМассив(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4);
	
	Возврат Результат;
	
КонецФункции

// Формирует HTML представление данных из полей сертификата
//
// Параметры: 
//	ДанныеСертификата - Структура - см. Сертификаты_Контракт_ОписаниеСертификата
//
// Возвращаемое значение:
//	Структура с ключами:	* ТекстHTML - HTML представление данных из полей сертификата
//							* ТекстДляКопирования - текст для команды "Скопировать данные сертификата"
&НаКлиенте
Функция ДанныеСертификата_HTMLПредставление(ДанныеСертификата)

	Результат = Новый Структура("ТекстHTML, ТекстДляКопирования", "", "");
	
	ТекстДляКопирования = "";
	ТекстHTML =
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<STYLE type=""text/css"">p{
	|font-family: Arial; font-size: 16px; color: #000000; }</STYLE></HEAD>
	|<BODY>";
	
	ПоляПредставления = Новый СписокЗначений;
	ПоляПредставления.Добавить(ДанныеСертификата.Наименование, "ФИО");
	ПоляПредставления.Добавить(ДанныеСертификата.ОтпечатокСертификата, "Отпечаток");
	ПоляПредставления.Добавить(ДанныеСертификата.Организация, "Организация");
	
	ИНН_КПП = Общее_СоединитьСтроку(ПараметрыВМассив(ДанныеСертификата.ИНН, ДанныеСертификата.КПП), "-");
	ПоляПредставления.Добавить(ИНН_КПП, "ИНН-КПП");
	
	ПоляПредставления.Добавить(ДанныеСертификата.Издатель, "Издатель");
	
	ДатаВыдачи = "";
	Если ЗначениеЗаполнено(ДанныеСертификата.ДатаВыдачи) Тогда
		ДатаВыдачи = Формат(ДанныеСертификата.ДатаВыдачи, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	ПоляПредставления.Добавить(ДатаВыдачи, "Дата выдачи");
	
	СрокДействия = "";
	Если ЗначениеЗаполнено(ДанныеСертификата.СрокДействия) Тогда
		СрокДействия = Формат(ДанныеСертификата.СрокДействия, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	ПоляПредставления.Добавить(СрокДействия, "Срок действия");
	
	Для каждого ЭлементСписка Из ПоляПредставления Цикл
		
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			
			ТекстСтрокиHTML = "<P>" + ЭлементСписка.Представление + ": " + ЭлементСписка.Значение + "</P>";
			ТекстHTML = ТекстHTML + ТекстСтрокиHTML;
			
			ТекстСтроки = "" + ЭлементСписка.Представление + ": " + ЭлементСписка.Значение;
			ТекстДляКопирования = ТекстДляКопирования + ТекстСтроки + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "</BODY></HTML>";
	
	Результат.ТекстHTML 			= ТекстHTML;
	Результат.ТекстДляКопирования 	= ТекстДляКопирования;
	
	Возврат Результат;
	
КонецФункции

// Открывает форму с данными из полей сертификата в HTLM представлении
//
// Параметры:
//	ДанныеСертификата 	- Структура - см. Сертификаты_Контракт_ОписаниеСертификата
//	мВладелецФормы		- Форма - владелец открываемого окна
&НаКлиенте
Процедура ОткрытьФормуСДаннымиСертификата(ДанныеСертификата, мВладелецФормы) Экспорт
	
	HTMLПредставление = ДанныеСертификата_HTMLПредставление(ДанныеСертификата);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("ЗаголовокФормы"			, "Данные сертификата");	
	ПараметрыОткрытияФормы.Вставить("ТекстСообщения"			, HTMLПредставление.ТекстHTML);
	ПараметрыОткрытияФормы.Вставить("ТекстДляКопирования"		, HTMLПредставление.ТекстДляКопирования);
	ПараметрыОткрытияФормы.Вставить("ПоказатьКнопкуСкопировать"	, Истина);
	ПараметрыОткрытияФормы.Вставить("ЗаголовокКнопкиСкопировать", "Скопировать данные сертификата");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтпечатокСертификата"		, ДанныеСертификата.ОтпечатокСертификата);
	ДополнительныеПараметры.Вставить("СрокДействия"				, ДанныеСертификата.СрокДействия);
	
	ПараметрыОткрытияФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
	РежимБлокирования = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФормуДиадокМодально("ФормаHTMLСообщенияУправляемая", мВладелецФормы, ПараметрыОткрытияФормы, , РежимБлокирования);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоФормализованныйАктСверки405(ТипКонтента)
	
	Возврат Нрег(ТипКонтента) = "reconciliationact405";
	
КонецФункции

&НаКлиенте
Функция СохраненныеНастройкиГлавнойФормы()

	КлючОбъекта = ЭтаФорма.ИмяФормы + "/ТекущиеДанные";
	Результат = СохраненноеЗначениеВСистемномХранилище(КлючОбъекта);
	
	Возврат Результат;
	
КонецФункции

// {	ТИПИЗАЦИЯ ПОЛЯ СОСТАВНОГО ТИПА

&НаКлиенте
Процедура ПоказатьВыборТипаДанныхЭлементаСоставногоТипа(ЭлементСоставногоТипа) Экспорт
	
	СписокВыбора = ПолучитьСписокДоступныхТиповЭлементаСоставногоТипа();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭлементСоставногоТипа", ЭлементСоставногоТипа);
		
	ОбработчикОповещения = НовыйОписаниеОповещения("ОбработатьВыборТипаЭлементаСоставногоТипа", ЭтаФорма, ДопПараметры);
	
	смв().смв_ПоказатьВыборЭлемента(ОбработчикОповещения, "Выбор типа данных", ЭлементСоставногоТипа, СписокВыбора)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаЭлементаСоставногоТипа(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ЭлементСоставногоТипа = ДополнительныеПараметры.ЭлементСоставногоТипа;
		
		УстановитьОграничениеТипаЭлементаСоставногоТипа(ЭлементСоставногоТипа, РезультатВыбора.Значение);
		УстановитьВидимостьКнопокЭлементаСоставногоТипа(ЭлементСоставногоТипа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхТиповЭлементаСоставногоТипа()
	
	Результат = Новый СписокЗначений;
	
	Для Каждого СправочникМетаданных Из Метаданные.Справочники Цикл
		Результат.Добавить(Тип("СправочникСсылка." + СправочникМетаданных.Имя), СправочникМетаданных.Синоним); 
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьОграничениеТипаЭлементаСоставногоТипа(ЭлементСоставногоТипа, ВыбранныйТип) Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(ВыбранныйТип);
	
	НовыйОписаниеТипов = Новый ОписаниеТипов(Типы);
			
	Если ЭлементСоставногоТипа.ОграничениеТипа <> НовыйОписаниеТипов Тогда
		ЭлементСоставногоТипа.ОграничениеТипа = НовыйОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокЭлементаСоставногоТипа(ЭлементСоставногоТипа) Экспорт
	
	Если ЭлементСоставногоТипа.ОграничениеТипа = ОграничениеТипа_Неопределено() Тогда
		ПоказатьВыборТипа = Истина;	
	Иначе
		ПоказатьВыборТипа = Ложь;
	КонецЕсли;
	
	ЭлементСоставногоТипа.КнопкаОчистки	= Не ПоказатьВыборТипа;
	ЭлементСоставногоТипа.ВыбиратьТип = ПоказатьВыборТипа;
	
КонецПроцедуры

&НаКлиенте
Функция ОграничениеТипа_Неопределено() Экспорт
	
	Результат = Новый ОписаниеТипов("Неопределено");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбщийКонтекстОбработки()
	
	Модуль = ОбработкаОбъект();
	Результат = Модуль.ОбщийКонтекстКлиентСервер;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеСпискаДокументов()
	
	УстановитьУсловноеОформление_СписокДокументов_Видимость();
	УстановитьУсловноеОформление_СписокДокументов_СтатусНеОтправлен();
	УстановитьУсловноеОформление_СписокДокументов_ОшибкиПроверкиТекст();
	УстановитьУсловноеОформление_СписокДокументов_ПредставлениеНеформализованногоДокумента();
	УстановитьУсловноеОформление_СписокДокументов_ВнешнийСтатусОшибка();
	
	СписокТиповДокументовУсловногоОформленияУПД = Новый СписокЗначений;
	СписокТиповДокументовУсловногоОформленияУПД.Добавить("UniversalTransferDocument");
	СписокТиповДокументовУсловногоОформленияУПД.Добавить("UniversalTransferDocumentRevision");
	
	СписокТиповДокументовУсловногоОформленияУКД = Новый СписокЗначений;
	СписокТиповДокументовУсловногоОформленияУКД.Добавить("UniversalCorrectionDocument");
	СписокТиповДокументовУсловногоОформленияУКД.Добавить("UniversalCorrectionDocumentRevision");
	
	СписокДокументовВозможноСопоставить = Новый СписокЗначений;
	СписокДокументовВозможноСопоставить.Добавить("UniversalTransferDocument");
	СписокДокументовВозможноСопоставить.Добавить("UniversalTransferDocumentRevision");
	СписокДокументовВозможноСопоставить.Добавить("UniversalCorrectionDocument");
	СписокДокументовВозможноСопоставить.Добавить("UniversalCorrectionDocumentRevision");
	СписокДокументовВозможноСопоставить.Добавить("Invoice");
	СписокДокументовВозможноСопоставить.Добавить("InvoiceRevision");
	СписокДокументовВозможноСопоставить.Добавить("InvoiceCorrection");
	СписокДокументовВозможноСопоставить.Добавить("InvoiceCorrectionRevision");
	СписокДокументовВозможноСопоставить.Добавить("XmlTorg12");
	СписокДокументовВозможноСопоставить.Добавить("XmlAcceptanceCertificate");
	
	УстановитьУсловноеОформление_СписокДокументовПолученныеДокументы(СписокДокументовВозможноСопоставить);
	УстановитьУсловноеОформление_СписокДокументов_ТипДокументаНеОпределен(СписокТиповДокументовУсловногоОформленияУКД, СписокТиповДокументовУсловногоОформленияУПД);
	
	УстановитьУсловноеОформление_СписокДокументов_СЧФДОП(СписокТиповДокументовУсловногоОформленияУПД);
	УстановитьУсловноеОформление_СписокДокументов_СЧФ(СписокТиповДокументовУсловногоОформленияУПД);
	УстановитьУсловноеОформление_СписокДокументов_ДОП(СписокТиповДокументовУсловногоОформленияУПД);
	
	УстановитьУсловноеОформление_СписокДокументов_КСЧФДИС(СписокТиповДокументовУсловногоОформленияУКД);
	УстановитьУсловноеОформление_СписокДокументов_КСЧФ(СписокТиповДокументовУсловногоОформленияУКД);
	УстановитьУсловноеОформление_СписокДокументов_ДИС(СписокТиповДокументовУсловногоОформленияУКД);
	
	УстановитьУсловноеОформление_СписокДокументовСтатусКритичностьМЧД();
	УстановитьУсловноеОформление_СписокДокументовСтатусКритичностьПКФНС();
	
	УстановитьУсловноеОформление_СписокДокументовПодразделение();
	УстановитьУсловноеОформление_СписокДокументовКонтрагент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ВнешнийСтатусОшибка()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ВнешнийСтатус");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение	= "ошибка";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(206,0,20));
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовВнешнийСтатус");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ПредставлениеНеформализованногоДокумента()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение	= "Nonformalized";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовПредставлениеДляНеформализованногоДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ТипДокументаНеОпределен(Знач СписокТиповДокументовУсловногоОформленияУКД, Знач СписокТиповДокументовУсловногоОформленияУПД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУПД;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУКД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ДИС(Знач СписокТиповДокументовУсловногоОформленияУКД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "Basic";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУКД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "ДИС");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_КСЧФ(Знач СписокТиповДокументовУсловногоОформленияУКД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "Invoice";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУКД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "КСЧФ");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_КСЧФДИС(Знач СписокТиповДокументовУсловногоОформленияУКД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "InvoiceAndBasic";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУКД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "КСЧФДИС");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ДОП(Знач СписокТиповДокументовУсловногоОформленияУПД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "Basic";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУПД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "ДОП");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_СЧФ(Знач СписокТиповДокументовУсловногоОформленияУПД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "Invoice";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУПД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "СЧФ");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_СЧФДОП(Знач СписокТиповДокументовУсловногоОформленияУПД)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ФункцияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "InvoiceAndBasic";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокТиповДокументовУсловногоОформленияУПД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "СЧФДОП");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовФункцияДокумента");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументовПолученныеДокументы(СписокДокументовВозможноСопоставить)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.Документ");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("РежимОтображенияДокументов");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "ПолученныеДокументы";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ТипДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение	= СписокДокументовВозможноСопоставить;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 240, 240));
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументов");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_ОшибкиПроверкиТекст()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.ОшибкиПроверкиТекст");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 214, 214));
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументов");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_СтатусНеОтправлен()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.Статус");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= "Не отправлен";
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументов");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументов_Видимость()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.Видимость");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовВидимость");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументовСтатусКритичностьМЧД()
	
	Ядро = Модуль_ЯдроНаСервере();
	УровниКритичности = Ядро.Контракт_УровниКритичностиСтатусаДокумента();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СписокДокументов.СтатусМЧДКритичность");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= УровниКритичности.Error;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 20, 60));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовСтатусМЧД");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументовСтатусКритичностьПКФНС()
	
	Ядро = Модуль_ЯдроНаСервере();
	УровниКритичности = Ядро.Контракт_УровниКритичностиСтатусаДокумента();
	
	СписокКритичности = Новый СписокЗначений;
	СписокКритичности.Добавить(УровниКритичности.Error);
	СписокКритичности.Добавить(УровниКритичности.Warning);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДокументов.СтатусПКФНСКритичность");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокКритичности;
	// BSLLS:StyleElementConstructors-off
	// BSLLS:MagicNumber-off
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(235, 168, 0));
	// BSLLS:MagicNumber-on
	// BSLLS:StyleElementConstructors-on
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовСтатусПКФНС");
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументовПодразделение()
	
	ЭлементСписокДокументовПодразделение = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбораСписокДокументовПодразделение = ЭлементСписокДокументовПодразделение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСписокДокументовПодразделение.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ИспользоватьСопоставлениеПодразделений");
	ЭлементОтбораСписокДокументовПодразделение.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСписокДокументовПодразделение.ПравоеЗначение	= Истина;
	
	ЭлементСписокДокументовПодразделение.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '< из настройки >'"));
	ЭлементСписокДокументовПодразделение.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
	ОформляемоеПолеСписокДокументовПодразделение = ЭлементСписокДокументовПодразделение.Поля.Элементы.Добавить();
	ОформляемоеПолеСписокДокументовПодразделение.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовПодразделение");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СписокДокументовКонтрагент()
	
	ЭлементСписокДокументовКонтрагент = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбораСписокДокументовКонтрагент = ЭлементСписокДокументовКонтрагент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСписокДокументовКонтрагент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДокументов.Контрагент");
	ЭлементОтбораСписокДокументовКонтрагент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеПредставление = Новый ПолеКомпоновкиДанных("СписокДокументов.ПредставлениеКонтрагентаЭДО");
	ЭлементСписокДокументовКонтрагент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПредставление);
	ЭлементСписокДокументовКонтрагент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
	ОформляемоеПолеСписокДокументовКонтрагент = ЭлементСписокДокументовКонтрагент.Поля.Элементы.Добавить();
	ОформляемоеПолеСписокДокументовКонтрагент.Поле = Новый ПолеКомпоновкиДанных("СписокДокументовКонтрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьКнопкиНастроекДоверенности()
	
	Элементы.ОткрытьСписокДоверенностей.Видимость = ЕстьЯщикДляДействийСДокументамиВКоторомНужнаМЧД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДоверенностей(Команда) Экспорт
	
	НачатьОткрытиеФормыСпискаДоверенностей();
	
КонецПроцедуры  

&НаКлиенте
Процедура НачатьОткрытиеФормыСпискаДоверенностей() Экспорт
	
	СписокОрганизаций = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().Организации_СписокОрганизацийДляВыбора", Ложь);
	Если СписокОрганизаций.Количество() = 1 Тогда
		
		ОткрытьСписокДоверенностейЗавершение(СписокОрганизаций[0]);
		
	Иначе
		ЗаголовокВыбораОрганизации = НСтр("ru = 'Выберите организацию для просмотра доверенностей'");
	
		Оповещение = НовыйОписаниеОповещения("ОткрытьСписокДоверенностейЗавершение", ЭтаФорма);
		ПоказатьВыборЭлемента(СписокОрганизаций, Оповещение, ЗаголовокВыбораОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДоверенностейЗавершение(ЭлементСпискаОрганизаций, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЭлементСпискаОрганизаций <> Неопределено Тогда
		
		Ядро = Модуль_ЯдроНаКлиенте();
		ИдентификаторЯщика = Ядро.АдресЯщикаВИдентификатор(ЭлементСпискаОрганизаций.Значение);
		
		ОткрытьФормуСпискаДоверенностей(ИдентификаторЯщика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаДоверенностей(ИдентификаторЯщика) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЯщика", ИдентификаторЯщика);
	
	ОткрытьФормуДиадокМодально("МЧД_ФормаСпискаУправляемая", ЭтаФорма, ПараметрыФормы, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	

// }	ТИПИЗАЦИЯ ПОЛЯ СОСТАВНОГО ТИПА

// }	ОБЩИЕ МЕТОДЫ

// {	МЧД

// Для переданных данных групповой операции выполняет проверку данных МЧД
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура МЧД_НачатьПроверкуДанныхГрупповойОперации(ОписаниеГрупповойОперации)
	
	ПараметрыГрупповойОбработки = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки;
	ТекущееДействиеЭДО = ПараметрыГрупповойОбработки.Действие;
	
	ТребуетсяМЧД = Модуль_ЯдроНаКлиенте().МЧД_ДействияТребующиеДоверенность().Получить(ТекущееДействиеЭДО);
	
	Если ТребуетсяМЧД = Истина Тогда
		
		МЧД_ПроверитьДанныеГрупповойОперацииНаПоддержкуМЧДВРоуминге(ОписаниеГрупповойОперации);
		
	Иначе
		
		Обработчик_ВыполнитьГрупповуюОперациюПослеЗавершенияПроверок(Неопределено, ОписаниеГрупповойОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Для переданных данных групповой операции выполняет проверку контрагентов на возможность отправки МЧД в роуминг
// Выводит диалог выбора с ошибками проверки
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура МЧД_ПроверитьДанныеГрупповойОперацииНаПоддержкуМЧДВРоуминге(ОписаниеГрупповойОперации)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ПараметрыГрупповойОбработки = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки;
	ОшибкиПроверокМЧД = ЗаполнитьИПроверитьМЧДВРоумингеПередОтправкойДокументов(ПараметрыГрупповойОбработки.ДанныеДляОбработки);
	
	Если ОшибкиПроверокМЧД.Количество() Тогда
		
		ОписаниеОповещенияОбработчика = НовыйОписаниеОповещения(
			"Обработчик_ПослеПроверкиКонтрагентовНаПоддержкуМЧДВРоуминге", 
			ЭтаФорма, 
			ОписаниеГрупповойОперации
		);
		
		Действие = ПараметрыГрупповойОбработки.Действие;
		ГрупповоеДействие = ПараметрыГрупповойОбработки.ГрупповоеДействие;
		
		ПараметрыДляПроверкиМЧД = ПараметрыДляПроверкиМЧД(ОписаниеОповещенияОбработчика, Неопределено, Неопределено, Действие, ГрупповоеДействие);
		ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД = ОшибкиПроверокМЧД;
	
		ПоказатьВопрос_КонтрагентыДокументовНеПоддерживаютМЧД(ПараметрыДляПроверкиМЧД);
		
	Иначе
		Обработчик_ПослеПроверкиКонтрагентовНаПоддержкуМЧДВРоуминге(Неопределено, ОписаниеГрупповойОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИПроверитьМЧДВРоумингеПередОтправкойДокументов(ДанныеДляОбработки)
	
	Ядро = Модуль_ЯдроНаСервере();
	Результат = Новый Массив;
	
	ОшибкиПоОрганизациям = Новый Соответствие;
	
	ИнформацияОбОператораторах = Неопределено;
	
	Для каждого Документ Из ДанныеДляОбработки Цикл
		
		СтороныДокументооборота		 = СтороныДокументооборотаДляПроверкиПоддержкиМЧДВРоуминге(Документ);
		ОрганизацияBoxId			 = СтороныДокументооборота.Организация.BoxId;
		
		Если Ядро.МЧД_ТребуетсяДоверенность(ОрганизацияBoxId) Тогда
			
			КонтрагентFNSParticipantId	 = СтороныДокументооборота.Контрагент.FNSParticipantId;
			КонтрагентПоддерживаетМЧД	 = Ядро.МЧД_ОператорЭДОПоддерживаетДоверенности(ОрганизацияBoxId, КонтрагентFNSParticipantId);
			
			Если НЕ КонтрагентПоддерживаетМЧД Тогда
				
				ДополнитьДокументСведениямиМЧДКлиентСервер(Документ, Неопределено);
				ДополнитьСписокОшибокМЧДВРоуминге(ОшибкиПоОрганизациям, СтороныДокументооборота);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ОшибкаПоОрганизациям Из ОшибкиПоОрганизациям Цикл
		Результат.Добавить(ОшибкаПоОрганизациям.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтороныДокументооборотаДляПроверкиПоддержкиМЧДВРоуминге(Документ)
	
	Ядро = Модуль_ЯдроНаСервере();
	РежимыОтображения = РежимыОтображения();
	
	Результат = Новый Структура("Контрагент, Организация");

	ЕстьОтправитель = Документ.Свойство("Отправитель");
	ЕстьПолучатель = Документ.Свойство("Получатель");
	
	Если ЕстьОтправитель И ЕстьПолучатель Тогда
		
		Результат.Контрагент = Ядро.Документы_Контрагент(Документ);
		Результат.Организация = Ядро.Документы_Организация(Документ);
		
	Иначе
		
		ИдентификаторыОрганизации	 = Ядро.Новый_ИдентификаторыСправочника(Документ.Организация);
		УчастникДО_Организации		 = Ядро.Организации_ЗаполнитьУчастникаДО(ИдентификаторыОрганизации);
		ИдентификаторыКонтрагента	 = Ядро.Новый_ИдентификаторыСправочника(Документ.Контрагент); 
		УчастникДО_Контрагенты		 = Ядро.Контрагенты_ЗаполнитьУчастникаДО(ИдентификаторыКонтрагента, ИдентификаторыОрганизации);
		
		ОрганизацияBoxId			 = УчастникДО_Организации.BoxId;
		КонтрагентFNSParticipantId	 = УчастникДО_Контрагенты.FNSParticipantId;
		КонтрагентНаименование		 = УчастникДО_Контрагенты.Наименование;
		
		Результат.Контрагент = УчастникДО_Контрагенты;
		Результат.Организация = УчастникДО_Организации;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ()

&НаСервере
Процедура ДополнитьСписокОшибокМЧДВРоуминге(ОшибкиПоОрганизациям, СтороныДокументооборота)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	КонтрагентFNSParticipantId	 = СтороныДокументооборота.Контрагент.FNSParticipantId;
	ОрганизацияBoxId			 = СтороныДокументооборота.Организация.BoxId;
	
	ОписаниеОшибки = ОшибкиПоОрганизациям.Получить(ОрганизацияBoxId);
	Если ОписаниеОшибки = Неопределено Тогда
		
		Метрика_ВидыОшибокПроверокМЧД = Метрика_ВидыОшибокПроверокМЧД();
		РазделыОшибок = Ядро.МЧД_РазделыОшибокПроверкиМЧД();
		
		ОписаниеОшибки = Новый_ОписаниеОшибкиПроверкиМЧДпоУмолчанию(
			РазделыОшибок.КонтрагентНеПоддерживаетМЧДВРоуминге,
			"",
			Новый Массив,
			Метрика_ВидыОшибокПроверокМЧД.НеУказанаДоверенность,
			ОрганизацияBoxId
		);
		
		ОшибкиПоОрганизациям.Вставить(ОрганизацияBoxId, ОписаниеОшибки);
		
	КонецЕсли;
	
	ИдентификаторФНСОператора	 = Ядро.ИдентификаторФНСИзИдентификаторУчастникаЭДО(КонтрагентFNSParticipantId);
	ПредставлениеОператораЭДО	 = Ядро.ПредставлениеОператораЭДО(ИдентификаторФНСОператора, ОрганизацияBoxId);
	ПредставлениеКонтрагента	 = СтороныДокументооборота.Контрагент.Наименование + " (" + ПредставлениеОператораЭДО + ")";
	
	ОшибкаВСписке = ОписаниеОшибки.СписокОшибок.Найти(ПредставлениеКонтрагента);
	Если ОшибкаВСписке = Неопределено Тогда
		ОписаниеОшибки.СписокОшибок.Добавить(ПредставлениеКонтрагента);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ПослеПроверкиКонтрагентовНаПоддержкуМЧДВРоуминге(Результат, ОписаниеГрупповойОперации) Экспорт
	
	ПараметрыГрупповойОбработки = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки;
	ТекущееДействиеЭДО = ПараметрыГрупповойОбработки.Действие;
	
	Если ТекущееДействиеЭДО = ДействияЭДО().ПодписатьВходящий Тогда
		Обработчик_ВыполнитьГрупповуюОперациюПослеЗавершенияПроверок(Неопределено, ОписаниеГрупповойОперации);
	Иначе
		МЧД_ПроверитьДанныеГрупповойОперацииНаМЧДПоУмолчанию(ОписаниеГрупповойОперации);
	КонецЕсли;
	
КонецПроцедуры

// Для переданных данных групповой операции выполняет заполнение МЧД по умолчанию
// Выводит диалог выбора с ошибками проверки
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура МЧД_ПроверитьДанныеГрупповойОперацииНаМЧДПоУмолчанию(ОписаниеГрупповойОперации)

	ПараметрыГрупповойОбработки = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки;
	
	ТекущееДействиеЭДО = ПараметрыГрупповойОбработки.Действие;
	
	ОшибкиПроверокМЧД = ЗаполнитьИПроверитьМЧДпоУмолчаниюПередОтправкойДокументов(ПараметрыГрупповойОбработки.ДанныеДляОбработки);
	Если ОшибкиПроверокМЧД.Количество() Тогда
		
		ОписаниеОповещенияОбработчика = НовыйОписаниеОповещения(
			"Обработчик_ВыполнитьГрупповуюОперациюПослеЗавершенияПроверок", 
			ЭтаФорма, 
			ОписаниеГрупповойОперации
		);
		
		ПараметрыДляПроверкиМЧД = ПараметрыДляПроверкиМЧД(ОписаниеОповещенияОбработчика, Неопределено, Неопределено, ТекущееДействиеЭДО);
		ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД = ОшибкиПроверокМЧД;
		ПоказатьВопрос_НетПодходящейДоверенности(ПараметрыДляПроверкиМЧД);
		
	Иначе
		Обработчик_ВыполнитьГрупповуюОперациюПослеЗавершенияПроверок(Неопределено, ОписаниеГрупповойОперации);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает праметры для метода проверки МЧД 
// 
// Параметры:
//    ОповещениеЗавершения		 - Структура - описание оповещения выполняемого после проверки МЧД.
//    ИдентификаторЯщика		 - Строка - .
//    ВыбраннаяМЧД				 - Структура - см. Модуль_Ядро.Контракт_МЧД().
//    ДействиеЭДО				 - Строка - элемент структуры ДействияЭДО().
//    ИдентификаторыДокумента	 - Структура - идентификаторы документа по которому выполняется ооперация, см Модуль_Ядро.Контракт_Идентификаторы().
// 
// Возвращаемое значение:
//    Структура
// 
&НаКлиенте
Функция ПараметрыДляПроверкиМЧД(ОповещениеЗавершения, ИдентификаторЯщика, ВыбраннаяМЧД, ДействиеЭДО, ГрупповоеДействие = Ложь) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ОповещениеЗавершения"		, ОповещениеЗавершения);
	Результат.Вставить("ИдентификаторЯщика"			, ИдентификаторЯщика);
	Результат.Вставить("ВыбраннаяМЧД"				, ВыбраннаяМЧД);
	Результат.Вставить("ДействиеЭДО"				, ДействиеЭДО);
	Результат.Вставить("ГрупповоеДействие"			, ГрупповоеДействие); 
	Результат.Вставить("ВызовИзТитулаИлиОтказа"		, Ложь); 
	Результат.Вставить("ОшибкиПроверокМЧД"			, Новый Массив); 
	
	Результат.Вставить("РезультатПроверкиМЧД");
	Результат.Вставить("НазваниеФормыДляМетрики");
	
	Результат.Вставить("ОписаниеОповещенияДобавленияМетрики");
	
	Возврат Результат;

КонецФункции

// Выполняет проверку переданной мчд и по результатам выводит сообщения пользователю
// 
// Параметры:
//    ПараметрыДляПроверкиМЧД	 - Структура - см.ПараметрыДляПроверкиМЧД().
// 
&НаКлиенте
Процедура ПроверитьМЧДИВыполнитьОповещение(ПараметрыДляПроверкиМЧД) Экспорт

	ТребуетсяМЧД				 = ТребуетсяМЧД(ПараметрыДляПроверкиМЧД.ИдентификаторЯщика);
	ДействияНаФормеВопросаМЧД	 = ДействияНаФормеВопросаМЧД();
	ОбработчикПослеПроверкиМЧД	 = НовыйОписаниеОповещения("ОбработчикПослеПроверкиМЧД", ЭтаФорма, ПараметрыДляПроверкиМЧД);
	
	Если ТребуетсяМЧД Тогда
		
		ВыбраннаяМЧД = ПараметрыДляПроверкиМЧД.ВыбраннаяМЧД;
		
		Если НЕ ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
			
			ПоказатьВопрос_НеВыбранаМЧД(ОбработчикПослеПроверкиМЧД, ПараметрыДляПроверкиМЧД); 
			
		Иначе
			
			РезультатБыстройПроверкиМЧД = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().МЧД_БыстраяПроверка", ВыбраннаяМЧД, ПараметрыДляПроверкиМЧД.ИдентификаторЯщика);
			
			Если РезультатБыстройПроверкиМЧД.ЭтоДействующаяМЧД Тогда
				
				ВыполнитьОбработкуОповещенияПереопределенная(ОбработчикПослеПроверкиМЧД, ДействияНаФормеВопросаМЧД.ПродолжитьСМЧД);
				
			Иначе
				
				ПараметрыДляПроверкиМЧД.РезультатПроверкиМЧД = РезультатБыстройПроверкиМЧД;
				
				ПоказатьВопрос_ВыбраннаяМЧДНеПодходит(ОбработчикПослеПроверкиМЧД, ПараметрыДляПроверкиМЧД); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещенияПереопределенная(ОбработчикПослеПроверкиМЧД, ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ПроверитьМЧДИВыполнитьОповещение()
// 
// Параметры:
//    ВыбранноеДействие			 - Строка - см.ДействияНаФормеВопросаМЧД().
//    ПараметрыДляПроверкиМЧД	 - Структура - см.ПараметрыДляПроверкиМЧД().
&НаКлиенте
Процедура ОбработчикПослеПроверкиМЧД(ВыбранноеДействие, ПараметрыДляПроверкиМЧД) Экспорт
	
	TraceId					 = Модуль_ЯдроНаКлиенте().TraceId();
	НазваниеФормыДляМетрики	 = ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики;
	ЛейблМетрики			= Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
	
	ДопПеременные			 = Метрика_ДополнительныеПеременныеМЧД(ПараметрыДляПроверкиМЧД);
	Если ПараметрыДляПроверкиМЧД.ГрупповоеДействие Тогда
		КатегорияМетрики	 = Метрика_НазваниеКатегории().УведомлениеПриМассовыхДействиях;
	Иначе
		КатегорияМетрики	 = Метрика_НазваниеКатегории().УведомлениеИзформыПакета;
	КонецЕсли;
	
	Результат = РезультатВыбораМЧД(Ложь, Неопределено);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	Если ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД Тогда
		
		ДействиеМетрики		= Метрика_НазваниеДействий().ДействоватьБезДоверенности;

		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормыДляМетрики, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ПараметрыДляПроверкиМЧД.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
		
		Результат.РазрешитьДействие = Истина;
		
	ИначеЕсли ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьСМЧД Тогда
		
		Результат.РазрешитьДействие	 = Истина;
		Результат.КонтрактМЧД		 = ПараметрыДляПроверкиМЧД.ВыбраннаяМЧД;
		
	Иначе
		
		ДействиеМетрики		 = Метрика_НазваниеДействий().ЗакрытиеФормы;
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормыДляМетрики, КатегорияМетрики, Ложь, ЛейблМетрики, ПредставлениеМетрики, TraceId);
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ПараметрыДляПроверкиМЧД.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещенияПереопределенная(ПараметрыДляПроверкиМЧД.ОповещениеЗавершения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопрос_НеВыбранаМЧД(Оповещение, ПараметрыДляПроверкиМЧД)

	ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики = Метрика_НазванияФормМЧД().НеВыбранаДоверенность;
	
	Метрика_ОткрытиеФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД);
	
	ГрупповоеДействие = ПараметрыДляПроверкиМЧД.ГрупповоеДействие И НЕ ПараметрыДляПроверкиМЧД.ВызовИзТитулаИлиОтказа;
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД			, ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД);
	Если ГрупповоеДействие Тогда
		КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок	, ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок);	
	КонецЕсли;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.Закрыть					, ДействияНаФормеВопросаМЧД.Закрыть);
	
	ШаблонВопроса = 
	"С 1 марта 2022 года при работе с электронными документами нужно подтверждать действия машиночитаемой доверенностью (МЧД). До 01.09.2023 года доверенность можно не прикладывать.
	|
	|%1 или %2 без доверенности.";
	
	Если ГрупповоеДействие Тогда
		ТекстВариантаДействия1 = "При выполнении действия с доверенностями произошли ошибки. Перейдите по кнопке ""Подробнее"" для просмотра причин.";
	Иначе
		ТекстВариантаДействия1 = "Выберите МЧД";
	КонецЕсли;	
	
	ТекстВариантаДействия2 = "подпишите документ";
	
	ДействияЭДО = ДействияЭДО();
	
	ДействиеЭДО = ПараметрыДляПроверкиМЧД.ДействиеЭДО;
	
	Если ДействиеЭДО = ДействияЭДО.ОтказатьВПодписи Тогда
		ТекстВариантаДействия2 = "сформируйте отказ в подписи документа";
	ИначеЕсли ДействиеЭДО = ДействияЭДО.Аннулировать Тогда
		ТекстВариантаДействия2 = "аннулируйте документ";
	ИначеЕсли ДействиеЭДО = ДействияЭДО.ОтказатьВАннулировании Тогда
		ТекстВариантаДействия2 = "сформируйте отказ";
	ИначеЕсли ДействиеЭДО = ДействияЭДО.ЗапроситьУточнение Тогда
		ТекстВариантаДействия2 = "сформируйте запрос на уточнение";
	КонецЕсли;
	
	ТекстВопроса = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(ШаблонВопроса, ТекстВариантаДействия1, ТекстВариантаДействия2);

	Если ГрупповоеДействие Тогда
		
		ОбработчикВопроса = НовыйОписаниеОповещения("ОбработатьРезультатПриГрупповыхДействияхНаФормеВопросаМЧД", ЭтаФорма, ПараметрыДляПроверкиМЧД);
		ПоказатьВопросПереопределенная(ОбработчикВопроса, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаМЧД.Закрыть, "Не выбрана доверенность");
		
	Иначе
		
		ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаМЧД.Закрыть, "Не выбрана доверенность");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопрос_ВыбраннаяМЧДНеПодходит(Оповещение, ПараметрыДляПроверкиМЧД)
	
	ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики = Метрика_НазванияФормМЧД().ВыбраннаяДоверенностьНеПодходит;
	
	Метрика_ОткрытиеФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД			, ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.Закрыть					, ДействияНаФормеВопросаМЧД.Закрыть);
	
	ШаблонВопроса = 
	"%1
	|
	|%2 
	|
	|Выберите другую доверенность или выпустите новую.";
	
	МассивОшибок = Новый Массив;
	Для каждого ОписаниеОшибки Из ПараметрыДляПроверкиМЧД.РезультатПроверкиМЧД.СписокОшибок Цикл
		РасшифровкаОшибки	 = "- " + ОписаниеОшибки.Расшифровка;
		МассивОшибок.Добавить(РасшифровкаОшибки);
	КонецЦикла;
	СписокОшибокСтрокой	 = Модуль_ЯдроНаКлиенте().СоединитьСтроку(МассивОшибок, Символы.ПС);
	ПредставлениеМЧД	 = ПараметрыДляПроверкиМЧД.ВыбраннаяМЧД.ПредставлениеМЧД;
	
	ТекстВопроса = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(ШаблонВопроса, ПредставлениеМЧД, СписокОшибокСтрокой);
	
	ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаМЧД.Закрыть , "Выбранная доверенность не подходит");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопрос_НетПодходящейДоверенности(ПараметрыДляПроверкиМЧД, ОбработчикВопроса = Неопределено) Экспорт
	
	ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики = Метрика_НазванияФормМЧД().НетПодходящихДовереностей;
	
	Метрика_ОткрытиеФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД	, ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок, ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.Закрыть			, ДействияНаФормеВопросаМЧД.Закрыть);
	
	ТекстВопроса = 
	"С 1 марта 2022 года при работе с электронными документами нужно подтверждать действия машиночитаемой доверенностью (МЧД). "+
	"До 01.09.2023 года доверенность можно не прикладывать.
	|
	|При выполнении действия с доверенностями произошли ошибки. Перейдите по кнопке ""Подробнее"" для просмотра причин"; 
	
	Если ОбработчикВопроса = Неопределено Тогда
		ОбработчикВопроса = НовыйОписаниеОповещения("ОбработатьРезультатПриГрупповыхДействияхНаФормеВопросаМЧД", ЭтаФорма, ПараметрыДляПроверкиМЧД);
	КонецЕсли;
	
	ПоказатьВопросПереопределенная(ОбработчикВопроса, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаМЧД.Закрыть , "Нет подходящих доверенностей");
	
КонецПроцедуры

// Выводит вопрос "Оператор контрагента не поддерживает МЧД"
// Используется для группового действия
//
// Параметры:
//	ПараметрыДляПроверкиМЧД - Структура - см. ПараметрыДляПроверкиМЧД()
//
&НаКлиенте
Процедура ПоказатьВопрос_КонтрагентыДокументовНеПоддерживаютМЧД(ПараметрыДляПроверкиМЧД) 
	
	ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики = Метрика_НазванияФормМЧД().ПоддержкаОператоромМЧД;
	
	Метрика_ОткрытиеФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.Продолжить, ДействияНаФормеВопросаМЧД.Продолжить);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок, ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаМЧД.Закрыть, ДействияНаФормеВопросаМЧД.Закрыть);
	
	ШаблонВопроса = 
	"Не для всех выделенных документов можно выполнить операцию: %1 с МЧД в роуминге.
	|
	|Перейдите по кнопке ""Подробнее"" для просмотра причин. 
	|
	|Нажмите ""Продолжить"", чтобы выполнить действие для всех документов. Они отправятся без МЧД или с ней.";

	ПредставлениеДействияЭДО = ПредставлениеДействияЭДО(ПараметрыДляПроверкиМЧД.ДействиеЭДО);
	
	ТекстВопроса = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(ШаблонВопроса, ПредставлениеДействияЭДО);
	
	ОбработчикВопроса = НовыйОписаниеОповещения("ОбработатьРезультатНаФормеВопроса_КонтрагентНеПоддерживаетМЧД", ЭтаФорма, ПараметрыДляПроверкиМЧД);
	ПоказатьВопросПереопределенная(ОбработчикВопроса, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаМЧД.Закрыть);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатНаФормеВопроса_КонтрагентНеПоддерживаетМЧД(ВыбранноеДействие, ПараметрыДляПроверкиМЧД) Экспорт
	
	ДобавитьМетрикиПриГрупповыхДействияхНаФормеВопросаМЧД(ВыбранноеДействие, ПараметрыДляПроверкиМЧД);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	ПродолжитьБезМЧД	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.Продолжить;
	ОткрытьСписокОшибок	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок;
	
	Если ПродолжитьБезМЧД Тогда
		
		ВыполнитьОбработкуОповещенияПереопределенная(ПараметрыДляПроверкиМЧД.ОповещениеЗавершения);
		
	ИначеЕсли ОткрытьСписокОшибок Тогда
		
		ОшибкиПроверокМЧД = ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД;
		
		ОбработчикЗакрытияФормыHTML = НовыйОписаниеОповещения("ОбработатьЗакрытиеФормыHTMLСообщения", ЭтаФорма, ПараметрыДляПроверкиМЧД); 
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим", "КонтрагентыНеПоддерживаютМЧД");
		ПараметрыОткрытияФормы.Вставить("ОшибкиПроверокМЧД", ОшибкиПроверокМЧД);
		
		ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы,
			ОбработчикЗакрытияФормыHTML
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СгруппироватьДанныеДляОбработкиПоИдентификаторуЯщика(ДанныеДляОбработки)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	Результат = Новый Соответствие;
	
	Если ЕстьСвойствоИдентификаторыВОбрабатываемыхДанных(ДанныеДляОбработки) Тогда
	
		Для каждого Документ Из ДанныеДляОбработки Цикл
			
			BoxId				 = Документ.Идентификаторы.BoxId;
			
			Если Модуль_Ядро.ЭтоАдресЯщика(BoxId) Тогда
				BoxId = Модуль_Ядро.АдресЯщикаВИдентификатор(BoxId);
			КонецЕсли;
			
			ДанныеПоBoxId		 = Результат.Получить(BoxId);
			Если ДанныеПоBoxId	 = Неопределено Тогда
				Результат.Вставить(BoxId, Новый Массив);
				ДанныеПоBoxId	 = Результат.Получить(BoxId);
			КонецЕсли;
			
			ДанныеПоBoxId.Добавить(Документ);
			
		КонецЦикла;
		
	Иначе
			
		Организации1С	= Новый Массив;
		Для Каждого СтрокаСписка Из ДанныеДляОбработки Цикл
			Организация = СтрокаСписка.Организация;
			Если Организации1С.Найти(Организация) = Неопределено Тогда
				Организации1С.Добавить(Организация);
			КонецЕсли;
		КонецЦикла;
		
		УчастникиДО = ДанныеОрганизаций(Организации1С);
		
		Для каждого УчастникДО Из УчастникиДО Цикл
			
			BoxId					 = УчастникДО.BoxId;
			ПараметрыОтбора			 = Новый Структура("Организация", УчастникДО.Организация);
			ДокументыПоОрганизации	 = Модуль_Ядро.МассивСтруктур_НайтиСтроки(ДанныеДляОбработки, ПараметрыОтбора);
			Результат.Вставить(BoxId, ДокументыПоОрганизации);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

&НаСервере
Функция ЗаполнитьИПроверитьМЧДпоУмолчаниюПередОтправкойДокументов(ДанныеДляОбработки)
	
	ДокументыБезМЧД = Новый Массив;
	Для каждого Документ Из ДанныеДляОбработки Цикл
		Если НЕ Документ.СлужебнаяИнформация.Свойство("КонтрактМЧД") Тогда
			ДокументыБезМЧД.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	СписокОшибок = Новый Массив;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СгруппированныеДанные = СгруппироватьДанныеДляОбработкиПоИдентификаторуЯщика(ДокументыБезМЧД);
	ИдентификаторыЯщиков = Модуль_Ядро.ВыгрузитьКолонку(СгруппированныеДанные, "Ключ", Истина);
	
	КонтрактыМЧД = ПолучитьДействующиеМЧДпоУмолчанию(ИдентификаторыЯщиков, СписокОшибок);
	
	Для Каждого ИдентификаторЯщика Из ИдентификаторыЯщиков Цикл
		
		КонтрактМЧД = КонтрактыМЧД.Получить(ИдентификаторЯщика);
		
		ДокументыПоИдентификатору = СгруппированныеДанные.Получить(ИдентификаторЯщика);
		Для Каждого Документ Из ДокументыПоИдентификатору Цикл	
			ДополнитьДокументСведениямиМЧДКлиентСервер(Документ, КонтрактМЧД)
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции

&НаСервере
Функция ПолучитьДействующиеМЧДпоУмолчанию(ИдентификаторыЯщиков, СписокОшибок) Экспорт
	
	Результат = Новый Соответствие;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	КонекстыДанныхМЧД = Модуль_Ядро.МЧД_ДанныеПоИспользованиюДоверенностейПоСпискуBoxId(ИдентификаторыЯщиков);
	РазделыОшибок = Модуль_Ядро.МЧД_РазделыОшибокПроверкиМЧД();
	Метрика_ВидыОшибокПроверокМЧД = Метрика_ВидыОшибокПроверокМЧД();
	
	Для Каждого ИдентификаторЯщика Из ИдентификаторыЯщиков Цикл
		
		КонтекстМЧД = КонекстыДанныхМЧД.Получить(ИдентификаторЯщика);
		
		Если НЕ КонтекстМЧД.ТребуетсяМЧД Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрактМЧД = Неопределено;
		
		Если ЗначениеЗаполнено(КонтекстМЧД.МЧД) Тогда
			
			КонтрактМЧД = КонтекстМЧД.СписокМЧД.Получить(КонтекстМЧД.МЧД);
			
			РезультатПроверкиМЧД = КонтекстМЧД.РезультатПроверкиМЧД;
			Если НЕ РезультатПроверкиМЧД.ЭтоДействующаяМЧД Тогда
				
				НаименованиеОрганизации = Модуль_Ядро.КонтекстСеанса_Прочитать(ИдентификаторЯщика, "ОрганизацияНаименование");
				
				ТекстОшибки = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(
					"Для организации ""%1"" доверенность ""%2"" не прошла проверку",
					НаименованиеОрганизации,
					КонтрактМЧД.Представитель.Наименование);
				
				ОписаниеОшибки = Новый_ОписаниеОшибкиПроверкиМЧДпоУмолчанию(
					РазделыОшибок.МЧДнеПодходит,
					ТекстОшибки,
					РезультатПроверкиМЧД.СписокОшибок,
					Метрика_ВидыОшибокПроверокМЧД.ДоверенностьНеПодходит,
					ИдентификаторЯщика);
				
				СписокОшибок.Добавить(ОписаниеОшибки);
				
				КонтрактМЧД = Неопределено;

			КонецЕсли;
			
		Иначе
		
			НаименованиеОрганизации = Модуль_Ядро.КонтекстСеанса_Прочитать(ИдентификаторЯщика, "ОрганизацияНаименование");	
			
			ОписаниеОшибки = Новый_ОписаниеОшибкиПроверкиМЧДпоУмолчанию(
				РазделыОшибок.НетМЧДПоУмолчанию,
				НаименованиеОрганизации,
				Новый Массив,
				Метрика_ВидыОшибокПроверокМЧД.НеУказанаДоверенность,
				ИдентификаторЯщика);
			
			СписокОшибок.Добавить(ОписаниеОшибки);
			
		КонецЕсли;
		
		Результат.Вставить(ИдентификаторЯщика, КонтрактМЧД);

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Новый_ОписаниеОшибкиПроверкиМЧДпоУмолчанию(Раздел, РасшифровкаСтатуса, СписокОшибок, Метрика_ВидОшибкиПроверкиМЧД, ИдентификаторЯщика)

	Результат = Новый Структура;
	Результат.Вставить("Раздел"				, Раздел);
	Результат.Вставить("РасшифровкаСтатуса"	, РасшифровкаСтатуса);
	Результат.Вставить("СписокОшибок"		, СписокОшибок);
	Результат.Вставить("Метрика_ВидОшибкиПроверкиМЧД"		, Метрика_ВидОшибкиПроверкиМЧД);
	Результат.Вставить("ИдентификаторЯщика"		, ИдентификаторЯщика);
	 
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяМЧД(ИдентификаторЯщика) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ИдентификаторЯщика) Тогда
		КонтекстСеансаПоЯщику = Модуль_ЯдроНаКлиенте().КонтекстСеанса_СтрокаКонтекста(ИдентификаторЯщика);
		Результат = КонтекстСеансаПоЯщику.ТребуетсяМЧД = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатВыбораМЧД(РазрешитьДействие, КонтрактМЧД) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("РазрешитьДействие"	, РазрешитьДействие);
	Результат.Вставить("КонтрактМЧД"		, КонтрактМЧД);
	
	Возврат Результат;
	
КонецФункции 

// см. ДополнитьДокументыСведениямиМЧДКлиентСервер()
// 
&НаКлиенте
Процедура ДополнитьДокументыСведениямиМЧДНаКлиенте(КонтрактыДокументов, КонтрактМЧД) Экспорт
	
	Для Каждого Документ Из КонтрактыДокументов Цикл	
		ДополнитьДокументСведениямиМЧДКлиентСервер(Документ, КонтрактМЧД)
	КонецЦикла;
	
КонецПроцедуры

// Дополняет служебную информацию переданных документов КонтрактомМЧД 
// 
// Параметры:
//    Документ		 - Структура - ДокументДД, см. Модуль_Ядро.Контракт_Документ().
//    КонтрактМЧД	 - Структура - см. Модуль_Ядро.Контракт_МЧД().
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьДокументСведениямиМЧДКлиентСервер(Документ, КонтрактМЧД)
	
	Если НЕ Документ.СлужебнаяИнформация.Свойство("КонтрактМЧД") Тогда
		Документ.СлужебнаяИнформация.Вставить("КонтрактМЧД", КонтрактМЧД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПриГрупповыхДействияхНаФормеВопросаМЧД(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	ДобавитьМетрикиПриГрупповыхДействияхНаФормеВопросаМЧД(ВыбранноеДействие, ДополнительныеПараметры);
	
	ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
	
	ПродолжитьБезМЧД	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД;
	ПродолжитьСМЧД		 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьСМЧД;
	ОткрытьСписокОшибок	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок;
	
	Если ПродолжитьБезМЧД ИЛИ ПродолжитьСМЧД Тогда
		
		ВыполнитьОбработкуОповещенияПереопределенная(ДополнительныеПараметры.ОповещениеЗавершения);
		
	ИначеЕсли ОткрытьСписокОшибок Тогда
		
		ОшибкиПроверокМЧД = ДополнительныеПараметры.ОшибкиПроверокМЧД;
		
		ТекстHTML = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().МЧД_СписокОшибокВТекстHTML", ОшибкиПроверокМЧД);
		
		ОбработчикЗакрытияФормыHTML = НовыйОписаниеОповещения("ОбработатьЗакрытиеФормыHTMLСообщения", ЭтаФорма, ДополнительныеПараметры); 
		
		ОткрытьФормуHTMLСообщения(ТекстHTML, "Служебные сообщения", , ЭтаФорма, ОбработчикЗакрытияФормыHTML);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМетрикиПриГрупповыхДействияхНаФормеВопросаМЧД(ВыбранноеДействие, ПараметрыДляПроверкиМЧД)
	
	МетрикиОписаниеОповещенияПереопределяемая = СвойствоСтруктуры(ПараметрыДляПроверкиМЧД, "ОписаниеОповещенияДобавленияМетрики");
	Если МетрикиОписаниеОповещенияПереопределяемая = Неопределено Тогда
		
		ДействияНаФормеВопросаМЧД = ДействияНаФормеВопросаМЧД();
		
		ПродолжитьБезМЧД	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьБезМЧД ИЛИ ВыбранноеДействие = ДействияНаФормеВопросаМЧД.Продолжить;
		ПродолжитьСМЧД		 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ПродолжитьСМЧД;
		ОткрытьСписокОшибок	 = ВыбранноеДействие = ДействияНаФормеВопросаМЧД.ОткрытьСписокОшибок;
		
		Если ПродолжитьБезМЧД ИЛИ ПродолжитьСМЧД Тогда
			Если ПродолжитьБезМЧД Тогда
				Метрика_ПродолжитьБезМЧД(ПараметрыДляПроверкиМЧД);
			КонецЕсли;
		ИначеЕсли ОткрытьСписокОшибок Тогда
			Метрика_СписокОшибокМЧД(ПараметрыДляПроверкиМЧД, Истина);
		Иначе
			Метрика_ЗакрытиеФормыФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещенияПереопределенная(МетрикиОписаниеОповещенияПереопределяемая, ВыбранноеДействие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыHTMLСообщения(Результат, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ОшибкиПроверокМЧД") Тогда
		
			Метрика_СписокОшибокМЧД(ДополнительныеПараметры, Ложь);
			
			Если ДополнительныеПараметры.НазваниеФормыДляМетрики = Метрика_НазванияФормМЧД().ПоддержкаОператоромМЧД Тогда
				ПоказатьВопрос_КонтрагентыДокументовНеПоддерживаютМЧД(ДополнительныеПараметры);
			Иначе
				ПоказатьВопрос_НетПодходящейДоверенности(ДополнительныеПараметры);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.Свойство("СписокОшибокКЭП") Тогда
			
			ПоказатьВопрос_НеДляВсехДокументовМожноВыполнитьДействиеКЭП(ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойствоИдентификаторыВОбрабатываемыхДанных(ДанныеДляОбработки)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеДляОбработки) Тогда
		
		ЭлементКоллекцииДанных = ДанныеДляОбработки[0];
		
		Если ТипЗнч(ЭлементКоллекцииДанных) = Тип("Структура")
			И ЭлементКоллекцииДанных.Свойство("Идентификаторы")
			И ЭлементКоллекцииДанных.Идентификаторы <> Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДействияНаФормеВопросаМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПродолжитьБезМЧД"		, "Продолжить без МЧД");
	Результат.Вставить("ПродолжитьСМЧД"			, "Действовать с МЧД");
	Результат.Вставить("ОткрытьСписокОшибок"	, "Подробнее");
	Результат.Вставить("Закрыть"				, "Закрыть");
	Результат.Вставить("Продолжить"				, "Продолжить");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для формы выбора МЧД 
// 
// Параметры:
//    ЗаголовокФормы			 - Строка - .
//    ЗаголовокКнопки			 - Строка - .
//    ИдентификаторЯщика		 - Строка - .
//    ДействиеЭДО				 - Строка - элемент структуры ДействияЭДО().
//    ИдентификаторыДокумента	 - Структура - идентификаторы документа по которому выполняется ооперация, см Модуль_Ядро.Контракт_Идентификаторы().
//    КонтрагентПоддерживаетМЧД	 - Булево - Истина если оператор контрагента поддерживает отправку МЧД в роуминге.
// 
// Возвращаемое значение:
//    Структура
// 
&НаКлиенте
Функция ПараметрыФормыВыбораМЧД(ЗаголовокФормы = ""
	, ЗаголовокКнопки = ""
	, ИдентификаторЯщика = ""
	, ДействиеЭДО = ""
	, КатегорияМетрикиДокумента = ""
	, КонтрагентПоддерживаетМЧД = Истина) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокФормы"				, ЗаголовокФормы);
	Результат.Вставить("ЗаголовокКнопкиДействия"	, ЗаголовокКнопки);
	Результат.Вставить("ИдентификаторЯщика"			, ИдентификаторЯщика);
	Результат.Вставить("ДействиеЭДО"				, ДействиеЭДО);
	Результат.Вставить("КатегорияМетрикиДокумента"	, КатегорияМетрикиДокумента);
	Результат.Вставить("КонтрагентПоддерживаетМЧД"	, КонтрагентПоддерживаетМЧД);

	Возврат Результат;
	
КонецФункции

// Открывает форму выбора МЧД 
// 
// Параметры:
//    ОписаниеОбработчикаЗакрытия.
//    ПараметрыОткрытияФормы		 - Структура - см. ПараметрыФормыВыбораМЧД().
// 
&НаКлиенте
Процедура ОткрытьФормуВыбораДоверенности(ОписаниеОбработчикаЗакрытия, ПараметрыОткрытияФормы) Экспорт
	
	ОткрытьФормуДиадокМодально(
		"МЧД_ФормаВыбораУправляемая",
		ОписаниеОбработчикаЗакрытия.Модуль,
		ПараметрыОткрытияФормы,
		ОписаниеОбработчикаЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуОшибкокМЧДПоУмолчанию()
	
	БольшеНеПоказывать = МетодСервераБезКонтекста(
		Истина,
		"ОбработкаОбъект().НастройкиПользователяПрочитать_НеПоказыватьПредупрежденияПоМЧД");
	
	Если БольшеНеПоказывать = Ложь Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьПредупреждениеСОшибкамиМЧДУСотрудниковПоОрганизациям", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие ошибок в установках МЧД по умолчанию и при наличии открывает форму сообщения 
//
&НаКлиенте
Процедура ПоказатьПредупреждениеСОшибкамиМЧДУСотрудниковПоОрганизациям() Экспорт
	
	ОшибкиПроверкиМЧД = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().МЧД_ПроверитьНаличиеДоверенностейУСотрудниковПоОрганизациям");
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМЧД) Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим",				"ОшибкиМЧД");
		ПараметрыОткрытияФормы.Вставить("ОшибкиПроверкиМЧД",	ОшибкиПроверкиМЧД);
		
		ОповещениеОЗакрытииФормы = Неопределено;
		
		ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы,
			ОповещениеОЗакрытииФормы,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЯщикДляДействийСДокументамиВКоторомНужнаМЧД()
	
	Результат = Ложь;
	
	СтрокиКонтекста = Модуль_ЯдроНаКлиенте().КонтекстСеанса_СтрокиКонтекста();
	Для Каждого СтрокаКонтекста Из СтрокиКонтекста Цикл
		КонтекстЯщика = СтрокаКонтекста.Значение;
		Если КонтекстЯщика.ТребуетсяМЧД Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Обрабатывает нажатие гиперссылки на скачивание файлов доверенности в формах пакета и сообщения HTML
//
// Параметры:
//  ПараметрыСкачиванияФайловМЧД - Строка - см. Ядро.Новый_ПараметрыГиперссылкиСкачатьФайлыДоверенности()
//
&НаКлиенте
Процедура ОбработатьНажатиеГиперссылкиСкачатьФайлыМЧД(ПараметрыСкачиванияФайловМЧД) Экспорт
	
	ОписаниеОповещения = НовыйОписаниеОповещения("ОкончаниеВыбораКаталогаПриНажатииСкачатьФайлыДоверенности", ЭтаФорма, ПараметрыСкачиванияФайловМЧД);
	ПоказатьДиалогВыбораКаталога(ОписаниеОповещения, НСтр("ru = 'Сохранение файлов доверенности на диск'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораКаталогаПриНажатииСкачатьФайлыДоверенности(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйКаталог) Тогда
		Возврат;
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ПредставлениеТекущегоДокумента = ДополнительныеПараметры.ПредставлениеТекущегоДокумента;
	ПрефиксКаталога = "МЧД к ";
	ИмяКаталога = ЗаменитьНедопустимыеСимволыИмениФайла(ПрефиксКаталога + ПредставлениеТекущегоДокумента);
	ПолноеИмяКаталога = Модуль_Ядро.ОбъединитьПути(ВыбранныйКаталог[0], ИмяКаталога);
	
	СоздатьКаталог(ПолноеИмяКаталога);
	
	ФайлыДоверенности = Модуль_Ядро.Документы_СобытияМЧД_ФайлыДоверенности(ДополнительныеПараметры.ПараметрыГиперссылки);
	
	СохранитьФайлыДоверенностиНаДиск(ФайлыДоверенности, ПолноеИмяКаталога);
	
	Если ФайлыДоверенности.ДанныеФайловДелегированныхМЧД.Количество() > 0 Тогда
		
		ПрефиксКаталогаДелегированныхМЧД = "Передоверие ";
		ИмяКаталогаДелегированныхМЧД = ЗаменитьНедопустимыеСимволыИмениФайла(ПрефиксКаталогаДелегированныхМЧД + ФайлыДоверенности.ИмяФайла);
		ПолноеИмяКаталогаДелегированныхМЧД = Модуль_Ядро.ОбъединитьПути(ПолноеИмяКаталога, ИмяКаталогаДелегированныхМЧД);
		
		СоздатьКаталог(ПолноеИмяКаталогаДелегированныхМЧД);
		
		Для Каждого ДанныеФайловДелегированнойМЧД Из ФайлыДоверенности.ДанныеФайловДелегированныхМЧД Цикл
			СохранитьФайлыДоверенностиНаДиск(ДанныеФайловДелегированнойМЧД, ПолноеИмяКаталогаДелегированныхМЧД);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыДоверенностиНаДиск(ФайлыДоверенности, ПолноеИмяКаталога)
	
	ДанныеДоверенности	= ФайлыДоверенности.Данные;
	ДанныеПодписи		= ФайлыДоверенности.Подпись.ДанныеПодписи;
	
	ИмяФайлаДоверенности	= ФайлыДоверенности.ИмяФайла + ".xml";
	ИмяФайлаПодписи			= ФайлыДоверенности.ИмяФайла + ".sig";
	
	ПолноеИмяФайлаДоверенности = СохранитьДвоичныеДанныеВФайл(ДанныеДоверенности, ИмяФайлаДоверенности, ПолноеИмяКаталога);
	ПолноеИмяФайлаПодписи = СохранитьДвоичныеДанныеВФайл(ДанныеПодписи, ИмяФайлаПодписи, ПолноеИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазванияФормМЧД()

	Результат = Новый Структура; 
	Результат.Вставить("НеВыбранаДоверенность"				, "НеВыбранаДоверенность");
	Результат.Вставить("ВыбраннаяДоверенностьНеПодходит"	, "ВыбраннаяДоверенностьНеПодходит");
	Результат.Вставить("ОписаниеОшибокСМЧД"					, "ОписаниеОшибокСМЧД");
	Результат.Вставить("НетПодходящихДовереностей"			, "НетПодходящихДовереностей");
	Результат.Вставить("ПоддержкаОператоромМЧД"				, "ПоддержкаОператоромМЧД");
	 
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормы)
	
	НазванияФормМЧД = Метрика_НазванияФормМЧД();

	Результат = "";
	
	Если НазваниеФормы = НазванияФормМЧД.НеВыбранаДоверенность Тогда
		Результат = "Не выбрана доверенность"
	ИначеЕсли НазваниеФормы = НазванияФормМЧД.ВыбраннаяДоверенностьНеПодходит Тогда
		Результат = "Выбранная доверенность не подходит"
	ИначеЕсли НазваниеФормы = НазванияФормМЧД.ОписаниеОшибокСМЧД Тогда
		Результат = "Описание ошибок с МЧД"
	ИначеЕсли НазваниеФормы = НазванияФормМЧД.НетПодходящихДовереностей Тогда
		Результат = "Нет подходящих доверенностей"
	ИначеЕсли НазваниеФормы = НазванияФормМЧД.ПоддержкаОператоромМЧД Тогда
		Результат = "Поддержка оператором МЧД"
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ВидыОшибокПроверокМЧД()

	Результат = Новый Структура; 
	Результат.Вставить("НеУказанаДоверенность"				, "НеУказанаДоверенность");
	Результат.Вставить("ДоверенностьНеПодходит"				, "ДоверенностьНеПодходит");
	Результат.Вставить("ОператорНеПоддерживаетМЧДВРоуминге"	, "ОператорНеПоддерживаетМЧДВРоуминге");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ПродолжитьБезМЧД(ДополнительныеПараметры)

	КатегорияМетрики		 = Метрика_НазваниеКатегории().УведомлениеПриМассовыхДействиях;
	ДопПеременные			 = Метрика_ДополнительныеПеременныеМЧД(ДополнительныеПараметры);
	НазваниеФормыДляМетрики	 = ДополнительныеПараметры.НазваниеФормыДляМетрики;
	ЛейблМетрики			 = Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	 = Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
	TraceId					 = Модуль_ЯдроНаКлиенте().TraceId();
	
	ДействиеМетрики = Метрика_НазваниеДействий().ДействоватьБезДоверенности;
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормыДляМетрики, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Для каждого ОписаниеОшибки Из ДополнительныеПараметры.ОшибкиПроверокМЧД Цикл
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибки.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_СписокОшибокМЧД(ДополнительныеПараметры, ОткрытиеФормы)

	КатегорияМетрики		 = Метрика_НазваниеКатегории().УведомлениеПриМассовыхДействиях;
	ДопПеременные			 = Метрика_ДополнительныеПеременныеМЧД(ДополнительныеПараметры);
	ЛейблМетрики			 = Метрика_НазваниеДействий().НажатиеКнопки;
	TraceId					 = Модуль_ЯдроНаКлиенте().TraceId();
	
	Если ОткрытиеФормы Тогда
	
		НазваниеФормыДляМетрики	 = ДополнительныеПараметры.НазваниеФормыДляМетрики;
		ПредставлениеМетрики	 = Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
		
		ДействиеМетрики = Метрика_НазваниеДействий().Подробнее;
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормыДляМетрики, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
		Для каждого ОписаниеОшибки Из ДополнительныеПараметры.ОшибкиПроверокМЧД Цикл
			Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибки.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ОткрытиеФормы Тогда
		ДействиеМетрики			 = Метрика_НазваниеДействий().ОткрытиеФормы;
	Иначе
		ДействиеМетрики			 = Метрика_НазваниеДействий().ЗакрытиеФормы;
	КонецЕсли;
	НазваниеФормыДляМетрики		 = Метрика_НазванияФормМЧД().ОписаниеОшибокСМЧД;;
	ПредставлениеМетрики		 = Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормыДляМетрики, КатегорияМетрики, ОткрытиеФормы, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Для каждого ОписаниеОшибки Из ДополнительныеПараметры.ОшибкиПроверокМЧД Цикл
		ДопПеременные.Вставить("Идентификатор ошибки", ОписаниеОшибки.Метрика_ВидОшибкиПроверкиМЧД);
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибки.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
	КонецЦикла;

КонецПроцедуры

// Возвращает дополнительные переменные для отправки метрик по МЧД на основании параметров формы проверки МЧД
// 
// Параметры:
//    ПараметрыДляПроверкиМЧД - Структура - см. ПараметрыДляПроверкиМЧД().
// 
// Возвращаемое значение:
//    Структура
// 
&НаКлиенте
Функция Метрика_ДополнительныеПеременныеМЧД(ПараметрыДляПроверкиМЧД) Экспорт
	
	Результат					 = Новый Соответствие;
	ВыбраннаяМЧДИдентификатор	 = СвойствоСтруктуры(ПараметрыДляПроверкиМЧД.ВыбраннаяМЧД, "Идентификатор"	, "");
	ИспользуетсяМЧДПоУмолчанию	 = СвойствоСтруктуры(ПараметрыДляПроверкиМЧД.ВыбраннаяМЧД, "ПоУмолчанию");
	
	РезультатПроверкиМЧД		 = СвойствоСтруктуры(ПараметрыДляПроверкиМЧД, "РезультатПроверкиМЧД");
	СписокОшибок				 = СвойствоСтруктуры(РезультатПроверкиМЧД, "СписокОшибок", Новый Массив);
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		Результат.Вставить("Список ошибок", СписокОшибок);
	КонецЕсли;
	
	Результат.Вставить("Рег.номер МЧД"			, ВыбраннаяМЧДИдентификатор);
	Результат.Вставить("МЧД по умолчанию"		, Формат(ИспользуетсяМЧДПоУмолчанию, "БЛ=False; БИ=True"));
	
	ПредставленияДействийЭДО	 = Модуль_ЯдроНаКлиенте().Перечисление_ПредставленияДействийЭДО();
	ПредставлениеДействия		 = СвойствоСтруктуры(ПредставленияДействийЭДО, ПараметрыДляПроверкиМЧД.ДействиеЭДО,  ПараметрыДляПроверкиМЧД.ДействиеЭДО);
	
	Если РежимОтображенияДокументов = РежимыОтображения().Входящие Тогда
		НаправлениеДокумента = "Входящий";
	Иначе	
		НаправлениеДокумента = "Исходящий";
	КонецЕсли;
	
	Результат.Вставить("Направление документа"	, НаправлениеДокумента);
	Результат.Вставить("Действие"					, ПредставлениеДействия);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ОткрытиеФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД)

	НазваниеФормыДляМетрики	= ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики;
	ДопПеременные			= Метрика_ДополнительныеПеременныеМЧД(ПараметрыДляПроверкиМЧД);
	ДействиеМетрики			= Метрика_НазваниеДействий().ОткрытиеФормы;
	ЛейблМетрики			= Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	= Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
	TraceId					= Модуль_ЯдроНаКлиенте().TraceId();
	
	Если ПараметрыДляПроверкиМЧД.ГрупповоеДействие Тогда
		КатегорияМетрики	= Метрика_НазваниеКатегории().УведомлениеПриМассовыхДействиях;
	Иначе
		КатегорияМетрики	= Метрика_НазваниеКатегории().УведомлениеИзФормыПакета;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормыДляМетрики, КатегорияМетрики, Истина, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Для каждого ОписаниеОшибки Из ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД Цикл
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибки.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗакрытиеФормыФормыПредупрежденияПослеПроверкиМЧД(ПараметрыДляПроверкиМЧД)

	НазваниеФормыДляМетрики	 = ПараметрыДляПроверкиМЧД.НазваниеФормыДляМетрики;
	ДопПеременные			 = Метрика_ДополнительныеПеременныеМЧД(ПараметрыДляПроверкиМЧД);
	ЛейблМетрики			 = Метрика_НазваниеДействий().НажатиеКнопки;
	ПредставлениеМетрики	 = Метрика_ЛейблПоНазваниюФормыМЧД(НазваниеФормыДляМетрики);
	TraceId					 = Модуль_ЯдроНаКлиенте().TraceId();
	
	Если ПараметрыДляПроверкиМЧД.ГрупповоеДействие Тогда
		КатегорияМетрики	= Метрика_НазваниеКатегории().УведомлениеПриМассовыхДействиях;
	Иначе
		КатегорияМетрики	= Метрика_НазваниеКатегории().УведомлениеИзФормыПакета;
	КонецЕсли;
	
	ДействиеМетрики			 = Метрика_НазваниеДействий().ЗакрытиеФормы;
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормыДляМетрики, КатегорияМетрики, Ложь, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	Для каждого ОписаниеОшибки Из ПараметрыДляПроверкиМЧД.ОшибкиПроверокМЧД Цикл
		Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибки.ИдентификаторЯщика, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ДопПеременные, ПредставлениеМетрики, TraceId);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура МЧД_ПоказатьСведенияОДоверенности(КонтрактМЧД, ФормаВызова) Экспорт
	
	СведенияОМЧД = МЧД_ПредставлениеСведенийОДоверенностиНаСервере_HTML(КонтрактМЧД);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ЗаголовокФормы", НСтр("ru='Данные МЧД'"));	
	ПараметрыОткрытияФормы.Вставить("ТекстСообщения", СведенияОМЧД.ТекстHTML);
	ПараметрыОткрытияФормы.Вставить("ТекстДляКопирования", СведенияОМЧД.Текст);
	ПараметрыОткрытияФормы.Вставить("ПоказатьКнопкуСкопировать"	, Истина);
	
	ОткрытьФормуДиадокМодально("ФормаHTMLСообщенияУправляемая", ФормаВызова, ПараметрыОткрытияФормы,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция МЧД_ПредставлениеСведенийОДоверенностиНаСервере_HTML(КонтрактМЧД)
	
	Результат = ОбработкаОбъект().МЧД_ПредставлениеСведенийОДоверенности_HTML(КонтрактМЧД);
	Возврат Результат;
	
КонецФункции

// }	МЧД

// {	РЕДАКТИРОВАНИЕ ОСНОВАНИЯ ПОЛНОМОЧИЙ

&НаКлиенте
Функция НовыйРеквизитыДокументаОснованияПолномочий(ДокНаименование, Номер, Дата, ДопСведения) Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("Наименование", ДокНаименование);
	Результат.Вставить("Номер", Номер);
	Результат.Вставить("Дата", Дата);
	Результат.Вставить("ДопСведения", ДопСведения);

	Возврат Новый ФиксированнаяСтруктура(Результат);

КонецФункции

&НаКлиенте
Функция СформироватьПредставлениеДокументаОснованияПолномочий(РеквизитыДокумента) Экспорт
	
	Результат = "Не заполнено";

	Если РеквизитыДокумента <> Неопределено
		И ЗначениеЗаполнено(РеквизитыДокумента.Наименование) Тогда
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(РеквизитыДокумента.Наименование);
		ЧастиСтроки.Добавить(" № " + РеквизитыДокумента.Номер);
		ЧастиСтроки.Добавить(" от " + Формат(РеквизитыДокумента.Дата, "ДФ=dd.MM.yyyy"));
		
		Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(ЧастиСтроки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияОснованияПолномочий(РеквизитыДокумента, ОписаниеОповещения, Владелец) Экспорт
	
	ПараметрыОткрытияФормы = НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыДокумента);
	
	ОткрытьФормуДиадокМодально(
		"РедактированиеОснованияПолномочийУправляемая",
		Владелец,
		ПараметрыОткрытияФормы,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПараметрыФормыРедактированияОснованияПолномочий(РеквизитыДокумента)

	Если РеквизитыДокумента = Неопределено Тогда
		НаименованиеДокумента = "";
		Номер = "";
		Дата = '00010101';
		ДопСведения = "";
	Иначе
		НаименованиеДокумента = РеквизитыДокумента.Наименование;
		Номер = РеквизитыДокумента.Номер;
		Дата = РеквизитыДокумента.Дата;
		ДопСведения = РеквизитыДокумента.ДопСведения;
	КонецЕсли;
	
	РеквизитыОснованияПолномочий = НовыйРеквизитыДокументаОснованияПолномочий(НаименованиеДокумента, Номер, Дата, ДопСведения);
	Результат = Новый Структура(РеквизитыОснованияПолномочий);
	
	Возврат Результат;
	
КонецФункции

// }	РЕДАКТИРОВАНИЕ ОСНОВАНИЯ ПОЛНОМОЧИЙ

// {	КЭП

&НаКлиенте
Процедура НачатьПроверкуОшибокКЭП()
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеСОшибкамиКЭППослеАвторизации", 0.1, Истина);
	
КонецПроцедуры

// Проверяет наличие ошибок в установках МЧД по умолчанию и при наличии открывает форму сообщения 
//
&НаКлиенте
Процедура ПоказатьПредупреждениеСОшибкамиКЭППослеАвторизации() Экспорт
	
	СписокОшибокКЭП = МетодСервераБезКонтекста(Истина, "Модуль_Ядро().КЭП_ПолучитьОшибкиПоСтрокамКонтекста");
	
	Если ЗначениеЗаполнено(СписокОшибокКЭП) Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим",			"ОшибкиКЭППриАвторизации");
		ПараметрыОткрытияФормы.Вставить("СписокОшибокКЭП",	СписокОшибокКЭП);
		
		ОповещениеОЗакрытииФормы = Неопределено;
		
		ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы,
			ОповещениеОЗакрытииФормы,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДействияНаФормеВопросаКЭП()
	
	Результат = Новый Структура;
	Результат.Вставить("Продолжить"				, "Продолжить");
	Результат.Вставить("ОткрытьСписокОшибок"	, "Подробнее");
	Результат.Вставить("Закрыть"				, "Закрыть");
	
	Возврат Результат;
	
КонецФункции

// Для переданных данных групповой операции выполняет проверку сертификатов на КЭП. 
// Далее запускает проверку МЧД
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура КЭП_НачатьПроверкуДанныхГрупповойОперации(ОписаниеГрупповойОперации)
	
	ПараметрыГрупповойОбработки	 = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки;
	РезультатПроверкиКЭП		 = КЭП_ПроверитьДанныеГрупповойОперацииНаСервере(ПараметрыГрупповойОбработки.ДанныеДляОбработки, ПараметрыГрупповойОбработки.Действие);
	ЕстьДокументыДляОбработки	 = ЗначениеЗаполнено(РезультатПроверкиКЭП.ДанныеДляОбработкиБезОшибок);
	
	Если ЗначениеЗаполнено(РезультатПроверкиКЭП.ОшибкиПроверки) 
		И ЕстьДокументыДляОбработки Тогда
		
		ПараметрыГрупповойОбработки.ДанныеДляОбработки = РезультатПроверкиКЭП.ДанныеДляОбработкиБезОшибок;
		
		ОписаниеГрупповойОперации.Вставить("СписокОшибокКЭП", РезультатПроверкиКЭП.ОшибкиПроверки);
		
		ПоказатьВопрос_НеДляВсехДокументовМожноВыполнитьДействиеКЭП(ОписаниеГрупповойОперации);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатПроверкиКЭП.ОшибкиПроверки) 
		И НЕ ЕстьДокументыДляОбработки Тогда
		
		ПоказатьВопрос_ДляДокументаНевозможноВыполнитьДействиеКЭП(РезультатПроверкиКЭП.ОшибкиПроверки);
		
	Иначе
		МЧД_НачатьПроверкуДанныхГрупповойОперации(ОписаниеГрупповойОперации);
	КонецЕсли;
	
КонецПроцедуры

// Для переданных данных групповой операции выполняет проверку сертификатов на КЭП.
//
// Параметры:
//	ДанныеДляОбработки	 - Массив - см. Новый_ПараметрыГрупповойОбработки().ДанныеДляОбработки
//
// Возвращаемое значение:
//  Структура
//		* ОшибкиПроверки				 - Массив- Список ошибок проверки. См Ядро.Новый_ОписаниеОшибкиПроверкиКЭП() 
//		* ДанныеДляОбработкиБезОшибок	 - Массив- ДанныеДляОбработки без ошибок КЭП 
//
&НаСервере
Функция КЭП_ПроверитьДанныеГрупповойОперацииНаСервере(ДанныеДляОбработки, ДействиеЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкиПроверки"					, Новый Массив);
	Результат.Вставить("ДанныеДляОбработкиБезОшибок"	, Новый Массив);
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СгруппированныеДанные = СгруппироватьДанныеДляОбработкиПоИдентификаторуЯщика(ДанныеДляОбработки);
	
	Для каждого КлючЗначение Из СгруппированныеДанные Цикл
		
		BoxID = КлючЗначение.Ключ;
		
		ОписаниеОшибкиПроверкиКЭП = Модуль_Ядро.КЭП_ДоступноДействиеЭДО(ДействиеЭДО, BoxID);
		Если ЗначениеЗаполнено(ОписаниеОшибкиПроверкиКЭП) Тогда
			
			СгруппированныеДанные.Вставить(BoxId, Новый Массив);
			Модуль_Ядро.ДополнитьМассив(Результат.ОшибкиПроверки, ОписаниеОшибкиПроверкиКЭП);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеПоBoxID Из СгруппированныеДанные Цикл
		Модуль_Ядро.ДополнитьМассив(Результат.ДанныеДляОбработкиБезОшибок, ДанныеПоBoxID.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Показывает пользователям форму с визуализацией ошибок проверок 
//
// Параметры:
//	ОписаниеГрупповойОперации - Структура - см. Новый_ОписаниеГрупповойОперации()
//
&НаКлиенте
Процедура ПоказатьВопрос_НеДляВсехДокументовМожноВыполнитьДействиеКЭП(ОписаниеГрупповойОперации)
		
	ДействияНаФормеВопросаКЭП = ДействияНаФормеВопросаКЭП();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаКЭП.Продолжить			, ДействияНаФормеВопросаКЭП.Продолжить);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок, ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаКЭП.Закрыть			, ДействияНаФормеВопросаКЭП.Закрыть);
	
	ТекстВопроса = 
	"Для работы с электронными документами в Диадоке требуется выпустить квалифицированный сертификат (КЭП).
	|
	|- Чтобы узнать о возможных причинах ошибки и посмотреть инструкции, нажмите на кнопку ""Подробнее"".
	|- Чтобы выполнить действие для доступных документов, нажмите на кнопку ""Продолжить""."; 
	
	ОбработчикЗакрытияВопроса = НовыйОписаниеОповещения("ОбработатьРезультатВыбора_НеДляВсехДокументовМожноВыполнитьДействиеКЭП", ЭтаФорма, ОписаниеГрупповойОперации);
	
	ПоказатьВопросПереопределенная(ОбработчикЗакрытияВопроса, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаКЭП.Закрыть , "Не для всех документов в списке можно выполнить действие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбора_НеДляВсехДокументовМожноВыполнитьДействиеКЭП(ВыбранноеДействие, ОписаниеГрупповойОперации) Экспорт
	
	ДействияНаФормеВопросаКЭП = ДействияНаФормеВопросаКЭП();
	
	ПродолжитьДляДоступных	 = ВыбранноеДействие = ДействияНаФормеВопросаКЭП.Продолжить;
	ОткрытьСписокОшибок		 = ВыбранноеДействие = ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок;
	
	Если ПродолжитьДляДоступных Тогда
		
		ЕстьДанныеДляОбработки = ОписаниеГрупповойОперации.ПараметрыГрупповойОбработки.ДанныеДляОбработки.Количество() > 0;
		
		Если ЕстьДанныеДляОбработки Тогда
			МЧД_НачатьПроверкуДанныхГрупповойОперации(ОписаниеГрупповойОперации);
		КонецЕсли;
		
	ИначеЕсли ОткрытьСписокОшибок Тогда
		
		Метрика_СписокОшибокКЭП(ОписаниеГрупповойОперации.СписокОшибокКЭП);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим",			"ОшибкиКЭППриДействии");
		ПараметрыОткрытияФормы.Вставить("СписокОшибокКЭП",	ОписаниеГрупповойОперации.СписокОшибокКЭП);
		
		ОбработчикЗакрытияФормыHTML = НовыйОписаниеОповещения("ОбработатьЗакрытиеФормыHTMLСообщения", ЭтаФорма, ОписаниеГрупповойОперации);
		
		ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы,
			ОбработчикЗакрытияФормыHTML
		);
		
	КонецЕсли;
		
КонецПроцедуры

// Показывает пользователям форму с визуализацией ошибок проверки КЭП для Пакета
//
// Параметры:
//  СписокОшибокКЭП - Массив - см. КЭП_ПолучитьОшибкиПоСтрокеКонтекста()
//  ДополнительныеПараметры - Структура - произвольные параметры
//
&НаКлиенте
Процедура ПоказатьВопрос_ДляДокументаНевозможноВыполнитьДействиеКЭП(СписокОшибокКЭП) Экспорт
		
	ДействияНаФормеВопросаКЭП = ДействияНаФормеВопросаКЭП();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок, ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок);
	КнопкиВопроса.Добавить(ДействияНаФормеВопросаКЭП.Закрыть			, ДействияНаФормеВопросаКЭП.Закрыть);
	
	ТекстВопроса = 
	"Для работы с электронными документами в Диадоке требуется выпустить квалифицированный сертификат (КЭП).
	|
	|Чтобы узнать о возможных причинах ошибки и посмотреть инструкции, нажмите на кнопку ""Подробнее""."; 
	
	ОбработчикЗакрытияВопроса = НовыйОписаниеОповещения("ОбработатьРезультатВыбора_ДляДокументаНевозможноВыполнитьДействиеКЭП", ЭтаФорма, СписокОшибокКЭП);
	
	ПоказатьВопросПереопределенная(ОбработчикЗакрытияВопроса, ТекстВопроса, КнопкиВопроса, , ДействияНаФормеВопросаКЭП.Закрыть , "Сертификат не является квалифицированным");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбора_ДляДокументаНевозможноВыполнитьДействиеКЭП(ВыбранноеДействие, СписокОшибокКЭП) Экспорт
	
	ДействияНаФормеВопросаКЭП = ДействияНаФормеВопросаКЭП();
	
	ПродолжитьДляДоступных	 = ВыбранноеДействие = ДействияНаФормеВопросаКЭП.Продолжить;
	ОткрытьСписокОшибок		 = ВыбранноеДействие = ДействияНаФормеВопросаКЭП.ОткрытьСписокОшибок;
	
	Если ОткрытьСписокОшибок Тогда
		
		Метрика_СписокОшибокКЭП(СписокОшибокКЭП);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Режим",			"ОшибкиКЭППриДействии");
		ПараметрыОткрытияФормы.Вставить("СписокОшибокКЭП",	СписокОшибокКЭП);
		
		ОткрытьФормуДиадокМодально(
			"ФормаHTMLСообщенияУправляемая",
			ЭтаФорма,
			ПараметрыОткрытияФормы
		);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Метрика_СписокОшибокКЭП(СписокОшибокКЭП)

	КатегорияМетрики	 = Метрика_НазваниеКатегории().НеквалифицированныйСертификат;
	ДействиеМетрики		 = Метрика_НазваниеДействий().Подробнее;
	ЛейблМетрики		 = "";
	ПредставлениеМетрики = "";
	НазваниеФормыДляМетрики = "Неквалифицированный сертификат";
	
	Модуль_Ядро			 = Модуль_ЯдроНаКлиенте();
	TraceId				 = Модуль_Ядро.TraceId();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормыДляМетрики, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, ПредставлениеМетрики, TraceId);
	
	Для каждого ОписаниеОшибкиКЭП Из СписокОшибокКЭП Цикл
	
		Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ОписаниеОшибкиКЭП.BoxID, КатегорияМетрики, ДействиеМетрики, ЛейблМетрики, , ПредставлениеМетрики, TraceId);
	
	КонецЦикла;
	
КонецПроцедуры

// }	КЭП

//{		АВТООБНОВЛЕНИЕ МОДУЛЯ

&НаСервере
Процедура ПодготовитьДанныеДляОбновленияМодуля()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	МоментНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ДанныеДляОбновленияМодуля = Ядро.ДанныеДляОбновленияМодуля();
	
	Ядро.Метрика_ДобавитьЗамер_СборДанныхДляОбновленияМодуля(МоментНачалаЗамера, "НаСервере");
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьДанныеДляОбновленияМодуля()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	МоментНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Ядро.ДополнитьДанныеДляОбновленияМодуля(ДанныеДляОбновленияМодуля);
	
	ЕстьНоваяВерсияМодуля = ДанныеДляОбновленияМодуля.ОписаниеОбновленияМодуля.ЕстьНоваяВерсия;
	
	Ядро.Метрика_ДобавитьЗамер_СборДанныхДляОбновленияМодуля(МоментНачалаЗамера, "НаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодульАвтоматически(Отказ)
	
	РезультатОбновления = Модуль_ЯдроНаКлиенте().ОбновитьМодульАвтоматически(ДанныеДляОбновленияМодуля);
	
	Если РезультатОбновления = "Success" Тогда
		
		ПослеУспешногоОбновленияМодуля();
	
		Отказ = Истина;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУспешногоОбновленияМодуля()
	
	Закрыть();
	
	МестоположенияМодуля = ДанныеДляОбновленияМодуля.Перечисления.МестоположенияМодуля;
	РасположениеМодуля = ДанныеДляОбновленияМодуля.ОписаниеРасположенияМодуля;
	
	Если РасположениеМодуля.Местоположение = МестоположенияМодуля.РасширениеКонфигурации Тогда
		
		УведомитьПользователяОбУспешномОбновленииРасширенияКонфигурации();
		
	Иначе
		
		Попытка
			ПодключитьНовуюВерсиюМодуля();
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ПопроситьПользователяПерезапуститьМодуль();
			Возврат; // чтобы переоткрытие не зациклилось
		КонецПопытки;
		
		ОткрытьФорму(ИмяФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПользователяОбУспешномОбновленииРасширенияКонфигурации()
	
	ОписаниеОповещения = НовыйОписаниеОповещения(
			"ОбработатьДействиеПользователяПослеОбновленияРасширения",
			ЭтаФорма);
	
	ЗаголовокВопроса = "Обновление модуля";
	ТекстСообщения = "Модуль автоматически обновлен до актуальной версии. Для работы с модулем перезапустите программу.";
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Закрыть");
	Кнопки.Добавить(КнопкаПоУмолчанию, "Перезапустить");
	
	ПоказатьВопросПереопределенная(
		ОписаниеОповещения,
		ТекстСообщения,
		Кнопки, ,
		КнопкаПоУмолчанию,
		ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеПользователяПослеОбновленияРасширения(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗавершитьРаботуСистемы(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Подключает новую версию модуля в метаданные сеанса
//
&НаКлиенте
Процедура ПодключитьНовуюВерсиюМодуля()
	
	МестоположенияМодуля = ДанныеДляОбновленияМодуля.Перечисления.МестоположенияМодуля;
	
	РасположениеМодуля = ДанныеДляОбновленияМодуля.ОписаниеРасположенияМодуля;
	
	ВнешняяОбработка = РасположениеМодуля.Ссылка;
	ПутьКФайлу		 = РасположениеМодуля.ПутьКФайлу;
	Местоположение	 = РасположениеМодуля.Местоположение;
	
	Если Местоположение = МестоположенияМодуля.ФайлНаДиске Тогда
		
		ПодключитьОбработкуМодуляИзФайла(ПутьКФайлу);
					
	ИначеЕсли Местоположение = МестоположенияМодуля.ЭлементСправочника Тогда
		
		ПодключитьОбработкуМодуляИзСправочника(ВнешняяОбработка);
		
	Иначе // этого сценария не должно быть
					
		ВызватьИсключение "ПодключениеНовойВерсииМодуля.НекорректноеРасположениеМодуля: " + Местоположение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработкуМодуляИзФайла(ПутьКФайлу)
	
	ДвоичныеДанные	 = Новый ДвоичныеДанные(ПутьКФайлу);
	АдресВХ			 = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ВнешниеОбработки_Подключить(АдресВХ);
	
КонецПроцедуры

&НаСервере	
Процедура ПодключитьОбработкуМодуляИзСправочника(ВнешняяОбработка)
	
	ОбработкаОбъект  = РеквизитФормыВЗначение("Объект");
	
	ДвоичныеДанные	 = ОбработкаОбъект.ДвоичныеДанныеВнешнейОбработки(ВнешняяОбработка);
	АдресВХ			 = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ВнешниеОбработки_Подключить(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура ВнешниеОбработки_Подключить(АдресВХ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ПодключитьВнешнююОбработку(АдресВХ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПопроситьПользователяПерезапуститьМодуль()
	
	Таймаут = 0;
	ОписаниеОповещения = Неопределено;
	ЗаголовокПредупреждения = "Выполнено обновление модуля";
	ТекстПредупреждения = НСтр("ru = 'Перезапустите модуль, пожалуйста.'");
	
	ПоказатьПредупреждениеПереопределенная(
		ОписаниеОповещения,
		ТекстПредупреждения,
		Таймаут,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

//}		АВТООБНОВЛЕНИЕ МОДУЛЯ

//{		ОБЕРТКИ

&НаКлиенте
Функция Общее_СоединитьСтроку(Строки, Разделитель = "")
	
	Результат = Модуль_ЯдроНаКлиенте().СоединитьСтроку(Строки, Разделитель);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура _ОбработатьОшибку(Знач ВидОперации, Знач Ошибка, Знач Пояснение = "")
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Ошибка_Обработать(
		ВидОперации,
		Ошибка,
		Пояснение
	);
	
КонецПроцедуры

//}		ОБЕРТКИ

//{		ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

&НаСервере
Процедура УправлениеПМ_ВыгрузитьВСервис()
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.УправлениеПМ_ПроверитьВерсииФайловИВыгрузитьВСервис();

КонецПроцедуры

//}		ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

//{		СПРАВКА

&НаКлиенте
Процедура Справка_ПоказатьПриПервомЗапуске()
	
	КлючКэша = "СправкаПоказанаНовомуПользователюПриЗапуске";
	СправкаПоказана = Кэш_Прочитать(КлючКэша);
	
	Если СправкаПоказана = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеНастройкиФормы = СохраненныеНастройкиГлавнойФормы();
	Если СохраненныеНастройкиФормы = Неопределено Тогда
		
		Справка_ОткрытьРаздел("НемногоОМодулеШаг1");
		
		СправкаПоказана = Истина;
		Кэш_Поместить(КлючКэша, СправкаПоказана);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура Справка_ОткрытьРаздел(РазделСправки)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РазделСправки", РазделСправки);
	
	ОткрытьФормуДиадокМодально("ФормаСправкиУправляемая", ЭтаФорма, ПараметрыОткрытияФормы);
	
КонецПроцедуры

//}		СПРАВКА


//{		ОЦЕНКА РАБОТЫ МОДУЛЯ

&НаКлиенте
Процедура ПоказатьПлашкуОтзываПоРаботеСКонтрагентами()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	СценарийМодуляДляОтзыва = СценарииМодуля.РаботаСКонтрагентами;
	
	ТребуетсяОценка = ТребуетсяПоказатьПлашкуОтзываПоРаботе();
	
	УстановитьВидимостьКнопокОбратнойСвязи(ТребуетсяОценка);
	УстановитьЗаголовокОценкиРаботыСМодулем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПлашкуОтзываПоРаботеСОплатойСервиса()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	СценарийМодуляДляОтзыва = СценарииМодуля.ОплатаСервиса;
	
	ТребуетсяОценка = ТребуетсяПоказатьПлашкуОтзываПоРаботе();
	
	УстановитьВидимостьКнопокОбратнойСвязи(ТребуетсяОценка);
	УстановитьЗаголовокОценкиРаботыСМодулем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПлашкуОтзываПоРаботеСПоискомДокументовНаОтправку()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	СценарийМодуляДляОтзыва = СценарииМодуля.ПоискДокументовНаОтправку;
	
	ТребуетсяОценка = ТребуетсяПоказатьПлашкуОтзываПоРаботе();
	
	УстановитьВидимостьКнопокОбратнойСвязи(ТребуетсяОценка);
	УстановитьЗаголовокОценкиРаботыСМодулем();
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПоказатьПлашкуОтзываПоРаботе()
	
	Платформа = Модуль_Платформа();
	Результат = Платформа.ОтзывПоРаботеСМодулем_ТребуетсяОценка(СценарийМодуляДляОтзыва);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКнопокОбратнойСвязи(Видимость)
	
	Элементы.ГруппаОценкаРаботыМодуля.Видимость = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокОценкиРаботыСМодулем()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	
	Если СценарийМодуляДляОтзыва = СценарииМодуля.РаботаСКонтрагентами Тогда
		ЗаголовокОценки = НСтр("ru = 'Возникли трудности при работе с контрагентами?'");
	ИначеЕсли СценарийМодуляДляОтзыва = СценарииМодуля.ОплатаСервиса Тогда
		ЗаголовокОценки = НСтр("ru = 'Возникли трудности при оплате?'");
	ИначеЕсли СценарийМодуляДляОтзыва = СценарииМодуля.ПоискДокументовНаОтправку Тогда
		ЗаголовокОценки = НСтр("ru = 'Возникли трудности при поиске документов?'");
	КонецЕсли;
	
	Элементы.ДекорацияОценкаРаботыСМодулем.Заголовок = ЗаголовокОценки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаРаботыСМодулемДа(Команда)
	
	Метрики_ПриНажатии_ОценкаРаботыСМодулемДа();
	ПоказатьФормуОценкиРаботыСМодулем();
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаРаботыСМодулемНет(Команда)
	
	УстановитьВидимостьКнопокОбратнойСвязи(Ложь);
	Метрики_ПриНажатии_ОценкаРаботыСМодулемНет();
	ЗаписатьДатуОценкиРаботыСМодулем(СценарийМодуляДляОтзыва);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуОценкиРаботыСМодулем()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Сценарий", СценарийМодуляДляОтзыва);
	
	ОповещениеОЗакрытииФормы = НовыйОписаниеОповещения("ПослеОбработкиОценкаРаботыСМодулем", ЭтаФорма);
	
	ОткрытьФормуДиадокМодально(
		"ОтзывОРаботеМодуляУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

// Обработчик закрытия формы обратной связи по оцениваемому сценариию работы с модулем
//
// Параметры:
//  Отзыв - Строка, Неопределено - Комментарий пользователя. Неопределено, если отказался оставлять отзыв.
//  ДополнительныеПараметры - Неопределено - Не используется
//
&НаКлиенте
Процедура ПослеОбработкиОценкаРаботыСМодулем(Отзыв, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Отзыв = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Метрики_ЗаписатьОС_ЕстьТрудностиВРаботеСМодулем(Отзыв);
	ЗаписатьДатуОценкиРаботыСМодулем(СценарийМодуляДляОтзыва);
	УстановитьВидимостьКнопокОбратнойСвязи(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДатуОценкиРаботыСМодулем(СценарийМодуля)
	
	МодульОбъекта = ОбработкаОбъект();
	МодульОбъекта.ЗаписатьДатуОценкиРаботыСМодулем(СценарийМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ПриНажатии_ОценкаРаботыСМодулемДа()
	
	Категория = Метрики_КатегорияТрудностиСРаботойСМодулем();
	Действие = Метрики_ДействиеНегативныйОтзывОРаботеСМодулем();
	
	Метрика_ЗаписатьНажатиеКнопки(Категория, Действие);
	
КонецПроцедуры 

&НаКлиенте
Процедура Метрики_ПриНажатии_ОценкаРаботыСМодулемНет()
	
	Категория = Метрики_КатегорияТрудностиСРаботойСМодулем();
	Действие = Метрики_ДействиеПозитивныйОтзывОРаботеСМодулем();
	
	Метрика_ЗаписатьНажатиеКнопки(Категория, Действие);
	Метрики_ЗаписатьОС_НетТрудностейВРаботеСМодулем();
	
КонецПроцедуры 

&НаКлиенте
Процедура Метрики_ЗаписатьОС_ЕстьТрудностиВРаботеСМодулем(Отзыв)
	
	Трассировка = Метрики_ИдентификаторТрассировки();
	Категория = Метрики_КатегорияТрудностиСРаботойСМодулем();
	Действие = Метрики_ДействиеНегативныйОтзывОРаботеСМодулем();
	КоллекцияBoxId = Новый Массив;
	ИдентификаторыПользователей = Новый Массив;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	
	ЕстьПроблемыСОплатой = (СценарийМодуляДляОтзыва = СценарииМодуля.ОплатаСервиса);
	
	СтрокиКонтекста = Ядро.КонтекстСеанса_СтрокиКонтекста(ЕстьПроблемыСОплатой);
	
	Для Каждого СтрокаКонтекста Из СтрокиКонтекста Цикл
		
		ЗначениеКонтекста = СтрокаКонтекста.Значение;
		Если ЕстьПроблемыСОплатой 
			И НЕ ЗначениеКонтекста.ТребуетсяОплатаСервиса Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЯщика = Ядро.АдресЯщикаВИдентификатор(ЗначениеКонтекста.BoxId);
		ИдентификаторПользователя = ЗначениеКонтекста.ОписаниеПользователя.Id;
		
		КоллекцияBoxId.Добавить(ИдентификаторЯщика);
		
		Если ИдентификаторыПользователей.Найти(ИдентификаторПользователя) = Неопределено Тогда
			ИдентификаторыПользователей.Добавить(ИдентификаторПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторБазы1С = Ядро.ОбщийКонтекст_Прочитать("ИдентификаторБазы1С");
	
	Переменные = Новый Структура;
	Переменные.Вставить("BoxId", КоллекцияBoxId);
	Переменные.Вставить("BaseID", ИдентификаторБазы1С);
	Переменные.Вставить("UserID", ИдентификаторыПользователей);
	Переменные.Вставить("Комментарий", Отзыв);
	
	Ядро.Метрика_ЗаписатьОбратнуюСвязь(
		Категория,
		Действие,
		Переменные,
		Трассировка);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьОС_НетТрудностейВРаботеСМодулем()
	
	Трассировка = Метрики_ИдентификаторТрассировки();
	Категория = Метрики_КатегорияТрудностиСРаботойСМодулем();
	Действие = Метрики_ДействиеПозитивныйОтзывОРаботеСМодулем();
	КоллекцияBoxId = Новый Массив;
	ИдентификаторыПользователей = Новый Массив;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	
	ЕстьПроблемыСОплатой = Ложь;
	Если СценарийМодуляДляОтзыва = СценарииМодуля.ОплатаСервиса Тогда
		ЕстьПроблемыСОплатой = Истина;
	КонецЕсли;
	
	СтрокиКонтекста = Ядро.КонтекстСеанса_СтрокиКонтекста(ЕстьПроблемыСОплатой);
	Для Каждого СтрокаКонтекста Из СтрокиКонтекста Цикл
		
		ЗначениеКонтекста = СтрокаКонтекста.Значение;
		
		Если ЕстьПроблемыСОплатой И НЕ ЗначениеКонтекста.ТребуетсяОплатаСервиса Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЯщика = Ядро.АдресЯщикаВИдентификатор(ЗначениеКонтекста.BoxId);
		ИдентификаторПользователя = ЗначениеКонтекста.ОписаниеПользователя.Id;
		
		КоллекцияBoxId.Добавить(ИдентификаторЯщика);
		
		Если ИдентификаторыПользователей.Найти(ИдентификаторПользователя) = Неопределено Тогда
			ИдентификаторыПользователей.Добавить(ИдентификаторПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторБазы1С = Ядро.ОбщийКонтекст_Прочитать("ИдентификаторБазы1С");
	
	Переменные = Новый Структура;
	Переменные.Вставить("BoxId", КоллекцияBoxId);
	Переменные.Вставить("BaseID", ИдентификаторБазы1С);
	Переменные.Вставить("UserID", ИдентификаторыПользователей);
	
	Ядро.Метрика_ЗаписатьОбратнуюСвязь(
		Категория,
		Действие,
		Переменные,
		Трассировка);
	
КонецПроцедуры

&НаКлиенте
Функция Метрики_ИдентификаторТрассировки()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Результат = Ядро.TraceId();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрики_КатегорияТрудностиСРаботойСМодулем()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	СценарииМодуля = Ядро.Перечисление_СценарииМодуляДляОтзывов();
	
	Если СценарийМодуляДляОтзыва = СценарииМодуля.РаботаСКонтрагентами Тогда
		Результат = "ТрудностиСКонтрагентами";
	ИначеЕсли СценарийМодуляДляОтзыва = СценарииМодуля.ОплатаСервиса Тогда
		Результат = "ТрудностиСОнлайнПредложениями";
	ИначеЕсли СценарийМодуляДляОтзыва = СценарииМодуля.ПоискДокументовНаОтправку Тогда
		Результат = "ТрудностиПриПоискеДокументов";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеПозитивныйОтзывОРаботеСМодулем()
	Возврат "Нет"; // Пользователь сказал, что трудностей нет
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеНегативныйОтзывОРаботеСМодулем()
	Возврат "Да"; // Пользователь сказал, что есть трудности и оставил отзыв
КонецФункции

//}		ОЦЕНКА РАБОТЫ МОДУЛЯ


//{		ПРЕДЛОЖЕНИЯ ДЛЯ ПОКУПКИ

&НаКлиенте
Функция ДляТекущегоКонтекстаЕстьПредложенияДляПокупки()
	
	Результат = Ложь;
	
	ХранилищеКонтекстаСеанса = Модуль_ЯдроНаКлиенте().ХранилищеКонтекстаСеанса();
	
	Для Каждого ЭлементКонтекста Из ХранилищеКонтекстаСеанса Цикл
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаКонтекста = ЭлементКонтекста.Значение;
		
		Если СтрокаКонтекста.ТребуетсяОплатаСервиса Тогда
			Результат = Истина;
		Иначе
			
			Для Каждого ЛицевойСчетЯщика Из СтрокаКонтекста.ЛицевыеСчета Цикл
				
				Если ЛицевойСчетЯщика.ПредложенияДляПокупки.Количество() > 0 Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПредложенияДляПокупки(Команда)

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Режим", "ПредложенияДляПокупки");
	
	ОткрытьФормуДиадокМодально(
		"ФормаHTMLСообщенияУправляемая",
		ЭтаФорма,
		ПараметрыОткрытияФормы,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
	Метрика_ОткрытьПредложенияДляПокупки();
	ПоказатьПлашкуОтзываПоРаботеСОплатойСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОткрытьПредложенияДляПокупки()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	НазваниеФормы = Метрика_НазваниеФормы();
	КатегорияМетрики = Метрика_НазваниеКатегории().ОнлайнПродажи;
	ДействиеМетрики	= "Требуется оплата";
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);
	
	ХранилищеКонтекстаСеанса = Модуль_Ядро.ХранилищеКонтекстаСеанса();
	
	Для Каждого ЭлементКонтекста Из ХранилищеКонтекстаСеанса Цикл
		
		СтрокаКонтекста = ЭлементКонтекста.Значение;
		BoxId = СтрокаКонтекста.BoxId;
		
		Для Каждого ЛицевойСчетЯщика Из СтрокаКонтекста.ЛицевыеСчета Цикл
			
			Если ЛицевойСчетЯщика.ПредложенияДляПокупки.Количество() > 0
				ИЛИ СтрокаКонтекста.ТребуетсяОплатаСервиса Тогда
				
				Переменные = Новый Соответствие;
				Переменные.Вставить("AccountId", ЛицевойСчетЯщика.ЛицевойСчет);
				
				Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(BoxId, КатегорияМетрики, ДействиеМетрики, ,Переменные);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//}		ПРЕДЛОЖЕНИЯ ДЛЯ ПОКУПКИ

&НаКлиенте
Процедура Метрика_ПоказатьПредупреждениеОНеДоступностиКонфигурацииНаТарифе()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Метка = "";
	КатегорияМетрики = Метрика_КонфигурацияНеДоступна();
	ДействиеМетрики = Метрика_ОткрытиеФормы();
	
	Переменные = Новый Структура;
	Переменные.Вставить("Причина", СтатусПоддержкиКонфигурации);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику(
		КатегорияМетрики,
		ДействиеМетрики,
		Метка,
		Переменные);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Метрика_УзнатьПодробнееОНеДоступностиКонфигурацииНаТарифе()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	НаименованиеФормы = Метрика_НазваниеФормы();
	КатегорияМетрики = Метрика_КонфигурацияНеДоступна();
	ДействиеМетрики = Метрика_УзнатьПодробнее();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НаименованиеФормы,
		КатегорияМетрики,
		ДействиеМетрики);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику(
		КатегорияМетрики,
		ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьВернутьсяКВыборуОрганизаций()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	НаименованиеФормы = Метрика_НазваниеФормы();
	КатегорияМетрики = Метрика_КонфигурацияНеДоступна();
	ДействиеМетрики = Метрика_ВернутьсяКВыборуОрганизаций();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НаименованиеФормы,
		КатегорияМетрики,
		ДействиеМетрики);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику(
		КатегорияМетрики,
		ДействиеМетрики);
	
КонецПроцедуры

	
&НаКлиенте
Процедура Метрика_ПоказатьПредупреждениеОТарифе()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	КатегорияМетрики = Метрика_НастройкаНедоступна();
	ДействиеМетрики = Метрика_ОткрытиеФормы();
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы, 
		КатегорияМетрики, 
		ДействиеМетрики);
		
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
		КатегорияМетрики, 
		ДействиеМетрики);

КонецПроцедуры

&НаКлиенте
Функция Метрика_ОткрытиеФормы()
	
	Возврат "ОткрытиеФормы";

КонецФункции

&НаКлиенте
Функция Метрика_НастройкаНедоступна()
	
	Возврат "НастройкаНедоступна";

КонецФункции

&НаКлиенте
Функция Метрика_КонфигурацияНеДоступна()
	
	Возврат "КонфигурацияНедоступна";

КонецФункции

&НаКлиенте
Функция Метрика_УзнатьПодробнее()
	
	Возврат "УзнатьПодробнее";

КонецФункции

&НаКлиенте
Функция Метрика_ВернутьсяКВыборуОрганизаций()
	
	Возврат "ВернутьсяКВыборуОрганизаций";

КонецФункции

//{		НАЙТИ НУЖНЫЙ ДОКУМЕНТ

&НаКлиенте
Процедура ОткрытьПомощникПоискаДокумента(Команда)
	
	Метрики_ЗаписатьНажатие_НайтиНужныйДокумент();
	Метрики_ЗаписатьСтатистику_НайтиНужныйДокумент();
	
	ОбработчикОткрытияФормыПоискаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_НайтиНужныйДокумент()
	
	КатегорияМетрики = Метрика_КатегорияНайтиНужныйДокумент();
	ДействиеМетрики = Метрика_ДействиеОткрытиеПомощника();
	
	Метрика_ЗаписатьНажатиеКнопки(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_НайтиНужныйДокумент()
	
	КатегорияМетрики = Метрика_КатегорияНайтиНужныйДокумент();
	ДействиеМетрики = Метрика_ДействиеОткрытиеПомощника();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытияФормыПоискаДокумента()
	
	ОбработчикЗакрытия = НовыйОписаниеОповещения(
		"ОбработчикЗакрытияФормыПоискаДокумента",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.ПоказатьПомощникПоискаДокумента(ОбработчикЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыПоискаДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПоказатьПлашкуОтзываПоРаботеСПоискомДокументовНаОтправку();
	
КонецПроцедуры

//}		НАЙТИ НУЖНЫЙ ДОКУМЕНТ
