         
&НаСервере
Перем ОбработкаОбъект;

//{	СЕРВИСНЫЕ МЕТОДЫ

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредупреждениеПользователю(ОписаниеОповещения, ТекстПредупреждения, Таймаут = 0, Заголовок = "")
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(ОписаниеОповещения , ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры

//}	СЕРВИСНЫЕ МЕТОДЫ


//{ ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОбщийКонтекст();
	
	РежимыПрокси = Модуль_ЯдроНаСервере().АПИ_РежимыИспользованияПрокси();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), Метрика_НазваниеКатегории());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_ДействиеСФормой(Метрика_НазваниеФормы(), Метрика_НазваниеКатегории(), Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбщийКонтекст()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
КонецПроцедуры

//} ОСНОВНЫЕ СОБЫТИЯ ФОРМЫ


//{	ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ
          
&НаКлиенте
Процедура НадписьЖурналДиагностикиНажатие(Элемент)
	
	НазваниеФормы = Метрика_НазваниеФормы();
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики = "Диагностика соединения";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);
	
	НастройкиПрокси = Ядро.АПИ_Новый_НастройкиПрокси(
		РежимПрокси,
		АдресПроксиСервера,
		ПортПроксиСервера,
		ЛогинПроксиСервера,
		ПарольПроксиСервера
	);
	
	НастройкиПрокси = Новый ФиксированнаяСтруктура(НастройкиПрокси);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("НастройкиПрокси", НастройкиПрокси);
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("ЖурналДиагностикиУправляемая", ЭтаФорма, ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастроитьПроксиНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Настроить прокси";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ПоказатьНастройкиПрокси = Не ПоказатьНастройкиПрокси;
	
	УправлениеЭлементамиНастройкиПрокси(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПроксиСервераПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекПроксиМодуля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоединение(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Установить соединение";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	СоединениеУстановлено = УстановитьСоединениеНаСервере();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СоединениеУстановлено", СоединениеУстановлено);
	
	Если СоединениеУстановлено Тогда
		ТекстСообщения = "Соединение успешно установлено";
	Иначе
		ТекстСообщения = "Соединение не установлено!
						 |Перейдите в журнал диагностики.";
	КонецЕсли;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Режим прокси",		РежимПрокси);
	Переменные.Вставить("Адрес заполнен",	ЗначениеЗаполнено(АдресПроксиСервера));
	Переменные.Вставить("Порт заполнен",	ЗначениеЗаполнено(ПортПроксиСервера));
	Переменные.Вставить("Логин заполнен",	ЗначениеЗаполнено(ЛогинПроксиСервера));
	Переменные.Вставить("Пароль заполнен",	ЗначениеЗаполнено(ПарольПроксиСервера));
	Переменные.Вставить("Успешно",			СоединениеУстановлено);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(Неопределено, КатегорияМетрики, ДействиеМетрики, , Переменные);

	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ПроверкаСоединенияЗавершение", ЭтаФорма, ДопПараметры);
	ПредупреждениеПользователю(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура НужнаПомощьНажатие(Элемент)
	
	ОткрытьЦентрПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦентрПоддержки()
	
	НазваниеФормы	= Метрика_НазваниеФормы();
	Категория		= Метрика_НазваниеКатегории();
	
	ОсновнаяФорма().ЦентрПоддержки_Открыть(Категория, НазваниеФормы);
	
КонецПроцедуры

//} ИНТЕРФЕЙСНЫЕ ОБРАБОТЧИКИ


//**********************************************
//{		СЕРВИСНЫЕ ФУНКЦИИ

// Вызывается после закрытия окна предупреждения с результатом проверки соединения.
// См. метод УстановитьСоединение()
//
// Параметры:
//	ДополнительныеПараметры - Структура - структура параметров (см. метод УстановитьСоединение)
//
&НаКлиенте
Процедура ПроверкаСоединенияЗавершение(ДополнительныеПараметры = Неопределено) Экспорт
	
	СоединениеУстановлено = ДополнительныеПараметры.СоединениеУстановлено;
	
	Если СоединениеУстановлено Тогда
		Закрыть(СоединениеУстановлено);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ИнициализироватьВариантыРежимовПроксиСервера();
	
	ЗаполнитьНастройкиПрокси();
	
	УстановитьСвойстваФормыТакси();
	
	УправлениеЭлементамиНастройкиПрокси(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантыРежимовПроксиСервера()
	
	СписокВыбора = Элементы.РежимПроксиСервера.СписокВыбора;
	
	СписокВыбора.Добавить(РежимыПрокси.БезПрокси						, "Не использовать");
	СписокВыбора.Добавить(РежимыПрокси.ИспользоватьСистемныеНастройки 	, "Настройки из Internet Explorer или inetcfg.xml");
	СписокВыбора.Добавить(РежимыПрокси.ИспользоватьНастройкиМодуля		, "Ручная настройка");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПрокси()
	
	НастройкиПрокси = Модуль_ЯдроНаСервере().ОбщиеНастройки_НастройкиПрокси();

	РежимПрокси 		= НастройкиПрокси.РежимПрокси;
	ПортПроксиСервера	= НастройкиПрокси.ПортПроксиСервера;
	АдресПроксиСервера 	= НастройкиПрокси.АдресПроксиСервера;
	ЛогинПроксиСервера	= НастройкиПрокси.ЛогинПроксиСервера;
	ПарольПроксиСервера	= НастройкиПрокси.ПарольПроксиСервера;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	Если Не ВариантИнтерфейсаКлиентскогоПриложенияТакси() Тогда
		Возврат;
	КонецЕсли;
	
	// ГоризонтальноеПоложениеВГруппе = Центр
	
	СвойствоГоризонтальноеПоложениеВГруппе = Новый Структура("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	
	ЗаполнитьЗначенияСвойств(Элементы.УстановитьСоединение, СвойствоГоризонтальноеПоложениеВГруппе);
	
	// АвтоМаксимальнаяШирина = Ложь
	// Высота = 0
	
	СвойстваЭлемента = Новый Структура();
	СвойстваЭлемента.Вставить("Высота", 0);
	СвойстваЭлемента.Вставить("АвтоМаксимальнаяШирина", Ложь);
		
	ЗаполнитьЗначенияСвойств(Элементы.НадписьПроверьтеПодключение	, СвойстваЭлемента,, "Высота");
	ЗаполнитьЗначенияСвойств(Элементы.НадписьНетПодключения			, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьЖурналДиагностики		, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьНастроитьПрокси		, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.НадписьНужнаПомощь			, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.КартинкаЖурналДиагностики		, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.КартинкаНастроитьПрокси		, СвойстваЭлемента);
	ЗаполнитьЗначенияСвойств(Элементы.КартинкаНужнаПомощь			, СвойстваЭлемента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиНастройкиПрокси(Форма)
	
	Элементы = Форма.Элементы;

	Элементы.ГруппаНастройкаПроксиСервера.Видимость = Форма.ПоказатьНастройкиПрокси;
	
	Если Форма.ПоказатьНастройкиПрокси Тогда
		
		УстановитьДоступностьНастроекПроксиМодуля(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНастроекПроксиМодуля(Форма)
	
	Элементы = Форма.Элементы;
	
	РежимПрокси  = Форма.РежимПрокси;
	РежимыПрокси = Форма.РежимыПрокси;
	
	ДоступностьНастроекПроксиМодуля = (РежимПрокси = РежимыПрокси.ИспользоватьНастройкиМодуля);
	
	Элементы.ГруппаНастройкиПроксиМодуля.Доступность = ДоступностьНастроекПроксиМодуля;
	
КонецПроцедуры

&НаСервере
Функция УстановитьСоединениеНаСервере()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	НастройкиПрокси = Модуль_Ядро.АПИ_Новый_НастройкиПрокси(РежимПрокси,
															АдресПроксиСервера,
															ПортПроксиСервера,
															ЛогинПроксиСервера,
															ПарольПроксиСервера);
	
	СоединениеУстановлено = Модуль_Ядро.АПИ_ПроверитьСоединениеDiadocAPI(НастройкиПрокси);
	
	Если СоединениеУстановлено Тогда
		
		СохранитьНастройкиПроксиНаСервере(НастройкиПрокси);
		
	КонецЕсли;
	
	Возврат СоединениеУстановлено;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиПроксиНаСервере(НастройкиПрокси)
	
	Если НастройкиПроксиСервераЗаполнены(НастройкиПрокси) Тогда
		
		Модуль_ЯдроНаСервере().ОбщиеНастройки_СохранитьНастройкиПрокси(НастройкиПрокси);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиПроксиСервераЗаполнены(НастройкиПрокси)
	
	НастройкиЗаполнены = Ложь;
	
	Если НастройкиПрокси.РежимПрокси = РежимыПрокси.ИспользоватьНастройкиМодуля Тогда
	 
	 	НастройкиЗаполнены = ЗначениеЗаполнено(НастройкиПрокси.АдресПроксиСервера);
		
	Иначе
		
		НастройкиЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат НастройкиЗаполнены;
	
КонецФункции

&НаСервере
Функция ВариантИнтерфейсаКлиентскогоПриложенияТакси()
	
	Если Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.10") Тогда
		
		ТекущийВариант  = Вычислить("КлиентскоеПриложение.ТекущийВариантИнтерфейса()");
		ВариантТакси 	= Вычислить("ВариантИнтерфейсаКлиентскогоПриложения.Такси");
		Результат 		= (ТекущийВариант = ВариантТакси);
	
	ИначеЕсли Не Модуль_ЯдроНаСервере().ПриложениеСтаршеВерсии("8.3.3") Тогда
		
		ТекущийВариант  = Вычислить("ТекущийВариантИнтерфейсаКлиентскогоПриложения()");
		ВариантТакси 	= Вычислить("ВариантИнтерфейсаКлиентскогоПриложения.Такси");
		Результат 		= (ТекущийВариант = ВариантТакси);
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}		СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Ошибка соединения с сервером Диадок";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Возврат "Настройка соединения";
	
КонецФункции

&НаКлиенте
Процедура АдресПроксиСервераПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Адрес";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

КонецПроцедуры

&НаКлиенте
Процедура ПортПроксиСервераПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Порт";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПроксиСервераПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Логин";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПроксиСервераПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Пароль";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры
