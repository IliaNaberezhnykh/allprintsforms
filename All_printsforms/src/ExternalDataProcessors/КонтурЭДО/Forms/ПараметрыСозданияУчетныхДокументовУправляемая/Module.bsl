
//{ ОписаниеПеременных

&НаСервере
Перем ОбработкаОбъект;

//} ОписаниеПеременных


//{ ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОбщийКонтекст();
	
	ЗаполнитьТаблицуНастроек();
	
	УстановитьЗаголовокФормы();
	
	УстановитьЗаголовкиКолонокТаблицыНастроек();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

//} ОбработчикиСобытийФормы


//{ ОбработчикиСобытийЭлементовТаблицыФормыНастройкиОбработкиДокументов

&НаКлиенте
Процедура НастройкиОбработкиДокументовПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСписокВыбораОперацийТекущейНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбработкиДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбработкиДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбработкиДокументовИдентификаторОперацииПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеОперацииТекущейНастройки();
	
КонецПроцедуры

//} ОбработчикиСобытийЭлементовТаблицыФормыНастройкиОбработкиДокументов


//{ ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	СохранитьНастройкиСозданияДокументов();
	Результат = Истина;
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Результат = Неопределено;
	Закрыть(Результат);
	
КонецПроцедуры

//} ОбработчикиКомандФормы


//{ СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуНастроек()
	
	АдресНастроекОбработкиДокументов = Параметры.АдресНастроекОбработкиДокументов;
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроекОбработкиДокументов);
	
	НастройкиОбработкиДокументов.Загрузить(Настройки);
	
	Для Каждого Запись Из НастройкиОбработкиДокументов Цикл
		Запись.ПредставлениеОперации = ПредставлениеЭлементаСпискаПоЗначению(Запись.ДоступныеОперации, Запись.ИдентификаторОперации);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСозданияДокументов()
	
	НовыеНастройки = РеквизитФормыВЗначение("НастройкиОбработкиДокументов");
	ПоместитьВоВременноеХранилище(НовыеНастройки, АдресНастроекОбработкиДокументов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭлементаСпискаПоЗначению(СписокЗначений, Значение)
	
	Результат = "";
	
	ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
	
	Если ЭлементСписка <> Неопределено Тогда
		Результат = ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Виды документов'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокТаблицыНастроек()
	
	Элементы.НастройкиОбработкиДокументовПредставлениеНастройки.Заголовок = НСтр("ru = 'Документ'; en = 'Document'");
	Элементы.НастройкиОбработкиДокументовИдентификаторОперации.Заголовок = НСтр("ru = 'Вид операции'; en = 'Operation type'");
	Элементы.НастройкиОбработкиДокументовЦенаВключаетНДС.Заголовок = НСтр("ru = 'Цена включает НДС'; en = 'Price includes VAT'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеПредставлениеОперации = Новый ПолеКомпоновкиДанных("НастройкиОбработкиДокументов.ПредставлениеОперации");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПредставлениеОперации);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеПредставлениеОперации;
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОбработкиДокументовИдентификаторОперации.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеОперацииТекущейНастройки()
	
	ТекущаяНастройка = Элементы.НастройкиОбработкиДокументов.ТекущиеДанные;
	
	Если ТекущаяНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяНастройка.ПредставлениеОперации = ПредставлениеЭлементаСпискаПоЗначению(ТекущаяНастройка.ДоступныеОперации,
		ТекущаяНастройка.ИдентификаторОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОперацийТекущейНастройки()
	
	ТекущаяНастройка = Элементы.НастройкиОбработкиДокументов.ТекущиеДанные;
	
	Если ТекущаяНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.НастройкиОбработкиДокументовИдентификаторОперации.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого Операция Из ТекущаяНастройка.ДоступныеОперации Цикл
		СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

//} СлужебныеПроцедурыИФункции


//{ СервисныеМетоды

&НаСервере
Процедура УстановитьОбщийКонтекст()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма()
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

//} СервисныеМетоды
