
&НаСервере
Перем ОбработкаОбъект;

//{		Сервисные методы

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоУправляемаяФорма()
	
	Возврат (СтрДлина(ТипЗнч(ЭтаФорма)) > 5);
	
КонецФункции

//}		Сервисные методы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Элементы.СправочникСписокСинхронизироватьССервером.Видимость = Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	
	ОбновитьСписокНаСервере();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьССервером(Команда)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Синхронизировать с сервером";
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		Метрика_НазваниеФормы(),
		КатегорияМетрики,
		ДействиеМетрики
	);
	
	Ядро.Справочники_ВыполнитьСинхронизацию();
	
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Обновить";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	ОбновитьСписокНаСервере();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	СправочникСписок.Очистить();
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Модуль_Ядро.КонтекстСеанса_ОбновитьДанныеЯщиков();
	
	ДобавитьНеоплаченные = НЕ ФормаОткрытаДляВыбора();
	МассивОрганизаций = Модуль_Ядро.Организации_СписокОрганизацийПоКонтексту(ДобавитьНеоплаченные);
	
	Для Каждого СтруктураОрганизации Из МассивОрганизаций Цикл
		
		НоваяСтрока = СправочникСписок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОрганизации);
							
		СвязанныеСправочники = Модуль_Ядро.Организации_СопоставленныеВ1С(СтруктураОрганизации); 
		
		НоваяСтрока.ПредставлениеСвязи	= ОбработкаОбъект().ПредставлениеСвязейВСписке(СвязанныеСправочники, "Организации");
		НоваяСтрока.ДанныеОрганизации	= ОрганизацияВСтрокуДанных(СтруктураОрганизации);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ФормаОткрытаДляВыбора()
	
	Возврат Параметры.РежимВыбораИзСписка;
	
КонецФункции

&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Выбрать организацию";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные		= Элементы.СправочникСписок.ТекущиеДанные;
	ДанныеОрганизации	= ОрганизацияИзСтрокиДанных(ТекущиеДанные.ДанныеОрганизации);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);

	Если Параметры.РежимВыбораИзСписка Тогда
		ЭтаФорма.Закрыть(ДанныеОрганизации);
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID",					ДанныеОрганизации.ID);
		ПараметрыФормы.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
		ПараметрыФормы.Вставить("ИмяСправочника",		"Организации");
		
		ОсновнаяФорма().ОткрытьФормуДиадокМодально("ФормаЭлементаСправочникаУправляемая", ЭтаФорма, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Диадок_Сохранение_Организация" Тогда
		ОбновитьСписокНаСервере();
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ОрганизацияВСтрокуДанных(СтруктураОрганизации)
	
	Результат = ЗначениеВСтрокуВнутр(СтруктураОрганизации);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияИзСтрокиДанных(ДанныеСтрокиТЧ)
	
	Результат = ЗначениеИзСтрокиВнутр(ДанныеСтрокиТЧ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СправочникСписокПредставлениеСвязи.Имя);
	
	ЭлементОтбораУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораУО.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СправочникСписок.ПредставлениеСвязи");
	ЭлементОтбораУО.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораУО.ПравоеЗначение 	= ОбработкаОбъект().ПредставлениеСвязей_НеВыбрана();
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Форма списка организаций";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Возврат "Действия в списке организаций";
	
КонецФункции
