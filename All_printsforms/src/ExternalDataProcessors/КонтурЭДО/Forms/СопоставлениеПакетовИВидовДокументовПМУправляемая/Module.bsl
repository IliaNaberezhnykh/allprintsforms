
&НаСервере
Перем ОбработкаОбъект;

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	ДанныеСопоставления = Модуль_ЯдроНаСервере().СопоставлениеДанныхПМ_ДанныеДляСопоставления();
	
	Для Каждого СтрокаТЗ Из ДанныеСопоставления.ТаблицаВидовПакетов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВидовПакетов.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ДанныеСопоставления.ТаблицаВидовДокументов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВидовДокументов.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ДанныеСопоставления.ТаблицаВидовГруппировок Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВидовГруппировкиПолученных.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для Каждого текЭлемент Из ДанныеСопоставления.СписокЭлементов_ВидыПакетов Цикл
		Элементы.ТаблицаВидовПакетовСсылка.СписокВыбора.Добавить(текЭлемент.Значение, текЭлемент.Представление);			
	КонецЦикла;
	
	Для Каждого текЭлемент Из ДанныеСопоставления.СписокЭлементов_ВидыДокументов Цикл
		Элементы.ТаблицаВидовДокументовСсылка.СписокВыбора.Добавить(текЭлемент.Значение, текЭлемент.Представление);			
	КонецЦикла;
	
	Для Каждого текЭлемент Из ДанныеСопоставления.СписокЭлементов_ВидыГруппировок Цикл
		Элементы.ТаблицаВидовГруппировкиПолученныхСсылка.СписокВыбора.Добавить(текЭлемент.Значение, текЭлемент.Представление);			
	КонецЦикла;
	
	СписокТиповДокументов 			= ДанныеСопоставления.СписокТиповДокументов;
	СпискиФункцийТиповДокументов 	= ДанныеСопоставления.СпискиФункцийТиповДокументов;
	
	Элементы.ТаблицаВидовДокументовТипДокумента.Видимость = ДанныеСопоставления.УстаревшийВариантОпределенияВидовДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидовДокументовПередНачаломИзменения(Элемент, Отказ)
	
	СписокВыбора = Элементы.ТаблицаВидовДокументовФункцияДокументаAPI.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокФункций = Неопределено;
	СпискиФункцийТиповДокументов.Свойство(Элементы.ТаблицаВидовДокументов.ТекущиеДанные.ТипДокументаAPI, СписокФункций);
	
	Если СписокФункций <> Неопределено Тогда
		Для Каждого ФункцияДокумента Из СписокФункций Цикл
			СписокВыбора.Добавить(ФункцияДокумента.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидовГруппировкиПолученныхТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаВидовГруппировкиПолученных.ТекущиеДанные;
	
	Для Каждого ЭлементСписка Из СписокТиповДокументов Цикл		
		ЭлементСписка.Пометка = (Найти(ТекущиеДанные.ТипыДокументов + ",", ЭлементСписка.Значение + ",") <> 0);
	КонецЦикла;
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("СписокТиповДокументовПослеОтметкиЭлементов", ЭтаФорма,
																 ТекущиеДанные);
	ОсновнаяФорма().ПоказатьОтметкуЭлементов(СписокТиповДокументов, ОписаниеОповещения,
											 "Выберите типы для группировки");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповДокументовПослеОтметкиЭлементов(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры;
	ТекущиеДанные.ТипыДокументов = "";
	
	Для Каждого ЗначениеСписка Из СписокТиповДокументов Цикл
		Если ЗначениеСписка.Пометка Тогда
			ТекущиеДанные.ТипыДокументов = ?(ТекущиеДанные.ТипыДокументов = "", ЗначениеСписка.Значение,
											 ТекущиеДанные.ТипыДокументов + "," + ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНезаполненныеДанные()
		
	Результат = Ложь;
	
	Для Каждого СтрокаТЗ Из ТаблицаВидовПакетов Цикл
		Результат = (Результат ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЗ.Ссылка));
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаВидовДокументов Цикл
		Результат = (Результат ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЗ.Ссылка));
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаВидовГруппировкиПолученных Цикл
		Результат = (Результат ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЗ.Ссылка));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСопоставление(Команда)
	
	Если ЕстьНезаполненныеДанные() Тогда
		
		ТекстВопроса = "Для видов, которые не сопоставлены вручную, будут автоматически созданы новые соответствующие элементы.
						|Продолжить автоматическое сопоставление?";
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Оповещение = ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикВыполнитьСопоставление", ЭтаФорма);
		ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим,, , );
		
	Иначе
		ОбработчикВыполнитьСопоставление();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполнитьСопоставление(КодОтвета=Неопределено, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСопоставлениеНаСервере();
	ЭтаФорма.Закрыть();
	Оповестить("Диадок_ОбновитьГлавныйСписок");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСопоставлениеНаСервере()
	
	Модуль_ЯдроНаСервере().СопоставлениеДанныхПМ_ВыполнитьСопоставление(ТаблицаВидовПакетов, ТаблицаВидовДокументов, ТаблицаВидовГруппировкиПолученных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипыДокументовAPI(Команда)
	
	ОбновитьТипыДокументовAPIНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыДокументовAPIНаСервере()
	
	Модуль_ЯдроНаСервере().ТипыДокументовAPI_Обновить();
	
КонецПроцедуры






