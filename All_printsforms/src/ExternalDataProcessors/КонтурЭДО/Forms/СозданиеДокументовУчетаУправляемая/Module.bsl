
//{ ОписаниеПеременных

&НаСервере
Перем ОбработкаОбъект;

//} ОписаниеПеременных


//{ ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОбщийКонтекст();
	
	ВходящиеДанные = Параметры.ДанныеДляОбработки;
	ПрочитатьОбработатьВходящиеДанные(ВходящиеДанные);
	
	ПрочитатьНоменклатуруЭлектронныхДокументов();
	
	УстановитьРежимРедактированияНастроекСоздания();
	
	НастроитьИндикациюОшибокНастроекПакетнойОбработки();
	НастроитьИндикациюОшибокСопоставленияКонтрагентов();
	
КонецПроцедуры

//} ОбработчикиСобытийФормы


//{ ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторОперацииПриИзменении(Элемент)
	
	ОбновитьПараметрыМононастройкиВХранилище();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ОбновитьПараметрыМононастройкиВХранилище();
	
КонецПроцедуры

//} ОбработчикиСобытийЭлементовШапкиФормы


//{ ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройкиПакетногоСозданияДокументов(Команда)
	
	Метрики_ЗаписатьНажатие_ОткрытьНастройкиСозданияДокументов();
	ПоказатьНастройкиПакетногоСозданияДокументов(АдресНастроекОбработкиДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСопоставленияКонтрагентов(Команда)
	
	Метрики_ЗаписатьНажатие_ОткрытьСопоставлениеКонтрагентов();
	ПоказатьПомощникСопоставленияКонтрагентов(АдресТаблицыСопоставленияКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникСопоставленияНоменклатуры(Команда)
	
	Метрики_ЗаписатьНажатие_ОткрытьСопоставлениеНоменклатуры();
	
	Если ЕстьНоменклатура Тогда
		ПоказатьПомощникСопоставленияНоменклатуры(АдресТаблицыСопоставленияНоменклатуры);
	Иначе
		СообщитьЧтоНетДанныхПоНоменклатуре();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Метрики_ЗаписатьНажатие_СоздатьДокументы();
	
	СохранитьПараметрыОбработкиЭД();
	
	Результат = ПодготовитьДанныеДляОбработки();
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Метрики_ЗаписатьНажатие_Отменить();
	
	Результат = Неопределено;
	Закрыть(Результат);
	
КонецПроцедуры

//} ОбработчикиКомандФормы


//{ ИнтерактивныеДействия

&НаКлиенте
Процедура ПоказатьНастройкиПакетногоСозданияДокументов(НастройкиСоздания)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбработкиДокументов", НастройкиСоздания);
	
	ДополнительныеПараметры = Новый Структура;
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыНастроекСозданияДокументов",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ГлавнаяФорма.ОткрытьФормуДиадокМодально(
		"ПараметрыСозданияУчетныхДокументовУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникСопоставленияКонтрагентов(ТаблицаСопоставленияИлиАдресВХ)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыСопоставленияКонтрагентов", ТаблицаСопоставленияИлиАдресВХ);
	
	ДополнительныеПараметры = Новый Структура;
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыСопоставленияКонтрагентов",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ГлавнаяФорма.ОткрытьФормуДиадокМодально(
		"СопоставлениеКонтрагентовУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникСопоставленияНоменклатуры(ТаблицаСопоставленияИлиАдресВХ)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыНоменклатурыДляСопоставления", ТаблицаСопоставленияИлиАдресВХ);
	
	АдресСписокДокументов = ПоместитьВоВременноеХранилище(СписокОбрабатываемыхДокументов(), Новый УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресСписокДокументов", АдресСписокДокументов);
	
	ДополнительныеПараметры = Новый Структура;
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ПослеЗакрытияФормыСопоставленияНоменклатуры",
		ЭтаФорма,
		ДополнительныеПараметры
	);
	
	ГлавнаяФорма.ОткрытьФормуДиадокМодально(
		"СопоставлениеНоменклатурыУправляемая",
		ЭтаФорма,
		ПараметрыФормы,
		ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьЧтоНетДанныхПоНоменклатуре()
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ТекстПредупреждения = "Нет данных о номенклатуре электронных документов!";
	ТаймаутПредупреждения = 60;
	ЗаголовокПредупреждения = "Сопоставление номенклатуры";
	
	ГлавнаяФорма.ПоказатьПредупреждениеПереопределенная(
		Неопределено,
		ТекстПредупреждения,
		ТаймаутПредупреждения,
		ЗаголовокПредупреждения
	);
	
КонецПроцедуры

//} ИнтерактивныеДействия


//{ ОбработчикиОповещений

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроекСозданияДокументов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьИндикациюОшибокНастроекПакетнойОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСопоставленияКонтрагентов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеСопоставленияКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСопоставленияНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьНоменклатуруЭлектронныхДокументов();
	
КонецПроцедуры

//} ОбработчикиОповещений


//{ СлужебныеПроцедурыИФункции

//{ ЭлектронныеДокументы

// Анализирует входящие данные и выполняет следующие действия:
// * Получает контент документов (для последующего анализа номенклатуры)
//   и добавляет записи в таблицу документов для обработки.
// * Дополняет таблицу настроек создания.
// * Дополняет таблицу сопоставления контрагентов.
// * Помещает настройки создания и таблицу сопоставления контрагентов во временные хранилища.
//
&НаСервере
Процедура ПрочитатьОбработатьВходящиеДанные(ВходящиеДанные)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	НастройкиСоздания = ТаблицаНастроекСозданияПрочитать();
	ТаблицаКонтрагентов = ТаблицаСопоставленияКонтрагентовПрочитать();
	
	Для Каждого Документ Из ВходящиеДанные Цикл
		
		Если ЗначениеЗаполнено(Документ.ДокументУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючНастройки = ДополнитьКоллекциюНастроекОбработкиДокументов(НастройкиСоздания, Документ);
		КлючКонтрагента = ДополнитьТаблицуКонтрагентов(ТаблицаКонтрагентов, Документ.Отправитель);
		
		НоваяЗапись = ДокументыДляОбработки.Добавить();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.КлючНастройки = КлючНастройки;
		НоваяЗапись.КлючКонтрагента = КлючКонтрагента;
		
	КонецЦикла;
	
	ТаблицаНастроекСозданияПоместить(НастройкиСоздания);
	ТаблицаСопоставленияКонтрагентовПоместить(ТаблицаКонтрагентов);
	
КонецПроцедуры

// Конструктор параметров, необходимых для создания документов учета.
//
// Параметры:
//  Документ - Структура - Описание электронного документа.
//  ИдентификаторОперации - Строка - Идентификатор правила, по которому нужно создавать учетный документ.
//  Контрагент - ЛюбаяСсылка - (Необязательный) Ссылка на контрагента.
// 
// Возвращаемое значение:
//  Структура - содержит параметры для передачи в метода Ядро.Документы_СоздатьДокументыПоПравилу:
//    * ИдентификаторОперации - Строка - Идентификатор операции создания документов.
//    * ДополнительныеПараметры - Структура - См. Ядро.ДополнительныеПараметрыСозданияДокумента.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСозданияДокументаУчета(ИдентификаторОперации, ДополнительныеПараметры)
	
	ПараметрыСоздания = ДополнительныеПараметрыСозданияДокументаУчета();
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСоздания, ДополнительныеПараметры);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	Результат.Вставить("ДополнительныеПараметры", ПараметрыСоздания);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеПараметрыСозданияДокументаУчета(Контрагент = Неопределено, ЦенаВключаетНДС = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Контрагент", Контрагент);
	Результат.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	Возврат Результат;
	
КонецФункции

// Конвертирует таблицу правил обработки электронных документов в соответствие
//
// Параметры:
//  АдресНастроек - Строка - адрес таблицы правил обработки во временном хранилище.
// 
// Возвращаемое значение:
//  Соответствие:
//    * Ключ - Строка - см. КлючНастройкиСоздания.
//    * Значение - Строка - идентификатор операции (правила обработки).
//
&НаСервере
Функция СоответствиеНастроекСоздания()
	
	ТаблицаНастроек = ТаблицаНастроекСозданияПрочитать();
	
	Результат = Новый Соответствие;
	
	Для Каждого Запись Из ТаблицаНастроек Цикл
		
		ПараметрыОбработки = НовыйПараметрыОбработкиЭД();
		ПараметрыОбработки.ИдентификаторОперации = Запись.ИдентификаторОперации;
		ПараметрыОбработки.ЦенаВключаетНДС = Запись.ЦенаВключаетНДС;
		
		Результат.Вставить(Запись.КлючСтроки, ПараметрыОбработки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конвертирует таблицу сопоставления контрагентов в соответствие.
//
// Параметры:
//  АдресСопоставления - Строка - адрес таблицы сопоставления контрагентов во временном хранилище.
// 
// Возвращаемое значение:
//  Соответствие:
//    * Ключ - Строка - см. КлючЗаписиСопоставленияКонтрагентов.
//    * Значение - ЛюбаяСсылка - Ссылка на сопоставленного контрагента.
//
&НаСервере
Функция СоответствиеКонтрагентов()
	
	ТаблицаСопоставления = ТаблицаСопоставленияКонтрагентовПрочитать();
	
	Результат = Новый Соответствие;
	
	Для Каждого Запись Из ТаблицаСопоставления Цикл
		Результат.Вставить(Запись.КлючСтроки, Запись.Контрагент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует коллекцию электронных документов, на основании которых нужно создать учетные документы.
// В служебную информацию каждого документа добавляются параметры создания.
// 
// Возвращаемое значение:
//  Массив из Структура - см. Контракт_Документ.
//
&НаКлиенте
Функция ПодготовитьДанныеДляОбработки()
	
	Настройки = СоответствиеНастроекСоздания();
	Контрагенты = СоответствиеКонтрагентов();
	
	Результат = Новый Массив;
	
	Для Каждого Запись Из ДокументыДляОбработки Цикл
		
		КлючКонтрагента = Запись.КлючКонтрагента;
		Контрагент = Контрагенты.Получить(КлючКонтрагента);
		
		КлючНастройки = Запись.КлючНастройки;
		Настройка = Настройки.Получить(КлючНастройки);
		ИдентификаторОперации = Настройка.ИдентификаторОперации;
		ЦенаВключаетНДС = Настройка.ЦенаВключаетНДС;
		
		ДопПараметрыСоздания = ДополнительныеПараметрыСозданияДокументаУчета(Контрагент, ЦенаВключаетНДС);
		ПараметрыСоздания = ПараметрыСозданияДокументаУчета(ИдентификаторОперации, ДопПараметрыСоздания);
		
		ТекущийДокумент = Запись.Документ;
		ТекущийДокумент.СлужебнаяИнформация.Вставить("ПараметрыСоздания", ПараметрыСоздания);
		
		Результат.Добавить(ТекущийДокумент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СписокОбрабатываемыхДокументов()
	
	ТаблицаДокументов = РеквизитФормыВЗначение("ДокументыДляОбработки");
	
	Результат = ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	
	Возврат Результат;
	
КонецФункции

//} ЭлектронныеДокументы


//{ НастройкиСозданияДокументов

// Добавляет настройку создания для типа электронных документов в общую коллекцию настроек.
// Если настройка с таким ключом уже есть, дополняет список доступных операций по текущему документу.
//
// Параметры:
//  ВсеНастройки - ТаблицаЗначений - см. НоваяКоллекцияНастроекОбработкиДокументов.
//  ТекущийДокумент - Структура - см. Ядро.Контракт_Документ.
// 
// Возвращаемое значение:
//  Строка - ключ настройки создания (см. КлючНастройкиСоздания).
//
&НаСервере
Функция ДополнитьКоллекциюНастроекОбработкиДокументов(ВсеНастройки, ТекущийДокумент)
	
	ТипЭД = ТекущийДокумент.Тип;
	КлючНастройки = КлючНастройкиСоздания(ТипЭД);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КлючСтроки", КлючНастройки);
	
	НайденныеСтроки = ВсеНастройки.НайтиСтроки(ПараметрыПоиска);
	
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		
		ЗаписьНастроек = НайденныеСтроки[0];
		
	Иначе
		
		ПредставлениеТипаЭД = ПредставлениеТипаЭлектронногоДокумента(ТипЭД);
		
		ЗаписьНастроек = ВсеНастройки.Добавить();
		ЗаписьНастроек.КлючСтроки = КлючНастройки;
		ЗаписьНастроек.ПредставлениеНастройки = ПредставлениеТипаЭД;
		
		ВосстановитьСохранныеНастройки(ЗаписьНастроек);
		
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	ОперацииДокумента = Ядро.Документы_СписокТиповДокументовДляСоздания(ТекущийДокумент);
	ДополнитьСписокЗначений(ЗаписьНастроек.ДоступныеОперации, ОперацииДокумента);
	ПроверитьУстановитьИдентификаторОперации(ЗаписьНастроек);
	
	Возврат КлючНастройки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦенаВключаетНДСПоУмолчанию()
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыОбработкиЭД()
	
	Результат = Новый Структура;
	Результат.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДСПоУмолчанию());
	Результат.Вставить("ИдентификаторОперации", Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПрочитатьПараметрыОбработкиЭД(КлючНастройки)
	
	КлючСохраненныхНастроек = КлючСохраненнойНастройкиПараметровСозданияУчетногоДокумента(КлючНастройки);
	
	Ядро = Модуль_ЯдроНаСервере();
	СохраненныеЗначения = Ядро.ХранилищеОбщихНастроек_Прочитать(КлючСохраненныхНастроек);
	
	Результат = НовыйПараметрыОбработкиЭД();
	Если СохраненныеЗначения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеЗначения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыОбработкиЭД()
	
	НастройкиСоздания = ТаблицаНастроекСозданияПрочитать();
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Для Каждого ЗаписьНастроек Из НастройкиСоздания Цикл
		
		КлючСохраненныхНастроек = КлючСохраненнойНастройкиПараметровСозданияУчетногоДокумента(ЗаписьНастроек.КлючСтроки);
		
		СохраняемыеПараметры = НовыйПараметрыОбработкиЭД();
		ЗаполнитьЗначенияСвойств(СохраняемыеПараметры, ЗаписьНастроек);
		
		Ядро.ХранилищеОбщихНастроек_Поместить(КлючСохраненныхНастроек, СохраняемыеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохранныеНастройки(ЗаписьНастроек)
	
	КлючНастройки = ЗаписьНастроек.КлючСтроки;
	СохраненныеПараметры = ПрочитатьПараметрыОбработкиЭД(КлючНастройки);
	
	ЗаполнитьЗначенияСвойств(ЗаписьНастроек, СохраненныеПараметры);
	
КонецПроцедуры

// Заполняет вид операции создания значением по умолчанию.
// В качестве значения по умолчанию выбирается первое значение
// из списка доступных операций.
//
// Параметры:
//  ЗаписьНастроек - СтрокаТаблицыЗначений - Строка таблицы настроек создания документов.
//
&НаСервере
Процедура ПроверитьУстановитьИдентификаторОперации(ЗаписьНастроек)
	
	ДоступныеОперации = ЗаписьНастроек.ДоступныеОперации;
	
	Если ДоступныеОперации.НайтиПоЗначению(ЗаписьНастроек.ИдентификаторОперации) = Неопределено Тогда
		ЗаписьНастроек.ИдентификаторОперации = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаписьНастроек.ИдентификаторОперации)
		И ДоступныеОперации.Количество() > 0 Тогда
		
		ПервыйЭлемент = ДоступныеОперации[0];
		ЗаписьНастроек.ИдентификаторОперации = ПервыйЭлемент.Значение;
		ЗаписьНастроек.ПредставлениеОперации = ПервыйЭлемент.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяКоллекцияНастроекОбработкиДокументов()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСписокЗначений = Новый ОписаниеТипов("СписокЗначений");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСтроки", ТипСтрока);
	Результат.Колонки.Добавить("ПредставлениеНастройки", ТипСтрока);
	Результат.Колонки.Добавить("ИдентификаторОперации", ТипСтрока);
	Результат.Колонки.Добавить("ПредставлениеОперации", ТипСтрока);
	Результат.Колонки.Добавить("ДоступныеОперации", ТипСписокЗначений);
	Результат.Колонки.Добавить("ЦенаВключаетНДС", ТипБулево);
	
	Результат.Индексы.Добавить("КлючСтроки");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаНастроекСозданияПрочитать()
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекОбработкиДокументов) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресНастроекОбработкиДокументов);
	Иначе
		Результат = НоваяКоллекцияНастроекОбработкиДокументов();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ТаблицаНастроекСозданияПоместить(НастройкиСоздания)
	
	АдресНастроекОбработкиДокументов = ПоместитьВоВременноеХранилище(НастройкиСоздания, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиСоздания(ТипЭД)
	
	Разделитель = "#";
	ТипДокумента = ТипЭД.ТипДокумента;
	ФункцияДокумента = ТипЭД.ФункцияДокумента;
	
	Результат = ТипДокумента + Разделитель + ФункцияДокумента;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеТипаЭлектронногоДокумента(ТипЭД)
	
	ТипКонтента = ТипЭД.ТипКонтента;
	ТипДокумента = ТипЭД.ТипДокумента;
	ФункцияДокумента = ТипЭД.ФункцияДокумента;
	
	Ядро = Модуль_ЯдроНаСервере();
	ОписаниеТипаЭД = Ядро.Списки_ОписаниеТипаДокументаAPI(ТипДокумента, ТипКонтента, ФункцияДокумента);
	
	ТипДокумента = ОписаниеТипаЭД.TypeNamedId;
	ФункцияДокумента = ОписаниеТипаЭД.FunctionName;
	
	ФункцияXML = Ядро.Документы_ФункцияДокументаДляXML(ТипДокумента, ФункцияДокумента);
	
	Результат = СокрЛП(ОписаниеТипаЭД.Title + " " + ФункцияXML);
	
	Возврат Результат;
	
КонецФункции

// Меняет отображение формы в зависимости от количества настроек настроек создания.
// Если количество настроек равно 1 (все обрабатываемые документы одного вида), то
// настройки создания редактируются прямо в текущей форме. В противном случае
// отображается гиперссылка для открытия формы редактирования настроек.
//
&НаСервере
Процедура УстановитьРежимРедактированияНастроекСоздания()
	
	НастройкиСоздания = ТаблицаНастроекСозданияПрочитать();
	РежимМононастройки = (НастройкиСоздания.Количество() = 1);
	
	Элементы.ГруппаВидОперации.Видимость = РежимМононастройки;
	Элементы.ГруппаПакетнаяОбработкаВидыОпераций.Видимость = Не РежимМононастройки;
	
	Если РежимМононастройки Тогда
		
		ЗаписьНастроек = НастройкиСоздания[0];
		
		СписокВыбораОпераций = Элементы.ИдентификаторОперации.СписокВыбора;
		СписокВыбораОпераций.Очистить();
		ДополнитьСписокЗначений(СписокВыбораОпераций, ЗаписьНастроек.ДоступныеОперации);
		
		ИдентификаторОперации = ЗаписьНастроек.ИдентификаторОперации;
		ЦенаВключаетНДС = ЗаписьНастроек.ЦенаВключаетНДС;
		
	КонецЕсли;
	
КонецПроцедуры

// Синхронизирует настройки операций по созданию учетного документа с данными формы.
// Актуально для режима мононастройки.
//
&НаСервере
Процедура ОбновитьПараметрыМононастройкиВХранилище()
	
	НастройкиСоздания = ТаблицаНастроекСозданияПрочитать();
	
	ЗаписьНастроек = НастройкиСоздания[0];
	ЗаписьНастроек.ИдентификаторОперации = ИдентификаторОперации;
	ЗаписьНастроек.ЦенаВключаетНДС = ЦенаВключаетНДС;
	
	ТаблицаНастроекСозданияПоместить(НастройкиСоздания);
	
КонецПроцедуры

// Проверяет, что всех электронных документов указан идентификатор операции по созданию учетного документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если хотя бы для одного документа не задан способ обработки.
//
&НаСервере
Функция ТребуетсяНастроитьВидыОпераций()
	
	НастройкиСоздания = ТаблицаНастроекСозданияПрочитать();
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ИдентификаторОперации", "");
	
	НайденныеСтроки = НастройкиСоздания.НайтиСтроки(ОтборСтрок);
	
	Результат = ЗначениеЗаполнено(НайденныеСтроки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьИндикациюОшибокНастроекПакетнойОбработки()
	
	ПредставлениеИндикатора = НСтр("ru = 'Выбраны'");
	ЦветТекстаИндикатора = ЦветОбычногоТекста();
	УстановитьКартинкуИндикатораНастроекПакетнойОбработки()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуИндикатораНастроекПакетнойОбработки()
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючСохраненнойНастройкиПараметровСозданияУчетногоДокумента(НастройкаСоздания)
	Возврат "ПараметрыСозданияДокументаУчета" + НастройкаСоздания;
КонецФункции

//} НастройкиСозданияДокументов


//{ СопоставлениеКонтрагентов

&НаСервере
Функция ДополнитьТаблицуКонтрагентов(ТаблицаКонтрагентов, Отправитель)
	
	ИдентификаторКонтрагента = ИдентификаторКонтрагентаСервиса(Отправитель);
	
	КлючКонтрагента = КлючЗаписиСопоставленияКонтрагентов(ИдентификаторКонтрагента);
	
	КлючЗаписи = Новый Структура;
	КлючЗаписи.Вставить("КлючСтроки", КлючКонтрагента);
	
	НайденныеЗаписи = ТаблицаКонтрагентов.НайтиСтроки(КлючЗаписи);
	
	Если ЗначениеЗаполнено(НайденныеЗаписи) Тогда
		Возврат КлючКонтрагента;
	КонецЕсли;
	
	РеквизитыОтправителя = РеквизитыКонтрагентаСервиса(ИдентификаторКонтрагента);
	
	ЗаписьСопоставления = ТаблицаКонтрагентов.Добавить();
	
	ЗаписьСопоставления.КлючСтроки = КлючКонтрагента;
	ЗаписьСопоставления.КонтрагентСервисаИдентификатор = ИдентификаторКонтрагента;
	ЗаписьСопоставления.КонтрагентСервисаПредставление = РеквизитыОтправителя.Наименование;
	ЗаписьСопоставления.КонтрагентСервисаИНН = РеквизитыОтправителя.ИНН;
	ЗаписьСопоставления.КонтрагентСервисаКПП = РеквизитыОтправителя.КПП;
	ЗаписьСопоставления.Контрагент = Отправитель.Организация;
	
	Если ЗначениеЗаполнено(ЗаписьСопоставления.Контрагент) Тогда
		ЗаписьСопоставления.Сопоставлено = Истина;
	КонецЕсли;
	
	Возврат КлючКонтрагента;
	
КонецФункции

&НаСервере
Функция КлючЗаписиСопоставленияКонтрагентов(ИдентификаторКонтрагента)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.Новый_КлючИдентификаторовСправочника(ИдентификаторКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоваяТаблицаСопоставленияКонтрагентов()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСтроки", ТипСтрока);
	Результат.Колонки.Добавить("Сопоставлено", ТипБулево);
	Результат.Колонки.Добавить("КонтрагентСервисаИдентификатор"); // Ядро.Новый_ИдентификаторыСправочника
	Результат.Колонки.Добавить("КонтрагентСервисаПредставление", ТипСтрока);
	Результат.Колонки.Добавить("КонтрагентСервисаИНН", ТипСтрока);
	Результат.Колонки.Добавить("КонтрагентСервисаКПП", ТипСтрока);
	Результат.Колонки.Добавить("Контрагент");
	
	Результат.Индексы.Добавить("КлючСтроки");
	Результат.Индексы.Добавить("Сопоставлено");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторКонтрагентаСервиса(УчастникЭДО)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.Новый_ИдентификаторыСправочника(УчастникЭДО.ОрганизацияЭДО, УчастникЭДО.BoxId);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыКонтрагентаСервиса(ИдентификаторКонтрагента)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.Контрагенты_ЗаполненныеРеквизиты(ИдентификаторКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяСопоставитьКонтрагентов(ТаблицаСопоставления)
	
	Результат = Ложь;
	
	Для Каждого Запись Из ТаблицаСопоставления Цикл
		
		Если Не ЗначениеЗаполнено(Запись.Контрагент) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаСопоставленияКонтрагентовПрочитать()
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицыСопоставленияКонтрагентов) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставленияКонтрагентов);
	Иначе
		Результат = НоваяТаблицаСопоставленияКонтрагентов();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ТаблицаСопоставленияКонтрагентовПоместить(ТаблицаСопоставления)
	
	АдресТаблицыСопоставленияКонтрагентов = ПоместитьВоВременноеХранилище(ТаблицаСопоставления, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИндикациюОшибокСопоставленияКонтрагентов()
	
	ТаблицаСопоставления = ТаблицаСопоставленияКонтрагентовПрочитать();
	
	КонтрагентыСопоставлены = Не ТребуетсяСопоставитьКонтрагентов(ТаблицаСопоставления);
	
	УстановитьЗаголовокИндикатораСопоставленияКонтрагентов();
	
	УстановитьКартинкуИндикатораСопоставленияКонтрагентов();
	
	УстановитьДоступностьСопоставленияНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокИндикатораСопоставленияКонтрагентов()
	
	Если КонтрагентыСопоставлены Тогда
		ПредставлениеИндикатора = НСтр("ru = 'Сопоставлены'");
	Иначе
		ПредставлениеИндикатора = НСтр("ru = 'Требуется сопоставить'");
	КонецЕсли;
	
	Элементы.СопоставлениеКонтрагентовПредставление.Заголовок = ПредставлениеИндикатора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуИндикатораСопоставленияКонтрагентов()
	
	Если Не КонтрагентыСопоставлены Тогда
		
		ВсеКартинки = Модуль_ЯдроНаСервере().БиблиотекаКартинок();
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(ВсеКартинки.КартинкаВниманиеКрасная, Новый УникальныйИдентификатор);
		
	Иначе
		
		АдресВХранилище = "";
		
	КонецЕсли;
	
	АдресКартинкиСопоставлениеКонтрагентовВнимание = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСопоставленияНоменклатуры()
	
	ЗначениеФлага = (КонтрагентыСопоставлены И ЕстьНоменклатура);
	Элементы.ГруппаСопоставлениеНоменклатурыПравая.Доступность = ЗначениеФлага;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтрагентовИнформационнойБазы()
	
	Контрагенты = СоответствиеКонтрагентов();
	
	Результат = Новый Массив;
	
	Для Каждого Запись Из ДокументыДляОбработки Цикл
		
		КлючКонтрагента = Запись.КлючКонтрагента;
		КонтрагентИБ = Контрагенты.Получить(КлючКонтрагента);
		
		Если Не ЗначениеЗаполнено(КонтрагентИБ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийДокумент = Запись.Документ;
		ТекущийДокумент.Отправитель.Организация = КонтрагентИБ;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСопоставленияКонтрагентов()
	
	ОбновитьКонтрагентовИнформационнойБазы();
	ПрочитатьНоменклатуруЭлектронныхДокументов();
	НастроитьИндикациюОшибокСопоставленияКонтрагентов();
	
КонецПроцедуры

//} СопоставлениеКонтрагентов


//{ СопоставлениеНоменклатуры

&НаСервере
Функция ТаблицаСопоставленияНоменклатурыПрочитать()
	
	Результат = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставленияНоменклатуры);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ТаблицаСопоставленияНоменклатурыПоместить(ТаблицаСопоставления)
	
	АдресТаблицыСопоставленияНоменклатуры = ПоместитьВоВременноеХранилище(ТаблицаСопоставления, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНоменклатуруЭлектронныхДокументов()
	
	КоллекцияДокументов = СписокОбрабатываемыхДокументов();
	
	Ядро = Модуль_ЯдроНаСервере();
	ТаблицаСопоставления = Ядро.Номенклатура_ТаблицаСопоставленияНоменклатуры(КоллекцияДокументов);
	
	ЕстьНоменклатура = ЗначениеЗаполнено(ТаблицаСопоставления);
	
	НастроитьИндикациюОшибокСопоставленияНоменклатуры(ТаблицаСопоставления);
	
	ТаблицаСопоставленияНоменклатурыПоместить(ТаблицаСопоставления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СопоставленоЗаписейНоменклатуры(ТаблицаСопоставления)
	
	Результат = 0;
	
	Для Каждого Запись Из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьИндикациюОшибокСопоставленияНоменклатуры(ТаблицаСопоставления)
	
	СопоставленоЗаписей = СопоставленоЗаписейНоменклатуры(ТаблицаСопоставления);
	ВсегоЗаписей = ТаблицаСопоставления.Количество();
	ЕстьОшибки = (СопоставленоЗаписей <> ВсегоЗаписей);
	
	Если Не ЕстьНоменклатура Тогда
		ПредставлениеИндикатора = НСтр("ru = 'Нет данных'");
	ИначеЕсли ЕстьОшибки Тогда
		ПредставлениеИндикатора = НСтр("ru = 'Сопоставлено %1 из %2'");
		ПредставлениеИндикатора = СтрЗаменить(ПредставлениеИндикатора, "%1", XMLСтрока(СопоставленоЗаписей));
		ПредставлениеИндикатора = СтрЗаменить(ПредставлениеИндикатора, "%2", XMLСтрока(ВсегоЗаписей));
	Иначе
		ПредставлениеИндикатора = НСтр("ru = 'Сопоставлена'");
	КонецЕсли;
	
	Элементы.СопоставлениеНоменклатурыПредставление.Заголовок = ПредставлениеИндикатора;
	УстановитьКартинкуИндикатораСопоставленияНоменклатуры(ЕстьОшибки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуИндикатораСопоставленияНоменклатуры(ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		
		ВсеКартинки = Модуль_ЯдроНаСервере().БиблиотекаКартинок();
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(ВсеКартинки.КартинкаВниманиеЖелтая, Новый УникальныйИдентификатор);
		
	Иначе
		
		АдресВХранилище = "";
		
	КонецЕсли;
	
	АдресКартинкиСопоставлениеНоменклатурыВнимание = АдресВХранилище;
	
КонецПроцедуры

//} СопоставлениеНоменклатуры


//{ ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСписокЗначений(Приемник, Источник)
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		
		Значение = Элемент.Значение;
		Представление = Элемент.Представление;
		
		Если Приемник.НайтиПоЗначению(Значение) = Неопределено Тогда
			Приемник.Добавить(Значение, Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветКритичнойОшибки()
	
	Результат = Новый Цвет(206, 0, 20);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветОбычногоТекста()
	
	Результат = Новый Цвет;
	Возврат Результат;
	
КонецФункции

//} ОбщегоНазначения


//{ Метрики

// Записывает поведение и статистику о нажатии "ОткрытьНастройкиПакетногоСозданияДокументов".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ОткрытьНастройкиСозданияДокументов()
	
	Действие = Метрики_ДействиеОткрытьНастройкиСозданияДокументов();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоОрганизациям(Действие);
	
КонецПроцедуры

// Записывает поведение и статистику о нажатии "ОткрытьПомощникСопоставленияКонтрагентов".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ОткрытьСопоставлениеКонтрагентов()
	
	Действие = Метрики_ДействиеОткрытьСопоставлениеКонтрагентов();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоОрганизациям(Действие);
	
КонецПроцедуры

// Записывает поведение и статистику о нажатии "ОткрытьПомощникСопоставленияНоменклатуры".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ОткрытьСопоставлениеНоменклатуры()
	
	Действие = Метрики_ДействиеОткрытьСопоставлениеНоменклатуры();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоОрганизациям(Действие);
	
КонецПроцедуры

// Записывает поведение о нажатии "СоздатьДокументы" (статистика непосредственно при создании документов).
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_СоздатьДокументы()
	
	Действие = Метрики_ДействиеСоздатьДокументы();
	
	Метрики_НажатиеКнопкиПакетнойОбработки(Действие);
	
КонецПроцедуры

// Записывает поведение и статистику о нажатии "Отменить".
//
&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_Отменить()
	
	Действие = Метрики_ДействиеОтменить();
	
	Метрики_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистикуПоОрганизациям(Действие);
	
КонецПроцедуры

// Добавляет запись в топик "Поведение" (DD_Behavior).
//
// Параметры:
//  ДействиеМетрики - Строка - значение "Path_Action".
//
&НаКлиенте
Процедура Метрики_НажатиеКнопки(ДействиеМетрики)
	
	НазваниеФормы = Метрики_НазваниеФормы();
	КатегорияМетрики = Метрики_КатегорияСозданиеДокументов();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики
	);
	
КонецПроцедуры

// Добавляет запись в топик "Поведение" (DD_Behavior) с указанием количества обрабатываемых документов.
//
// Параметры:
//  ДействиеМетрики - Строка - значение "Path_Action".
//
&НаКлиенте
Процедура Метрики_НажатиеКнопкиПакетнойОбработки(ДействиеМетрики)
	
	НазваниеФормы = Метрики_НазваниеФормы();
	КатегорияМетрики = Метрики_КатегорияСозданиеДокументов();
	КоличествоДанных = ДокументыДляОбработки.Количество();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_МассовоеДействиеНажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики,
		КоличествоДанных
	);
	
КонецПроцедуры

// Добавляет запись в топик "Статистика" (DD_Statistics) по каждой организации.
//
// Параметры:
//  ДействиеМетрики - Строка - значение "Path_Action".
//
&НаКлиенте
Процедура Метрики_ДобавитьСтатистикуПоОрганизациям(ДействиеМетрики)
	
	КатегорияМетрики = Метрики_КатегорияСозданиеДокументов();
	МеткаМетрики = "";
	
	Переменные = Новый Соответствие;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ИдентификаторыЯщиков = РазличныеИдентификаторыЯщиков();
	
	Для Каждого ИдентификаторЯщика Из ИдентификаторыЯщиков Цикл
		
		Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
			ИдентификаторЯщика,
			КатегорияМетрики,
			ДействиеМетрики,
			МеткаМетрики,
			Переменные
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_НазваниеФормы()
	Возврат "Создание документов в 1С";
КонецФункции

&НаКлиенте
Функция Метрики_КатегорияСозданиеДокументов()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Категории = Ядро.Метрика_НазваниеКатегории();
	Результат = Категории.СозданиеДокументов;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеСоздать()
	Возврат "Создать";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОткрытьНастройкиСозданияДокументов()
	Возврат "Открыть настройки создания документов";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОткрытьСопоставлениеКонтрагентов()
	Возврат "Открыть сопоставление контрагентов";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОткрытьСопоставлениеНоменклатуры()
	Возврат "Открыть сопоставление номенклатуры";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеСоздатьДокументы()
	Возврат "Создать документы";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеОтменить()
	Возврат "Создать документы";
КонецФункции

&НаКлиенте
Функция РазличныеИдентификаторыЯщиков()
	
	Результат = Новый Массив;
	
	Для Каждого Запись Из ДокументыДляОбработки Цикл
		
		ТекущийДокумент = Запись.Документ;
		ИдентификаторыДокумента = ТекущийДокумент.Идентификаторы;
		ИдентификаторЯщика = ИдентификаторыДокумента.BoxID;
		
		Если Результат.Найти(ИдентификаторЯщика) = Неопределено Тогда
			Результат.Добавить(ИдентификаторЯщика);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//} Метрики

//} СлужебныеПроцедурыИФункции


//{ СервисныеМетоды

&НаСервере
Процедура УстановитьОбщийКонтекст()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

//} СервисныеМетоды
