
&НаСервере
Перем ОбработкаОбъект;


//{		Сервисные методы

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

//}		Сервисные методы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПараметрыФормы();
	
	ЗаполнитьНастройкамиПоВидуДокумента();
	
	УстановитьВидимостьДоступностьЭлементов();
	
	Ядро = Модуль_ЯдроНаСервере();
	ИмяСправочникаОбработки = Ядро.Справочники_ДополнительнаяОбработка();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоВидуДокумента()
	
	ЗаполнитьНастрокуФормироватьНаОсновании();
	
	ЗаполнитьНастройкиФорматов();
	
	ЗаполнитьНастройкиПечатныхФорм();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастрокуФормироватьНаОсновании()
			
	ДоступныеОснования	= Модуль_ЯдроНаСервере().МенеджерИнтеграции_СписокОснованийВидаЭлектронногоДокумента(НастройкаДокументаНаОтправку.ВидДокумента);
	СписокОснований		= Элементы.ФормироватьНаОсновании.СписокВыбора;
	
	Для Каждого ДоступноеОснование Из ДоступныеОснования Цикл
		СписокОснований.Добавить(ДоступноеОснование.Значение, ДоступноеОснование.Представление);
	КонецЦикла;
			
	ФормироватьНаОсновании = НастройкаДокументаНаОтправку.ФормироватьНаОсновании;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиФорматов()
	
	ФорматыОтправкиДокументов		= Модуль_ЯдроНаСервере().Перечисление_ФорматыОтправкиДокументов();
	НаименованиеФорматовОтправки	= Модуль_ЯдроНаСервере().Перечисление_НаименованияФорматовОтправкиДокументов();
	
	Заголовок		= НастройкаДокументаНаОтправку.Наименование;
	ФорматыКонтента	= НастройкаДокументаНаОтправку.ФорматыКонтента;
	
	СписокФорматов = Элементы.ФорматОтправки.СписокВыбора;
	
	Если НастройкаДокументаНаОтправку.Формализованный Тогда
		
		ИспользуетсяФорматФНС = (ФорматыКонтента.НайтиПоЗначению(ФорматыОтправкиДокументов.pf_diadoc) = Неопределено);
		
		Если ИспользуетсяФорматФНС Тогда
			
			СписокФорматов.Добавить(ФорматыОтправкиДокументов.fns, НаименованиеФорматовОтправки.fns);
		
		    СписокВыбораФорматовКонтента = Элементы.ФорматКонтента.СписокВыбора;
		
			Для Каждого Элемент Из ФорматыКонтента Цикл
				
				ЭтоФорматКонтента = НЕ ФорматыОтправкиДокументов.Свойство(Элемент.Значение);
				
				Если ЭтоФорматКонтента Тогда
					СписокВыбораФорматовКонтента.Добавить(Элемент.Значение, Элемент.Представление);
				КонецЕсли;
				
			КонецЦикла;
			
			ВыбранФорматКонтента = НЕ ФорматыОтправкиДокументов.Свойство(НастройкаДокументаНаОтправку.ФорматКонтента);
			
			Если ВыбранФорматКонтента Тогда
				
				ВыбранныйФорматОтправки = ФорматыОтправкиДокументов.fns;
				ФорматКонтента = НастройкаДокументаНаОтправку.ФорматКонтента;
				
			Иначе
				
				ВыбранныйФорматОтправки = НастройкаДокументаНаОтправку.ФорматКонтента;
				
				Если СписокВыбораФорматовКонтента.Количество() > 0 Тогда
					ФорматКонтента = СписокВыбораФорматовКонтента[0].Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СписокФорматов.Добавить(ФорматыОтправкиДокументов.pf_diadoc, НаименованиеФорматовОтправки.pf_diadoc);
			ВыбранныйФорматОтправки = ФорматыОтправкиДокументов.pf_diadoc;
			
		КонецЕсли;
		
		Если ФорматыКонтента.НайтиПоЗначению(ФорматыОтправкиДокументов.epf) <> Неопределено Тогда
			СписокФорматов.Добавить(ФорматыОтправкиДокументов.epf, НаименованиеФорматовОтправки.epf);
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьСписокФорматовДляНеформализованногоДокумента(СписокФорматов, ФорматыКонтента);
						
		ТекущийФорматЭтоФорматСТиповойПФ1С	= (НастройкаДокументаНаОтправку.ФорматКонтента = ФорматыОтправкиДокументов.pf_1c);
		ДоступнаНастройкаИспользоватьПФ1С	= Модуль_ЯдроНаСервере().НастройкиДокументов_ПоказатьНастройку_ТиповаяПФ1С(НастройкаДокументаНаОтправку.ВидДокумента, ФормироватьНаОсновании);
		
		ПринудительноСброситьНастройкуИспользоватьПФ1С = (ТекущийФорматЭтоФорматСТиповойПФ1С И Не ДоступнаНастройкаИспользоватьПФ1С);
		
		Если ПринудительноСброситьНастройкуИспользоватьПФ1С Тогда
			ВыбранныйФорматОтправки = ФорматыОтправкиДокументов.pf_diadoc;
		Иначе
			ВыбранныйФорматОтправки = НастройкаДокументаНаОтправку.ФорматКонтента;
		КонецЕсли;
				
	КонецЕсли;
	
	ФорматОтправки = ВыбранныйФорматОтправки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФорматовДляНеформализованногоДокумента(СписокФорматов, ФорматыКонтента)
	
	СписокОснований = Модуль_ЯдроНаСервере().МенеджерИнтеграции_СписокОснованийВидаЭлектронногоДокумента(НастройкаДокументаНаОтправку.ВидДокумента);
	ФункциональностьРеализована = (СписокОснований.Количество() > 0);
			
	Если ФункциональностьРеализована Тогда
		ДоступнаТиповаяПФ1С	= Модуль_ЯдроНаСервере().НастройкиДокументов_ПоказатьНастройку_ТиповаяПФ1С(НастройкаДокументаНаОтправку.ВидДокумента, ФормироватьНаОсновании);
	Иначе
		ДоступнаТиповаяПФ1С	= Ложь;
	КонецЕсли;
		
	ФорматыОтправкиДокументов = Модуль_ЯдроНаСервере().Перечисление_ФорматыОтправкиДокументов();
						
	Для Каждого Элемент Из ФорматыКонтента Цикл
		
		ЭтоФорматСТиповойПФ1С = (Элемент.Значение = ФорматыОтправкиДокументов.pf_1c);
		
		Если ЭтоФорматСТиповойПФ1С Тогда
			ДобавитьФорматВСписок = ДоступнаТиповаяПФ1С;
		Иначе
			ДобавитьФорматВСписок = Истина;
		КонецЕсли;
						
		Если ДобавитьФорматВСписок Тогда
			СписокФорматов.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПечатныхФорм()
	
	НастройкиПечатныхФорм = НастройкаДокументаНаОтправку.НастройкиПечатныхФорм;
	
	Если ЗначениеЗаполнено(НастройкиПечатныхФорм.ОсновнаяПечатнаяФорма) Тогда
		ОсновнаяПечатнаяФорма = НастройкиПечатныхФорм.ОсновнаяПечатнаяФорма;
		Элементы.ДекорацияДобавитьФорму.Заголовок = ОсновнаяПечатнаяФорма;
	КонецЕсли;
	
	Для Каждого ПечатнаяФорма Из НастройкиПечатныхФорм.ДополнительныеПечатныеФормы Цикл
		СтрокаТЧ = ДополнительныеПечатныеФормы.Добавить();
		СтрокаТЧ.ПечатнаяФорма = ПечатнаяФорма;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЭтоНастройкиПечатныхФормСчетаНаОплату()

	Результат = Модуль_ЯдроНаСервере().ЭтоИдентификаторВидаСчет(НастройкаДокументаНаОтправку.ВидДокумента);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьПараметрыФормы()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Параметры.Свойство("ИмяСправочника",				ИмяСправочника);
	Параметры.Свойство("НастройкаДокументаНаОтправку",	НастройкаДокументаНаОтправку);
	
	ДанныеОрганизации 	= Параметры.ДанныеОрганизации;
	ДанныеКонтрагента 	= Параметры.ДанныеКонтрагента;
	ДобавлятьСчетВПакет = Параметры.ДобавлятьСчетВПакет;
	
	ID_Организации = ДанныеОрганизации.ID;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	УстановитьВидимостьДоступностьГруппы_ФормироватьНаОсновании();
	
	Элементы.ФорматКонтента.Видимость = (Элементы.ФорматКонтента.СписокВыбора.Количество() > 0);
	Элементы.ФорматКонтента.Доступность = ФорматОтправки = ФорматыОтправкиДокументов.fns;
	
	Элементы.ДекорацияДобавитьФорму.Видимость = ФорматОтправки = ФорматыОтправкиДокументов.epf;

	//TODO: #2486
	УстановитьВидимостьНастройки_ДобавлятьСчетВПакет(); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьГруппы_ФормироватьНаОсновании()
	
	ФункциональностьРеализована = (Элементы.ФормироватьНаОсновании.СписокВыбора.Количество() > 0);
	
	Элементы.ГруппаФормироватьНаОсновании.Видимость = ФункциональностьРеализована;
	
	Если ФункциональностьРеализована Тогда
		
		ПлагинСчетВПакетУстановлен = Модуль_ЯдроНаСервере().КонтурПлагины_ПлагинСчетВПакетУстановлен();
						
		Элементы.ФормироватьНаОсновании.Доступность			= Не ПлагинСчетВПакетУстановлен;
		Элементы.ДекорацияИнформацияОПлагине.Видимость		= ПлагинСчетВПакетУстановлен;
		Элементы.ДекорацияОткрытьСписокПлагинов.Видимость	= ПлагинСчетВПакетУстановлен;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастройки_ДобавлятьСчетВПакет()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ИспользуетсяФункциональность = Модуль_Ядро.СчетаНаОплату_ДоступнаОпцияДобавлятьСчетВПакет();
	
	Если ЭтоНастройкиПечатныхФормСчетаНаОплату() И ИспользуетсяФункциональность Тогда
		ПлагинСчетВПакетУстановлен = Модуль_Ядро.КонтурПлагины_ПлагинСчетВПакетУстановлен();
		Элементы.ДобавлятьСчетВПакет.Доступность = НЕ ПлагинСчетВПакетУстановлен;
	Иначе
		Элементы.ДобавлятьСчетВПакет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ФорматОтправки = ФорматыОтправкиДокументов.epf
		И НЕ ЗначениеЗаполнено(ОсновнаяПечатнаяФорма) Тогда
		
		ТекстОшибки = "Для документа выбран формат отправки ""Своя форма"".
					|Подключите внешнюю печатную форму.";
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстОшибки, , "Не выбрана внешняя печатная форма");
		
		Возврат;
		
	КонецЕсли;
	
	НастройкаДокументаНаОтправку.ФормироватьНаОсновании = ФормироватьНаОсновании;
	
	Если ФорматОтправки = ФорматыОтправкиДокументов.fns Тогда
		НастройкаДокументаНаОтправку.ФорматКонтента = ФорматКонтента;
	Иначе
		НастройкаДокументаНаОтправку.ФорматКонтента = ФорматОтправки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяПечатнаяФорма) Тогда
		НастройкаДокументаНаОтправку.НастройкиПечатныхФорм.ОсновнаяПечатнаяФорма = ОсновнаяПечатнаяФорма;
	КонецЕсли;
	
	НастройкаДокументаНаОтправку.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Очистить();
	Для Каждого СтрокаТЧ Из ДополнительныеПечатныеФормы Цикл
		НастройкаДокументаНаОтправку.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Добавить(СтрокаТЧ.ПечатнаяФорма);
	КонецЦикла;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("НастройкаДокументов", НастройкаДокументаНаОтправку);
	ПараметрыЗакрытия.Вставить("ДобавлятьСчетВПакет", ДобавлятьСчетВПакет);
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьСчетВПакетПриИзменении(Элемент)

	Метрика_ДобавитьПоведение_ДобавлятьСчетВПакет();
	Метрика_ДобавитьСтатистику_ДобавлятьСчетВПакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматОтправкиПриИзменении(Элемент)
	
	Метрика_ИзменениеФорматаОтправки(ФорматОтправки);

	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматКонтентаПриИзменении(Элемент)
	
	Метрика_ИзменениеФорматаОтправки(ФорматКонтента);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьФормуНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Добавить свою форму";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ДопПараметры =  Новый Структура;
	ДопПараметры.Вставить("ВыборОсновнойПечатнойФормы", Истина);
	
	НачатьВыборПечатнойФормы(ДопПараметры);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидДокумента", НастройкаДокументаНаОтправку.ВидДокумента);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительнуюПечатнуюФорму(Команда)

	Метрика_ДопПечатнаяФорма("Добавить");

	ДопПараметры =  Новый Структура;
	ДопПараметры.Вставить("ВыборОсновнойПечатнойФормы", Ложь);
	
	НачатьВыборПечатнойФормы(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДополнительнуюПечатнуюФорму(Команда)
	
	Метрика_ДопПечатнаяФорма("Изменить");
	
	ТекущиеДанные = Элементы.ДополнительныеПечатныеФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры =  Новый Структура;
	ДопПараметры.Вставить("ВыборОсновнойПечатнойФормы", Ложь);
	ДопПараметры.Вставить("РежимИзменения", Истина);
	ДопПараметры.Вставить("ТекущаяСтрока", Элементы.ДополнительныеПечатныеФормы.ТекущаяСтрока);
	
	НачатьВыборПечатнойФормы(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюПечатнуюФорму(Команда)
	
	Метрика_ДопПечатнаяФорма("Удалить");
	
	ТекущиеДанные = Элементы.ДополнительныеПечатныеФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПечатныеФормы.НайтиПоИдентификатору(Элементы.ДополнительныеПечатныеФормы.ТекущаяСтрока);
	ДополнительныеПечатныеФормы.Удалить(ТекущаяСтрока);
	
КонецПроцедуры


&НаКлиенте
Процедура НачатьВыборПечатнойФормы(ДопПараметры)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ОсновнаяФорма.НовыйОписаниеОповещения("ОбработкаВыбораПечатнойФормы", ЭтаФорма, ДопПараметры);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Если ИмяСправочникаОбработки <> "" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		
		РежимБлокирования = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОсновнаяФорма.смв().смв_ОткрытьФорму(ИмяСправочникаОбработки + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимБлокирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПечатнойФормы(ВыбранноеЗначение, ДопПараметры) Экспорт 
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ВыборОсновнойПечатнойФормы Тогда
		
		ОсновнаяПечатнаяФорма = ВыбранноеЗначение;
		Элементы.ДекорацияДобавитьФорму.Заголовок = ВыбранноеЗначение;
		
	Иначе
		
		Если ДопПараметры.Свойство("РежимИзменения") Тогда
			
			СтрокаТЧ = ДополнительныеПечатныеФормы.НайтиПоИдентификатору(ДопПараметры.ТекущаяСтрока);
			СтрокаТЧ.ПечатнаяФорма = ВыбранноеЗначение;
			
		Иначе
			
			СтрокаТЧ = ДополнительныеПечатныеФормы.Добавить();
			СтрокаТЧ.ПечатнаяФорма = ВыбранноеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьНаОснованииПриИзменении(Элемент)
	
	Метрика_ИзменитьОснование();
	
	ФормироватьНаОснованииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьНаОснованииПриИзмененииНаСервере()
	
	СписокФорматов = Элементы.ФорматОтправки.СписокВыбора;
	
	СписокФорматов.Очистить();
	
	ЗаполнитьНастройкиФорматов();
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокПлагиновНажатие(Элемент)
	
	Метрика_ОткрытьСписокПлагинов();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.КонтурПлагины_ОткрытьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ИзменитьОснование()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Изменить основание";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ОснованиеДляСчета", ФормироватьНаОсновании);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ОткрытьСписокПлагинов()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;;
	ДействиеМетрики		= "Открыть список плагинов";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ИзменениеФорматаОтправки(ЗначениеФормата)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Изменить формат отправки";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ЗначениеФорматаКонтента = Элементы.ФорматОтправки.СписокВыбора.НайтиПоЗначению(ЗначениеФормата);
	
	Если ЗначениеФорматаКонтента = Неопределено Тогда
		ЗначениеФорматаКонтента = Элементы.ФорматКонтента.СписокВыбора.НайтиПоЗначению(ЗначениеФормата);
	КонецЕсли;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидДокумента",	НастройкаДокументаНаОтправку.ВидДокумента);
	Переменные.Вставить("Значение",			ЗначениеФорматаКонтента.Представление);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДопПечатнаяФорма(Действие)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= Действие + " дополнительную печатную форму";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
    
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидДокумента", НастройкаДокументаНаОтправку.ВидДокумента);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Настройка печатных форм и форматов";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Результат = Новый Структура;
	
	Если ИмяСправочника = "Организации" Тогда
		Результат.Вставить("Настройки", "Настройки организации");
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		Результат.Вставить("Настройки", "Настройки контрагента");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_ДобавлятьСчетВПакет()

	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "ДобавлятьСчетВПакет";
	НаименованиеФормы	= Метрика_НазваниеФормы();
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(НаименованиеФормы, КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ДобавлятьСчетВПакет()

	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "ДобавлятьСчетВПакет";
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ДобавлятьСчетВПакет", ДобавлятьСчетВПакет);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ДляОрганизации(ID_Организации, КатегорияМетрики, ДействиеМетрики, , Переменные);

КонецПроцедуры
