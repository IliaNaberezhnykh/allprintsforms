
//{		Сервисные методы

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма()
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	АдресОбработки = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ОбщийКонтекстКлиентСервер) Тогда
		Объект.ОбщийКонтекстКлиентСервер.Свойство("АдресОбработкаОбъект", АдресОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОбработки) Тогда
		Результат = ХранилищеОбработки_Прочитать(АдресОбработки);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Результат = РеквизитФормыВЗначение("Объект");
		
	Иначе
		
		Результат.ОбщийКонтекстКлиентСервер = Объект.ОбщийКонтекстКлиентСервер;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

//}		Сервисные методы


//{		Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	ПоказатьСтраницуЗаставкиПоиска(ЭтаФорма);
	
	ЗаполнитьСписокСтандартныхТиповДокументов();
	
	УстановитьУсловноеОформление();
	
	ИнициализироватьИдентификаторТрассировки();
	
КонецПроцедуры

//}		Обработчики событий формы


//{		Обработчики событий элементов формы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Заголовок = НСтр("ru='Найти нужный документ'");
	
	Элементы.СсылкаНаОбъект.ПодсказкаВвода = НСтр("ru='Документ в 1С'");
	
	СсылкаНаОбъект_РежимВыбораТипаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИдентификаторТрассировки()
	
	Метрики_НаименованиеФормы = Метрики_НаименованиеФормы();
	СтрокаИдентификатора = Строка(Новый УникальныйИдентификатор());
	
	ИдентификаторТрассировки = Метрики_НаименованиеФормы + "_" + СтрокаИдентификатора;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуЗаставкиПоиска(Форма)
	
	ТекущаяСтраница = Форма.Элементы.СтраницаЗаставка;
	Форма.Элементы.ГруппаСтраницыФормыПоиска.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СсылкаНаОбъект_РежимВыбораТипаДокумента(Форма)
	
	Форма.Элементы.СсылкаНаОбъект.КнопкаОткрытия = Ложь;
	Форма.Элементы.СсылкаНаОбъект.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтандартныхТиповДокументов()
	
	Ядро = Модуль_ЯдроНаСервере();
	ПравилаСопоставленияЭДО = Ядро.Документы_ВидыДокументовДляПоискаВМодуле();
	
	СписокТиповДокументов = Элементы.СсылкаНаОбъект.СписокВыбора;
	
	Для Каждого Правило Из ПравилаСопоставленияЭДО Цикл
		СписокТиповДокументов.Добавить(Правило.Значение, Правило.Представление);
	КонецЦикла;
	
	СписокТиповДокументов.Добавить(ПравилоСопоставленияПроизвольныйДокумент(), "[Произвольный документ]");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницуРезультатовПоиска()
	
	ТекущаяСтраница = Элементы.СтраницаРезультатПоиска;
	Элементы.ГруппаСтраницыФормыПоиска.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторДлительнойОперации()
	
	ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	Элементы.ГруппаСтраницыФормыПоиска.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборДокументаУчетаПослеВыбораТипа(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНужнаПомощь_НетКонтрагентовНажатие(Элемент)
	
	ОткрытьЦентрПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	СсылкаНаОбъект_РежимВыбораТипаДокумента(ЭтаФорма);
	
	ПоказатьСтраницуЗаставкиПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресСсылки = Неопределено;
	
	ДанныеСобытия.Свойство("href", АдресСсылки);
	
	Если ЗначениеЗаполнено(АдресСсылки) Тогда
		
		ПерейтиПоВебсСылке(АдресСсылки);
		
	КонецЕсли;
	
КонецПроцедуры

//}		Обработчики событий элементов формы


//{		

&НаКлиенте
Процедура НачатьВыборПроизвольногоТипаДокументаУчета()
	
	СписокВыбора = СписокВыбораПроизвольногоТипаДокументовУчета();
	
	ОсновнаяФорма = ОсновнаяФорма();
	Обработчик = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ПродолжитьВыборПроизвольногоДокументаУчетаПослеВыбораТипа",
		ЭтаФорма
	);
	
	ОсновнаяФорма.ПоказатьВыборЭлемента(
		СписокВыбора,
		Обработчик,
		НСтр("ru = 'Выберите тип документа учета'")
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораПроизвольногоТипаДокументовУчета()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого Элемент Из Метаданные.Документы Цикл
		
		СписокВыбора.Добавить(Элемент.ПолноеИмя(), Элемент.Представление());
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьВыборПроизвольногоДокументаУчетаПослеВыбораТипа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьВыборДокументаУчета(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаУчетаПослеВыбораТипа(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПравилоСопоставленияПроизвольныйДокумент() Тогда
		
		НачатьВыборПроизвольногоТипаДокументаУчета();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		
		ОбработчикВыбораДокумента = ОбработчикОповещения_ОбработкаВыбораДокумента();
		
		ОсновнаяФорма = ОсновнаяФорма();
		
		ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(ОбработчикВыбораДокумента, ВыбранноеЗначение);
		
	Иначе
		
		НачатьВыборДокументаУчета(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПравилоСопоставленияПроизвольныйДокумент()
	Возврат "Документы";
КонецФункции

&НаКлиенте
Процедура НачатьВыборДокументаУчета(ИмяМетаданных)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", СсылкаНаОбъект);
	
	ИмяФормыВыбора = ИмяМетаданных + ".ФормаВыбора";
	
	ОбработчикВыбора = ОбработчикОповещения_ОбработкаВыбораДокумента();
	
	ОсновнаяФорма = ОсновнаяФорма();
	смв = ОсновнаяФорма.смв();
	
	смв.смв_ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыФормыВыбора,
		ЭтаФорма,,,,
		ОбработчикВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъект_РежимВыбораДокумента()
	
	Элементы.СсылкаНаОбъект.КнопкаОчистки = Истина;
	Элементы.СсылкаНаОбъект.КнопкаОткрытия = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаУчета(ИмяФормы, Параметры, Владелец)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦентрПоддержки()
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	Категория = Метрика_КатегорияНайтиНужныйДокумент();
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.ЦентрПоддержки_Открыть(Категория, НазваниеФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМетаданныхПоСсылке(ЗначениеСсылка)
	
	Результат = ЗначениеСсылка.Метаданные().ПолноеИмя();
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокументаУчета(ПолноеИмяОбъектаМетаданных, ОбъектСсылка, ОбработчикЗакрытия)
	
	Ключ = Новый Структура;
	Ключ.Вставить("Ключ", ОбъектСсылка);
	
	ОсновнаяФорма = ОсновнаяФорма();
	смв = ОсновнаяФорма.смв();
	
	ПутьКФорме = ПолноеИмяОбъектаМетаданных + ".ФормаОбъекта";
	
	смв.смв_ОткрытьФорму(
		ПутьКФорме,
		Ключ,
		ЭтаФорма,,,,
		ОбработчикЗакрытия
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСценарииПроверокОтложенно()
	
	ПоказатьИндикаторДлительнойОперации();
	
	ПодключитьОбработчикОжидания("ОбработатьСценарииПроверок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоВебсСылке(АдресСсылки)
	
	ДополнительныеПараметры = Неопределено;
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.ОповеститьИлиПерейтиПоСсылке(
		АдресСсылки,
		ДополнительныеПараметры,
		ЭтаФорма
	);
	
КонецПроцедуры

//}		


//{		Обработчики оповещения

&НаКлиенте
Функция ОбработчикОповещения_ОбработкаВыбораДокумента()
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	Результат = ОсновнаяФорма.НовыйОписаниеОповещения(
		"СсылкаНаОбъект_ОбработчикВыбораЗначения",
		ЭтаФорма,
	);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СсылкаНаОбъект_ОбработчикВыбораЗначения(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект_РежимВыбораДокумента();
	
	СсылкаНаОбъект = ВыбранноеЗначение;
	
	ОбработатьСценарииПроверокОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета_ОбработчикРезультатаДействия(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ОбработатьСценарииПроверокОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьОрганизацию_ОбработчикРезультатаДействия(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСценарииПроверокОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусаКонтрагента_ОбработчикРезультатаДействия(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ОбработатьСценарииПроверокОтложенно();
	
КонецПроцедуры

//}		Обработчики оповещения


//{		Сценарии проверки

&НаКлиенте
Процедура ОбработатьСценарииПроверок() Экспорт
	
	ОбработатьСценарииПроверокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСценарииПроверокНаСервере()
	
	ОчиститьКэшПроверок();
	
	РезультатПроверки = Новый СписокЗначений;
	
	ПроверкаСопоставленияОрганизации(РезультатПроверки);
	
	ПроверкиКонтрагентаДокумента(РезультатПроверки);
	
	ПроверкаПроведенияДокумента(РезультатПроверки);
	
	ПроверкаОтправкиДокумента(РезультатПроверки);
	
	ПроверкаИспользованияРасширенныхФильтров(РезультатПроверки);
	
	ОбработатьРезультатыПроверокПередВизуализацией(РезультатПроверки);
	
	HTMLСтраницаРезультатПоиска(РезультатПроверки);
	
	ПоказатьСтраницуРезультатовПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаСопоставленияОрганизации(РезультатПроверки)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Попытка
		
		ОрганизацияОбъекта = ОрганизацияОбъектаНаСервере();
		ОрганизацияСопоставлена = Ядро.Организации_ОрганизацияСопоставленаСЯщикомДиадок(ОрганизацияОбъекта);
		
		Если НЕ ОрганизацияСопоставлена Тогда
			
			РезультатПроверки.Добавить(,КодПроверки_ОрганизацияНеСопоставлена());
			
		КонецЕсли;
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеСопоставитьОрганизацию();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкиКонтрагентаДокумента(РезультатПроверки)
	
	КонтрагентСопоставлен = КонтрагентСопоставлен();
	
	Если НЕ КонтрагентСопоставлен Тогда
		ПроверкаНаличияКонтрагентаВДиадоке(РезультатПроверки);
	КонецЕсли;
	
	Если КонтрагентСопоставлен
		Или КонтрагентЕстьВДиадоке(РезультатПроверки) Тогда
		ПроверкаСтатусаКонтрагента(РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНаличияКонтрагентаВДиадоке(РезультатПроверки)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Попытка
		
		КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
		ИННКонтрагента = ИННКонтрагентаНаСервере(КонтрагентОбъекта);
		ОрганизацияОбъекта = ОрганизацияОбъектаНаСервере();
		ИдентификаторОрганизации = ИдентификаторОрганизацииНаСервере(ОрганизацияОбъекта);
		
		КонтрагентЕстьВДиадок = Ядро.Контрагенты_КонтрагентЕстьВДиадок(ИННКонтрагента, ИдентификаторОрганизации);
		
		Если НЕ КонтрагентЕстьВДиадок Тогда
			
			РезультатПроверки.Добавить(,КодПроверки_КонтрагентаНетВДиадоке());
			
		КонецЕсли;
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеПроверитьКонтрагентВДиадоке();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаСтатусаКонтрагента(РезультатПроверки)
	
	Попытка
		
		КонтрагентСопоставлен = КонтрагентСопоставлен();
		
		Если КонтрагентСопоставлен Тогда
			СтатусКонтрагента = ПолучитьСтатусКонтрагентаПоBoxId();
		Иначе
			СтатусКонтрагента = ПолучитьСтатусКонтрагентаПоИНН();
		КонецЕсли;
		
		Ядро = Модуль_ЯдроНаСервере();
		СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
		
		КонтрагентВНеподходящемСтатусе = Истина;
		
		Если КонтрагентСопоставлен И СтатусКонтрагента = СтатусыКонтрагентов.ПартнерскиеОтношения Тогда
			КонтрагентВНеподходящемСтатусе = Ложь;
		КонецЕсли;
		
		Если КонтрагентВНеподходящемСтатусе Тогда
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("КонтрагентСопоставлен", КонтрагентСопоставлен);
			ДопПараметры.Вставить("СтатусКонтрагента", СтатусКонтрагента);
			
			РезультатПроверки.Добавить(ДопПараметры, КодПроверки_ПроверкаСтатусаКонтрагента());
			
		КонецЕсли;
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеПроверитьСтатусКонтрагента();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПроведенияДокумента(РезультатПроверки)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Попытка
		
		ТребуетсяПроведение = Ядро.ДокументыУчета_ТребуетсяПроведениеДляОтправки(СсылкаНаОбъект);
		
		Если ТребуетсяПроведение Тогда
			
			РезультатПроверки.Добавить(,КодПроверки_ДокументНеПроведен());
			
		КонецЕсли;
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеПроверитьДокументНеПроведен();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаОтправкиДокумента(РезультатПроверки)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ДокументОтправлен = Ядро.ДокументыУчета_ДокументОтправлен(СсылкаНаОбъект);
	
	Если ДокументОтправлен Тогда
		
		РезультатПроверки.Добавить(,КодПроверки_ДокументОтправлен());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаИспользованияРасширенныхФильтров(РезультатПроверки)
	
	Попытка
		
		ИспользуютсяРасширенныеФильтры = ИспользуютсяРасширенныеФильтры();
		
		Если ИспользуютсяРасширенныеФильтры Тогда
			
			РезультатПроверки.Добавить(,КодПроверки_ИспользуютсяРасширенныеФильтры());
			
		КонецЕсли;
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеПроверитьИспользованиерасширенныхФильтров();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыПроверокПередВизуализацией(РезультатПроверки)
	
	Если РезультатПроверки.Количество() > 1 Тогда
		
		Для Сч = -РезультатПроверки.Количество() + 1 По 0 Цикл
			
			ИндексЗадачи = -Сч;
			
			ЭлементРезультата = РезультатПроверки[ИндексЗадачи];
			
			Если ЭлементРезультата.Представление = КодПроверки_ИспользуютсяРасширенныеФильтры() Тогда
				РезультатПроверки.Удалить(ЭлементРезультата);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_ОрганизацияНеСопоставлена()
	Возврат "ОрганизацияНеСопоставлена";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_КонтрагентНеСопоставлен()
	Возврат "КонтрагентНеСопоставлен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_КонтрагентаНетВДиадоке()
	Возврат "КонтрагентаНетВДиадоке";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_ПроверкаСтатусаКонтрагента()
	Возврат "СтатусКонтрагентаНеподходящий";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_ДокументНеПроведен()
	Возврат "ДокументНеПроведен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_ДокументОтправлен()
	Возврат "ДокументОтправлен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПроверки_ИспользуютсяРасширенныеФильтры()
	Возврат "ИспользуютсяРасширенныеФильтры";
КонецФункции

//}		Сценарии проверки


//{		Формирование результата проверки в форме HTML

&НаСервере
Процедура HTMLСтраницаРезультатПоиска(РезультатПроверки)
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	ТекстHTML = ОбработкаОбъект.HTMLРезультатПоискаДокумента1С(РезультатПроверки);
	
КонецПроцедуры

//}		Формирование результата проверки в форме HTML


//{		Обработчики действий документа HTML

&НаКлиенте
Процедура ОбработатьНажатие_СопоставитьОрганизацию(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОбработчикЗакрытия = ОсновнаяФорма.НовыйОписаниеОповещения(
		"СопоставитьОрганизацию_ОбработчикРезультатаДействия",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.ЗапуститьНастройкуОрганизации(ОбработчикЗакрытия);
	
	ДействиеМетрики = Метрика_ДействиеСопоставитьОрганизацию();
	Метрика_ДобавитьПоведение_НажатиеКнопки(ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ОткрытьДокументУчета(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОбработчикЗакрытия = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ОткрытьДокументУчета_ОбработчикРезультатаДействия",
		ЭтаФорма
	);
	
	ИмяМетаданных = ИмяМетаданныхПоСсылке(СсылкаНаОбъект);
	
	ОткрытьФормуДокументаУчета(ИмяМетаданных, СсылкаНаОбъект, ОбработчикЗакрытия);
	
	ДействиеМетрики = Метрика_ДействиеОткрытьУчетныйДокумент();
	Метрика_ДобавитьПоведение_НажатиеКнопки(ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ОткрытьИнструкцию(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПерейтиПоВебсСылке(Результат);
	
	ДействиеМетрики = Метрика_ДействиеИнструкция();
	Метрика_ДобавитьПоведение_НажатиеКнопки(ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатие_ПроверкаСтатусаКонтрагента(СериализованныеПараметры, ДополнительныеПараметры = Неопределено) Экспорт
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	ДопПараметры = Ядро.ДесериализоватьПараметрыГиперссылки(СериализованныеПараметры);
	
	КонтрагентСопоставлен = ДопПараметры.КонтрагентСопоставлен;
	СтатусКонтрагента = ДопПараметры.СтатусКонтрагента;
	
	Платформа = Модуль_Платформа();
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОбработчикЗакрытия = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ПроверкаСтатусаКонтрагента_ОбработчикРезультатаДействия",
		ЭтаФорма
	);
	
	ОрганизацияОбъекта = ОрганизацияОбъекта();
	КонтрагентОбъекта = КонтрагентОбъекта();
	
	ПоказатьФормуСопоставления = ПоказатьФормуСопоставления(КонтрагентСопоставлен, СтатусКонтрагента);
	ПоказатьСписокНашихКонтрагентов = ПоказатьСписокНашихКонтрагентов(КонтрагентСопоставлен, СтатусКонтрагента);
	
	Если ПоказатьФормуСопоставления Тогда
		
		Платформа.ПоказатьФормуСопоставленияКонтрагента(
			КонтрагентОбъекта,
			ОрганизацияОбъекта,
			ОбработчикЗакрытия
		);
		
	ИначеЕсли ПоказатьСписокНашихКонтрагентов Тогда
		
		ИдентификаторОрганизации = ИдентификаторОрганизации(ОрганизацияОбъекта);
		
		Если КонтрагентСопоставлен Тогда
			СтрокаПоиска = ИдентификаторУчастникаЭДОКонтрагента();
		Иначе
			СтрокаПоиска = ИННКонтрагента(КонтрагентОбъекта);
		КонецЕсли;
		
		Платформа.Контрагенты_ПоказатьСписокКонтрагентов(
			ИдентификаторОрганизации,
			ОбработчикЗакрытия,
			СтрокаПоиска
		);
		
	Иначе
		
		ИдентификаторОрганизации = ИдентификаторОрганизации(ОрганизацияОбъекта);
		
		Если КонтрагентСопоставлен Тогда
			СтрокаПоиска = ИдентификаторУчастникаЭДОКонтрагента();
		Иначе
			СтрокаПоиска = ИННКонтрагента(КонтрагентОбъекта);
		КонецЕсли;
		
		Платформа.Контрагенты_ПоказатьФормуПоискаИПриглашения(
			ИдентификаторОрганизации,
			ОбработчикЗакрытия,
			СтрокаПоиска
		);
		
	КонецЕсли;
	
	СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
	
	Если НЕ КонтрагентСопоставлен
		И (СтатусКонтрагента = СтатусыКонтрагентов.ПартнерскиеОтношения
		Или СтатусКонтрагента = СтатусыКонтрагентов.ОжидаетсяОтвет) Тогда
		
		ДействиеМетрики = Метрика_ДействиеСопоставитьКонтрагента();
	Иначе
		ДействиеМетрики = Метрика_ДействиеНастроитьОбмен();
	КонецЕсли;
	
	СтатусДляМетрики = Метрика_СтатусКонтрагента(СтатусКонтрагента);
	
	Метрика_ДобавитьПоведение_НажатиеКнопки(ДействиеМетрики);
	Метрика_ДобавитьСтатистику_НажатиеКнопки(ДействиеМетрики, СтатусДляМетрики);
	
КонецПроцедуры

//}		Обработчики действий документа HTML


//{		Служебные процедуры и функции

&НаСервере
Функция ИспользуютсяРасширенныеФильтры()
	
	Результат = Ложь;
	
	КомпоновщикНастроекОтбора = ОбработкаОбъект().КомпоновщикНастроекОтбора;
	
	Для Каждого Отбор Из КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
		
		Если Отбор.Использование Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьФормуСопоставления(КонтрагентСопоставлен, СтатусКонтрагента)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
	
	Результат = НЕ КонтрагентСопоставлен И СтатусКонтрагента = СтатусыКонтрагентов.ПартнерскиеОтношения;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьСписокНашихКонтрагентов(КонтрагентСопоставлен, СтатусКонтрагента)
	
	Результат = Ложь;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
	
	Если КонтрагентСопоставлен
		И СтатусКонтрагента = СтатусыКонтрагентов.ПриглашаютВас Тогда
		
		Результат = Истина;
		
	ИначеЕсли НЕ КонтрагентСопоставлен
		И (СтатусКонтрагента = СтатусыКонтрагентов.ОжидаетсяОтвет Или СтатусКонтрагента = СтатусыКонтрагентов.ПриглашаютВас) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОрганизацияОбъекта()
	
	Если ЗначениеЗаполнено(_ОрганизацияОбъекта) Тогда
		Возврат _ОрганизацияОбъекта;
	КонецЕсли;
	
	Результат = ОрганизацияОбъектаНаСервере();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОрганизацияОбъектаНаСервере()
	
	Если ЗначениеЗаполнено(_ОрганизацияОбъекта) Тогда
		Возврат _ОрганизацияОбъекта;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	_ОрганизацияОбъекта = Ядро.ДокументыУчета_Организация(СсылкаНаОбъект);
	
	Возврат _ОрганизацияОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторОрганизации(ОрганизацияОбъекта)
	
	Если ЗначениеЗаполнено(_ИдентификаторОрганизации) Тогда
		Возврат _ИдентификаторОрганизации;
	КонецЕсли;
	
	Результат = ИдентификаторОрганизацииНаСервере(ОрганизацияОбъекта);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторОрганизацииНаСервере(ОрганизацияОбъекта)
	
	Если ЗначениеЗаполнено(_ИдентификаторОрганизации) Тогда
		Возврат _ИдентификаторОрганизации;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	_ИдентификаторОрганизации = Ядро.Организации_ИдентификаторПоССылке(ОрганизацияОбъекта);
	
	Возврат _ИдентификаторОрганизации;
	
КонецФункции

&НаСервере
Функция ИдентификаторКонтрагентаНаСервере(КонтрагентОбъекта)
	
	Если ЗначениеЗаполнено(_ИдентификаторКонтрагента) Тогда
		Возврат _ИдентификаторКонтрагента;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	_ИдентификаторКонтрагента = Ядро.Контрагенты_ИдентификаторПоСсылке(КонтрагентОбъекта);
	
	Возврат _ИдентификаторКонтрагента;
	
КонецФункции

&НаКлиенте
Функция КонтрагентОбъекта()
	
	Если ЗначениеЗаполнено(_КонтрагентОбъекта) Тогда
		Возврат _КонтрагентОбъекта;
	КонецЕсли;
	
	Результат = КонтрагентОбъектаНаСервере();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонтрагентОбъектаНаСервере()
	
	Если ЗначениеЗаполнено(_КонтрагентОбъекта) Тогда
		Возврат _КонтрагентОбъекта;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	_КонтрагентОбъекта = Ядро.ДокументыУчета_Контрагент(СсылкаНаОбъект);
	
	Возврат _КонтрагентОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИННКонтрагента(КонтрагентИБ)
	
	Если ЗначениеЗаполнено(_ИННКонтрагента) Тогда
		Возврат _ИННКонтрагента;
	КонецЕсли;
	
	Результат = ИННКонтрагентаНаСервере(КонтрагентИБ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИННКонтрагентаНаСервере(КонтрагентИБ)
	
	Если ЗначениеЗаполнено(_ИННКонтрагента) Тогда
		Возврат _ИННКонтрагента;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН");
	
	МетаданныеОбъекта = КонтрагентИБ.Метаданные();
	
	Если Ядро.Общее_ЕстьРеквизитМетаданных(МетаданныеОбъекта, "ИНН") Тогда
		
		РеквизитыОбъекта = Новый Массив;
		РеквизитыОбъекта.Добавить("ИНН");
		
		РеквизитыКонтрагента = Ядро.Общее_ЗначенияРеквизитовОбъекта(КонтрагентИБ, РеквизитыОбъекта);
		
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыКонтрагента);
		
	КонецЕсли;
	
	_ИННКонтрагента = Результат.ИНН;
	
	Возврат _ИННКонтрагента;
	
КонецФункции

&НаСервере
Функция КППКонтрагентаНаСервере(КонтрагентИБ)
	
	Результат = Новый Структура;
	Результат.Вставить("КПП");
	
	Ядро = Модуль_ЯдроНаСервере();
	
	МетаданныеОбъекта = КонтрагентИБ.Метаданные();
	
	Если Ядро.Общее_ЕстьРеквизитМетаданных(МетаданныеОбъекта, "КПП") Тогда
		
		РеквизитыОбъекта = Новый Массив;
		РеквизитыОбъекта.Добавить("КПП");
		
		РеквизитыКонтрагента = Ядро.Общее_ЗначенияРеквизитовОбъекта(КонтрагентИБ, РеквизитыОбъекта);
		
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыКонтрагента);
		
	КонецЕсли;
	
	Возврат Результат.КПП;
	
КонецФункции

&НаСервере
Функция КонтрагентСопоставлен()
	
	Если ЗначениеЗаполнено(_КонтрагентСопоставлен) Тогда
		Возврат _КонтрагентСопоставлен;
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Попытка
		
		КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
		
		_КонтрагентСопоставлен = Ядро.Контрагенты_КонтрагентСопоставленСЯщикомДиадок(КонтрагентОбъекта);
		
	Исключение
		
		ДействиеМетрики = Метрика_ДействиеСопоставитьКонтрагента();
		Ошибка = ИнформацияОбОшибке();
		
		Метрика_ДобавитьОшибку(ДействиеМетрики, Ошибка);
		
		_КонтрагентСопоставлен = Ложь;
		
	КонецПопытки;
	
	Возврат _КонтрагентСопоставлен;
	
КонецФункции

&НаСервере
Функция КонтрагентЕстьВДиадоке(РезультатПроверки)
	
	Результат = Истина;
	
	Для Каждого ПроверкаДокумента Из РезультатПроверки Цикл
		
		Если ПроверкаДокумента.Представление = КодПроверки_КонтрагентаНетВДиадоке() Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьКэшПроверок()
	
	_ОрганизацияОбъекта = Неопределено;
	_КонтрагентОбъекта = Неопределено;
	_КонтрагентСопоставлен = Неопределено;
	_ИННКонтрагента = "";
	_ИдентификаторОрганизации = "";
	
КонецПроцедуры

&НаСервере
Функция ХранилищеОбработки_Прочитать(АдресОбработки)
	
	Результат = Неопределено;
	
	СтруктураОбработки = ПолучитьИзВременногоХранилища(АдресОбработки);
	
	Если ЗначениеЗаполнено(СтруктураОбработки) Тогда
		СтруктураОбработки.Свойство("ОбработкаОбъект", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусКонтрагентаПоИНН()
	
	СтатусыСПриоритетом = Новый ТаблицаЗначений();
	СтатусыСПриоритетом.Колонки.Добавить("Статус");
	СтатусыСПриоритетом.Колонки.Добавить("Приоритет");
	
	Ядро = Модуль_ЯдроНаСервере();
	
	КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
	ИННКонтрагента = ИННКонтрагентаНаСервере(КонтрагентОбъекта);
	КППКонтрагента = КППКонтрагентаНаСервере(КонтрагентОбъекта);
	ОрганизацияОбъекта = ОрганизацияОбъектаНаСервере();
	ИдентификаторОрганизации = ИдентификаторОрганизацииНаСервере(ОрганизацияОбъекта);
	
	ПриоритетыСтатусов = ПроверкаСтатусаКонтрагента_ПриоритетыСтатусов();
	
	КонтрагентыСервиса = Ядро.Контрагенты_СписокДляСопоставленияКонтрагентаИБ(ИННКонтрагента, ИдентификаторОрганизации);
	
	Для Каждого КонтрагентСервиса Из КонтрагентыСервиса Цикл
		
		КлючСопоставления = КлючСопоставления(КонтрагентСервиса, КППКонтрагента);
		
		ПриоритетСопоставления = ПриоритетыСтатусов.Получить(КлючСопоставления);
		
		НоваяСтрока = СтатусыСПриоритетом.Добавить();
		НоваяСтрока.Приоритет = ПриоритетСопоставления;
		
		Если ЗначениеЗаполнено(КонтрагентСервиса.ДатаЛиквидации) Тогда
			НоваяСтрока.Статус = СтатусКонтрагента_Ликвидирован();
		Иначе
			НоваяСтрока.Статус = КонтрагентСервиса.Статус;
		КонецЕсли;
		
	КонецЦикла;
	
	СтатусыСПриоритетом.Сортировать("Приоритет");
	
	Если СтатусыСПриоритетом.Количество() > 0 Тогда
		Результат = СтатусыСПриоритетом[0].Статус;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусКонтрагентаПоBoxId()
	
	КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
	
	Ядро = Модуль_ЯдроНаСервере();
	
	КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
	ИдентификаторКонтрагента = ИдентификаторКонтрагентаНаСервере(КонтрагентОбъекта);
	
	ОрганизацияОбъекта = ОрганизацияОбъектаНаСервере();
	ИдентификаторОрганизации = ИдентификаторОрганизацииНаСервере(ОрганизацияОбъекта);
	
	РеквизитыКонтрагента = Ядро.Контрагенты_РеквизитыСопоставленногоКонтрагента(ИдентификаторОрганизации, ИдентификаторКонтрагента);
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ДатаЛиквидации) Тогда
		Результат = СтатусКонтрагента_Ликвидирован();
	Иначе
		Результат = РеквизитыКонтрагента.Статус;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверкаСтатусаКонтрагента_ПриоритетыСтатусов()
	
	Ядро = Модуль_ЯдроНаСервере();
	СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
	
	Результат = Новый Соответствие;
		
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ПартнерскиеОтношения + "_ИННКПП", 1);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ПартнерскиеОтношения + "_ИННКПП", 2);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ПриглашаютВас + "_ИННКПП", 3);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ПриглашаютВас + "_ИННКПП", 4);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ОжидаетсяОтвет + "_ИННКПП", 5);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ОжидаетсяОтвет + "_ИННКПП", 6);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ПартнерскиеОтношения + "_ИНН", 7);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ПартнерскиеОтношения + "_ИНН", 8);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ПриглашаютВас + "_ИНН", 9);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ПриглашаютВас + "_ИНН", 10);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ОжидаетсяОтвет + "_ИНН", 11);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ОжидаетсяОтвет + "_ИНН", 12);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.РаботаетВДиадок + "_ИННКПП", 13);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.РаботаетВДиадок + "_ИННКПП", 14);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.РаботаетВДиадок + "_ИНН", 15);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.РаботаетВДиадок + "_ИНН", 16);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ЗаблокированМной + "_ИННКПП", 17);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ЗаблокированМной + "_ИННКПП", 18);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ЗаблокированМной + "_ИНН", 19);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ЗаблокированМной + "_ИНН", 20);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ЗаблокировалМеня + "_ИННКПП", 21);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ЗаблокировалМеня + "_ИННКПП", 22);
	Результат.Вставить("Диадок_" + СтатусыКонтрагентов.ЗаблокировалМеня + "_ИНН", 23);
	Результат.Вставить("Роуминговый_" + СтатусыКонтрагентов.ЗаблокировалМеня + "_ИНН", 24);
	Результат.Вставить("Диадок_" + СтатусКонтрагента_Ликвидирован() + "_ИННКПП", 25);
	Результат.Вставить("Роуминговый_" + СтатусКонтрагента_Ликвидирован() + "_ИННКПП", 26);
	Результат.Вставить("Диадок_" + СтатусКонтрагента_Ликвидирован() + "_ИНН", 27);
	Результат.Вставить("Роуминговый_" + СтатусКонтрагента_Ликвидирован() + "_ИНН", 28);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КлючСопоставления(КонтрагентСервиса, КППКонтрагента)
	
	Если КонтрагентСервиса.Роуминговый Тогда
		Результат = "Роуминговый_";
	Иначе
		Результат = "Диадок_";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтрагентСервиса.ДатаЛиквидации) Тогда
		Результат = Результат + СтатусКонтрагента_Ликвидирован();
	Иначе
		Результат = Результат + КонтрагентСервиса.Статус;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КППКонтрагента) И КонтрагентСервиса.КПП = КППКонтрагента Тогда
		Результат = Результат + "_ИННКПП";
	Иначе
		Результат = Результат + "_ИНН";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусКонтрагента_Ликвидирован()
	Возврат "Ликвидирован";
КонецФункции

&НаСервере
Функция ИдентификаторУчастникаЭДОКонтрагента()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	КонтрагентОбъекта = КонтрагентОбъектаНаСервере();
	ИдентификаторКонтрагента = ИдентификаторКонтрагентаНаСервере(КонтрагентОбъекта);
	РеквизитыКонтрагента = Ядро.Контрагенты_РеквизитыКонтрагента_АПИ(ИдентификаторКонтрагента);
	
	Возврат РеквизитыКонтрагента.ИдентификаторУчастникаЭДО;
	
КонецФункции

//}		Служебные процедуры и функции


//{		Метрики

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_НажатиеКнопки(Действие)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	Категория = Метрика_КатегорияНайтиНужныйДокумент();
	Метка = Метрики_МеткаНажатиеГиперссылки();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		Категория,
		Действие,
		Метка,,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		Категория,
		Действие,,,,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_НажатиеКнопки(Действие, СтатусКонтрагента)
	
	ДопПеременные = Новый Соответствие;
	ДопПеременные.Вставить("Статус", СтатусКонтрагента);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		Метрика_КатегорияНайтиНужныйДокумент(),
		Действие,,
		ДопПеременные,,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаСервере
Процедура Метрика_ДобавитьОшибку(ДействиеМетрики, ДанныеОшибки)
	
	КатегорияМетрики = Метрика_КатегорияНайтиНужныйДокумент();
	
	ДопПеременные = Новый Структура;
	ДопПеременные.Вставить("ТипЗначения", XMLТипЗнч(СсылкаНаОбъект).ИмяТипа);
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьОшибку(
		КатегорияМетрики,
		ДействиеМетрики,
		ДанныеОшибки,
		ДопПеременные
	);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_СтатусКонтрагента(СтатусКонтрагента)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	СтатусыКонтрагентов = Ядро.Перечисление_СтатусыКонтрагентов();
	
	Если СтатусКонтрагента = СтатусыКонтрагентов.ПартнерскиеОтношения Тогда
		Результат = "МойКонтрагент";
	ИначеЕсли СтатусКонтрагента = СтатусыКонтрагентов.ОжидаетсяОтвет Тогда
		Результат = "ОжидаетсяОтвет";
	ИначеЕсли СтатусКонтрагента = СтатусыКонтрагентов.ПриглашаютВас Тогда
		Результат = "ПригласилМеня";
	ИначеЕсли СтатусКонтрагента = СтатусыКонтрагентов.ЗаблокировалМеня Тогда
		Результат = "ЗаблокировалМеня";
	ИначеЕсли СтатусКонтрагента = СтатусыКонтрагентов.ЗаблокированМной Тогда
		Результат = "ЗаблокированМной";
	ИначеЕсли СтатусКонтрагента = СтатусыКонтрагентов.РаботаетВДиадок Тогда
		Результат = "БезОтношений";
	Иначе
		Результат = СтатусыКонтрагентов.РаботаетВДиадок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеОткрытьУчетныйДокумент()
	Возврат "ОткрытьУчетныйДокумент";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеПроверитьДокументНеПроведен()
	Возврат "ПроверитьДокументНеПроведен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеСопоставитьОрганизацию()
	Возврат "СопоставитьОрганизацию";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеСопоставитьКонтрагента()
	Возврат "СопоставитьКонтрагента";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеНастроитьОбмен()
	Возврат "НастроитьОбмен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеИнструкция()
	Возврат "Инструкция";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеПроверитьКонтрагентВДиадоке()
	Возврат "ПроверитьКонтрагентВДиадоке";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеПроверитьСтатусКонтрагента()
	Возврат "ПроверитьСтатусКонтрагента";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеПроверитьИспользованиеРасширенныхФильтров()
	Возврат "ПроверитьИспользованиеРасширенныхФильтров";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_КатегорияНайтиНужныйДокумент()
	Возврат "НайтиНужныйДокумент";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_МеткаНажатиеГиперссылки()
	
	Возврат "Нажатие гиперссылки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_НаименованиеФормы()
	
	Возврат "НайтиНужныйДокумент";
	
КонецФункции

//}		Метрики
