&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем ПустаяСвязьПриОткрытии;

&НаКлиенте
Перем ОписаниеТиповВсехСсылок;

//{		Сервисные методы

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущейФормы()
	
	Возврат "ФормаЭлементаСправочника";
	
КонецФункции

//}		Сервисные методы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПараметрыФормы();
	Форма_ЗаполнитьРеквизиты();
	
	ИспользуетсяПодсистемаДиадок = Объект.ОбщийКонтекстКлиентСервер.ИспользуетсяПодсистемаДиадок;
	НастройкиДокументовНаОтправку = Новый Структура;
	
	Если ИмяСправочника = "ПодразделенияОрганизаций" Тогда
		
		НастройкиФормыДляПодразделенийОрганизации();
		
	ИначеЕсли ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		НастройкиФормыДляПодразделенийКонтрагента();
		
	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		НастройкиФормыДляОрганизаций();
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		НастройкиФормыДляКонтрагентов();
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	УстановитьЦветКнопокПереключенияЗакладок();
	УстановитьСвойстваФормыТакси();
	УстановитьДоступностьФункцийТарифа();
	УстановитьДоступностьНастроекДокументов();
	
	ЗаполнитьМенюДополнительныхКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенюДополнительныхКнопок()
	
	ОбработкаОбъект = ОбработкаОбъект();
	ОбработкаОбъект.ЗаполнитьДополнительныеКнопкиИзПодключаемогоМодуля(ЭтаФорма, ИмяСправочника, Элементы.ДополнительныеДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыФормы()
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Параметры.Свойство("ID", ID);
	
	Параметры.Свойство("ДанныеКонтрагента",			ДанныеКонтрагента);
	Параметры.Свойство("ДанныеОрганизации",			ДанныеОрганизации);
	Параметры.Свойство("ДанныеПодразделения",		ДанныеПодразделения);
	Параметры.Свойство("ИмяСправочника",			ИмяСправочника);
	Параметры.Свойство("КонтрагентПодразделения",	КонтрагентПодразделения);
	
	Параметры.Свойство("ОткрытоИзМастераПервогоЗапуска", ОткрытоИзМастераПервогоЗапуска);
	
КонецПроцедуры

&НаСервере
Процедура Форма_ЗаполнитьРеквизиты()
	
	РеквизитыОбъекта = СтруктураРеквизитовСправочника();
	МассивРеквизитов = ОбработкаОбъект().РазделитьСтроку(ИменаРеквизитовЗаполнения(), Символы.ПС);
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		РеквизитыОбъекта.Свойство(ИмяРеквизита, ЭтаФорма[ИмяРеквизита]);
	КонецЦикла;
	
	Если ЭтоНастройкиОрганизации(ИмяСправочника) Тогда
		
		ЗаполнитьДанныеФормыНастройкамиОрганизации();
		
	ИначеЕсли ЭтоНастройкиКонтрагента(ИмяСправочника) Тогда
		
		ЗаполнитьДанныеФормыНастройкамиКонтрагента();
		
	ИначеЕсли ЭтоНастройкиПодразделенияОрганизации(ИмяСправочника)
		Или ЭтоНастройкиПодразделенияКонтрагента(ИмяСправочника) Тогда
		
		ЗаполнитьДанныеФормыНастройкамиПодразделения();
				
	КонецЕсли;
	
	ЗаполнитьТаблицуСвязанныхСправочников();
	
	ТипСвязанногоСправочника = ТипСвязанногоСправочникаПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Функция СтруктураРеквизитовСправочника()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ЭтоНастройкиОрганизации(ИмяСправочника) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеОрганизации) Тогда
			Идентификаторы = Новый_ИдентификаторыСправочника(, ID);
			ДанныеОрганизации = Модуль_Ядро.Организации_ЗаполненныеРеквизиты(Идентификаторы);
		КонецЕсли;
		
		Результат = ДанныеОрганизации;
		
	ИначеЕсли ЭтоНастройкиПодразделенияОрганизации(ИмяСправочника) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеПодразделения) Тогда
			Идентификаторы = Новый_ИдентификаторыСправочника(, ID);
			ДанныеПодразделения = Модуль_Ядро.Подразделения_ЗаполненныеРеквизиты(Идентификаторы, ДанныеОрганизации);
		КонецЕсли;
		
		Результат = ДанныеПодразделения;
		
	ИначеЕсли ЭтоНастройкиКонтрагента(ИмяСправочника) Тогда
		
		Результат = ДанныеКонтрагента;
		
	ИначеЕсли ЭтоНастройкиПодразделенияКонтрагента(ИмяСправочника) Тогда
		
		Результат = ДанныеПодразделения;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИменаРеквизитовЗаполнения()
	
	Результат = "Наименование
				|ID
				|ИНН
				|КПП
				|Аббревиатура
				|ID_ВладелецПодразделения
				|ID_РодительПодразделения
				|ID_ОсновноеПодразделение";
	
	Если ИмяСправочника = "Организации" Тогда
		
		Результат = Результат + "
				|AfterIndexKey
				|ДатаГраницыСинхронизации
				|ОтпечатокСертификатаНаСервере
				|ШифроватьДокументы
				|УказыватьОтсутствиеОснованияУПД
				|ОтправлятьНепроведенныеДокументы
				|ЗаписыватьКомментарииВДокументы1С
				|ТекстКомментарияОтправка
				|ТекстКомментарияПолучение";
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Результат = Результат + "
				|ШифроватьДокументы";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПустаяСвязьПриОткрытии = НЕ ЗначениеЗаполнено(ТаблицаСвязанныеСправочники);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФункцийТарифа()
	
	Ядро = Модуль_ЯдроНаСервере();
	ЕстьОграниченияПоТарифу = Ядро.ЕстьОграниченияПоТарифу();
	ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьДекорацииТариф(ЕстьОграниченияПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу)
	
	КомандыФункциональности = Новый Массив;
	КомандыФункциональности.Добавить("ГруппаДокументыНаОтправку");
	КомандыФункциональности.Добавить("ШифроватьДокументы");
	КомандыФункциональности.Добавить("ЗаписыватьКомментарииВДокументы1С");
	КомандыФункциональности.Добавить("ОтправлятьНепроведенныеДокументы");
	
	Если ЕстьОграниченияПоТарифу Тогда
		
		Для Каждого ЭлементФункциональности Из КомандыФункциональности Цикл
			
			ЗаголовокФункции = Элементы[ЭлементФункциональности].Заголовок;
			Элементы[ЭлементФункциональности].Доступность = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьДекорацииТариф(ЕстьОграниченияПоТарифу)
	
	Элементы.ПерейтиНаПолныйТариф.Видимость =
		Элементы.ГруппаШифроватьДокументы.Видимость
		И ЕстьОграниченияПоТарифу;
	
	Элементы.ПерейтиНаПолныйТариф1.Видимость =
		Элементы.ОтправлятьНепроведенныеДокументы.Видимость
		И ЕстьОграниченияПоТарифу;
	
	Элементы.ПерейтиНаПолныйТариф2.Видимость = ЕстьОграниченияПоТарифу;
	Элементы.ПерейтиНаПолныйТариф3.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТарифаМиниНажатие(Элемент)
	
	Метрика_ПоказатьПредупреждениеОТарифе();
	
	НаименованиеФормы = Метрика_НазваниеФормы();
	
	Модуль_Платформа = Модуль_Платформа();
	
	Модуль_Платформа.ПоказатьПредупреждениеОТарифе(НаименованиеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Диадок_Сохранение_Подразделение" 
		И (ИмяСправочника = "Организации"
			ИЛИ ИмяСправочника = "Контрагенты") Тогда
		
		ОбновитьДеревоПодразделенийНаСервере();
		
	ИначеЕсли ИмяСобытия = "Диадок_Сохранение_Контрагент" Тогда
		
		ОбновитьДанныеКонтрагента();
		Форма_ЗаполнитьРеквизиты();
		
	КонецЕсли;
	
КонецПроцедуры

//{		Управление формой

&НаСервере
Процедура УстановитьЦветКнопокПереключенияЗакладок()
	
	ЦветАктивнойКнопки		= ЦветаСтиля.ЦветФонаКнопки;
	ЦветНеактивнойКнопки	= Новый Цвет(230, 230, 230);
	
	Элементы.ПоказатьСвязи.ЦветФона					= ЦветНеактивнойКнопки;
	Элементы.ПоказатьПодразделения.ЦветФона			= ЦветНеактивнойКнопки;
	Элементы.ПоказатьНастройкиДокументов.ЦветФона	= ЦветНеактивнойКнопки;
	Элементы.ПоказатьСистемныеНастройки.ЦветФона	= ЦветНеактивнойКнопки;
	
	ТекущаяСтраница = Элементы.СвязиПодразделения.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Связи Тогда
		
		Элементы.ПоказатьСвязи.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПодразделения Тогда
		
		Элементы.ПоказатьПодразделения.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаНастройкиДокументов Тогда
		
		Элементы.ПоказатьНастройкиДокументов.ЦветФона = ЦветАктивнойКнопки;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСистемныеНастройки Тогда
		
		Элементы.ПоказатьСистемныеНастройки.ЦветФона = ЦветАктивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиФормыДляОрганизаций()
	
	Элементы.ДекорацияЗаголовокОкна.Заголовок 	= Наименование;
	Элементы.ДекорацияИннКппВШапке.Заголовок 	= ОбработкаОбъект().ПредставлениеИннКппДляЭлементаСправочника(ИНН, КПП);
	
	ИспользоватьПодключаемыйМодуль = Модуль_ЯдроНаСервере().ОбщиеНастройки_Прочитать("ИспользоватьПодключаемыйМодуль");
	
	Элементы.ПоказатьСвязи.Заголовок = "Организации в 1С";
	
	Элементы.ОтпечатокСертификатаНаСервере.Видимость			= ИспользоватьПодключаемыйМодуль;
	Элементы.ДекорацияПодсказкаОтпечатокСертификата.Видимость	= ИспользоватьПодключаемыйМодуль;
	
	Элементы.ГруппаСистемныеНастройки.Видимость					= ИспользуетсяПодсистемаДиадок;
	Элементы.ПоказатьСистемныеНастройки.Видимость 				= ИспользуетсяПодсистемаДиадок; 
	
	Элементы.ФормаОбновитьССервера.Видимость					= Ложь;
	Элементы.ГруппаВключенияИндивидуальнойНастройки.Видимость	= Ложь;
	
	Элементы.ДекорацияЗаголовокТаблицыСвязанныхСправочников.Заголовок = "Связи с организациями 1С";
	Элементы.ТаблицаСвязанныеСправочникиДобавить.Заголовок = "Добавить организацию";
	
	УстановкаВидимостьДопФункций();
	ЗаполнитьНастройкиДокументов();

	Элементы.ПояснениеПередаватьМЧДФайлом.Заголовок = 
	"Настройка предназначена только для МЧД, которые зарегистрированы в ФНС. Если не включать настройку, "+
	"то будет передаваться рег.номер МЧД. Если для контрагента отличается способ передачи МЧД, установите для него индивидуальные настройки.";

КонецПроцедуры

&НаСервере
Процедура НастройкиФормыДляКонтрагентов()
	
	Элементы.ДекорацияЗаголовокОкна.Заголовок 	= Наименование;
	Элементы.ДекорацияИннКппВШапке.Заголовок 	= ОбработкаОбъект().ПредставлениеИннКппДляЭлементаСправочника(ИНН, КПП);
	
	НастроитьГруппуРазделыДляКонтрагентов();
	
	Элементы.ГруппаСистемныеНастройки.Видимость	= Ложь;
	
	Элементы.ГруппаКомментарииВДокументах.Видимость				= Ложь;
	Элементы.ОтправлятьНепроведенныеДокументы.Видимость			= Ложь;
	Элементы.УказыватьОтсутствиеОснованияУПД.Видимость			= Ложь;
	Элементы.ПояснениеУказыватьОтсутствиеОснованияУПД.Видимость	= Ложь;
	
	ВидимостьКнопкиОбновитьССервера = ИспользуетсяПодсистемаДиадок И НЕ ОткрытоИзМастераПервогоЗапуска;
	
	Элементы.ФормаОбновитьССервера.Видимость = ВидимостьКнопкиОбновитьССервера;
			
	Элементы.ДекорацияЗаголовокТаблицыСвязанныхСправочников.Заголовок = "Связи с контрагентами 1С";
	Элементы.ТаблицаСвязанныеСправочникиДобавить.Заголовок = "Добавить контрагента";
	
	УстановкаВидимостьДопФункций();
	ЗаполнитьНастройкиДокументов();
	
	Если ЕстьИндивидуальныеНастройкиКонтрагента() Тогда
		ИндивидуальнаяНастройка = Истина;	
	КонецЕсли;
	
	Элементы.ПояснениеПередаватьМЧДФайлом.Заголовок =
	"Настройка предназначена только для МЧД, которые зарегистрированы в ФНС. Если не включать настройку, "+
	"то МЧД будет передаваться в соответствии с настройками организации";
	
КонецПроцедуры

&НаСервере
Процедура НастройкиФормыДляПодразделенийОрганизации()
	
	Элементы.ДекорацияЗаголовокОкна.Заголовок 	= Наименование;
	Элементы.ДекорацияИннКппВШапке.Заголовок 	= ПредставлениеИННКПП(ИНН, КПП);
	
	Элементы.ГруппаРазделы.Видимость = Ложь;
			
	Элементы.ГруппаПодразделения.Видимость			= Ложь;
	Элементы.ФормаОбновитьССервера.Видимость		= Ложь;
	Элементы.ГруппаСистемныеНастройки.Видимость		= Ложь;
	Элементы.ГруппаНастройкиДокументов.Видимость	= Ложь;
	
	Элементы.ДекорацияЗаголовокТаблицыСвязанныхСправочников.Заголовок = "Связи с подразделениями в 1С";
	Элементы.ТаблицаСвязанныеСправочникиДобавить.Заголовок = "Добавить подразделение";
	
КонецПроцедуры

&НаСервере
Процедура НастройкиФормыДляПодразделенийКонтрагента()
	
	Элементы.ДекорацияЗаголовокОкна.Заголовок 	= Наименование;
	Элементы.ДекорацияИннКппВШапке.Заголовок 	= ПредставлениеИННКПП(ИНН, КПП);
	
	Элементы.ГруппаРазделы.Видимость 				= Ложь;
				
	Элементы.ГруппаПодразделения.Видимость			= Ложь;
	Элементы.ГруппаСистемныеНастройки.Видимость		= Ложь;
	Элементы.ГруппаНастройкиДокументов.Видимость	= Ложь;
	Элементы.ФормаОбновитьССервера.Видимость		= ИспользуетсяПодсистемаДиадок;
	
	Элементы.ДекорацияЗаголовокТаблицыСвязанныхСправочников.Заголовок = "Связи с подразделениями в 1С";
	Элементы.ТаблицаСвязанныеСправочникиДобавить.Заголовок = "Добавить подразделение";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваФормыТакси()
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	
	ЗаполнитьЗначенияСвойств(Элементы.ПояснениеДляПакетовНаОтправку,			СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ПояснениеДляДокументовНаОтправку,			СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ПояснениеУказыватьОтсутствиеОснованияУПД,	СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ДекорацияСлужебныйРазделитель2,			СвойствоАвтоМаксимальнаяШирина);
	ЗаполнитьЗначенияСвойств(Элементы.ПояснениеПередаватьМЧДФайлом,				СвойствоАвтоМаксимальнаяШирина);
	
	СвойствоЦветФонаГруппы = Новый Структура("ЦветФона", Новый Цвет(251, 244, 201));
	
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаВключенияИндивидуальнойНастройки,	СвойствоЦветФонаГруппы);
	
	СвойствоЦветФонаГруппы = Новый Структура("ЦветФона", Новый Цвет(229,229,229));
	ЗаполнитьЗначенияСвойств(Элементы.ГруппаУстановитьПодразделениеПоУмолчанию,	СвойствоЦветФонаГруппы);
	
	КнопкиПоляОтпечаткаСертификата = Новый Структура;
	КнопкиПоляОтпечаткаСертификата.Вставить("КнопкаВыпадающегоСписка", Истина);
	ЗаполнитьЗначенияСвойств(Элементы.ОтпечатокСертификатаНаСервере, КнопкиПоляОтпечаткаСертификата); 
	
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимостьДопФункций()
	
	СтрокаКонтекста = Модуль_ЯдроНаСервере().КонтекстСеанса_СтрокаКонтекста(ДанныеОрганизации.ID, Ложь);
	
	Если СтрокаКонтекста = Неопределено Тогда
		Элементы.ГруппаШифроватьДокументы.Видимость = Ложь;
	Иначе    
		Элементы.ГруппаШифроватьДокументы.Видимость = СтрокаКонтекста.ДополнительныеФункции.РазрешеноШифрование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуРазделыДляКонтрагентов()
	 	
	Если ОткрытоИзМастераПервогоЗапуска Тогда
		
		Элементы.ГруппаРазделы.Видимость = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ПоказатьСвязи.Заголовок = "Контрагенты в 1С";
	
	Элементы.ПоказатьСистемныеНастройки.Видимость = Ложь;

КонецПроцедуры

//}		Управление формой

//{		Связанные справочники

&НаСервере
Процедура ЗаполнитьТаблицуСвязанныхСправочников()
	
	ТаблицаСвязанныеСправочники.Очистить();
	
	Если ИмяСправочника = "Организации" Тогда
		
		СвязанныеСправочники = ДанныеОрганизации.СвязанныеСправочники;
									
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		СвязанныеСправочники = ДанныеКонтрагента.СвязанныеСправочники;
				
	ИначеЕсли ИмяСправочника = "ПодразделенияОрганизаций"
		Или ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
						
		СвязанныеСправочники = ДанныеПодразделения.СвязанныеСправочники;
				
	Иначе	
		
		СвязанныеСправочники = Новый Массив;
		
	КонецЕсли;
			
	ИменаРеквизитов 	= "ИНН, КПП";
	ЗначенияРеквизитов 	= Модуль_ЯдроНаСервере().Справочники_ЗначенияРеквизитовЭлементовСправочникаИБ(СвязанныеСправочники, ИменаРеквизитов);
					
	Для Индекс = 0 По СвязанныеСправочники.ВГраница() Цикл	
		
		СвязанныйСправочник = СвязанныеСправочники.Получить(Индекс);
		СвязанныйСправочник_НомерСвязи = Индекс + 1;
		
		НовыйЭлемент = ТаблицаСвязанныеСправочники.Добавить();
		
		НовыйЭлемент.СвязанныйСправочник 	= СвязанныйСправочник;
		НовыйЭлемент.НомерСвязи 			= СвязанныйСправочник_НомерСвязи;
		
		ПарИНН = "";
		ПарКПП = "";
		
		РеквизитыСвязанного = Модуль_ЯдроНаСервере().МассивСтруктур_Найти(ЗначенияРеквизитов, СвязанныйСправочник, "Ссылка");
		
		Если РеквизитыСвязанного <> Неопределено Тогда
			РеквизитыСвязанного.Свойство("ИНН", ПарИНН);
			РеквизитыСвязанного.Свойство("КПП", ПарКПП);	
		КонецЕсли;
		
		НовыйЭлемент.ПредставлениеИннКпп = ПредставлениеИННКПП(ПарИНН, ПарКПП);
						
		НовыйЭлемент.ИконкаСтрокиТаблицы = Модуль_ЯдроНаСервере().БиблиотекаКартинок().КартинкаЛоготип1СКрасный;
		
	КонецЦикла;
	
	ТаблицаСвязанныеСправочники.Сортировать("НомерСвязи");
			
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если ТипСвязанногоСправочника = ТипНеопределено() Тогда
			УстановитьТипЗначенияСвязанногоСправочникаПоУмолчанию();
		Иначе
			УстановитьТипЗначенияСвязанногоСправочника(ТипСвязанногоСправочника);
		КонецЕсли;
		
	Иначе
		
		ТипЗначенияТекущегоЭлемента = ТипЗнч(Элемент.ТекущиеДанные.СвязанныйСправочник);
		УстановитьТипЗначенияСвязанногоСправочника(ТипЗначенияТекущегоЭлемента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйСправочник) Тогда
		
		ТаблицаСвязанныеСправочникиПриИзмененииВызовСервера(ТекущиеДанные.СвязанныйСправочник);
		
	Иначе
		
		ТекущиеДанные.ПредставлениеИннКпп = "";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НомерСвязи) Тогда
		ТекущиеДанные.НомерСвязи = ТаблицаСвязанныеСправочники.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСвязанныеСправочникиПриИзмененииВызовСервера(СвязанныйСправочник)
	
	ДанныеЗаполнения = ДанныеСтрокиТаблицыСвязанныхНаСервере(СвязанныйСправочник);
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Сопоставление;
	ДействиеМетрики = "Редактировать поле";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, СвязанныйСправочник);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиПослеУдаления(Элемент)
	
	ОбновитьНомерСвязиВТаблицеСвязанныеСправочники();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиСвязанныйСправочникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		ТипСвязанногоСправочника = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиСвязанныйСправочникОчистка(Элемент, СтандартнаяОбработка)
	
	ТаблицаСвязанныеСправочникиСвязанныйСправочникОчисткаВызовСервера();
	
	СброситьОграничениеТиповСвязанногоСправочника();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСвязанныеСправочникиСвязанныйСправочникОчисткаВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Сопоставление;
	ДействиеМетрики = "Редактировать поле";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиДобавитьСтроку(Кнопка)
	
	ТаблицаСвязанныеСправочникиДобавитьСтрокуВызовСервера();
	
	Элементы.ТаблицаСвязанныеСправочники.ДобавитьСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСвязанныеСправочникиДобавитьСтрокуВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Сопоставление;
	ДействиеМетрики = "Добавить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязанныеСправочникиУдалитьСтроку(Кнопка)
	
	СвязанныйСправочник = Неопределено;
	ТекущиеДанные = Элементы.ТаблицаСвязанныеСправочники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СвязанныйСправочник = ТекущиеДанные.СвязанныйСправочник;
		ТаблицаСвязанныеСправочники.Удалить(ТекущиеДанные);
	КонецЕсли;
	
	ТаблицаСвязанныеСправочникиУдалитьСтрокуВызовСервера(СвязанныйСправочник);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСвязанныеСправочникиУдалитьСтрокуВызовСервера(СвязанныйСправочник)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Сопоставление;
	ДействиеМетрики = "Удалить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, СвязанныйСправочник);
	
КонецПроцедуры

&НаСервере
Функция ДанныеСтрокиТаблицыСвязанныхНаСервере(СвязанныйСправочник)
			
	ИменаРеквизитов = "ИНН, КПП";
	
	ПолучитьДля = Новый Массив;
	ПолучитьДля.Добавить(СвязанныйСправочник);
			
	ЗначенияРеквизитов 	= Модуль_ЯдроНаСервере().Справочники_ЗначенияРеквизитовЭлементовСправочникаИБ(ПолучитьДля, ИменаРеквизитов);
	РеквизитыСвязанного = Модуль_ЯдроНаСервере().МассивСтруктур_Найти(ЗначенияРеквизитов, СвязанныйСправочник, "Ссылка");
	
	ПарИНН = "";
	ПарКПП = "";
	
	Если РеквизитыСвязанного <> Неопределено Тогда
						
		РеквизитыСвязанного.Свойство("ИНН", ПарИНН);
		РеквизитыСвязанного.Свойство("КПП", ПарКПП);
							
	КонецЕсли;
	
	ПредставлениеИннКпп = ПредставлениеИННКПП(ПарИНН, ПарКПП);
	ИконкаСтрокиТаблицы = Модуль_ЯдроНаСервере().БиблиотекаКартинок().КартинкаЛоготип1СКрасный;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПредставлениеИннКпп", ПредставлениеИннКпп);
	Результат.Вставить("ИконкаСтрокиТаблицы", ИконкаСтрокиТаблицы);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНомерСвязиВТаблицеСвязанныеСправочники()
		
	НовыйНомерСвязи = 1;
	
	Для Каждого ЭлементТЗ Из ТаблицаСвязанныеСправочники Цикл
				
		ЭлементТЗ.НомерСвязи = НовыйНомерСвязи;
		
		НовыйНомерСвязи = НовыйНомерСвязи + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаСвязанныеСправочникиВМассив()
			
	Результат = Новый Массив;
	
	ТаблицаСвязанныеСправочники.Сортировать("НомерСвязи");
		
	Для каждого ЭлементКоллекции Из ТаблицаСвязанныеСправочники Цикл
		
		Результат.Добавить(ЭлементКоллекции.СвязанныйСправочник);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

//}		Связанные справочники

//{		Подразделения

&НаСервере
Процедура ОбновитьДеревоПодразделенийНаСервере()
	
	СписокПодразделений = Неопределено;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если ИмяСправочника = "Организации" Тогда
		
		СписокПодразделений = Модуль_Ядро.Подразделения_СписокПодразделений(ДанныеОрганизации);
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		СтатусыКонтрагентов = Модуль_Ядро.Перечисление_СтатусыКонтрагентов();
		СписокПодразделений = Модуль_Ядро.Подразделения_СписокПодразделений(ДанныеКонтрагента, ДанныеОрганизации);
		
	КонецЕсли;
	
	Если СписокПодразделений <> Неопределено Тогда
		
		ОбработкаОбъект = ОбработкаОбъект();
		
		мДеревоПодразделений = РеквизитФормыВЗначение("ДеревоПодразделений");
		мДеревоПодразделений.Строки.Очистить();
		
		Если ИмяСправочника = "Организации" Тогда
			ОбработкаОбъект.ДобавитьГоловноеПодразделение(мДеревоПодразделений, ДанныеОрганизации);
		ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
			ОбработкаОбъект.ДобавитьГоловноеПодразделение(мДеревоПодразделений, ДанныеКонтрагента);
		КонецЕсли;
		
		ОбработкаОбъект.ЗаполнитьДеревоПодразделений(мДеревоПодразделений, СписокПодразделений, "ID_РодительПодразделения", "");
		ОбработкаОбъект.ЗаполнитьПредставлениеСвязейВДеревеПодразделений(мДеревоПодразделений.Строки, ИмяСправочника, ID);
		
		ЗначениеВРеквизитФормы(мДеревоПодразделений, "ДеревоПодразделений");
		
		УстановитьКартинкуПодразделениеПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуПодразделениеПоУмолчанию()
	
	СтрокиДерева = ДеревоПодразделений.ПолучитьЭлементы();
	
	ЗаполнитьПризнакПоказатьКартинкуПодразделениеПоУмолчанию(СтрокиДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакПоказатьКартинкуПодразделениеПоУмолчанию(СтрокиДерева) 
	
	УстановитьГоловноеПодразделениеПоУмолчанию = Не ЗначениеЗаполнено(ID_ОсновноеПодразделение);
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЭтоГоловноеПодразделение = ЭтоИдентификаторГоловногоПодразделения(СтрокаДерева.ID, ID);
		
		Если ЭтоГоловноеПодразделение
			И УстановитьГоловноеПодразделениеПоУмолчанию Тогда
			
			СтрокаДерева.ПоказатьКартинкуПодразделениеПоУмолчанию = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДерева.ПоказатьКартинкуПодразделениеПоУмолчанию = (ID_ОсновноеПодразделение = СтрокаДерева.ID);
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ЗначениеЗаполнено(ПодчиненныеСтроки) Тогда
			ЗаполнитьПризнакПоказатьКартинкуПодразделениеПоУмолчанию(ПодчиненныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоГоловноеПодразделение(ID_Подразделения)
	
	Возврат ЭтоИдентификаторГоловногоПодразделения(ID_Подразделения, ID);
	
КонецФункции

&НаКлиенте
Процедура ДеревоПодразделенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПодразделений.ТекущиеДанные;
	
	Если ЭтоГоловноеПодразделение(ТекущиеДанные.ID) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеПодразделение	= ТекущиеДанные.ДанныеПодразделения;
	ДанныеПодразделения		= ПодразделениеИзСтрокиДанных(ВыбранноеПодразделение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID",					ДанныеПодразделения.ID);
	ПараметрыФормы.Вставить("ДанныеОрганизации",	ДанныеОрганизации);
	ПараметрыФормы.Вставить("ДанныеКонтрагента",	ДанныеКонтрагента);
	ПараметрыФормы.Вставить("ДанныеПодразделения",	ДанныеПодразделения);
	ПараметрыФормы.Вставить("Объект",				Объект);
	
	Если ИмяСправочника = "Организации" Тогда
		
		ПараметрыФормы.Вставить("ИмяСправочника", "ПодразделенияОрганизаций");
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		ПараметрыФормы.Вставить("ИмяСправочника", "ПодразделенияКонтрагентов");
		
	КонецЕсли;
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("ФормаЭлементаСправочникаУправляемая", ЭтаФорма, ПараметрыФормы,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеИзСтрокиДанных(ДанныеСтрокиТЧ)
	
	Результат = ЗначениеИзСтрокиВнутр(ДанныеСтрокиТЧ);
	
	Возврат Результат;
	
КонецФункции

//}		Подразделения

//{		Настройки документов

&НаСервере
Процедура ЗаполнитьНастройкиДокументов()
	
	ЗаполнитьНастройкиКатегорийПакетовНаОтправку();
	ЗаполнитьНастройкиДокументовНаОтправку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКатегорийПакетовНаОтправку()
	
	НастройкиПакетовНаОтправку = Модуль_ЯдроНаСервере().НастройкиДокументов_НастройкиКатегорийПакетовНаОтправку(ДанныеОрганизации, ДанныеКонтрагента);
	
	ДобавитьЭлементыПакетыНаОтправкуНаФорму(НастройкиПакетовНаОтправку);
	
	Если ДанныеКонтрагента <> Неопределено Тогда
		
		НастройкиДляОрганизации = Модуль_ЯдроНаСервере().НастройкиДокументов_НастройкиКатегорийПакетовНаОтправку(ДанныеОрганизации);
		
		НастройкиПакетовНаОтправкуСтрокой	= ЗначениеВСтрокуВнутр(НастройкиПакетовНаОтправку);
		НастройкиДляОрганизацииСтрокой		= ЗначениеВСтрокуВнутр(НастройкиДляОрганизации);
		
		ОтличаютсяНастройкиПакетовДляКонтрагента = НастройкиПакетовНаОтправкуСтрокой <> НастройкиДляОрганизацииСтрокой; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиДокументовНаОтправку()
	
	Если НастройкиДокументовНаОтправку = Неопределено Тогда
		НастройкиДокументовНаОтправку = Новый Структура;
	Иначе	
		НастройкиДокументовНаОтправку.Очистить();
		ДобавлятьСчетВПакет = Ложь;
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СохраненныеНастройкиДокументовНаОтправку = Модуль_Ядро.НастройкиДокументов_НастройкиДокументовНаОтправку(ДанныеОрганизации, ДанныеКонтрагента);
	
	ЕстьПакетыДляОтправки = ЕстьПакетыДляОтправки();
	
	Если ЕстьПакетыДляОтправки Тогда
		
		ИспользуемыеВидыДокументов = ИспользуемыеВидыДокументов();
		ДляПакетовНеОпределенСоставДокументов = (ИспользуемыеВидыДокументов.Количество() = 0);
		
		Для Каждого НастройкаДокументов Из СохраненныеНастройкиДокументовНаОтправку Цикл
			
			ВидДокумента = НастройкаДокументов.ВидДокумента;
			
			Если ДляПакетовНеОпределенСоставДокументов 
				ИЛИ ИспользуемыеВидыДокументов.Найти(ВидДокумента) <> Неопределено Тогда
				НастройкиДокументовНаОтправку.Вставить(ВидДокумента, НастройкаДокументов);
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьЭлементыДокументыНаОтправкуНаФорму(НастройкиДокументовНаОтправку);
		
		Если ДанныеКонтрагента <> Неопределено Тогда
			
			НастройкиДляОрганизации = Модуль_Ядро.НастройкиДокументов_НастройкиДокументовНаОтправку(ДанныеОрганизации);
			
			НастройкиДокументовНаОтправкуСтрокой	= ЗначениеВСтрокуВнутр(СохраненныеНастройкиДокументовНаОтправку);
			НастройкиДляОрганизацииСтрокой			= ЗначениеВСтрокуВнутр(НастройкиДляОрганизации);
			
			ОтличаютсяНастройкиДокументовДляКонтрагента = НастройкиДокументовНаОтправкуСтрокой <> НастройкиДляОрганизацииСтрокой;
			
		КонецЕсли;
		
		ЗаполнитьНастройкуДобавлятьСчетВПакет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкуДобавлятьСчетВПакет()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	ЗначениеНастройки	= Модуль_Ядро.НастройкиДокументов_ЗначениеНастройкиДобавлятьСчетВПакет(ДанныеОрганизации, ДанныеКонтрагента);
	ДобавлятьСчетВПакет = ЗначениеНастройки;
	
	Если ДанныеКонтрагента <> Неопределено И НЕ ОтличаютсяНастройкиДокументовДляКонтрагента Тогда
		
		ЗначениеНастройкиОрганизации = Модуль_Ядро.НастройкиДокументов_ЗначениеНастройкиДобавлятьСчетВПакет(ДанныеОрганизации);
		
		Если ЗначениеНастройки = Неопределено Тогда
			ДобавлятьСчетВПакет = ЗначениеНастройкиОрганизации;
		Иначе
			ОтличаютсяНастройкиДокументовДляКонтрагента = (ЗначениеНастройки <> ЗначениеНастройкиОрганизации);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПакетыДляОтправки()
	
	Результат = Ложь;
	
	НастройкиПакетов = НастройкиПакетовНаОтправку();
	
	Для Каждого Настройка Из НастройкиПакетов Цикл
		Если Настройка.ОтправлятьПакет Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьШиринуЭлементовДокументыНаОтправку()
	
	Элементы.ДекорацияДокумент.Ширина				= ШиринаЭлементаДокумент();
	Элементы.ДекорацияФорматОтправки.Ширина			= ШиринаЭлементаФорматОтправки();
	Элементы.ДекорацияВнешниеПечатныеФормы.Ширина	= ШиринаЭлементаВПФ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыНаОтправку()
	
	УдалитьЭлементыДокументыНаОтправку();
	ЗаполнитьНастройкиДокументовНаОтправку();
	
КонецПроцедуры


// Добавляет реквизиты формы категории и виды пакетов и создает для них элементы формы.
//
// Например:
// Для категории пакета "Основной пакет" с видами пакетов:
//  "ID_ОсновнойПакет", "СФ + ТОРГ12/Акт"
//  "ID_УПД", "УПД"
//  "ID_УПД_раздельно", "УПД СЧФ + УПД ДОП"
// будут созданы реквизиты "КатегорияПакета_Основной_пакет", "ВидПакета_Основной_пакет"
// Для реквизита "КатегорияПакета_Основной_пакет" будет создано ПолеФормы с видом ПолеФлажка,
// а для реквизита "ВидПакета_Основной_пакет" создано ПолеФормы с видом ПолеВвода и списком выбора из видов пакетов
//
// Если для категории пакета будет только один вид пакета, то на форме не будет создан элемент для реквизита "ВидПакета_Основной_пакет"
//
// Параметры:
//  НастройкиПакетовНаОтправку - Массив
//
&НаСервере
Процедура ДобавитьЭлементыПакетыНаОтправкуНаФорму(НастройкиПакетовНаОтправку)
	
	Для Каждого Настройка Из НастройкиПакетовНаОтправку Цикл
		
		КатегорияПакета	= Настройка.КатегорияПакета;
		
		ИмяРеквизитаКатегорияПакета = ИмяРеквизитаКатегорияПакета(КатегорияПакета);
		Реквизит = НовыйРеквизитФормы(ИмяРеквизитаКатегорияПакета, Новый ОписаниеТипов("Булево"),, Настройка.НаименованиеКатегории,, Настройка.ОтправлятьПакет);
		
		ИмяРеквизитаВидПакета = ИмяРеквизитаВидПакета(КатегорияПакета);
		Реквизит = НовыйРеквизитФормы(ИмяРеквизитаВидПакета, Новый ОписаниеТипов("Строка"),,,, Настройка.ВидПакета);
		
		ИмяГруппы = ИмяГруппыПакетаНаОтправку(КатегорияПакета);
		Группа = НоваяГруппаФормыБезОтображения(ИмяГруппы, Элементы.ГруппаПакетыНаОтправку);
		
		ЭлементКатегория = НовоеПолеФормы(ИмяРеквизитаКатегорияПакета, Группа, ВидПоляФормы.ПолеФлажка, ПоложениеЗаголовкаЭлементаФормы.Право);
		ЭлементКатегория.УстановитьДействие("ПриИзменении", "КатегорияПакетаПриИзменении");
		
		СоздаватьЭлементВидПакета = Настройка.ВидыПакетов.Количество() > 1;
		
		Если СоздаватьЭлементВидПакета Тогда
			
			ЭлементВидПакета = НовоеПолеФормы(ИмяРеквизитаВидПакета, Группа, ВидПоляФормы.ПолеВвода, ПоложениеЗаголовкаЭлементаФормы.Нет, Настройка.ВидыПакетов);
			ЭлементВидПакета.Доступность = Настройка.ОтправлятьПакет;
			ЭлементВидПакета.УстановитьДействие("ПриИзменении", "ВидПакетаПриИзменении");
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьШиринуЭлементовДокументыНаОтправку();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыДокументыНаОтправкуНаФорму(НастройкиДокументовНаОтправку)
	
	Для Каждого КлючЗначение Из НастройкиДокументовНаОтправку Цикл
		
		ВидДокумента = КлючЗначение.Ключ;
		Настройка = КлючЗначение.Значение;
		
		ИмяГруппы					= ИмяГруппыДокументаНаОтправку(ВидДокумента);
		ИмяЭлементаДокумент			= ИмяЭлементаДокументНаОтправку_Документ(ВидДокумента);
		ИмяЭлементаФорматОтправки	= ИмяЭлементаДокументНаОтправку_ФорматОтправки(ВидДокумента);
		ИмяКнопкиИзменить			= ИмяЭлементаДокументНаОтправку_КнопкаИзменить(ВидДокумента);
		
		Группа = НоваяГруппаФормыБезОтображения(ИмяГруппы, Элементы.ГруппаДокументыНаОтправку);
		
		СвойствоВертикальноеПоложение = Новый Структура("ВертикальноеПоложениеПодчиненных", ВертикальноеПоложениеЭлемента.Центр);
		ЗаполнитьЗначенияСвойств(Группа, СвойствоВертикальноеПоложение);
		
		ЭлементДокумент = НоваяДекорацияНадпись(ИмяЭлементаДокумент, Группа, Настройка.Наименование, ШиринаЭлементаДокумент());
		
		ФорматКонтента = Настройка.ФорматыКонтента.НайтиПоЗначению(Настройка.ФорматКонтента);
		
		Если ФорматКонтента = Неопределено Тогда
			ЗаголовокЭлементаФорматОтправки = Настройка.ФорматыКонтента[0].Представление;
		Иначе
			ЗаголовокЭлементаФорматОтправки = ФорматКонтента.Представление;
		КонецЕсли;
		
		ЭлементФорматОтправки = НоваяДекорацияНадпись(ИмяЭлементаФорматОтправки, Группа, ЗаголовокЭлементаФорматОтправки, ШиринаЭлементаФорматОтправки());
		
		ИмяЭлементаВПФ			= ИмяЭлементаДокументНаОтправку_ВПФ(ВидДокумента);
		ЗаголовокЭлементаВПФ	= КоличествоВПФСтрокой(Настройка.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Количество());
		ЭлементВПФ				= НоваяДекорацияНадпись(ИмяЭлементаВПФ, Группа, ЗаголовокЭлементаВПФ, ШиринаЭлементаВПФ());
		КнопкаИзменить			= НоваяКнопкаФормы(ИмяКнопкиИзменить, Группа, "ИзменитьНастройкуПечатныхФорм");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыДокументыНаОтправку()
	
	Для Каждого КлючЗначение Из НастройкиДокументовНаОтправку Цикл
		
		ВидДокумента = КлючЗначение.Ключ;
		
		ИмяГруппы = ИмяГруппыДокументаНаОтправку(ВидДокумента);
		
		Если Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
			Элементы.Удалить(Элементы[ИмяГруппы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает выбранный вид пакета для каждой категории пакета.
//
// Если категория не выбрана, то вид пакета будет пустой строкой
// 
// Возвращаемое значение:
//  Массив - элементами массива являются структуры
//
&НаСервере
Функция НастройкиПакетовНаОтправку()
	
	Результат = Новый Массив;
	ИменаКлючей = "КатегорияПакета, ОтправлятьПакет, ВидПакета";
	
	Реквизиты = РеквизитыФормыКатегорияПакета();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		КатегорияПакета = КатегорияПакетаПоИмениРеквизита(Реквизит.Имя);
		ОтправлятьПакет = ЭтаФорма[Реквизит.Имя];
		
		Если ОтправлятьПакет Тогда
			ИмяРеквизита = ИмяРеквизитаВидПакета(КатегорияПакета);
			ВидПакета = ЭтаФорма[ИмяРеквизита];
		Иначе
			ВидПакета = "";
		КонецЕсли;
		
		Настройка = Новый Структура(ИменаКлючей, КатегорияПакета, ОтправлятьПакет, ВидПакета);
		
		Результат.Добавить(Настройка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает идентификаторы видов документов, для выбранных видов пакетов
// 
// Возвращаемое значение:
//  Массив - элементами массива являются строки (идентфикаторы видов документа)
//
&НаСервере
Функция ИспользуемыеВидыДокументов()
	
	Результат = Новый Массив;
	
	ВидыПакетов = Модуль_ЯдроНаСервере().СопоставлениеДанныхПМ_ТаблицаВидовСправочника("ВидыПакетов");
	
	Настройки = НастройкиПакетовНаОтправку();
	
	Для Каждого Настройка Из Настройки Цикл
		
		Если Не Настройка.ОтправлятьПакет Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВидаПакета = ВидыПакетов.Найти(Настройка.ВидПакета, "ID");
		
		Если ДанныеВидаПакета <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеВидаПакета.СоставПакета) Тогда
				СоставПакета = Модуль_ЯдроНаСервере().РазделитьСтроку(ДанныеВидаПакета.СоставПакета);
				Модуль_ЯдроНаСервере().ДополнитьМассив(Результат, СоставПакета);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизитаКатегорияПакета(КатегорияПакета = "")
	
	Возврат "КатегорияПакета_" + СтрЗаменить(КатегорияПакета, " ", "_");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизитаВидПакета(КатегорияПакета)
	
	Возврат "ВидПакета_" + СтрЗаменить(КатегорияПакета, " ", "_");
	
КонецФункции

&НаСервере
Функция ИмяГруппыПакетаНаОтправку(КатегорияПакета)
	
	Возврат "ГруппаПакетНаОтправку_" + СтрЗаменить(КатегорияПакета, " ", "_");
	
КонецФункции

&НаСервере
Функция ИмяГруппыДокументаНаОтправку(ВидДокумента)
	
	Возврат "ГруппаДокументНаОтправку_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаДокументНаОтправку_Документ(ВидДокумента)
	
	Возврат "ДокументНаОтправку_Документ_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаДокументНаОтправку_ФорматОтправки(ВидДокумента)
	
	Возврат "ДокументНаОтправку_ФорматОтправки_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаДокументНаОтправку_ВПФ(ВидДокумента)
	
	Возврат "ДокументНаОтправку_ВПФ_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаДокументНаОтправку_КнопкаИзменить(ВидДокумента = "")
	
	Возврат "ДокументНаОтправку_КнопкаИзменить_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаДокументНаОтправку_Подчеркивание(ВидДокумента)
	
	Возврат "ДокументНаОтправку_Подчеркивание_" + ВидДокумента;
	
КонецФункции

&НаСервере
Функция КоличествоВПФСтрокой(Количество)
	
	Результат = "-";
	
	Если Количество > 0 Тогда
		Результат = Строка(Количество) +
					" " +
					СтрЗаменить(ЧислоПрописью(Количество,, "внешняя форма, внешние формы, внешних форм, ж,,,,, 0"),
								ЧислоПрописью(Количество,, ",,, ж,,,,, 0"),
								"");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КатегорияПакетаПоИмениРеквизита(ИмяРеквизита)
	
	Результат = "";
	
	Префикс = ИмяРеквизитаКатегорияПакета();
	
	Если Найти(ИмяРеквизита, Префикс) > 0 Тогда
		Результат = СтрЗаменить(ИмяРеквизита, Префикс, "");
		Результат = СтрЗаменить(Результат, "_", " ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все реквизиты формы, имена которых начинается с "КатегорияПакета_"
// 
// Возвращаемое значение:
//  Массив - элементы массива имеют тип "РеквизитФормы"
//
&НаСервере
Функция РеквизитыФормыКатегорияПакета()
	
	Результат = Новый Массив;
	
	РеквизитыФормы = ЭтаФорма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		
		Если Найти(Реквизит.Имя, "КатегорияПакета_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Реквизит);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВидДокументаПоИмениКнопкиИзмененияПечатныхФорм(ИмяЭлемента)
	
	Результат = "";
	
	Префикс = ИмяЭлементаДокументНаОтправку_КнопкаИзменить();
	
	Если Найти(ИмяЭлемента, Префикс) > 0 Тогда
		Результат = СтрЗаменить(ИмяЭлемента, Префикс, "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция НовыйРеквизитФормы(Имя, ОписаниеТипа, Путь = "", ЗаголовокРеквизита = "", СохраняемыеДанные = Ложь, ЗначениеРеквизита = Неопределено)
	
	Результат = Новый РеквизитФормы(Имя, ОписаниеТипа, Путь, ЗаголовокРеквизита, СохраняемыеДанные);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Результат);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Не ЗначениеРеквизита = Неопределено Тогда
		ЭтаФорма[Имя] = ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НоваяГруппаФормыБезОтображения(Имя, Родитель)
	
	Результат = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Отображение = ОтображениеОбычнойГруппы.Нет;
	Результат.ОтображатьЗаголовок = Ложь;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовоеПолеФормы(Имя, Родитель, Вид, ПоложениеЗаголовка, СписокВыбора = Неопределено)
	
	Результат = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	Результат.ПутьКДанным = Имя;
	Результат.Вид = Вид;
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовка;
	
	Если Не СписокВыбора = Неопределено Тогда
		
		Результат.РежимВыбораИзСписка = Истина;
		Для Каждого Элемент Из СписокВыбора Цикл
			Результат.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НоваяДекорацияНадпись(Имя, Родитель, ЗаголовокДекорации = "", Ширина = 0)
	
	Результат = Элементы.Добавить(Имя, Тип("ДекорацияФормы"), Родитель);
	Результат.Вид = ВидДекорацииФормы.Надпись;
	Результат.Заголовок = ЗаголовокДекорации;
	Результат.Ширина = Ширина;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НоваяКнопкаФормы(Имя, Родитель, ИмяКоманды, ЗаголовокКнопки = "")
	
	Результат = Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
	
	Результат.ИмяКоманды	= ИмяКоманды;
	Результат.Заголовок		= ЗаголовокКнопки;
	Результат.Картинка		= Элементы.ИконкаИзмененияВПФ.Картинка;
	Результат.Отображение	= ОтображениеКнопки.Картинка;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ШиринаЭлементаДокумент()
	
	Возврат 25;
	
КонецФункции

&НаСервере
Функция ШиринаЭлементаФорматОтправки()
	
	Возврат 15;
	
КонецФункции

&НаСервере
Функция ШиринаЭлементаВПФ()
	
	Возврат 17;
	
КонецФункции


&НаКлиенте
Процедура КатегорияПакетаПриИзменении(Команда)
	
	КатегорияПакетаПриИзмененииВызовСервера(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура КатегорияПакетаПриИзмененииВызовСервера(ИмяКоманды)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Настройка пакета на отправку";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОтправлятьПакет = ЭтаФорма[ИмяКоманды];
	
	КатегорияПакета = КатегорияПакетаПоИмениРеквизита(ИмяКоманды);
	ИмяРеквизита = ИмяРеквизитаВидПакета(КатегорияПакета);
	
	ЕстьЭлементВидПакета = Элементы.Найти(ИмяРеквизита) <> Неопределено;
	Если ЕстьЭлементВидПакета Тогда
		Элементы[ИмяРеквизита].Доступность = ОтправлятьПакет;
		ID_ВидПакета = ЭтаФорма[ИмяРеквизита];
	КонецЕсли;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидПакета", ID_ВидПакета);
	Переменные.Вставить("Значение", ОтправлятьПакет);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ОбновитьДокументыНаОтправку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПакетаПриИзменении(Команда)
	
	ВидПакетаПриИзмененииВызовСервера(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ВидПакетаПриИзмененииВызовСервера(ИмяКоманды)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Настройка вида пакета";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ОбновитьДокументыНаОтправку();
	
	ID_ВидПакета = ЭтаФорма[ИмяКоманды];
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидПакета", ID_ВидПакета);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкуПечатныхФорм(Команда)
	
	Настройка = Неопределено;
	ИзменитьНастройкуПечатныхФормВызовСервера(Настройка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаДокументаНаОтправку"	, Настройка);
	ПараметрыФормы.Вставить("ИмяСправочника"				, ИмяСправочника);
	ПараметрыФормы.Вставить("ДанныеОрганизации"				, ДанныеОрганизации);
	ПараметрыФормы.Вставить("ДанныеКонтрагента"				, ДанныеКонтрагента);
	ПараметрыФормы.Вставить("ДобавлятьСчетВПакет"			, ДобавлятьСчетВПакет);
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("ИзменениеНастройкиПечатныхФормЗавершение", ЭтаФорма);
	
	ОсновнаяФорма().ОткрытьФормуДиадокМодально("НастройкаПечатныхФормУправляемая", ЭтаФорма, ПараметрыФормы, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкуПечатныхФормВызовСервера(Настройка)
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Редактирование форматов и ВПФ";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	ВидДокумента = ВидДокументаПоИмениКнопкиИзмененияПечатныхФорм(ТекущийЭлемент.Имя);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ID_ВидДокумента", ВидДокумента);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	НастройкиДокументовНаОтправку.Свойство(ВидДокумента, Настройка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеНастройкиПечатныхФормЗавершение(ПараметрыЗакрытияФормы, ДопПараметры) Экспорт 
	
	Если ПараметрыЗакрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = ПараметрыЗакрытияФормы.НастройкаДокументов;
	ДобавлятьСчетВПакет = ПараметрыЗакрытияФормы.ДобавлятьСчетВПакет;
	
	НастройкиДокументовНаОтправку.Вставить(Настройка.ВидДокумента, Настройка);
	
	ИмяЭлементаФорматОтправки = ИмяЭлементаДокументНаОтправку_ФорматОтправки(Настройка.ВидДокумента);
	ФорматКонтента = Настройка.ФорматыКонтента.НайтиПоЗначению(Настройка.ФорматКонтента);
	
	Если ФорматКонтента = Неопределено Тогда
		ЗаголовокЭлементаФорматОтправки = Настройка.ФорматыКонтента[0].Представление;
	Иначе
		ЗаголовокЭлементаФорматОтправки = ФорматКонтента.Представление;
	КонецЕсли;
	
	Элементы[ИмяЭлементаФорматОтправки].Заголовок = ЗаголовокЭлементаФорматОтправки;
	
	ИмяЭлементаВПФ = ИмяЭлементаДокументНаОтправку_ВПФ(Настройка.ВидДокумента);
	ЗаголовокЭлементаВПФ = КоличествоВПФСтрокой(Настройка.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Количество());
	Элементы[ИмяЭлементаВПФ].Заголовок = ЗаголовокЭлементаВПФ;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПакетовНаОтправку()
	
	НастройкиПакетов = НастройкиПакетовНаОтправку();
	
	КатегорииПакетов = Новый Соответствие;
	
	Для Каждого Настройка Из НастройкиПакетов Цикл
		КатегорииПакетов.Вставить(Настройка.КатегорияПакета, Настройка.ВидПакета);
	КонецЦикла;
	
	Модуль_ЯдроНаСервере().НастройкиДокументов_ЗаписатьКатегорииПакетов(КатегорииПакетов, ДанныеОрганизации, ДанныеКонтрагента);
	
КонецПроцедуры
	
&НаСервере
Процедура СохранитьФорматыВидовДокументов()
	
	ФорматыВидовДокументов		= Новый Соответствие;
	НастройкиПечатныхФорм		= Новый Соответствие;
	ОснованияВидовДокументов	= Новый Соответствие;
		
	Для Каждого Элемент Из НастройкиДокументовНаОтправку Цикл
		
		НастройкаВидаДокумента	= Элемент.Значение;
		ВидДокумента			= НастройкаВидаДокумента.ВидДокумента;
		
		ФорматыВидовДокументов.Вставить(ВидДокумента, НастройкаВидаДокумента.ФорматКонтента);
		НастройкиПечатныхФорм.Вставить(ВидДокумента, НастройкаВидаДокумента.НастройкиПечатныхФорм);
		
		Если ЗначениеЗаполнено(НастройкаВидаДокумента.ФормироватьНаОсновании) Тогда
			ОснованияВидовДокументов.Вставить(ВидДокумента, НастройкаВидаДокумента.ФормироватьНаОсновании);
		КонецЕсли;
		
	КонецЦикла;
	
	Модуль_ЯдроНаСервере().НастройкиДокументов_ЗаписатьФорматыВидовДокументов(ФорматыВидовДокументов, ДанныеОрганизации, ДанныеКонтрагента);	
	Модуль_ЯдроНаСервере().НастройкиПечатныхФорм_Записать(НастройкиПечатныхФорм, ДанныеОрганизации, ДанныеКонтрагента);
	Модуль_ЯдроНаСервере().НастройкиДокументов_ОснованияВидовДокументов_Записать(ОснованияВидовДокументов, ДанныеОрганизации, ДанныеКонтрагента);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьКомментарииВДокументы1СПриИзменении(Элемент)
	
	ЗаписыватьКомментарииВДокументы1СПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписыватьКомментарииВДокументы1СПриИзмененииВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Записывать комментарий";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Если ЗаписыватьКомментарииВДокументы1С Тогда
		
		Если ПустаяСтрока(ТекстКомментарияОтправка) Тогда
			ТекстКомментарияОтправка = "Передано через модуль Контур.Диадок";
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстКомментарияПолучение) Тогда
			ТекстКомментарияПолучение = "Получено через модуль Контур.Диадок";
		КонецЕсли;
		
	КонецЕсли;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ЗаписыватьКомментарииВДокументы1С);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьНепроведенныеДокументыПриИзменении(Элемент)
	
	ОтправлятьНепроведенныеДокументыПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ОтправлятьНепроведенныеДокументыПриИзмененииВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Отправлять непроведенные";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ОтправлятьНепроведенныеДокументы);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьОтсутствиеОснованияУПДПриИзменении(Элемент)
	
	УказыватьОтсутствиеОснованияУПДПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура УказыватьОтсутствиеОснованияУПДПриИзмененииВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Указать отсутствие основания УПД";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", УказыватьОтсутствиеОснованияУПД);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьДокументыПриИзменении(Элемент)
	
	ШифроватьДокументыПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ШифроватьДокументыПриИзмененииВызовСервера()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Шифровать документы";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ШифроватьДокументы);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКомментарияОтправкаПриИзменении(Элемент)
	
	СнятьФлагЗаписыватьКомментарииВДокументы1СВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКомментарияПолучениеПриИзменении(Элемент)
	
	СнятьФлагЗаписыватьКомментарииВДокументы1СВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлагЗаписыватьКомментарииВДокументы1СВызовСервера()
	
	Если ПустаяСтрока(ТекстКомментарияОтправка) И ПустаяСтрока(ТекстКомментарияПолучение) Тогда
		
		ЗаписыватьКомментарииВДокументы1С = Ложь;
		
		КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
		ДействиеМетрики		= "Записывать комментарий";
		
		Переменные = Новый Соответствие;
		Переменные.Вставить("Значение", ЗаписыватьКомментарииВДокументы1С);
		
		Ядро = Модуль_ЯдроНаСервере();
		
		Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяНастройкаПриИзменении(Элемент)
	
	ИндивидуальнаяНастройкаПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ИндивидуальнаяНастройкаПриИзмененииВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Индивидуальные настройки";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ИндивидуальнаяНастройка);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьДоступностьНастроекДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастроекДокументов()
	
	Элементы.ГруппаОсновныеНастройкиДокументов.Доступность = ИмяСправочника = "Организации"
															ИЛИ ИндивидуальнаяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПоЗаполнениюДатыВОснованииУПДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865688");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьМЧДФайломПриИзменении(Элемент)
	
КонецПроцедуры

&НаСервере
Функция ЕстьИндивидуальныеНастройкиКонтрагента()
	
	НастройкаОрганизацииПередаватьМЧДФайлом = Модуль_ЯдроНаСервере().НастройкиДокументов_ЗначениеНастройкиПередаватьМЧДФайлом(ДанныеОрганизации);
	
	Результат = ОтличаютсяНастройкиПакетовДляКонтрагента
				ИЛИ ОтличаютсяНастройкиДокументовДляКонтрагента
				ИЛИ ШифроватьДокументы <> ДанныеОрганизации.ШифроватьДокументы
				ИЛИ ПередаватьМЧДФайлом <> НастройкаОрганизацииПередаватьМЧДФайлом;

	Возврат Результат;
	
КонецФункции

//}		Настройки документов

//{ 	Системные настройки

&НаКлиенте
Процедура ДатаГраницыСинхронизацииПриИзменении(Элемент)
	
	ОбработчикПослеВводаДаты(ДатаГраницыСинхронизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаГраницыСинхронизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Подсказка		= "Введите начальную дату для загрузки сообщений";
	ЧастьДаты		= ЧастиДаты.Дата;
	ВыбраннаяДата	= НачалоДня(ТекущаяДата());
	
	Оповещение = ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикПослеВводаДаты", ЭтаФорма, Параметры);
	ОсновнаяФорма().ПоказатьВводДатыПереопределенная(Оповещение, ВыбраннаяДата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеВводаДаты(ВыбраннаяДата = Неопределено, Парам2 = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		AfterIndexKey				= Формат(ВыбраннаяДата, "ДФ=yyyyMMdd");
		ДатаГраницыСинхронизации	= ВыбраннаяДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаНаСервереНастроить()
	
	Попытка
		
		СписокСертификатов = ПолучитьСписокСертификатовНаСервере();
		
	Исключение
		
		ЗаголовокОшибки = "Ошибка получения сертификатов на сервере";
		ТекстОшибки		= ОписаниеОшибки();
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная( , ТекстОшибки, , ЗаголовокОшибки);
				
	КонецПопытки;
			
	ОтпечатокСертификатаНаСервереЗаполнитьСписокВыбора(СписокСертификатов);
	ОтпечатокСертификатаНаСервереЗаполнитьПодсказкуВвода();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСертификатовНаСервере()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	Результат = МодульЯдро.Сертификаты_СписокСертификатов();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтпечатокСертификатаНаСервереЗаполнитьСписокВыбора(СписокСертификатов)
	
	ЗаполняемыйСписокВыбора = Элементы.ОтпечатокСертификатаНаСервере.СписокВыбора;
	
	ЗаполняемыйСписокВыбора.Очистить();
	
	Для Каждого ЭлементКоллекции Из СписокСертификатов Цикл
		
		ЗаполняемыйСписокВыбора.Добавить(ЭлементКоллекции.ОтпечатокСертификата);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаНаСервереЗаполнитьПодсказкуВвода()
	
	Элемент = Элементы.ОтпечатокСертификатаНаСервере;
	
	ТекстПодсказкиВвода = "";
	
	ТребуетсяВывестиТекстПодсказки = (Элемент.СписокВыбора.Количество() = 0);
	
	Если ТребуетсяВывестиТекстПодсказки Тогда
		ТекстПодсказкиВвода = "Нет доступных сертификатов на сервере";
	КонецЕсли;
	
	Элемент.ПодсказкаВвода = ТекстПодсказкиВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаНаСервереОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ОтпечатокСертификатаНаСервере) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСертификата = ПолучитьОписаниеСертификатаНаСервере(ОтпечатокСертификатаНаСервере);
	
	ОсновнаяФорма().ОткрытьФормуСДаннымиСертификата(ОписаниеСертификата, ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеСертификатаНаСервере(ОтпечатокСертификата)
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	ДанныеСертификата = МодульЯдро.Сертификаты_ДанныеСертификата(ОтпечатокСертификата);
	
	Результат = МодульЯдро.Сертификаты_ОписаниеСертификата(ДанныеСертификата);
	
	Возврат Результат;
	
КонецФункции

//}		Системные настройки

&НаКлиенте
Функция ЕстьНеЗаполненныеСвязи()
	
	Результат = Ложь;
	
	Для Каждого ЭлементТаблицы Из ТаблицаСвязанныеСправочники Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементТаблицы.СвязанныйСправочник) Тогда
			
			Результат = Истина;
			
			ИндексСтроки = ТаблицаСвязанныеСправочники.Индекс(ЭлементТаблицы);
			
			Если ИмяСправочника = "Организации" Тогда
				Заголовок = "Не заполнена организация 1С";
			ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
				Заголовок = "Не заполнен контрагент 1С";
			Иначе
				Заголовок = "Не заполнено подразделение 1С";
			КонецЕсли;
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = Заголовок;
			Сообщение.Поле = "ТаблицаСвязанныеСправочники[" + ИндексСтроки + "].СвязанныйСправочник";
			Сообщение.Сообщить();
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЕстьДублиПриСопоставлении()
	
	Результат = Ложь;
			
	ТекстПредупреждения = ПроверитьДублиТаблицыСвязейНаСервере();
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		Результат = Истина;
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения, , "Ошибка при сопоставлении");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьДублиТаблицыСвязейНаСервере()
	
	ТекстПредупреждения = "";
	
	КопияТаблицыСвязей = ТаблицаСвязанныеСправочники.Выгрузить(, "СвязанныйСправочник");
	
	ДублиСвязей = ОбработкаОбъект().НайтиДублиВКолонкеТаблицыЗначений(КопияТаблицыСвязей, "СвязанныйСправочник");
	
	Если ДублиСвязей.Количество() > 0 Тогда
		
		Результат = Истина;
		
		Если ИмяСправочника = "Организации" Тогда
			ТекстПредупреждения = "Найдены дубли организаций: ";
		ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
			ТекстПредупреждения = "Найдены дубли контрагентов: ";
		Иначе
			ТекстПредупреждения = "Найдены дубли подразделений: ";
		КонецЕсли;
		
		ДублиСтрокой = Модуль_ЯдроНаСервере().СоединитьСтроку(ДублиСвязей, ", ");
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + ДублиСтрокой;
		
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Функция МожноЗаписатьНастройкиСправочника()
	
	Результат = Истина;
	
	Если ИмяСправочника = "Организации" Тогда
		ДополнениеСообщения = "организации";
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		ДополнениеСообщения = "контрагента";
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	ПопыткаЗаписиНастроекБезСвязанногоЭлемента = НЕ ИспользуетсяПодсистемаДиадок
												И ПустаяСвязьПриОткрытии
												И (ТаблицаСвязанныеСправочники.Количество() = 0);
	
	Если ПопыткаЗаписиНастроекБезСвязанногоЭлемента Тогда
		
		ТекстПредупреждения = 
		"Для записи некоторых настроек необходимо заполнить связь для " + ДополнениеСообщения + " в 1С.
		|
		|Для выхода без сохранения нажмите ""Закрыть""";
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения, ,"Ошибка записи " + ДополнениеСообщения);
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПодключеноШифрование()
	
	Результат = Истина;
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	РазрешеноШифрование = Ядро.Организации_РазрешеноШифрование(ДанныеОрганизации.ID);
	
	Если НЕ РазрешеноШифрование Тогда
		
		ТекстПредупреждения = 
		"Отправка зашифрованных документов не подключена.
		|
		|
		|Чтобы включить отправку, обратитесь в техподдержку.";
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, ТекстПредупреждения, , "Ошибка настройки шифрования документов!");
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКонтрагента()
	
	Идентификаторы		= Новый_ИдентификаторыСправочника(ДанныеКонтрагента.Ссылка, ДанныеКонтрагента.ID);
	ДанныеКонтрагента	= Модуль_ЯдроНаСервере().Контрагенты_ЗаполненныеРеквизиты(Идентификаторы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьССервераНаСервере()
	
	Если ИмяСправочника = "Контрагенты" Тогда
		IDКонтрагента = ID;
	ИначеЕсли ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		IDКонтрагента = ID_ВладелецПодразделения;
	КонецЕсли;
	
	Модуль_ЯдроНаСервере().Контрагенты_ОбновитьДанныеКонтрагента(ДанныеКонтрагента, ДанныеОрганизации);
	
	Форма_ЗаполнитьРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСправочникаОрганизации()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.НастройкиДокументов_УдалитьНастройкиДокументов(ДанныеОрганизации, ДанныеКонтрагента);
	
	НовоеСопоставление = ТаблицаСвязанныеСправочникиВМассив();
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("СвязанныеСправочники"				, НовоеСопоставление);
	ЗначенияРеквизитов.Вставить("AfterIndexKey"						, AfterIndexKey);
	ЗначенияРеквизитов.Вставить("ДатаГраницыСинхронизации"			, ДатаГраницыСинхронизации);
	ЗначенияРеквизитов.Вставить("ШифроватьДокументы"				, ШифроватьДокументы);
	ЗначенияРеквизитов.Вставить("ID_ОсновноеПодразделение"			, ID_ОсновноеПодразделение);
	ЗначенияРеквизитов.Вставить("ОтпечатокСертификатаНаСервере"		, ОтпечатокСертификатаНаСервере);
	ЗначенияРеквизитов.Вставить("УказыватьОтсутствиеОснованияУПД"	, УказыватьОтсутствиеОснованияУПД);
	ЗначенияРеквизитов.Вставить("ОтправлятьНепроведенныеДокументы"	, ОтправлятьНепроведенныеДокументы);
	ЗначенияРеквизитов.Вставить("ЗаписыватьКомментарииВДокументы1С"	, ЗаписыватьКомментарииВДокументы1С);
	ЗначенияРеквизитов.Вставить("ТекстКомментарияОтправка"			, ТекстКомментарияОтправка);
	ЗначенияРеквизитов.Вставить("ТекстКомментарияПолучение"			, ТекстКомментарияПолучение);
	
	Ядро.Организации_ОбновлениеРеквизитов(ДанныеОрганизации, ЗначенияРеквизитов);
	Ядро.НастройкиДокументов_СохранитьЗначениеДобавлятьСчетВПакет(ДобавлятьСчетВПакет, ДанныеОрганизации, ДанныеКонтрагента);
	Ядро.НастройкиДокументов_СохранитьЗначениеПередаватьМЧДФайлом(ПередаватьМЧДФайлом, ДанныеОрганизации);
	
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ЗначенияРеквизитов);
	
	СохранитьНастройкиПакетовНаОтправку();
	СохранитьФорматыВидовДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСправочникаПодразделенияОрганизаций()
	
	НовоеСопоставление = ТаблицаСвязанныеСправочникиВМассив();
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("СвязанныеСправочники", НовоеСопоставление);
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ЭтоПодразделениеОрганизации = Истина;
	Ядро.Подразделения_ОбновлениеРеквизитов(ДанныеПодразделения, ЗначенияРеквизитов, ЭтоПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСправочникаКонтрагенты()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Идентификаторы = Ядро.Новый_ИдентификаторыСправочника(ДанныеКонтрагента.Ссылка, ДанныеКонтрагента.ID);
	
	НовоеСопоставление = ТаблицаСвязанныеСправочникиВМассив();
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("СвязанныеСправочники"		, НовоеСопоставление);
	ЗначенияРеквизитов.Вставить("ID_ОсновноеПодразделение"	, ID_ОсновноеПодразделение);
	
	Ядро.Контрагенты_ОбновлениеРеквизитов(Идентификаторы, ЗначенияРеквизитов);
	
	Если ИндивидуальнаяНастройка Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ЗначенияРеквизитов);
		СохранитьНастройкиПакетовНаОтправку();
		СохранитьФорматыВидовДокументов();
		Ядро.НастройкиДокументов_ЗаписатьШифрованиеДокумента(ДанныеОрганизации, ДанныеКонтрагента, ШифроватьДокументы);
		Ядро.НастройкиДокументов_СохранитьЗначениеДобавлятьСчетВПакет(ДобавлятьСчетВПакет, ДанныеОрганизации, ДанныеКонтрагента);
		Ядро.НастройкиДокументов_СохранитьЗначениеПередаватьМЧДФайлом(ПередаватьМЧДФайлом, ДанныеОрганизации, ДанныеКонтрагента);
		
	Иначе
		
		Ядро.НастройкиДокументов_УдалитьНастройкиДокументов(ДанныеОрганизации, ДанныеКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСправочникаПодразделенияКонтрагентов()
	
	НовоеСопоставление = ТаблицаСвязанныеСправочникиВМассив();
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("СвязанныеСправочники", НовоеСопоставление);
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ЭтоПодразделениеОрганизации = Ложь;
	Ядро.Подразделения_ОбновлениеРеквизитов(ДанныеПодразделения, ЗначенияРеквизитов, ЭтоПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСправочника()
	
	Если ИмяСправочника = "Организации" Тогда
		
		ЗаписатьЭлементСправочникаОрганизации();
		
	ИначеЕсли ИмяСправочника = "ПодразделенияОрганизаций" Тогда
		
		ЗаписатьЭлементСправочникаПодразделенияОрганизаций();
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		ЗаписатьЭлементСправочникаКонтрагенты();
		
	ИначеЕсли ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		ЗаписатьЭлементСправочникаПодразделенияКонтрагентов();
		
	Иначе
		
		Ошибка = "Некорректное имя справочника (%1)";
		Ошибка = СтрЗаменить(Ошибка, "%1", ИмяСправочника);
		ВызватьИсключение Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Метрика_ТипСвязанногоСправочника()
	
	Результат = Неопределено;
	
	КоличествоСвязей = ТаблицаСвязанныеСправочники.Количество();
	
	Если КоличествоСвязей > 0 Тогда
		Результат = Строка(ТипЗнч(ТаблицаСвязанныеСправочники[0].СвязанныйСправочник));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Метрика_СохранитьНастройкиОрганизации()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Сохранить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	НастройкиПакетов = НастройкиПакетовНаОтправку();
	
	МассивВидовПакетов = Новый Массив;
	
	Для Каждого ОписаниеПакета Из НастройкиПакетов Цикл
		Если ОписаниеПакета.ОтправлятьПакет Тогда
			МассивВидовПакетов.Добавить(ОписаниеПакета.ВидПакета);
		КонецЕсли;
	КонецЦикла;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Тип справочника 1С",	Метрика_ТипСвязанногоСправочника());
	Переменные.Вставить("Количество связей",	ТаблицаСвязанныеСправочники.Количество());
	Переменные.Вставить("Виды пакетов",			МассивВидовПакетов);
	Переменные.Вставить("Передача МЧД файлом",	ПередаватьМЧДФайлом);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ВидыИдентификаторовСчетаНаОплату = Ядро.ВидыЭлектронныхСчетовНаОплату();
	
	Для Каждого Элемент Из НастройкиДокументовНаОтправку Цикл
		
		НастройкаВидаДокумента	= Элемент.Значение;
		ВидДокумента			= НастройкаВидаДокумента.ВидДокумента;
		ТипОснования			= НастройкаВидаДокумента.ФормироватьНаОсновании;
		
		ФорматКонтента = НастройкаВидаДокумента.ФорматКонтента;
		
		НайденныйФорматОтправки = НастройкаВидаДокумента.ФорматыКонтента.НайтиПоЗначению(ФорматКонтента);
		
		Если НайденныйФорматОтправки <> Неопределено Тогда
			ФорматОтправки = НайденныйФорматОтправки.Представление;
		КонецЕсли;
		
		КоличествоПечатныхФорм = НастройкаВидаДокумента.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Количество();
		
		Переменные = Новый Соответствие;
		Переменные.Вставить("Значение формата отправки", ФорматОтправки);
		Переменные.Вставить("Количество доп.печатных форм", КоличествоПечатныхФорм);
		Если ЗначениеЗаполнено(ТипОснования) Тогда
			Переменные.Вставить("ОснованиеДляСчета", ТипОснования);
		КонецЕсли;
		
		Если ВидыИдентификаторовСчетаНаОплату.Найти(ВидДокумента) <> Неопределено Тогда
			Переменные.Вставить("ДобавлятьСчетВПакет", ДобавлятьСчетВПакет);
		КонецЕсли;
		
		Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, ВидДокумента, Переменные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Метрика_СохранитьНастроекКонтрагента()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Сохранить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	НастройкиПакетов = НастройкиПакетовНаОтправку();
	
	МассивВидовПакетов = Новый Массив;
	
	Для Каждого ОписаниеПакета Из НастройкиПакетов Цикл
		Если ОписаниеПакета.ОтправлятьПакет Тогда
			МассивВидовПакетов.Добавить(ОписаниеПакета.ВидПакета);
		КонецЕсли;
	КонецЦикла;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Виды пакетов",							МассивВидовПакетов);
	Переменные.Вставить("Включить индивидуальные настройки",	ИндивидуальнаяНастройка);
	Переменные.Вставить("Шифровать документы перед отправкой",	ШифроватьДокументы);
	Переменные.Вставить("Тип справочника 1С",					Метрика_ТипСвязанногоСправочника());
	Переменные.Вставить("Количество связей",					ТаблицаСвязанныеСправочники.Количество());
	Переменные.Вставить("Передача МЧД файлом",					ПередаватьМЧДФайлом);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	ВидыИдентификаторовСчетаНаОплату = Ядро.ВидыЭлектронныхСчетовНаОплату();
	
	Для Каждого Элемент Из НастройкиДокументовНаОтправку Цикл
		
		НастройкаВидаДокумента	= Элемент.Значение;
		ВидДокумента			= НастройкаВидаДокумента.ВидДокумента;
		ТипОснования			= НастройкаВидаДокумента.ФормироватьНаОсновании;
		
		ФорматКонтента = НастройкаВидаДокумента.ФорматКонтента;
		
		НайденныйФорматОтправки = НастройкаВидаДокумента.ФорматыКонтента.НайтиПоЗначению(ФорматКонтента);
		
		Если НайденныйФорматОтправки <> Неопределено Тогда
			ФорматОтправки = НайденныйФорматОтправки.Представление;
		КонецЕсли;
		
		КоличествоПечатныхФорм = НастройкаВидаДокумента.НастройкиПечатныхФорм.ДополнительныеПечатныеФормы.Количество();
		
		Переменные = Новый Соответствие;
		Переменные.Вставить("Значение формата отправки",	ФорматОтправки);
		Переменные.Вставить("Количество доп.печатных форм",	КоличествоПечатныхФорм);
		Если ЗначениеЗаполнено(ТипОснования) Тогда
			Переменные.Вставить("ОснованиеДляСчета", ТипОснования);
		КонецЕсли;
		
		Если ВидыИдентификаторовСчетаНаОплату.Найти(ВидДокумента) <> Неопределено Тогда
			Переменные.Вставить("ДобавлятьСчетВПакет", ДобавлятьСчетВПакет);
		КонецЕсли;
		
		Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, ВидДокумента, Переменные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Метрика_СохранитьНастройкиПодразделения()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Сохранить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("DepartmentId",			ДанныеПодразделения.ID);
	Переменные.Вставить("Тип справочника 1С",	Метрика_ТипСвязанногоСправочника());
	Переменные.Вставить("Количество связей",	ТаблицаСвязанныеСправочники.Количество());
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаСервере
Процедура Метрика_ДобавитьСтатистикуПоСтроке(КатегорияМетрики, ДействиеМетрики, СвязанныйСправочник)
	
	Переменные = Новый Соответствие;
	
	Если ЗначениеЗаполнено(СвязанныйСправочник) Тогда
		Переменные.Вставить("Тип справочника 1С",	Строка(ТипЗнч(СвязанныйСправочник)));
		Переменные.Вставить("УИД",					СвязанныйСправочник.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ИмяСправочника = "ПодразделенияОрганизаций"
		ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Переменные.Вставить("DepartmentId", ДанныеПодразделения.ID);
		
	КонецЕсли;
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаСервере
Функция Метрика_НазваниеФормы()
	
	Результат = "";
	
	Если ИмяСправочника = "Организации" Тогда
		Результат = "Карточка организации";
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		Результат = "Карточка контрагента";
	ИначеЕсли ИмяСправочника = "ПодразделенияОрганизаций" Тогда
		Результат = "Карточка подразделения организации";
	ИначеЕсли ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		Результат = "Карточка подразделения контрагента";
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Метрика_НазваниеКатегории()
	
	Результат = Новый Структура;
	
	Если ИмяСправочника = "Организации" Тогда
		
		Результат.Вставить("Настройки",		"Настройки организации");
		Результат.Вставить("Сопоставление", "Сопоставление организаций");
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Результат.Вставить("Настройки",		"Настройки контрагента");
		Результат.Вставить("Сопоставление", "Сопоставление контрагентов");
		
	ИначеЕсли ИмяСправочника = "ПодразделенияОрганизаций"
		ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Результат.Вставить("Настройки",		"Настройки подразделений");
		Результат.Вставить("Сопоставление", "Сопоставление подразделений");	
		
	КонецЕсли;
	
	Результат.Вставить("СменаВкладки", "Смена вкладки");

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Метрика_ПоказатьПредупреждениеОТарифе()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	КатегорияМетрики = Метрика_НастройкаНедоступна();
	ДействиеМетрики = Метрика_ОткрытиеФормы();
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы, 
		КатегорияМетрики, 
		ДействиеМетрики);
		
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ДанныеОрганизации.ID, 
		КатегорияМетрики, 
		ДействиеМетрики);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ОткрытиеФормы()
	
	Возврат "ОткрытиеФормы";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_НастройкаНедоступна()
	
	Возврат "НастройкаНедоступна";

КонецФункции

//{ 	Команды

&НаКлиенте
Процедура ПоказатьСвязи(Команда)
	
	ПоказатьСвязиВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСвязиВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики = "Связи";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);
	
	Элементы.СвязиПодразделения.ТекущаяСтраница = Элементы.Связи;
	УстановитьЦветКнопокПереключенияЗакладок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодразделения(Команда)
	
	ПоказатьПодразделенияВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПодразделенияВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики = "Подразделения";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);
	
	Элементы.СвязиПодразделения.ТекущаяСтраница = Элементы.ГруппаПодразделения;
	УстановитьЦветКнопокПереключенияЗакладок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиДокументов(Команда)
	
	ПоказатьНастройкиДокументовВызовСервера();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНастройкиДокументовВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики = "Настройки документов";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);
	
	Элементы.СвязиПодразделения.ТекущаяСтраница = Элементы.ГруппаНастройкиДокументов;
	УстановитьЦветКнопокПереключенияЗакладок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСистемныеНастройки(Команда)
	
	ПоказатьСистемныеНастройкиВызовСервера();
	
	ОтпечатокСертификатаНаСервереНастроить();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСистемныеНастройкиВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().СменаВкладки;
	ДействиеМетрики = "Системные настройки";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики);
	
	Элементы.СвязиПодразделения.ТекущаяСтраница = Элементы.ГруппаСистемныеНастройки;
	УстановитьЦветКнопокПереключенияЗакладок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодразделениеПоУмолчанию(Команда)
	
	ТекСтрока = Элементы.ДеревоПодразделений.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ID = ID_ОсновноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПодразделениеПоУмолчаниюВызовСервера(ТекСтрока.ID);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодразделениеПоУмолчаниюВызовСервера(ИдентификаторПодразделения)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики		= "Выбрать по умолчанию";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Если ЭтоИдентификаторГоловногоПодразделения(ИдентификаторПодразделения, ID) Тогда
		ID_ОсновноеПодразделение = "";
	Иначе
		ID_ОсновноеПодразделение = ИдентификаторПодразделения;
	КонецЕсли;
	
	УстановитьКартинкуПодразделениеПоУмолчанию();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("DepartmentId", ID_ОсновноеПодразделение);
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = ЕстьНеЗаполненныеСвязи();
	
	Если Не Отказ Тогда
		Отказ = ЕстьДублиПриСопоставлении();
	КонецЕсли;
	Если Не Отказ Тогда
		Отказ = ШифроватьДокументы И НЕ ПодключеноШифрование()
				ИЛИ НЕ МожноЗаписатьНастройкиСправочника();
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЭлементСправочника();
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ПараметрыОповещения = Неопределено;
	
	Если ИмяСправочника = "ПодразделенияОрганизаций" Тогда
		
		Метрика_СохранитьНастройкиПодразделения();
		
		ИмяСобытия = "Диадок_Сохранение_Подразделение";
		ПараметрыОповещения = Неопределено;
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);
		
		ДанныеПодразделения.СвязанныеСправочники = Неопределено;
		
	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Метрика_СохранитьНастройкиОрганизации();
		
		ИмяСобытия = "Диадок_Сохранение_Организация";
		ПараметрыОповещения = Неопределено;
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);
		
		ДанныеОрганизации.СвязанныеСправочники = Неопределено;
		
	ИначеЕсли ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Метрика_СохранитьНастройкиПодразделения();
		
		ИмяСобытия = "Диадок_Сохранение_Подразделение";
		ПараметрыОповещения = Неопределено;
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);
		
		ДанныеПодразделения.СвязанныеСправочники = Неопределено;
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Метрика_СохранитьНастроекКонтрагента();
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ID", ID);
		ПараметрыОповещения.Вставить("ДанныеОрганизации", ДанныеОрганизации);
		
		ИмяСобытия = "Диадок_Сохранение_Контрагент";
		ИсточникОповещения = ОсновнаяФорма.ИдентификаторОсновнойФормы();
		
		Оповестить(
			ИмяСобытия,
			ПараметрыОповещения,
			ИсточникОповещения
		);
		
		ДанныеКонтрагента.СвязанныеСправочники = Неопределено;
		
	КонецЕсли;
	
	ЭтаФорма.Закрыть(ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыЗакрыть(Команда)
	
	ДействияФормыЗакрытьВызовСервера();
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ДействияФормыЗакрытьВызовСервера()
	
	КатегорияМетрики = Метрика_НазваниеКатегории().Настройки;
	ДействиеМетрики = "Отменить";
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	
	Если ИмяСправочника = "ПодразделенияОрганизаций"
		ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Переменные.Вставить("DepartmentId", ДанныеПодразделения.ID);
		
	КонецЕсли;
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(ДанныеОрганизации.ID, КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьССервера(Команда)
	
	ОбновитьССервераНаСервере();
	
КонецПроцедуры

//} 	Команды

// {	Дополнительные действия

&НаКлиенте
Процедура ВыполнитьОбработчикПроизвольнойКнопки(Команда)
	
	ИмяКнопкиПМ = СтрЗаменить(Команда.Имя, "НажатиеДополнительнойКнопки_", "");
	ДанныеДляОбработки = ДанныеДляОбработкиПриНажатииДополнительнойКнопки();
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ИмяФормы", ИмяТекущейФормы());
	ПараметрыПМ.Вставить("РежимФормы", ИмяСправочника);
	ПараметрыПМ.Вставить("ИмяКнопки", ИмяКнопкиПМ);
	ПараметрыПМ.Вставить("Данные", ДанныеДляОбработки);
	
	ОсновнаяФорма = ОсновнаяФорма();
	ОсновнаяФорма.НажатиеДополнительнойКнопкиДляВторостепеннойФормы(ПараметрыПМ);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляОбработкиПриНажатииДополнительнойКнопки()
	
	Результат = Новый Массив;
	
	Если ЭтоНастройкиОрганизации(ИмяСправочника) Тогда
		
		ТекДанныеФормы = ДанныеОрганизации;
		
	ИначеЕсли ЭтоНастройкиКонтрагента(ИмяСправочника) Тогда
		
		ТекДанныеФормы = ДанныеКонтрагента;
		
	Иначе
		ТекДанныеФормы = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанныеФормы) Тогда
		
		ТекДанные = Контракт_ДанныеДляОбработчикаДополнительнойКнопки();
		ЗаполнитьЗначенияСвойств(ТекДанные, ТекДанныеФормы);
		Результат.Добавить(ТекДанные);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Контракт_ДанныеДляОбработчикаДополнительнойКнопки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ID", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ИдентификаторУчастникаЭДО", "");
	Результат.Вставить("Ссылка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// }	Дополнительные действия

//{ 	Обертки

&НаСервере
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = Модуль_ЯдроНаСервере().СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеИННКПП(ПарИНН, ПарКПП)
	
	Результат = ОбработкаОбъект().ПредставлениеИннКппДляЭлементаСправочника(ПарИНН, ПарКПП);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОграничениеТипа_Неопределено()
	
	Результат = ОсновнаяФорма().ОграничениеТипа_Неопределено();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Новый_ИдентификаторыСправочника(Ссылка = Неопределено, ID = "")
	
	Результат = Модуль_ЯдроНаСервере().Новый_ИдентификаторыСправочника(Ссылка, ID);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИдентификаторГоловногоПодразделения(ПроверяемыйИдентификатор, ID_ГоловноеПодразделение)
	
	Возврат (ПроверяемыйИдентификатор = ID_ГоловноеПодразделение);
	
КонецФункции

&НаСервере
Функция ТипСвязанногоСправочникаПоУмолчанию()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ИмяТипа = Ядро.Справочники_ТипЗначенияОбъекта(ИмяСправочника);
	
	Если ЗначениеЗаполнено(ИмяТипа) Тогда
		ТипЗначения = Тип(ИмяТипа);
	Иначе
		ТипЗначения = ОписаниеТиповВсехСправочников();
	КонецЕсли;
	
	Возврат ТипЗначения;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТипЗначенияСвязанногоСправочникаПоУмолчанию()
	
	УстановитьТипЗначенияСвязанногоСправочника(ТипСвязанногоСправочника); 
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОграничениеТиповСвязанногоСправочника()
	
	ТипСвязанногоСправочника = ТипНеопределено();
	УстановитьТипЗначенияСвязанногоСправочника(ТипСвязанногоСправочника);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипЗначенияСвязанногоСправочника(УстанавливаемыйТип)
	
	Если УстанавливаемыйТип = Неопределено Тогда
		
		ОписаниеТипов = ТипНеопределено();
		
	ИначеЕсли ТипЗнч(УстанавливаемыйТип) = Тип("ОписаниеТипов") Тогда
		
		ОписаниеТипов = УстанавливаемыйТип;
		
	Иначе
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(УстанавливаемыйТип);
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
	
	ТаблицаФормы = Элементы.ТаблицаСвязанныеСправочники;
	
	ЭлементУправления = ТаблицаФормы.ТекущийЭлемент;
	ЭлементУправления.ОграничениеТипа = ОписаниеТипов;
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные.СвязанныйСправочник = Неопределено Тогда
		ТекущиеДанные.СвязанныйСправочник = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.СвязанныйСправочник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТипНеопределено()
	
	Результат = ОписаниеТиповВсехСсылок;
	
	Если Результат = Неопределено Тогда
		
		Результат = ОписаниеТиповВсехСправочников();
		ОписаниеТиповВсехСсылок = Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповВсехСправочников()
	
	Результат = Справочники.ТипВсеСсылки();
	
	Возврат Результат;
	
КонецФункции

//} 	Обертки


&НаСервере
Процедура ЗаполнитьДанныеФормыНастройкамиОрганизации()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если СвойствоСтруктуры(ДанныеОрганизации, "СвязанныеСправочники") = Неопределено Тогда
		ДанныеОрганизации.Вставить("СвязанныеСправочники", Неопределено);
	КонецЕсли;
	
	ДанныеОрганизации.СвязанныеСправочники = Модуль_Ядро.Организации_СопоставленныеВ1С(ДанныеОрганизации);
	
	Если Не ЗначениеЗаполнено(AfterIndexKey) Тогда
		AfterIndexKey = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаГраницыСинхронизации) Тогда
		ДатаГраницыСинхронизации = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	ПередаватьМЧДФайлом = Модуль_Ядро.НастройкиДокументов_ЗначениеНастройкиПередаватьМЧДФайлом(ДанныеОрганизации);
	
	ОбновитьДеревоПодразделенийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыНастройкамиКонтрагента()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Если СвойствоСтруктуры(ДанныеКонтрагента, "СвязанныеСправочники") = Неопределено Тогда
		ДанныеКонтрагента.Вставить("СвязанныеСправочники", Неопределено);
	КонецЕсли;
	
	ДанныеКонтрагента.СвязанныеСправочники = Модуль_Ядро.Контрагенты_СопоставленныеВ1С(ДанныеКонтрагента);
	
	ШифроватьДокументы = Модуль_Ядро.Контрагенты_ТребуетсяШифрованиеДокументов(ДанныеОрганизации, ДанныеКонтрагента);
	
	ПередаватьМЧДФайлом = Модуль_Ядро.НастройкиДокументов_ЗначениеНастройкиПередаватьМЧДФайлом(ДанныеОрганизации, ДанныеКонтрагента);
	
	ОбновитьДеревоПодразделенийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыНастройкамиПодразделения()
	
	ДляОрганизации = ЭтоНастройкиПодразделенияОрганизации(ИмяСправочника);
	
	Если СвойствоСтруктуры(ДанныеПодразделения, "СвязанныеСправочники") = Неопределено Тогда
		ДанныеПодразделения.Вставить("СвязанныеСправочники", Неопределено);
	КонецЕсли;
	
	ДанныеПодразделения.СвязанныеСправочники = Модуль_ЯдроНаСервере().Подразделения_СопоставленныеВ1С(ДанныеПодразделения, ДляОрганизации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНастройкиОрганизации(ИмяСправочника)

	Возврат (ИмяСправочника = "Организации");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНастройкиКонтрагента(ИмяСправочника)

	Возврат (ИмяСправочника = "Контрагенты");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНастройкиПодразделенияОрганизации(ИмяСправочника)

	Возврат (ИмяСправочника = "ПодразделенияОрганизаций");
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНастройкиПодразделенияКонтрагента(ИмяСправочника)

	Возврат (ИмяСправочника = "ПодразделенияКонтрагентов");
	
КонецФункции

