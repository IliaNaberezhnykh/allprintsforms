//{ ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	
	Параметры.Свойство("Сценарий", Сценарий);
	
	ИнициализироватьФорму();
	
	РежимВыбораМодуля = РежимВыбораТиповойМодуль();
	МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляВнешниеОбработки();
	
	ПолучитьСсылкуИнструкцияПоВыборуМодуля();
	
	УстановитьТекстРежимаВыбораТиповойМодуль(ЭтаФорма);
	УправлениеВидимостьюЭлементов(ЭтаФорма, РежимВыбораМодуля);
	
	НастроитьПолеПутьКПМ(ЭтаФорма, МестонахождениеПодключаемогоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Метрика_Статистика_ОткрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытиеФормыРазрешено Тогда
		
		НачатьЗакрытиеФормыВыбораМодуля(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

//} ОбработчикиСобытийФормы


//{ ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	
	УправлениеВидимостьюЭлементов(ЭтаФорма, РежимВыбораМодуля);
	
	Если РежимВыбораМодуля = РежимВыбораПользовательскийМодуль() Тогда
		
		УстановитьТекстРежимаВыбораПользовательскийМодуль(ЭтаФорма);
		
		Метрики_Поведение_ПереключениеНаВкладкуПМ();
		
	Иначе
		
		УстановитьТекстРежимаВыбораТиповойМодуль(ЭтаФорма);
		
		Метрики_Поведение_ПереключениеНаВкладкуИМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПМНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляФайл() Тогда
		НачатьВыборФайлаПодключаемогоМодуля();
	ИначеЕсли МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляКонфигурация() Тогда
		НачатьВыборВстроенногоПодключаемогоМодуля();
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборФайлаПодключаемогоМодуля()
	
	ГлавнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения("ОбработчикВыбораФайлаПодключаемогоМодуля", ЭтаФорма);
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Фильтр", "Внешняя обработка 1С:Предприятия 8 (*.epf)|*.epf");
	ПараметрыВыбора.Вставить("Заголовок", "Выберите файл подключаемого модуля");
	ПараметрыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ГлавнаяФорма.ПоказатьДиалогВыбораФайла(ОписаниеОповещения, Режим, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораФайлаПодключаемогоМодуля(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКПМ = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборВстроенногоПодключаемогоМодуля()
	
	ГлавнаяФорма = ОсновнаяФорма();
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ОбработчикВыбораВстроенногоПодключаемогоМодуля",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.ПодключаемыйМодуль_НачатьВыборВстроеннойОбработки(
		ОписаниеОповещения,
		ПутьКПМ
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораВстроенногоПодключаемогоМодуля(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКПМ = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура МестонахождениеПодключаемогоМодуляПриИзменении(Элемент)
	
	ПутьКПМ = Неопределено;
	
	НастроитьПолеПутьКПМ(ЭтаФорма, МестонахождениеПодключаемогоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнструкцияНажатие(Элемент)
	
	Метрики_Поведение_НажатиеСсылкиИнструкция();
	Метрики_Статистика_НажатиеСсылкиИнструкция();

	ПерейтиПоНавигационнойСсылке(СсылкаНаИнструкцию);
	
КонецПроцедуры

//} ОбработчикиСобытийЭлементовШапкиФормы


//{ ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Метрики_Поведение_НажатиеКнопки_Сохранить();
	
	Если РежимВыбораМодуля = РежимВыбораТиповойМодуль() Тогда
		
		НачатьПодключениеТиповогоМодуля();
		
	Иначе //Выбран подключаемый модуль
		
		НачатьПодключениеПользовательскогоМодуля();
		
	КонецЕсли;
	
КонецПроцедуры

//} ОбработчикиКомандФормы


//{ СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	УстановитьТекстСинонимКонфигурации();
	
	Если Сценарий = Сценарий_НеподдерживаемаяКонфигурация() Тогда
		
		ЗаполнитьСписокДоступныхИнтеграционныхМодулей_НеПоддерживается();
		УстановитьОсновнойТекстКонфигурацияНеПоддерживается();
		УстановитьДополнительныйТекстКонфигурацияНеПоддерживается();
		
	ИначеЕсли Сценарий = Сценарий_УстаревшаяКонфигурация() Тогда
		
		ЗаполнитьСписокДоступныхИнтеграционныхМодулей_Устарела();
		УстановитьОсновнойТекстКонфигурацияУстарела();
		УстановитьДополнительныйТекстКонфигурацияУстарела();
		
	Иначе
		
		Ошибка = Ядро.Общее_ПодставитьПараметрыВСтроку(
			"ИнициализироватьФорму: Неожиданное значение параметра ""Сценарий"" (%1)",
			Сценарий
		);
		
		ВызватьИсключение Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимВыбораТиповойМодуль()
	Возврат "ТиповойМодуль";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимВыбораПользовательскийМодуль()
	Возврат "ПользовательскийМодуль";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляВнешниеОбработки()
	Возврат "1С";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляКонфигурация()
	Возврат "Конфигурация";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляФайл()
	Возврат "Диск";
КонецФункции

&НаСервере
Процедура Настройки_ЗаписатьНастройкиИнтеграционногоМодуля()
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.ОбщиеНастройки_ИнтеграционныйМодульЗаписать(ВыбранныйМодуль);
	
КонецПроцедуры

&НаСервере
Процедура Настройки_ЗаписатьНастройкиПользовательскогоМодуля()
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.ОбщиеНастройки_ПодключаемыйМодульЗаписать(
		МестонахождениеПодключаемогоМодуля,
		ПутьКПМ
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхИнтеграционныхМодулей_НеПоддерживается()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	СписокМодулей = Ядро.ПользовательскиеПредставленияИнтеграционныхМодулей();
	
	Для Каждого Элемент ИЗ СписокМодулей Цикл
		
		СтрокаИМ = ИнтеграционныеМодули.Добавить();
		СтрокаИМ.Модуль = Элемент.Значение;
		СтрокаИМ.Представление = Элемент.Представление;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхИнтеграционныхМодулей_Устарела()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	ДоступныеМодули = Ядро.ИнтеграционныйМодульПоИдентификаторуКонфигурации();
	
	СтрокаИМ = ИнтеграционныеМодули.Добавить();
	СтрокаИМ.Представление = ДоступныеМодули.Представление;
	СтрокаИМ.Модуль = ДоступныеМодули.Модуль;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСинонимКонфигурации()
	
	Текст = ТекстСинонимКонфигурации();
	Элементы.ДекорацияСинонимКонфигурации.Заголовок = Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойТекстКонфигурацияНеПоддерживается()
	
	Текст = ТекстКонфигурацияНеПоддерживаетсяОсновной();
	Элементы.ДекорацияОсновнойТекст.Заголовок = Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДополнительныйТекстКонфигурацияНеПоддерживается()
	
	Текст = ТекстКонфигурацияНеПоддерживаетсяДополнительный();
	Элементы.ДекорацияДополнительныйТекст.Заголовок = Текст;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСинонимКонфигурации()
	
	Результат = "Конфигурация: " + Метаданные.Синоним;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКонфигурацияУстарелаОсновной()
	
	Результат = "Версия вашей конфигурации была выпущена более года назад и больше не поддерживается модулем Диадок";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКонфигурацияУстарелаДополнительный()
	
	Результат = "Для корректной работы модуля обновите конфигурацию до актуальной версии. Если обновление невозможно, выберите типовой или пользовательский модуль для интеграции.";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКонфигурацияНеПоддерживаетсяОсновной()
	
	Результат = "Конфигурация не поддерживается модулем Диадок";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстКонфигурацияНеПоддерживаетсяДополнительный()
	
	Результат = "Для корректной работы модуля выберите типовой или пользовательский модуль для интеграции.";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстРежимВыбораТиповойМодуль()
	
	Результат = "Модуль интеграции для типовых поддерживаемых конфигураций. Выберите на базе какой конфигурации ваше решение 1С.";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстРежимВыбораПользовательскийМодуль()
	
	Результат = "Модуль с индивидуальными доработками для поддержки вашей конфигурации";
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОсновнойТекстКонфигурацияУстарела()
	
	Текст = ТекстКонфигурацияУстарелаОсновной();
	Элементы.ДекорацияОсновнойТекст.Заголовок = Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДополнительныйТекстКонфигурацияУстарела()
	
	Текст = ТекстКонфигурацияУстарелаДополнительный();
	Элементы.ДекорацияДополнительныйТекст.Заголовок = Текст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстРежимаВыбораТиповойМодуль(Форма)
	
	Текст = ТекстРежимВыбораТиповойМодуль();
	Форма.Элементы.ДекорацияОписаниеРежимаВыбора.Заголовок = Текст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстРежимаВыбораПользовательскийМодуль(Форма)
	
	Текст = ТекстРежимВыбораПользовательскийМодуль();
	Форма.Элементы.ДекорацияОписаниеРежимаВыбора.Заголовок = Текст;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкуИнструкцияПоВыборуМодуля()
	
	АдресаИнтернетРесурсов = Модуль_ЯдроНаСервере().Перечисление_АдресаИнтернетРесурсов();
	
	СсылкаНаИнструкцию = АдресаИнтернетРесурсов.ИнструкцияПоВыборуМодуля
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюЭлементов(Форма, РежимВыбораМодуля)
	
	Форма.Элементы.ГруппаТиповойМодуль.Видимость = РежимВыбораМодуля = РежимВыбораТиповойМодуль();
	Форма.Элементы.ГруппаПользовательскийМодуль.Видимость = РежимВыбораМодуля = РежимВыбораПользовательскийМодуль();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеТипаСправочникаДополнительныхОбработок()
	
	Результат = Справочники.ТипВсеСсылки();
	
	Если Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") <> Неопределено Тогда
		
		Результат =  Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока()
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(0);
	Результат = Новый ОписаниеТипов("Строка",,,,КвалификаторСтроки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаНеопределено()
	
	Результат = Новый ОписаниеТипов("Неопределено");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПолеПутьКПМ(Форма, РасположениеПМ)
	
	Если РасположениеПМ = АдресПользовательскогоМодуляВнешниеОбработки() Тогда
		
		ТипЭлемента = ОписаниеТипаСправочникаДополнительныхОбработок();
		ЗаголовокЭлемента = "Доп. обработка";
		ВидимостьЭлемента = Истина;
		
	ИначеЕсли РасположениеПМ = АдресПользовательскогоМодуляКонфигурация() Тогда
		
		ТипЭлемента = ОписаниеТипаСтрока();
		ЗаголовокЭлемента = "Имя обработки";
		ВидимостьЭлемента = Истина;
		
	ИначеЕсли РасположениеПМ = АдресПользовательскогоМодуляФайл() Тогда
		
		ТипЭлемента = ОписаниеТипаСтрока();
		ЗаголовокЭлемента = "Путь к файлу";
		ВидимостьЭлемента = Истина;
		
	Иначе
		
		ТипЭлемента = ОписаниеТипаНеопределено();
		ЗаголовокЭлемента = "<Неприменимо>";
		ВидимостьЭлемента = Ложь;
		
	КонецЕсли;
	
	ЭлементПодключаемыйМодульПуть = Форма.Элементы.ПутьКПМ;
	ЭлементПодключаемыйМодульПуть.ОграничениеТипа = ТипЭлемента;
	ЭлементПодключаемыйМодульПуть.Заголовок = ЗаголовокЭлемента;
	ЭлементПодключаемыйМодульПуть.Видимость = ВидимостьЭлемента;
	
	Форма.ПутьКПМ = ТипЭлемента.ПривестиЗначение(Форма.ПутьКПМ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОК()
	Возврат "ОК";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеНазад()
	Возврат "Назад";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеЗавершитьРаботу()
	Возврат "ЗавершитьРаботу";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Сценарий_НеподдерживаемаяКонфигурация()
	Возврат "НеподдерживаемаяКонфигурация";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Сценарий_УстаревшаяКонфигурация()
	Возврат "УстаревшаяКонфигурация";
КонецФункции

&НаКлиенте
Процедура НачатьПодключениеТиповогоМодуля()
	
	ТекущиеДанные = Элементы.ИнтеграционныеМодули.ТекущиеДанные;
	
	ВыбранныйМодуль = ТекущиеДанные.Модуль;
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействиеНазад(), "Назад к выбору варианта");
	КнопкиВопроса.Добавить(ДействиеОК(), "ОК");
	
	ЗаголовокВопроса = "Выбран типовой модуль для конфигурации " + ТекущиеДанные.Представление;
	ТекстВопроса = "Для корректной работы требуется перезапуск модуля"; 
	
	ОбработчикПослеВопроса = ОсновнаяФорма().НовыйОписаниеОповещения("Обработчик_ПослеСохранитьИнтеграционныйМодуль", ЭтаФорма);
	
	ПоказатьВопросПереопределенная(
		ОбработчикПослеВопроса,
		ТекстВопроса,
		КнопкиВопроса,
		60,
		ДействиеОК(),
		ЗаголовокВопроса
	);

КонецПроцедуры

&НаСервере
Процедура Ошибка_Обработать(ВидОперации, ТекстОшибки, КраткийТекстОшибки, ИдентификаторФормы)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Ошибка_Обработать(ВидОперации, ТекстОшибки, , КраткийТекстОшибки, ИдентификаторФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПодключенияИнтеграционногоМодуля()
	
	Результат = Новый Структура;
	Результат.Вставить("МожноПодключить", Истина);
	Результат.Вставить("Ошибка", "");
	
	Попытка
		
		ПроверитьВозможностьПодключенияИнтеграционногоМодуляВызовСервера();
		
	Исключение
		
		ВидОперации     = "Проверка совместимости ИМ"; 
		ПодробныйТекстОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
		Ошибка_Обработать(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки, ЭтаФорма.УникальныйИдентификатор);

		Результат.Вставить("МожноПодключить", Ложь);
		Результат.Вставить("Ошибка", КраткийТекстОшибки);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьПодключенияИнтеграционногоМодуляВызовСервера()
	
	Модуль = ОбработкаОбъект();
	Ядро = Модуль_ЯдроНаСервере();
	
	Если Не Модуль.ПроверитьВозможностьПодключения(ВыбранныйМодуль, Истина) Тогда
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецЕсли;
	
	Если Не Ядро.ТиповойМодуль_ПроверитьВозможностьПодключения() Тогда
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПодключенияПользовательскогоМодуля(ПутьКПМ, МестонахождениеПодключаемогоМодуля, ВозвращаемаяОшибка)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.ПодключаемыйМодуль_ПроверитьВозможностьПодключения(ПутьКПМ, МестонахождениеПодключаемогоМодуля, ВозвращаемаяОшибка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Обработчик_ПослеСохранитьИнтеграционныйМодуль(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = ДействиеОК() Тогда
		
		Метрики_Поведение_ПерезапускМодуля_Ок();
		
		РезультатПроверкиМодуля = ПроверитьВозможностьПодключенияИнтеграционногоМодуля();
		
		МодульМожноПодключить = РезультатПроверкиМодуля.МожноПодключить;
		
		Если МодульМожноПодключить Тогда
			
			Метрика_Статистика_ВыборИнтеграционногоМодуля(Истина, РезультатПроверкиМодуля.Ошибка);
			
			Настройки_ЗаписатьНастройкиИнтеграционногоМодуля();
			
			ЗакрытиеФормыРазрешено = Истина;
			
			Закрыть(Истина);
			
			Возврат;
			
		КонецЕсли;			
		
		Метрика_Статистика_ВыборИнтеграционногоМодуля(Ложь, РезультатПроверкиМодуля.Ошибка);
		НачатьОповещениеМодульНеУдалосьПодключить();
		
	ИначеЕсли ВыбранноеДействие = ДействиеНазад() Тогда
		
		Метрики_Поведение_ПерезапускМодуля_Назад();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОповещениеМодульНеУдалосьПодключить()
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействиеНазад(), "Назад к выбору варианта");
	КнопкиВопроса.Добавить(ДействиеЗавершитьРаботу(), "Завершить работу");
	
	ЗаголовокВопроса = "Не удалось подключить модуль";
	ТекстВопроса = 
	"При подключении интеграционного модуля произошли ошибки. 
	|Возможная причина  -  модуль не подходит для данной конфигурации. 
	|Убедитесь, что выбрали нужный, и выполните действие ещё раз."; 
	
	ОбработчикПослеВопроса = ОсновнаяФорма().НовыйОписаниеОповещения("Обработчик_МодульНеУдалосьПодключить", ЭтаФорма);
	
	ПоказатьВопросПереопределенная(
		ОбработчикПослеВопроса,
		ТекстВопроса,
		КнопкиВопроса,
		60,
		ДействиеЗавершитьРаботу(),
		ЗаголовокВопроса
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_МодульНеУдалосьПодключить(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = ДействиеЗавершитьРаботу() Тогда
		
		ЗакрытиеФормыРазрешено = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеПользовательскогоМодуля()
	
	Если Не ЗначениеЗаполнено(ПутьКПМ) Тогда
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(
			Неопределено,
			"Не указан путь к пользовательскому интеграционному модулю",
			60,
			"Контур.Диадок"
		);
		
		Возврат;
		
	КонецЕсли;
	
	ВыбранныйМодуль = ПутьКПМ;
	
	ОшибкаПодключенияПМ = "";
	МодульМожноПодключить = ПроверитьВозможностьПодключенияПользовательскогоМодуля(ПутьКПМ, МестонахождениеПодключаемогоМодуля, ОшибкаПодключенияПМ);
		
	Метрика_Статистика_ВыборПользовательскогоМодуля(МодульМожноПодключить, ОшибкаПодключенияПМ);
		
	Если МодульМожноПодключить Тогда

		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(ДействиеНазад(), "Назад к выбору варианта");
		КнопкиВопроса.Добавить(ДействиеОК(), "ОК");
		
		ЗаголовокВопроса = "Выбран пользовательский модуль";
		ТекстВопроса = "Для корректной работы требуется перезапуск модуля"; 
		
		ОбработчикПослеВопроса = ОсновнаяФорма().НовыйОписаниеОповещения("Обработчик_ЗавершитьПодключениеПользовательскогоМодуля", ЭтаФорма);
		
		ПоказатьВопросПереопределенная(
		ОбработчикПослеВопроса,
		ТекстВопроса,
		КнопкиВопроса,
		60,
		ДействиеОК(),
		ЗаголовокВопроса
		);
		
	Иначе
		
		НачатьОповещениеПользовательскийМодульНесовместим();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ЗавершитьПодключениеПользовательскогоМодуля(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = ДействиеОК() Тогда
		
		Метрики_Поведение_ПерезапускМодуля_Ок();
		
		Настройки_ЗаписатьНастройкиПользовательскогоМодуля();
			
		ЗакрытиеФормыРазрешено = Истина;
		
		Закрыть(Истина);
			
	ИначеЕсли ВыбранноеДействие = ДействиеНазад() Тогда
		
		Метрики_Поведение_ПерезапускМодуля_Назад();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОповещениеПользовательскийМодульНесовместим()
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействиеНазад(), "Назад к выбору варианта");
	КнопкиВопроса.Добавить(ДействиеЗавершитьРаботу(), "Завершить работу");
	
	ЗаголовокВопроса = "Выбранный файл не является пользовательским модулем";
	ТекстВопроса = "Убедитесь, что выбрали верный файл с пользовательским модулем, и выполните действие ещё раз."; 
	
	ОбработчикПослеВопроса = ОсновнаяФорма().НовыйОписаниеОповещения("Обработчик_ЗавершитьПользовательскийМодульНесовместим", ЭтаФорма);
	
	ПоказатьВопросПереопределенная(
		ОбработчикПослеВопроса,
		ТекстВопроса,
		КнопкиВопроса,
		60,
		ДействиеЗавершитьРаботу(),
		ЗаголовокВопроса
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ЗавершитьПользовательскийМодульНесовместим(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = ДействиеЗавершитьРаботу() Тогда
		
		Метрики_Поведение_МодульНеОпределен_ЗакрытьФорму();
		
		ЗакрытиеФормыРазрешено = Истина;
		Закрыть();
		
	ИначеЕсли ВыбранноеДействие = ДействиеНазад() Тогда
		
		Метрики_Поведение_МодульНеОпределен_Назад();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗакрытиеФормыВыбораМодуля(Отказ)
	
	Отказ = Истина;
	
	Метрики_Статистика_МодульНеОпределен_ОткрытьФорму();
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(ДействиеНазад(), "Назад к выбору варианта");
	КнопкиВопроса.Добавить(ДействиеЗавершитьРаботу(), "Завершить работу");
	
	ЗаголовокВопроса 		= "Интеграционный модуль не определён";
	ТекстВопроса 	= "Дальнейшая работа модуля невозможна. Необходимо выбрать интеграционный модуль."; 
			
	ОбработчикПослеВопроса = ОсновнаяФорма().НовыйОписаниеОповещения("Обработчик_После_НачатьЗакрытиеФормыВыбораМодуля", ЭтаФорма);
	
	ПоказатьВопросПереопределенная(
		ОбработчикПослеВопроса,
		ТекстВопроса,
		КнопкиВопроса,
		60,
		ДействиеЗавершитьРаботу(),
		ЗаголовокВопроса
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_После_НачатьЗакрытиеФормыВыбораМодуля(ВыбранноеДействие, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = ДействиеЗавершитьРаботу() Тогда
		
		Метрики_Поведение_МодульНеОпределен_ЗакрытьФорму();
		
		ЗакрытиеФормыРазрешено = Истина;
		
		Закрыть();
		
	ИначеЕсли ВыбранноеДействие = ДействиеНазад() Тогда
		
		Метрики_Поведение_МодульНеОпределен_Назад();
		
	КонецЕсли;
	
КонецПроцедуры

//} СлужебныеПроцедурыИФункции


//{ СервисныеМетоды

&НаСервере
Функция ОбработкаОбъект()
	
	Результат = РеквизитФормыВЗначение("Объект");
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект обработки ядра
// 
// Возвращаемое значение:
//  ОбработкаОбъект
//
&НаСервере
Функция Модуль_ЯдроНаСервере() Экспорт
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_Платформа()
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросПереопределенная(ОписаниеОповещенияОЗавершении,
										ТекстВопроса,
										Кнопки,
										Таймаут = 0,
										КнопкаПоУмолчанию = Неопределено,
										Заголовок = "",
										КнопкаТаймаута = Неопределено) Экспорт 
							 
	ОсновнаяФорма().смв().смв_ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
							 ТекстВопроса,
							 Кнопки,
							 Таймаут,
							 КнопкаПоУмолчанию,
							 Заголовок,
							 КнопкаТаймаута);
	
КонецПроцедуры

//} СервисныеМетоды


//{ Метрики

&НаКлиенте
Функция Метрика_НазваниеКатегории() Экспорт
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Результат = Ядро.Метрика_НазваниеКатегории();
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_НазваниеФормыВыбораИМ()
	
	Возврат "ФормаВыбораИМ_УИД"; 
	
КонецФункции

&НаКлиенте
Процедура Метрика_ЗаписатьПоведение(КатегорияМетрики, ДействиеМетрики, Представление, Метка, ИдентификаторТрассировки = Неопределено)
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ЗаписатьПоведение(
		КатегорияМетрики,
		ДействиеМетрики,
		Представление,
		Метка,
		,
		,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаСервере
Процедура Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(КатегорияМетрики, ДействиеМетрики, ДопПеременные = Неопределено, ИдентификаторТрассировки = Неопределено)
	
	Ядро = Модуль_ЯдроНаСервере();
	Ядро.Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(
		КатегорияМетрики,
		ДействиеМетрики,
		,
		ДопПеременные,
		,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_Статистика_ОткрытиеФормы()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "ОткрытиеФормы";
	
	Переменные = Новый Структура;
	Переменные.Вставить("Сценарий", Сценарий);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, Переменные, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_Статистика_ВыборИнтеграционногоМодуля(РезультатПодключения, ОписаниеОшибки)
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	Категория 		= КатегорияМетрики_ВыборИМ();
	Действие 		= "ПодтверждениеВыбораИМ";
	
	Переменные = Новый Структура;
	Переменные.Вставить("Сценарий", Сценарий);
	Переменные.Вставить("ТипМодуля", "Типовой модуль");
	Переменные.Вставить("ИдентификаторИМ", ВыбранныйМодуль);
	Переменные.Вставить("РезультатПодключения", РезультатПодключения); 
	Переменные.Вставить("ТекстОшибки", ОписаниеОшибки);
	 
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, Переменные, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_Статистика_ВыборПользовательскогоМодуля(РезультатПодключения, ОписаниеОшибки)
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "ПодтверждениеВыбораИМ";
	
	Переменные = Новый Структура;
	Переменные.Вставить("Сценарий", Сценарий);
	Переменные.Вставить("ТипМодуля", "Пользовательский модуль");
	Переменные.Вставить("РасположениеПМ", МестонахождениеПодключаемогоМодуля);	
	Переменные.Вставить("РезультатПодключения", РезультатПодключения); 
    Переменные.Вставить("ТекстОшибки", ОписаниеОшибки);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_ПереключениеНаВкладкуПМ()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "ПользовательскийМодуль";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_ПереключениеНаВкладкуИМ()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "ТиповойМодуль";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_НажатиеСсылкиИнструкция()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "СсылкаНаИнструкцию";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Статистика_НажатиеСсылкиИнструкция()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "СсылкаНаИнструкцию";
	
	Переменные = Новый Структура;
	Переменные.Вставить("Сценарий", Сценарий);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, Переменные, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Статистика_МодульНеОпределен_ОткрытьФорму()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = "ИМ не определен";
	Действие = "Открытие формы";
	
	Переменные = Новый Структура;
	Переменные.Вставить("Сценарий", Сценарий);
	
	Метрика_ДобавитьСтатистику_СУчетомЗаполненияКонтекста(Категория, Действие, Переменные, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_МодульНеОпределен_ЗакрытьФорму()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = "ИМНеОпределен";
	Действие = "Закрыть";
	Представление = "ИМ не определён";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_МодульНеОпределен_Назад()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = "ИМНеОпределен";
	Действие = "НазадКВыборуВарианта";
	Представление = "ИМ не определён";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_НажатиеКнопки_Сохранить()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = КатегорияМетрики_ВыборИМ();
	Действие = "СохранитьВыбор";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_ПерезапускМодуля_Ок()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = "ПерезапускМодуля";
	Действие = "Закрыть";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Поведение_ПерезапускМодуля_Назад()
	
	ИдентификаторТрассировки = Метрика_НазваниеФормыВыбораИМ();
	
	Категория = "ПерезапускМодуля";
	Действие = "НазадКВыборуВарианта";
	Представление = "Форма выбора ИМ";
	Метка = "Нажатие на кнопку";
	
	Метрика_ЗаписатьПоведение(Категория, Действие, Представление, Метка, ИдентификаторТрассировки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КатегорияМетрики_ВыборИМ()
	Возврат "ВыборИМ";
КонецФункции

//} Метрики

