
&НаСервере
Перем ОбработкаОбъект;

//{ Сервисные методы

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

//} Сервисные методы


//{ ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьПараметрыФормы(Параметры);
	ЗаполнитьСпискиВыбораФормы();
	УстановитьУсловноеОформление();
	УстановитьЗаголовокФормы();
	СкрытьСправочникСписок(ЭтаФорма);
	
	КартинкаСтатусПодтвержден = Картинки_КартинкаГалочка();
	
	Если НЕ ЗначениеЗаполнено(ОтборПоИНН) Тогда
		Метрики_ЗаписатьСтатистику_ОткрытиеФормыБезИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ОтборПоИНН.ОбновитьТекстРедактирования();
	
	ПодключитьОбработчикОжидания("ПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

//} ОбработчикиСобытийФормы


//{ ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОткрытьЦентрПоддержки(Команда)
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	РежимОткрытияЦП = Неопределено;
	КатегорииМетрики = Метрика_НазваниеКатегорииТехподдержка();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимОткрытияЦП", РежимОткрытияЦП);
	ДополнительныеПараметры.Вставить("КатегорияМетрики", КатегорииМетрики);
	
	ИмяОбработчика = "ОткрытьЦентрПоддержкиПродолжение";
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения(
		ИмяОбработчика,
		ОсновнаяФорма,
		ДополнительныеПараметры
	);
	
	ТекущаяОрганизация = Элементы.ОтборПоОрганизации.СписокВыбора.НайтиПоЗначению(ОтборПоОрганизации);
	
	ОсновнаяФорма.ВыполнитьОбработкуОповещенияПереопределенная(
		Оповещение,
		ТекущаяОрганизация
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИННПриИзменении(Элемент)
	
	Если ЗначениеПоискаИНН = ОтборПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоискаИНН = ОтборПоИНН;
	
	ЗапуститьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИННАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) И Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОбработкуВводаИНН(Текст);
	
КонецПроцедуры

//} ОбработчикиСобытийЭлементовШапкиФормы


//{ ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьСопоставлениеКонтрагента();
	
КонецПроцедуры

//} ОбработчикиСобытийЭлементовТаблицыФормы


//{ ОбработчикиКомандФормы

&НаКлиенте
Процедура СопоставитьКонтрагента(Команда)
	
	Если Элементы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСопоставлениеКонтрагента();
	
КонецПроцедуры

//} ОбработчикиКомандФормы


//{ СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьПараметрыФормы(Параметры)
	
	ОрганизацияИБ = Неопределено;
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	Параметры.Свойство("ОрганизацияИБ", ОрганизацияИБ);
	
	Если ЗначениеЗаполнено(ОрганизацияИБ) Тогда
		
		Ядро = Модуль_ЯдроНаСервере();
		ИДОрганизации = Ядро.Организации_ИдентификаторПоССылке(ОрганизацияИБ);
		СписокОрганизаций = Ядро.Организации_СписокОрганизацийДляВыбора(Ложь);
		
		Если НЕ СписокОрганизаций.НайтиПоЗначению(ИДОрганизации) = Неопределено Тогда
			ОтборПоОрганизации = ИДОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьИдентификаторТрассировки();
	
	СопоставляемыйКонтрагент = Неопределено;
	
	Параметры.Свойство("КонтрагентИБ", СопоставляемыйКонтрагент);
	
	ДанныеКонтрагента = ПолучитьДанныеКонтрагента(СопоставляемыйКонтрагент);
	
	ОтборПоИНН = ДанныеКонтрагента.ИНН;
	ЗначениеПоискаИНН = ОтборПоИНН;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИдентификаторТрассировки()
	
	Метрики_НаименованиеФормы = Метрики_НаименованиеФормы();
	СтрокаИдентификатора = Строка(Новый УникальныйИдентификатор());
	
	ИдентификаторТрассировки = Метрики_НаименованиеФормы + "_" + СтрокаИдентификатора;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораФормы()
	
	Ядро = Модуль_ЯдроНаСервере();
	
	СписокДляОтбора = Элементы.ОтборПоОрганизации.СписокВыбора;
	
	СписокДляОтбораОрганизации = Ядро.Организации_СписокОрганизацийДляВыбора(Ложь);
	
	Для Каждого ТекОрганизация Из СписокДляОтбораОрганизации Цикл
		
		НовыйЭлемент = СписокДляОтбора.Добавить();
		НовыйЭлемент.Значение = ТекОрганизация.Значение;
		НовыйЭлемент.Представление = ТекОрганизация.Представление;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоОрганизации)
		И ЗначениеЗаполнено(СписокДляОтбора)
		И СписокДляОтбора.Количество() = 1 Тогда
		
		ПервыйЭлемент = СписокДляОтбора[0];
		ОтборПоОрганизации = ПервыйЭлемент.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПараметрыПодсказкаВвода = Новый Структура;
	ПараметрыПодсказкаВвода.Вставить("ПодсказкаВвода", "Введите ИНН");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтборПоИНН, ПараметрыПодсказкаВвода);
	
	УстановитьУсловноеОформлениеСписка_НетСвязей();
	УстановитьУсловноеОформлениеСписка_ПредставлениеСтатусов();
	УстановитьУсловноеОформлениеСписка_Ликвидирована();
	УстановитьУсловноеОформлениеСписка_ЦветГиперссылкиСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_НетСвязей()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.ПредставлениеСвязи");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "Не выбран";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокПредставлениеСвязи");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_ПредставлениеСтатусов()
	
	ВозможныеСтатусы = ВозможныеСтатусыКонтрагентов();
	
	Для Каждого ЭлементСтатуса Из ВозможныеСтатусы Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.Статус");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ЭлементСтатуса.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСтатуса.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_Ликвидирована()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СправочникСписок.ОрганизацияЛиквидирована");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Организация ликвидирована");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка_ЦветГиперссылкиСтатуса()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(80, 85, 206));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СправочникСписокСтатус");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ШаблонЗаголовкаФормы = "Сопоставление контрагента: %1 %2";
	НаименованиеКонтрагента = ДанныеКонтрагента.Наименование;
	
	ИННКонтрагента = ДанныеКонтрагента.ИНН;
	КППКонтрагента = ДанныеКонтрагента.КПП;
	ИННКППКонтрагента = "" + ИННКонтрагента;
	
	Если ЗначениеЗаполнено(КППКонтрагента) Тогда
		ИННКППКонтрагента = ИННКППКонтрагента + "/" + КППКонтрагента;
	КонецЕсли;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	ЗаголовокФормы = Модуль_Ядро.Общее_ПодставитьПараметрыВСтроку(
			ШаблонЗаголовкаФормы,
			ИННКППКонтрагента,
			НаименованиеКонтрагента);
	
	ЭтаФорма.Заголовок = ЗаголовокФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСправочникСписок(ФормаСопоставления)
	
	Элементы = ФормаСопоставления.Элементы;
	ОрганизацияВыбрана = ЗначениеЗаполнено(ФормаСопоставления.ОтборПоОрганизации);
	ОтображаемаяСтраница = Элементы.СтраницаНеВыбранаОрганизация;
	
	Если ОрганизацияВыбрана Тогда
		ОтображаемаяСтраница = Элементы.СтраницаДлительнаяОперация;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ОтображаемаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправочникСписок()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	
	Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		ОбновитьСправочникСписок();
		ПоказатьСправочникСписок();
	КонецЕсли;
	
	Если НужноПоказатьВыборОрганизацииПриСопоставленииКонтрагента() Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборОрганизацииПриСопоставленииКонтрагента", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НужноПоказатьВыборОрганизацииПриСопоставленииКонтрагента()
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		
		СписокЗначений = Элементы.ОтборПоОрганизации.СписокВыбора;
		
		Результат = СписокЗначений.Количество() > 1;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборОрганизацииПриСопоставленииКонтрагента()
	
	ЭлементФормы = Элементы.ОтборПоОрганизации;
	СписокЗначений = ЭлементФормы.СписокВыбора;
	Значение = СписокЗначений[0];
	ОсновнаяФорма = ОсновнаяФорма();
	
	ОписаниеОповещенияОЗавершении = ОсновнаяФорма.НовыйОписаниеОповещения(
		"ОбработатьВыборОрганизацииПриОткрытииФормыСопоставления",
		ЭтаФорма
	);
	
	ОсновнаяФорма.ПоказатьДиалогВыбораИзСписка(СписокЗначений, ОписаниеОповещенияОЗавершении, ЭтаФорма, ЭлементФормы, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОрганизацииПриОткрытииФормыСопоставления(РезультатВыбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВыбора <> Неопределено И РезультатВыбора.Значение <> ОтборПоОрганизации Тогда
		
		ОтборПоОрганизации = РезультатВыбора.Значение;
		
		УстановитьОтборПоОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОрганизации()
	
	СкрытьСправочникСписок(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		ОбновитьСправочникСписок();
		ПоказатьСправочникСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставлениеКонтрагента()
	
	ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	ДанныеКонтрагентаЭДО = ТекДанные.ДанныеКонтрагента;
	
	ИННКонтрагентаЭДО = "";
	
	ВыполнитьСопоставлениеКонтрагентаНаСервере(ДанныеКонтрагентаЭДО, ИННКонтрагентаЭДО);
	
	ОповеститьПользователяОВыполненномСопоставлении();
	
	Метрики_ЗаписатьПоведение_СопоставлениеКонтрагента();
	Метрики_ЗаписатьСтатистику_СопоставлениеКонтрагента(ИННКонтрагентаЭДО);
	
	Закрыть(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСопоставлениеКонтрагентаНаСервере(ДанныеКонтрагентаЭДО, ИННКонтрагентаЭДО)
	
	КонтрагентЭДО = ЗначениеИзСтрокиВнутр(ДанныеКонтрагентаЭДО);
	ИННКонтрагентаЭДО = КонтрагентЭДО.ИНН;
	СопоставляемыйКонтрагент = ДанныеКонтрагента.Ссылка;
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	Модуль_Ядро.Контрагенты_ОбновитьКонтрагентаЭДО(КонтрагентЭДО, ОтборПоОрганизации);
	
	ИдентификаторыЭДО = Модуль_Ядро.Новый_ИдентификаторыСправочника(КонтрагентЭДО.Ссылка, КонтрагентЭДО.ID);
	
	Модуль_Ядро.Контрагенты_СопоставитьКонтрагентов(СопоставляемыйКонтрагент, ИдентификаторыЭДО);
	Модуль_Ядро.Контрагенты_ОчиститьКЭШПослеСопоставленияКонтрагента(ОтборПоОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОВыполненномСопоставлении()
	
	ТекстОповещения = НСтр("ru='Выполнено сопоставление контрагента'");
	
	Попытка
		Выполнить("ПоказатьОповещениеПользователя(ТекстОповещения,,, КартинкаСтатусПодтвержден, СтатусОповещенияПользователя.Важное)");
	Исключение
		Выполнить("ПоказатьОповещениеПользователя(ТекстОповещения,,, КартинкаСтатусПодтвержден)");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция Картинки_КартинкаГалочка()
	
	ВсеКартинки = БиблиотекаКартинок();
	Результат = ВсеКартинки["КартинкаГалочка"];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БиблиотекаКартинок()
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Результат = ОбработкаОбъект.БиблиотекаКартинок();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьОбработкуВводаИНН(ВводимыйИНН)
	
	Если ЗначениеПоискаИНН = ВводимыйИНН Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоискаИНН = ВводимыйИНН;
	
	ПодключитьОбработчикОжидания("ЗапуститьПоиск", 2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПоиск()
	
	СкрытьСправочникСписок(ЭтаФорма);
	
	ОтборПоИНН = ЗначениеПоискаИНН;
	
	Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
		ОбновитьСправочникСписок();
		ПоказатьСправочникСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСправочникСписок()
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	СправочникСписок.Очистить();
	
	Список = Модуль_Ядро.Контрагенты_СписокДляСопоставленияКонтрагентаИБ(ОтборПоИНН, ОтборПоОрганизации);
	
	Для Каждого ТекущаяСтрока Из Список Цикл
		
		ЗаполнитьСтрокуСправочникаСписка(ТекущаяСтрока);
		
	КонецЦикла;
	
	СправочникСписок.Сортировать("ОрганизацияЛиквидирована Возр, Статус Возр");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСправочникаСписка(ТекущаяСтрока)
	
	Модуль_Ядро = Модуль_ЯдроНаСервере();
	
	НоваяСтрока = СправочникСписок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	Если НоваяСтрока.Статус = Статус_ОжидаемОтветНаПриглашение() Тогда
		НоваяСтрока.КартинкаСтроки = 1;
	ИначеЕсли НоваяСтрока.Статус = Статус_ПригласилиНас() Тогда
		НоваяСтрока.КартинкаСтроки = 2;
	ИначеЕсли НоваяСтрока.Статус = Статус_РаботаетВДиадок() Тогда
		НоваяСтрока.КартинкаСтроки = 3;
	Иначе
		НоваяСтрока.КартинкаСтроки = 0;
	КонецЕсли;
	
	НоваяСтрока.ПредставлениеСвязи = СформироватьПредставлениеСвязейВСписке(ТекущаяСтрока);
	НоваяСтрока.НомерСтроки = СправочникСписок.Индекс(НоваяСтрока) + 1;
	
	ДанныеКонтрагентаЭДО = Модуль_Ядро.Контракт_КонтрагентЭДО();
	
	ЗаполнитьЗначенияСвойств(ДанныеКонтрагентаЭДО, ТекущаяСтрока);
	
	НоваяСтрока.ДанныеКонтрагента = ЗначениеВСтрокуВнутр(ДанныеКонтрагентаЭДО);
	
	ИдентификаторФНСОператора = Модуль_Ядро.ИдентификаторФНСИзИдентификаторУчастникаЭДО(
			ДанныеКонтрагентаЭДО.ИдентификаторУчастникаЭДО
		);
	
	НоваяСтрока.ОператорЭДО = Модуль_Ядро.ПредставлениеОператораЭДО(ИдентификаторФНСОператора, ОтборПоОрганизации);
	НоваяСтрока.ОрганизацияЛиквидирована = ЗначениеЗаполнено(ТекущаяСтрока.ДатаЛиквидации);
	НоваяСтрока.ДатаЛиквидации = ТекущаяСтрока.ДатаЛиквидации;
	
	Если НоваяСтрока.ОрганизацияЛиквидирована Тогда
		
		НоваяСтрока.КартинкаСтроки = 3;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеСвязейВСписке(ТекущаяСтрока)
	
	ОбработкаОбъект = ОбработкаОбъект();
	Результат = ОбработкаОбъект.ПредставлениеСвязейВСписке(
			ТекущаяСтрока.РеквизитыСвязанныхСправочников,
			"Контрагенты"
		);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеСтатусыКонтрагентов()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("RejectsMe", "Заблокировал вас");
	Результат.Добавить("IsRejectedByMe", "Заблокирован вами");
	Результат.Добавить("InvitesMe", "Получили приглашение");
	Результат.Добавить("NotInCounteragentList", "Без отношений");
	Результат.Добавить("IsMyCounteragent", "Обмениваемся документами");
	Результат.Добавить("IsInvitedByMe", "Ждем ответ на приглашение");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ОжидаемОтветНаПриглашение()
	
	Возврат "IsInvitedByMe";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ПригласилиНас()
	
	Возврат "InvitesMe";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_РаботаетВДиадок()
	
	Возврат "NotInCounteragentList";
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагента(СсылкаНаОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", СсылкаНаОбъект);
	Результат.Вставить("Наименование");
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	
	Ядро = Модуль_ЯдроНаСервере();
	
	РеквизитыОбъекта = Новый Массив;
	РеквизитыОбъекта.Добавить("Наименование");
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	Если Ядро.Общее_ЕстьРеквизитМетаданных(МетаданныеОбъекта, "ИНН") Тогда
		РеквизитыОбъекта.Добавить("ИНН");
	КонецЕсли;
	
	Если Ядро.Общее_ЕстьРеквизитМетаданных(МетаданныеОбъекта, "КПП") Тогда
		РеквизитыОбъекта.Добавить("КПП");
	КонецЕсли;
	
	РеквизитыКонтрагента = Ядро.Общее_ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, РеквизитыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Результат, РеквизитыКонтрагента);
	
	Возврат Результат;
	
КонецФункции

//} СлужебныеПроцедурыИФункции


//{ Метрики

&НаСервере
Процедура Метрики_ЗаписатьСтатистику_ОткрытиеФормыБезИНН()
	
	КатегорияМетрики = Метрики_КатегорияВведитеИНН();
	ДействиеМетрики = Метрики_ДействиеОткрытиеФормыБезИНН();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ОтборПоОрганизации,
		КатегорияМетрики,
		ДействиеМетрики, , , ,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьПоведение_СопоставлениеКонтрагента()
	
	НазваниеФормы = Метрики_НаименованиеФормы();
	КатегорияМетрики = Метрики_КатегорияСопоставление();
	ДействиеМетрики = Метрики_ДействиеСопоставить();
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы,
		КатегорияМетрики,
		ДействиеМетрики, , ,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьСтатистику_СопоставлениеКонтрагента(ИННКонтрагентаЭДО)
	
	КатегорияМетрики = Метрики_КатегорияСопоставление();
	ДействиеМетрики = Метрики_ДействиеСопоставить();
	НазваниеФормы = Метрики_НаименованиеФормы();
	
	ИННСовпадает = ДанныеКонтрагента.ИНН = ИННКонтрагентаЭДО;
	ИННСовпадает = XMLСтрока(ИННСовпадает);
	
	ПеременныеМетрики = Новый Соответствие;
	ПеременныеМетрики.Вставить("Совпадение ИНН", ИННСовпадает);
	
	Ядро = Модуль_ЯдроНаКлиенте();
	
	Ядро.Метрика_ДобавитьСтатистику_ДляОрганизации(
		ОтборПоОрганизации,
		КатегорияМетрики,
		ДействиеМетрики, ,
		ПеременныеМетрики,
		НазваниеФормы,
		ИдентификаторТрассировки
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_НаименованиеФормы()
	
	Возврат "Упрощенная форма контрагентов";
	
КонецФункции

&НаСервере
Функция Метрики_КатегорияВведитеИНН()
	
	Ядро = Модуль_ЯдроНаСервере();
	Категории = Ядро.Метрика_НазваниеКатегории();
	Результат = Категории.ВведитеИНН;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрики_КатегорияСопоставление()
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Категории = Ядро.Метрика_НазваниеКатегории();
	Результат = Категории.Сопоставление;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Метрики_ДействиеОткрытиеФормыБезИНН()
	
	Возврат "ОткрытиеФормыБезИНН";
	
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеСопоставить()
	
	Возврат "Сопоставить";
	
КонецФункции

&НаКлиенте
Функция Метрика_НазваниеКатегорииТехподдержка()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КатегорииМетрик = Модуль_Ядро.Метрика_НазваниеКатегории();
	Результат = КатегорииМетрик.Техподдержка;
	
	Возврат Результат;
	
КонецФункции

//} Метрики
