
//**********************************************
//{		СЛУЖЕБНЫЕ МЕТОДЫ

&НаСервере
Перем ОбработкаОбъект;

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
		Если Не СтруктураОбработки = Неопределено Тогда
			ОбработкаОбъект = СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ОбщийКонтекстКлиентСервер.АдресОбработкаОбъект);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция Модуль_ЯдроНаСервере()
	
	Результат = ОбработкаОбъект().Модуль_Ядро();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Модуль_ЯдроНаКлиенте()
	
	Результат = ОсновнаяФорма().Модуль_ЯдроНаКлиенте();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Результат = ВладелецФормы.ОсновнаяФорма();
	
	Возврат Результат;
	
КонецФункции

// Возвращает форму для вызова сервера без контекста вызывающей формы
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения
//
&НаКлиенте
Функция Модуль_Платформа() Экспорт
	
	Результат = ОсновнаяФорма().Модуль_Платформа();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредупреждениеПользователю(ТекстПредупреждения, Таймаут = 0, Заголовок = "")
	
	ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная( , ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры

// Сравнивает текущую версию приложения с указанной версией.
// 
// Параметры:
//  Версия - Строка - номер версии, с которой нужно сравнить текущую версию приложения.
//
// Возвращаемое значение:
//   Булево - Истина, если текущая версия приложения старше чем версия параметра.
//            Например, 8.2 старше чем 8.3.
//
&НаКлиенте
Функция ПриложениеСтаршеВерсии(Версия)
	
	Результат = (СравнитьВерсии(ОписаниеСистемнойИнформации().ВерсияПриложения, Версия) < 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает системную информацию
// 
// Возвращаемое значение:
//  СистемнаяИнформация
//
&НаКлиенте
Функция ОписаниеСистемнойИнформации()
	
	Результат = Новый СистемнаяИнформация;
	
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий. Версии типа "1.0.1b" сравнивать нельзя.
//
// Параметры
//  СтрокаВерсии1 - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2 - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаКлиенте
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Результат = 0;
	
	Пока НЕ ПустаяСтрока(СтрокаВерсии1) ИЛИ НЕ ПустаяСтрока(СтрокаВерсии2) Цикл
		
		Поз = Найти(СтрокаВерсии1, ".");
		Если Поз > 0 Тогда
			НомерПервойВерсии = Число(Лев(СтрокаВерсии1, Поз - 1));
			СтрокаВерсии1 = Сред(СтрокаВерсии1, Поз + 1);
		Иначе
			НомерПервойВерсии = ?(ПустаяСтрока(СтрокаВерсии1), 0, Число(СтрокаВерсии1));
			СтрокаВерсии1 = "";
		КонецЕсли;
		
		Поз = Найти(СтрокаВерсии2, ".");
		Если Поз > 0 Тогда
			НомерВторойВерсии = Число(Лев(СтрокаВерсии2, Поз - 1));
			СтрокаВерсии2 = Сред(СтрокаВерсии2, Поз + 1);
		Иначе
			НомерВторойВерсии = ?(ПустаяСтрока(СтрокаВерсии2), 0, Число(СтрокаВерсии2));
			СтрокаВерсии2 = "";
		КонецЕсли;
		
		Результат = НомерПервойВерсии - НомерВторойВерсии;
		
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//}		СЛУЖЕБНЫЕ МЕТОДЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Объект.Свойство("ОбщийКонтекстКлиентСервер", Объект.ОбщийКонтекстКлиентСервер);
	ОбщийКонтекстКлиентСервер = Объект.ОбщийКонтекстКлиентСервер;
	
	ЗаполнитьЗначенияНастроек();
	
	ЗаполнитьИнформациюОбИнтеграционномМодуле();
	
	ЗаполнитьТаблицуПриоритетовИмениКаталогаПакетаПриСозданииНаСервере();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Параметры.РазделНастроек];
	
	УстановитьДоступностьНастройкиИспользоватьПлагины();
	
	УстановитьСвойстваПоляПодключаемыйМодульПуть(ЭтаФорма, МестонахождениеПодключаемогоМодуля);
	
	УстановитьВидимостьНастройкиРежимПроверкиСопоставленияНоменклатуры();
	
	СозданиеДокументов_ЗаполнитьРежимыПроверкиСопоставленияНоменклатуры();
	
	УстановитьДоступностьФункцийТарифа();
	
КонецПроцедуры

&НаСервере
Процедура СозданиеДокументов_ЗаполнитьРежимыПроверкиСопоставленияНоменклатуры()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	
	СписокВыбораНастройки = МодульЯдро.СозданиеДокументов_РежимыПроверкиСопоставленияНоменклатуры();
	
	Для Каждого Элемент Из СписокВыбораНастройки Цикл
		
		Элементы.РежимПроверкиСопоставленияНоменклатуры.СписокВыбора.Добавить(
			Элемент.Значение,
			Элемент.Представление
		);	
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастройкиРежимПроверкиСопоставленияНоменклатуры()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	ВидимостьНастройки = МодульЯдро.ВидимостьНастройкиРежимПроверкиСопоставленияНоменклатуры();	
	
	Элементы.РежимПроверкиСопоставленияНоменклатуры.Видимость = ВидимостьНастройки;
	Элементы.НадписьПодсказкаСозданиеДокументов_СоздаватьБезНоменклатуры.Видимость = ВидимостьНастройки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастройкиИспользоватьПлагины()
	
	МодульЯдро = Модуль_ЯдроНаСервере();
	ЭтоСборкаДляПровайдераСервиса = МодульЯдро.ЭтоСборкаДляПровайдераСервиса();
	Если ЭтоСборкаДляПровайдераСервиса Тогда
		Элементы.ПодсказкаИспользоватьПлагины.Заголовок = "Механизм плагинов недоступен в облачных 1С";
		Элементы.ИспользоватьПлагины.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИнформациюОбИнтеграционномМодуле() 
	
	Ядро = Модуль_ЯдроНаСервере();
	ИнтеграционныеМодули = Ядро.ДоступныеИнтеграционныеМодули();
	
	Для Каждого ИнтеграционныйМодуль Из ИнтеграционныеМодули Цикл  
		
		СписокИнтеграционныхМодулей.Добавить(ИнтеграционныйМодуль.Значение, ИнтеграционныйМодуль.Представление);
		
	КонецЦикла;
	
	ИмяИнтеграционногоМодуля = Ядро.ИнтеграционныйМодуль_Получить();
	
	НайденныйЭлемент = СписокИнтеграционныхМодулей.НайтиПоЗначению(ИмяИнтеграционногоМодуля);
	
	Если Не НайденныйЭлемент = Неопределено Тогда 
	
		ПредставлениеИнтеграционногоМодуля = НайденныйЭлемент.Представление;
		
	Иначе
		
		ПредставлениеИнтеграционногоМодуля = "Нет данных";

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКПМ(ОбщиеНастройки)
	
	Результат = "";
	
	МестонахождениеПодключаемогоМодуля = ОбщиеНастройки.МестонахождениеПодключаемогоМодуля;
	
	Если ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("НеИспользовать") Тогда
		
		Возврат ОбщиеНастройки;
		
	КонецЕсли;
	
	Если ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("1С") Тогда
		
		КлючНастройки = "ПодключаемыйМодульСсылка";
		
	ИначеЕсли ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("Диск") Тогда
		
		КлючНастройки = "ПодключаемыйМодульПуть";
		
	ИначеЕсли ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("Конфигурация") Тогда
		
		КлючНастройки = "ПодключаемыйМодульИмяОбработки";
		
	Иначе
		
		Ошибка = Модуль_ЯдроНаСервере().Общее_ПодставитьПараметрыВСтроку(
			"ОбщиеНастройки_ПодключаемыйМодульЗаписать: Неожиданное значение параметра ""МестонахождениеПМ"" (%1)",
			МестонахождениеПодключаемогоМодуля
		);
		
		ВызватьИсключение Ошибка;
		
	КонецЕсли;
	
	Результат = ОбщиеНастройки[КлючНастройки];
	
   	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияНастроек()
	
	ОбщиеНастройкиМодуля = Модуль_ЯдроНаСервере().ОбщиеНастройки_ЗначенияНастроек();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ОбщиеНастройкиМодуля);
	
	РежимОтладки = Объект.ОбщийКонтекстКлиентСервер.РежимОтладки;
	РежимОтладкиПриОткрытии = РежимОтладки;
	
	КонтрольДублированияОтправкиПакетов = Не ОтключитьКонтрольДублированияОтправкиПакетов;
	АнализДляВходящихДокументов			= Не ОтключитьАнализДляВходящихДокументов;
	ПревьюНеформализованногоДокумента	= Не ОтключитьПревьюНеформализованного;
	
	ПодключаемыйМодульПуть = ПолучитьПутьКПМ(ОбщиеНастройкиМодуля)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения = "", СтандартнаяОбработка = Ложь)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы = Истина
			И НЕ ПриложениеСтаршеВерсии("8.3.8") Тогда
			
			ТекстПредупреждения =
				"Настройки модуля были изменены.
				|При завершении работы приложения настройки не будут сохранены.";
			
		Иначе
			
			ПоказатьВопросОСохраненииНастроек();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ПанельПриоритетИмениКаталога.Видимость = СохранениеДокументовГруппироватьПоПакетам;
	
	Элементы.ЗагружатьИсходящиеДокументы.Видимость		= Не ИспользоватьТиповуюПодсистему1С;
	Элементы.ЗагружатьВходящиеДокументы.Видимость		= Не ИспользоватьТиповуюПодсистему1С;
	Элементы.ГруппаАнализ.Видимость						= Не ИспользоватьТиповуюПодсистему1С;
	Элементы.ГруппаХранение.Видимость					= Не ИспользоватьТиповуюПодсистему1С;
	
	Элементы.КаталогЛогирования.Видимость						= РежимЛогирования;
	Элементы.КорневойКаталогДокументов.Видимость				= ХранитьДокументыНаДиске;
	Элементы.УдалятьСодержимоеУстаревшихДокументов.Видимость 	= ХранитьДокументыНаДиске;
	
	Элементы.СрокОчисткиДокументов.Видимость		= УдалятьСодержимоеУстаревшихДокументов И ХранитьДокументыНаДиске;
	Элементы.УдалитьУстаревшиеДокументы.Видимость	= УдалятьСодержимоеУстаревшихДокументов И ХранитьДокументыНаДиске;
	
	УстановитьВидимостьПанелиНастроекПрокси();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелиНастроекПрокси()
	
	РучнаяНастройкаПрокси = (РежимПрокси = "UseProxy");
	
	Элементы.ПанельНастроекПрокси.Доступность = РучнаяНастройкаПрокси;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если НЕ ПриложениеСтаршеВерсии("8.3.14") Тогда
		Элементы.ГруппаПревью.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПоказыватьКоличествоДокументовВСписке.Доступность = НЕ РазворачиватьПакетыНаОтправкуПоДокументам;
	Элементы.РазрешитьДлительныеОперацииВФоне.Доступность = НЕ Модуль_ЯдроНаКлиенте().ФайловыйРежимРаботы();
	
	УстановитьДоступностьКнопкиПроверитьАвторизацию();
	
КонецПроцедуры

//**********************************************
//{		СОХРАНЕНИЕ НАСТРОЕК

&НаСервере
Функция ПодключаемыйМодуль_ПроверитьСовместимость(ПутьКПМ, МестонахождениеПМ, ВозвращаемаяОшибка)
	
	Ядро = Модуль_ЯдроНаСервере();
	
	Результат = Ядро.ПодключаемыйМодуль_ПроверитьВозможностьПодключения(
		ПутьКПМ,
		МестонахождениеПМ,
		ВозвращаемаяОшибка
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьФункцийТарифа()
	
	Ядро = Модуль_ЯдроНаСервере();
	ЕстьОграниченияПоТарифу = Ядро.ЕстьОграниченияПоТарифу();
	ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьДекорацииТариф(ЕстьОграниченияПоТарифу);
	ОтключитьВключитьАнализДокументовТариф(ЕстьОграниченияПоТарифу);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьФункциональностьПоТарифуМини(ЕстьОграниченияПоТарифу)
	
	КомандыФункциональности = Новый Массив;
	КомандыФункциональности.Добавить("АвтоматическиОбновлятьМодуль");
	КомандыФункциональности.Добавить("ИспользоватьСопоставлениеПодразделений");
	КомандыФункциональности.Добавить("ГруппаМестонахожденияПМ");
	КомандыФункциональности.Добавить("ГруппаСсылок");
	КомандыФункциональности.Добавить("ГруппаШаблон");
	
	Если ЕстьОграниченияПоТарифу Тогда
		
		Для Каждого ЭлементФункциональности Из КомандыФункциональности Цикл
			
			ЗаголовокФункции = Элементы[ЭлементФункциональности].Заголовок;
			Элементы[ЭлементФункциональности].Доступность = Ложь;
			
		КонецЦикла;
		
	Иначе
		
		Элементы.СтраницаПодключаемыйМодуль.Картинка = Новый Картинка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьДекорацииТариф(ЕстьОграниченияПоТарифу)
	
	Элементы.ДекорацияПодключаемыйМодульТариф.Видимость = ЕстьОграниченияПоТарифу;
	Элементы.ПерейтиНаПолныйТариф.Видимость = ЕстьОграниченияПоТарифу;
	Элементы.ПерейтиНаПолныйТариф1.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьАнализДокументовТариф(ЕстьОграниченияПоТарифу)
	
	Если ИспользоватьТиповуюПодсистему1С Тогда
		Возврат;		
	КонецЕсли;
	
	Элементы.АнализДляВходящихДокументов.Доступность = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПодсказкаАнализ_Кастом.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПодсказкаАнализ_Типовой.Видимость = НЕ ЕстьОграниченияПоТарифу;
	Элементы.ПерейтиНаПолныйТариф2.Видимость = ЕстьОграниченияПоТарифу;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТарифаМиниНажатие(Элемент)
	
	Метрика_ПоказатьПредупреждениеОТарифе();
	
	Модуль_Платформа = Модуль_Платформа();
	
	НаименованиеФормы = Метрика_НазваниеФормы();
	
	Модуль_Платформа.ПоказатьПредупреждениеОТарифе(НаименованиеФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОкНажатие(Кнопка)
	
	ЗаписатьНастройки = ТребуетсяСохранениеНастроек();
	
	Если Модифицированность
		ИЛИ ЗаписатьНастройки Тогда
		СохранитьНастройки();
	Иначе
		ЗакрытьФормуНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Если Модифицированность Тогда
		ПоказатьВопросОСохраненииНастроек();
	Иначе
		ЗакрытьФормуНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиГотовыКСохранению()
	
	Ошибки = ОшибкиНастроек();
	
	Если Ошибки.Количество() > 0 Тогда
		
		ТекстОшибок = "";
		
		Для Каждого Ошибка Из Ошибки Цикл
			ТекстОшибок = ТекстОшибок + Символы.ПС + Ошибка;
		КонецЦикла;
		
		ПредупреждениеПользователю(СокрЛП(ТекстОшибок));
		
	КонецЕсли;
	
	Результат = (Ошибки.Количество() = 0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОшибкиНастроек()
	
	Результат = Новый Массив;
	
	Если РазрешитьДлительныеОперацииВФоне И ОбщиеНастройкиМодуля.РазрешитьДлительныеОперацииВФоне <> Истина Тогда
		
		РезультатПроверки = ПроверитьВозможностьЗапускаФоновогоЗадания();
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			Результат.Добавить(РезультатПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимПрокси = "UseProxy" И НЕ ЗначениеЗаполнено(АдресПроксиСервера) Тогда
		Результат.Добавить("Проверьте настройки используемого прокси.");
	КонецЕсли;
	
	Если ХранитьДокументыНаДиске И НЕ ЗначениеЗаполнено(КорневойКаталогДокументов) Тогда
		Результат.Добавить("Укажите корневой каталог документов.");
	КонецЕсли;
	
	Если МестонахождениеПодключаемогоМодуля <> АдресПользовательскогоМодуляНеИспользовать() Тогда
		
		Если МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляФайл() Тогда
			
			Если НЕ ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
				Результат.Добавить("Требуется указать путь к файлу обработки подключаемого модуля.");
			Иначе
				
				ПроверяемыйФайл = Новый Файл(ПодключаемыйМодульПуть);
				
				Если НЕ ПроверяемыйФайл.Существует() Тогда
					Результат.Добавить("Выбран неверный путь к файлу обработки подключаемого модуля.");
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляВнешниеОбработки() Тогда
			
			Если НЕ ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
				Результат.Добавить("Требуется указать ссылку на обработку подключаемого модуля.");
			КонецЕсли;
			
		ИначеЕсли МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляКонфигурация() Тогда
			
			Если НЕ ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
				Результат.Добавить("Требуется указать обработку подключаемого модуля.");
			ИначеЕсли СтрДлина(ПодключаемыйМодульПуть) > 255 Тогда
				Результат.Добавить("Длина имени обработки подключаемого модуля должна быть не больше 255 символов.");
			КонецЕсли;
			
		КонецЕсли;
		
		ВозвращаемаяОшибка = "";
		
		ЭтоПМ = ПодключаемыйМодуль_ПроверитьСовместимость(
			ПодключаемыйМодульПуть,
			МестонахождениеПодключаемогоМодуля,
			ВозвращаемаяОшибка
		);
		
		Если Не ЭтоПМ Тогда
			Результат.Добавить(ВозвращаемаяОшибка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЛогирования И Не ЗначениеЗаполнено(КаталогЛогирования) Тогда
		Результат.Добавить("Укажите каталог логирования");
	КонецЕсли;
	
	Если ТочностьЦены < 2 Или ТочностьЦены > 11 Тогда
		Результат.Добавить("Точность цены должна иметь значение от 2 до 11 знаков");
	КонецЕсли;
	
	Если ТочностьКоличества < 2 Или ТочностьКоличества > 11 Тогда
		Результат.Добавить("Точность количества товаров должна иметь значение от 2 до 11 знаков");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьНастройкиПодключаемогоМодуля(Результат, МестонахождениеПодключаемогоМодуля, ПутьКПМ)
	
	Если ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("НеИспользовать") Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ПодключаемыйМодульПуть = "";
	
	Если ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("1С") Тогда
		
		КлючНастройки = "ПодключаемыйМодульСсылка";
		
	ИначеЕсли ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("Диск") Тогда
		
		КлючНастройки = "ПодключаемыйМодульПуть";
		
	ИначеЕсли ВРег(МестонахождениеПодключаемогоМодуля) = ВРег("Конфигурация") Тогда
		
		КлючНастройки = "ПодключаемыйМодульИмяОбработки";
		
	Иначе
		
		Ошибка = Модуль_ЯдроНаКлиенте().Общее_ПодставитьПараметрыВСтроку(
			"ОбщиеНастройки_ПодключаемыйМодульЗаписать: Неожиданное значение параметра ""МестонахождениеПМ"" (%1)",
			МестонахождениеПодключаемогоМодуля
		);
		
		ВызватьИсключение Ошибка;
		
	КонецЕсли;
	
	Результат[КлючНастройки] = ЭтаФорма.ПодключаемыйМодульПуть;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НастройкиДляСохранения(Знач ТекущиеНастройки)
	
	Результат = ТекущиеНастройки;
	
	Если СохранениеДокументовИмяКаталогаПакета = Неопределено Тогда
		СохранениеДокументовИмяКаталогаПакета = Новый СписокЗначений;
	Иначе
		СохранениеДокументовИмяКаталогаПакета.Очистить();
	КонецЕсли; 
	
	Для Каждого СтрокаТЧ Из ТаблицаПриоритетовИмениКаталогаПакета Цикл
		СохранениеДокументовИмяКаталогаПакета.Добавить(СтрокаТЧ.ИмяКаталогаПакета);
	КонецЦикла;
	
	ОтключитьКонтрольДублированияОтправкиПакетов	= Не КонтрольДублированияОтправкиПакетов;
	ОтключитьАнализДляВходящихДокументов			= Не АнализДляВходящихДокументов;
	ОтключитьПревьюНеформализованного				= Не ПревьюНеформализованногоДокумента;
	ИспользоватьПодключаемыйМодуль = (МестонахождениеПодключаемогоМодуля <> АдресПользовательскогоМодуляНеИспользовать());
	
	ЗаполнитьЗначенияСвойств(Результат, ЭтаФорма);
	
	ЗаполнитьНастройкиПодключаемогоМодуля(Результат, МестонахождениеПодключаемогоМодуля, ПодключаемыйМодульПуть);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяПерезапускМодуля()
	
	Результат = (РежимОтладкиПриОткрытии <> РежимОтладки) 
				Или ИзмененИнтеграционныйМодуль
				Или ИзмененРежимИспользованияПлагинов;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость переподключения подключаемого модуля при сохранении настрек.
// Если используется ПМ на диске или в справочнике дополнительных обработок, то необходимо его переподключить при сохранении настроек.
// 
// Возвращаемое значение:
//  Булево - Результат проверки на использование ПМ.
//     * Истина - Нужно пересохранить настройки. ПМ подключен как внешний файл на диске или как внешняя обработка.
//     * Ложь - Нет необходимости пересохранять настройки. ПМ подключен в составе конфигурации или отсутствует.
// 
&НаКлиенте
Функция ТребуетсяСохранениеНастроек()
	
	Результат = НЕ ((МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляНеИспользовать())
					Или (МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляКонфигурация()));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройки()
	
	Если НастройкиГотовыКСохранению() Тогда
		
		ОбщиеНастройкиМодуля = НастройкиДляСохранения(ОбщиеНастройкиМодуля);
		
		УспешноСохранено = СохранитьНастройкиНаСервере();
		
		Если УспешноСохранено Тогда
			
			КатегорияМетрики = Метрика_НазваниеКатегории();
			ДействиеМетрики = "Сохранить";
			
			Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
			
			Переменные = Новый Соответствие;
			Переменные.Вставить("ТочностьЦены_значение", ТочностьЦены);
			Переменные.Вставить("ТочностьКоличества_значение", ТочностьКоличества);
			
			Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
			
			ПослеСохраненияНастроек();
			
			Модифицированность = Ложь;
			
			ЗакрытьФормуНастроек(Истина);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиНаСервере()
	
    Результат = Истина;
		
	МассивОшибок = Модуль_ЯдроНаСервере().ОбщиеНастройки_ЗаписатьНастройки(ОбщиеНастройкиМодуля);
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		ТекстСообщения = Модуль_ЯдроНаСервере().СоединитьСтроку(МассивОшибок , Символы.ПС + Символы.ПС);
		
		Результат = Ложь;
		
	Иначе
		
		ХранилищеНастроекДанныхФорм.Сохранить("Диадок", "РежимОтладки", РежимОтладки);	
		
	КонецЕсли;
	
	Возврат Результат;
	
Конецфункции

&НаКлиенте
Процедура ЗакрытьФормуНастроек(НастройкиИзменены = Ложь)

	Если Модифицированность Тогда
		
		СохранитьНастройки()
		
	Иначе
		
		ПерезапуститьМодуль = ТребуетсяПерезапускМодуля();
		
		ПараметрыЗакрытияФормы = Новый Структура;
		ПараметрыЗакрытияФормы.Вставить("ПерезапуститьМодуль"	, ПерезапуститьМодуль);
		ПараметрыЗакрытияФормы.Вставить("НастройкиИзменены"		, НастройкиИзменены);
		
		Закрыть(ПараметрыЗакрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНастроек()
	
	Модуль_ЯдроНаКлиенте().ОбновитьКэшПослеИзмененияНастроек();
	
КонецПроцедуры

//}		СОХРАНЕНИЕ НАСТРОЕК


//**********************************************
//{		ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляНеИспользовать()
	Возврат "НеИспользовать";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляВнешниеОбработки()
	Возврат "1С";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляКонфигурация()
	Возврат "Конфигурация";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресПользовательскогоМодуляФайл()
	Возврат "Диск";
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТипаСправочникаДополнительныхОбработок()
	
	Результат = Справочники.ТипВсеСсылки();
	
	Если Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") <> Неопределено Тогда
		
		Результат =  Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока()
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(0);
	Результат = Новый ОписаниеТипов("Строка",,,,КвалификаторСтроки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаНеопределено()
	
	Результат = Новый ОписаниеТипов("Неопределено");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПодключаемыйМодульПуть(Форма, РасположениеПМ)
	
	Если РасположениеПМ = АдресПользовательскогоМодуляВнешниеОбработки() Тогда
		
		ТипЭлемента = ОписаниеТипаСправочникаДополнительныхОбработок();
		ЗаголовокЭлемента = "Доп. обработка";
		ВидимостьЭлемента = Истина;
		
	ИначеЕсли РасположениеПМ = АдресПользовательскогоМодуляКонфигурация() Тогда
		
		ТипЭлемента = ОписаниеТипаСтрока();
		ЗаголовокЭлемента = "Имя обработки";
		ВидимостьЭлемента = Истина;
		
	ИначеЕсли РасположениеПМ = АдресПользовательскогоМодуляФайл() Тогда
		
		ТипЭлемента = ОписаниеТипаСтрока();
		ЗаголовокЭлемента = "Путь к файлу";
		ВидимостьЭлемента = Истина;
		
	Иначе
		
		ТипЭлемента = ОписаниеТипаНеопределено();
		ЗаголовокЭлемента = "<Неприменимо>";
		ВидимостьЭлемента = Ложь;
		
	КонецЕсли;
	
	ЭлементПодключаемыйМодульПуть = Форма.Элементы.ПодключаемыйМодульПуть;
	ЭлементПодключаемыйМодульПуть.ОграничениеТипа = ТипЭлемента;
	ЭлементПодключаемыйМодульПуть.Заголовок = ЗаголовокЭлемента;
	ЭлементПодключаемыйМодульПуть.Видимость = ВидимостьЭлемента;
	
	Форма.ПодключаемыйМодульПуть = ТипЭлемента.ПривестиЗначение(Форма.ПодключаемыйМодульПуть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПутьПриИзменении(Элемент)
	
	Метрики_ЗаписатьНажатие_ВариантПодключенияПМ();
	
	ПодключаемыйМодульПуть = Неопределено;
	
	УстановитьСвойстваПоляПодключаемыйМодульПуть(ЭтаФорма, МестонахождениеПодключаемогоМодуля);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйМодульПутьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляФайл() Тогда
		НачатьВыборФайлаПодключаемогоМодуля();
	ИначеЕсли МестонахождениеПодключаемогоМодуля = АдресПользовательскогоМодуляКонфигурация() Тогда
		НачатьВыборВстроенногоПодключаемогоМодуля();
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборФайлаПодключаемогоМодуля()
	
	ГлавнаяФорма = ОсновнаяФорма();
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ОбработчикВыбораФайлаПодключаемогоМодуля",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.ПодключаемыйМодуль_НачатьВыборФайла(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораФайлаПодключаемогоМодуля(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодульПуть = ВыбранныеФайлы[0];
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборВстроенногоПодключаемогоМодуля()
	
	ГлавнаяФорма = ОсновнаяФорма();
	ОписаниеОповещения = ГлавнаяФорма.НовыйОписаниеОповещения(
		"ОбработчикВыбораВстроенногоПодключаемогоМодуля",
		ЭтаФорма
	);
	
	Платформа = Модуль_Платформа();
	Платформа.ПодключаемыйМодуль_НачатьВыборВстроеннойОбработки(
		ОписаниеОповещения,
		ПодключаемыйМодульПуть
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораВстроенногоПодключаемогоМодуля(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодульПуть = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаГенерироватьПримерПодключаемогоМодуляНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Генерация ПМ";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ОсновнаяФорма().ПолучитьФормуОбработки("ГенерацияШаблонаКодаПМУправляемая", ЭтаФорма, , , Истина).Открыть();
	
КонецПроцедуры

//}		ПОДКЛЮЧАЕМЫЙ МОДУЛЬ


//**********************************************
//{		СОЕДИНЕНИЕ С СЕРВЕРОМ

&НаКлиенте
Процедура РежимПроксиПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Режим прокси";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РежимПрокси);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьВидимостьПанелиНастроекПрокси();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПроксиСервераПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПортПроксиСервераПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЛогинПроксиСервераПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПарольПроксиСервераПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединениеНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Проверить соединение";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ПортПроксиЧислом = ?(ЗначениеЗаполнено(ПортПроксиСервера), Число(ПортПроксиСервера), 0);
	
	НовыеПараметрыПрокси = Новый Структура;
	НовыеПараметрыПрокси.Вставить("АдресПроксиСервера",		АдресПроксиСервера);
	НовыеПараметрыПрокси.Вставить("ПортПроксиСервера",		ПортПроксиЧислом);
	НовыеПараметрыПрокси.Вставить("ЛогинПроксиСервера",		ЛогинПроксиСервера);
	НовыеПараметрыПрокси.Вставить("ПарольПроксиСервера",	ПарольПроксиСервера);
	НовыеПараметрыПрокси.Вставить("РежимПрокси",			РежимПрокси);
	
	СоединениеУстановлено = Модуль_Ядро.АПИ_ПроверитьСоединениеDiadocAPI(НовыеПараметрыПрокси);
	
	Если СоединениеУстановлено Тогда
		ТекстСообщения = НСтр("ru = 'Соединение успешно установлено'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение с сервером Диадок'");
	КонецЕсли;
	
	ПредупреждениеПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАвторизациюНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Проверить авторизацию";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	АвторизацияПройдена = Модуль_Ядро.Авторизация_ПроверкаАвторизации(
		Неопределено,
		СлужебнаяУчетнаяЗаписьЛогин,
		СлужебнаяУчетнаяЗаписьПароль
	);
	
	Если АвторизацияПройдена Тогда
		ТекстСообщения = НСтр("ru = 'Авторизация пройдена успешно'");
	Иначе
		ТекстСообщения = НСтр("ru = 'При авторизации возникла ошибка:
									|Введен неверный логин или пароль.'");
	КонецЕсли;
	
	ПредупреждениеПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяУчетнаяЗаписьЛогинПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиПроверитьАвторизацию();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяУчетнаяЗаписьПарольПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиПроверитьАвторизацию();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиПроверитьАвторизацию()
	
	Элементы.ПроверитьАвторизацию.Доступность = ЗначениеЗаполнено(СлужебнаяУчетнаяЗаписьЛогин) 
												Или ЗначениеЗаполнено(СлужебнаяУчетнаяЗаписьПароль);
	
КонецПроцедуры	

//}		СОЕДИНЕНИЕ С СЕРВЕРОМ


//**********************************************
//{		СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Процедура ВыполнитьРегламентныеДействияНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Выполнить регламентные действия";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ПараметрыПМ = Новый Структура("ЗапускСКлиента", Истина);
	
	ПодключаемыйМодуль_ВыполнитьРегламентныеДействия(ПараметрыПМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйМодуль_ВыполнитьРегламентныеДействия(ПараметрыПМ)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	ИмяСобытия = "ВыполнитьРегламентныеДействия";
	
	Модуль_Ядро.ПодключаемыйМодуль_ОбработатьСобытиеНаСервере(
		ИмяСобытия,
		ПараметрыПМ
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЛогированияПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Режим логирования";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РежимЛогирования);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	УстановитьВидимостьЭлементовФормы();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Каталог логирования";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);

	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("КаталогЛогированияОкончаниеВыбора", ЭтаФорма);
	ОсновнаяФорма().ПоказатьДиалогВыбораКаталога(ОписаниеОповещения, "Выбор каталога логирования");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогированияОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогЛогирования = ВыбранныеФайлы[0];

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтладкиПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Режим отладки";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РежимОтладки);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Если РежимОтладки Тогда
		
		ТекстВопроса	= "Выгрузить вложенные обработки для отладки?";
		Режим			= РежимДиалогаВопрос.ДаНет;
		Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикВыгрузкиВложенныхОбработок", ЭтаФорма);
		ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
		
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыгрузкиВложенныхОбработок(Ответ, ДополнительныйПараметр = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		РезультатВыгрузки = Модуль_Платформа().ВыгрузитьВложенныеОбработки();
		
		ОсновнаяФорма().ПоказатьПредупреждениеПереопределенная(, РезультатВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазворачиватьПакетыНаОтправкуПоДокументамПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Показывать содержимое пакета на отправку";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РазворачиватьПакетыНаОтправкуПоДокументам);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьДоступностьЭлементовФормы();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьСчетаФактурыПриИзменении(Элемент)
	
	Метрики_ЗаписатьНажатие_СоздаватьСчетаФактуры();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьПередаточныеДокументыПриИзменении(Элемент)
	
	Метрики_ЗаписатьНажатие_СоздаватьПередаточныеДокументы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаАнализ_ТиповойНажатие(Элемент)
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики = "Как работает в типовом модуле";
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ЗапуститьПриложение("https://support.kontur.ru/diadoc-1s8x/41605-analiz_vxodyashhix_dokumentov");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаАнализ_КастомНажатие(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Как добавить свои условия обработки";
	
	Ядро = Модуль_ЯдроНаКлиенте();
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	ЗапуститьПриложение("https://developer.kontur.ru/Docs/Diadoc_UM/proc/Obrabotka_Vkhodyashchikh_Paketov.html#id10");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакНастроитьКонтурМаркировкуНажатие(Элемент)
	
	ЗапуститьПриложение("https://support.kontur.ru/pages/viewpage.action?pageId=83865699");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииНастроек()
	
	ТекстВопроса	= "Настройки были изменены. Сохранить изменения?";
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ЗакрытиеФормыНастроекЗавершение", ЭтаФорма);
	
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбУдаленииУстаревшихДокументов()
	
	ТекстВопроса 	= НСтр("ru = 'Сохранить настройки и выполнить удаление устаревших данных?'");
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= ОсновнаяФорма().НовыйОписаниеОповещения("ОбработчикДиалогаОбУдаленииУстаревшихДокументов", ЭтаФорма);	
		
	ОсновнаяФорма().ПоказатьВопросПереопределенная(Оповещение, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыНастроекЗавершение(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();		
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДиалогаОбУдаленииУстаревшихДокументов(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиГотовыКСохранению() Тогда
		
		ОбщиеНастройкиМодуля = НастройкиДляСохранения(ОбщиеНастройкиМодуля);
		
		УспешноСохранено = СохранитьНастройкиНаСервере();
		
		Если УспешноСохранено Тогда
			
			Модуль_Ядро = Модуль_ЯдроНаКлиенте();
			
			Модуль_Ядро.ВнешнееХранение_ВыполнитьОчисткуУстаревшихДокументов();
			ПредупреждениеПользователю("Очистка завершена.");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументов_ИспользоватьДатуЭДПриИзменении(Элемент)
	
	Метрики_ЗаписатьНажатие_СозданиеДокументов_ИспользоватьДатуЭД();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументов_РежимПроверкиСопоставленияНоменклатурыПриИзменении(Элемент)
	
	Метрики_ЗаписатьНажатие_СозданиеДокументов_СоздаватьДокументБезНоменклатуры();
	
	Модифицированность = Истина;

КонецПроцедуры

//}		СЕРВИСНЫЕ ФУНКЦИИ


//**********************************************
//{		СОХРАНЕНИЕ ДОКУМЕНТОВ

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетовИмениКаталогаПакетаПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(СохранениеДокументовИмяКаталогаПакета) Тогда
		ИменаКаталогаПакета = СохранениеДокументовИмяКаталогаПакета;
	Иначе
		ИменаКаталогаПакета = СохранениеДокументовИмяКаталогаПакетаПоУмолчанию;
	КонецЕсли;
	
	ЗаполнитьТаблицуПриоритетовИмениКаталогаПакета(ИменаКаталогаПакета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетовИмениКаталогаПакетаПоУмолчаниюНаСервере()
	
	ЗаполнитьТаблицуПриоритетовИмениКаталогаПакета(СохранениеДокументовИмяКаталогаПакетаПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетовИмениКаталогаПакета(ИменаКаталогаПакета)
	
	ТаблицаПриоритетовИмениКаталогаПакета.Очистить();
	
	ИменаКаталогов = Новый СписокЗначений;
	Если ТипЗнч(ИменаКаталогаПакета) = Тип("Строка") Тогда 
		
		МассивИмен = ОбработкаОбъект().РазделитьСтроку(ИменаКаталогаПакета, ";");
		Для Каждого Элемент Из МассивИмен Цикл
			ИменаКаталогов.Добавить(Элемент);
		КонецЦикла;
		
	Иначе
		ИменаКаталогов = ИменаКаталогаПакета;
	КонецЕсли;
	
	Для Каждого Имя Из ИменаКаталогов Цикл
		
		НоваяСтрока = ТаблицаПриоритетовИмениКаталогаПакета.Добавить();
		НоваяСтрока.ИмяКаталогаПакета = Имя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеДокументовПутьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("СохранениеДокументовПутьОкончаниеВыбора", ЭтаФорма);
	ОсновнаяФорма().ПоказатьДиалогВыбораКаталога(ОписаниеОповещения, "Выберите каталог для сохранения документов");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеДокументовПутьОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = ВыбранныеФайлы[0];
	
	СохранениеДокументовПуть = Каталог;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеСохраняемогоФайлаПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Сценарий скачивания документов";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
		
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", СохранениеДокументовСценарий);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьДокументыПоПакетамПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Группировать по пакетам";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", СохранениеДокументовГруппироватьПоПакетам);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьВидимостьЭлементовФормы();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриоритетовИмениКаталогаПакетаПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриоритетовИмениКаталогаПакетаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриоритетовИмениКаталогаПакетаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПриоритетовИмениКаталогаПакета(Кнопка)
	
	ЗаполнитьТаблицуПриоритетовИмениКаталогаПакетаПоУмолчаниюНаСервере();
	
КонецПроцедуры

//}		СОХРАНЕНИЕ ДОКУМЕНТОВ	


//**********************************************
//{		ХРАНИЛИЩЕ ДОКУМЕНТОВ

&НаКлиенте
Процедура ХранитьДокументыНаДискеПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Хранить файлы документов и подписей на диске";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ХранитьДокументыНаДиске);

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Если УдалятьСодержимоеУстаревшихДокументов 
		И Не ХранитьДокументыНаДиске Тогда
		УдалятьСодержимоеУстаревшихДокументов = ХранитьДокументыНаДиске;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорневойКаталогДокументовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Каталог хранения документов";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики);
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = ОсновнаяФорма().НовыйОписаниеОповещения("КорневойКаталогДокументовОкончаниеВыбора", ЭтаФорма);
	ОсновнаяФорма().ПоказатьДиалогВыбораКаталога(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорневойКаталогДокументовОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КорневойКаталогДокументов = ВыбранныеФайлы[0];

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУстаревшиеДокументыНажатие(Элемент)
	
	ПоказатьВопросОбУдаленииУстаревшихДокументов();
		
КонецПроцедуры

&НаКлиенте
Процедура УдалятьСодержимоеУстаревшихДокументовПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовФормы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОчисткиДокументовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

//}		ХРАНИЛИЩЕ ДОКУМЕНТОВ

&НаКлиенте
Функция Метрика_НазваниеФормы()
	
	Возврат "Настройки";
	
КонецФункции	

&НаКлиенте
Функция Метрика_НазваниеКатегории()
	
	Возврат "Настройки модуля";
	
КонецФункции

&НаКлиенте
Процедура Метрики_ВыборИнтеграционногоМодуля()
	
	Модуль_Ядро 		= Модуль_ЯдроНаКлиенте();
	
	НазваниеФормы 		= Метрика_НазваниеФормы();
	КатегорияМетрики	= Метрика_КатегорияНастройкиМодуля();
	ДействиеМетрики		= Метрика_ДействиеВыбратьИнтеграционныйМодуль();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики); 
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_СоздаватьСчетаФактуры()
    
	ДействиеМетрики = Метрики_ДействиеСоздаватьСчетаФактуры();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", СоздаватьСчетаФактуры);
	
	Метрики_Нажатие(ДействиеМетрики);
	
	Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_СоздаватьПередаточныеДокументы()
	
	ДействиеМетрики = Метрики_ДействиеСоздаватьПередаточныеДокументы();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", СоздаватьПередаточныеДокументы);
	
	Метрики_Нажатие(ДействиеМетрики);
	
	Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_ВариантПодключенияПМ()
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Подключаемый модуль";
	
	Метрики_Нажатие(ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", МестонахождениеПодключаемогоМодуля);
	
	Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_СозданиеДокументов_ИспользоватьДатуЭД()
	
	ДействиеМетрики = Метрики_ДействиеСозданиеДокументов_ИспользоватьДатуЭД();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", СозданиеДокументов_ИспользоватьДатуЭД);
	
	Метрики_Нажатие(ДействиеМетрики);
	Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ЗаписатьНажатие_СозданиеДокументов_СоздаватьДокументБезНоменклатуры()
	
	ДействиеМетрики = Метрика_ДействиеСозданиеДокументов_РежимПроверкиСопоставленияНоменклатуры();
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РежимПроверкиСопоставленияНоменклатуры);
	
	Метрики_Нажатие(ДействиеМетрики);
	Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_Нажатие(ДействиеМетрики)
	
	Ядро				= Модуль_ЯдроНаКлиенте();
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	НазваниеФормы		= Метрика_НазваниеФормы();
	
	Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, КатегорияМетрики, ДействиеМетрики);

КонецПроцедуры

&НаКлиенте
Процедура Метрики_СтатистикаПоКонтексту(ДействиеМетрики, Переменные)
	
	Ядро				= Модуль_ЯдроНаКлиенте();
	КатегорияМетрики	= Метрика_НазваниеКатегории();

	Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

КонецПроцедуры

&НаКлиенте
Процедура Метрики_СтатистикаПоИнтеграционномуМодулу(ИмяМодуля) 
	
	Модуль_Ядро 		= Модуль_ЯдроНаКлиенте();
	КатегорияМетрики	= Метрика_КатегорияНастройкиМодуля();
	ДействиеМетрики		= Метрика_ДействиеВыбратьИнтеграционныйМодуль();
	Переменные 			= Новый Соответствие; 
	
	Переменные.Вставить("Интеграционный модуль", ИмяМодуля);
	
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
КонецПроцедуры  

&НаКлиенте
Функция Метрика_КатегорияНастройкиМодуля()
	
	Возврат "Настройки модуля";
	
КонецФункции

&НаКлиенте
Функция Метрика_ДействиеВыбратьИнтеграционныйМодуль()
	
	Возврат "Выбрать интеграционный модуль";
	
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеСоздаватьСчетаФактуры()

	Возврат "Создавать счет-фактуру вместе с ПТУ";

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция Метрика_ДействиеСозданиеДокументов_РежимПроверкиСопоставленияНоменклатуры()
	
	Возврат "РежимПроверкиСопоставленияНоменклатуры";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Метрики_ДействиеСозданиеДокументов_ИспользоватьДатуЭД()
	
	Возврат "СозданиеДокументов_ИспользоватьДатуЭД";
	
КонецФункции

&НаКлиенте
Функция Метрики_ДействиеСоздаватьПередаточныеДокументы()

	Возврат "Создавать передаточный документ по данным счета-фактуры";

КонецФункции

&НаКлиенте
Процедура Метрика_ПоказатьПредупреждениеОТарифе()
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	КатегорияМетрики = Метрика_НастройкаНедоступна();
	ДействиеМетрики = Метрика_ОткрытиеФормы();
	НазваниеФормы = Метрика_НазваниеФормы();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(
		НазваниеФормы, 
		КатегорияМетрики, 
		ДействиеМетрики);
		
	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту( 
		КатегорияМетрики, 
		ДействиеМетрики);

КонецПроцедуры

&НаКлиенте
Функция Метрика_ОткрытиеФормы()
	
	Возврат "ОткрытиеФормы";

КонецФункции

&НаКлиенте
Функция Метрика_НастройкаНедоступна()
	
	Возврат "НастройкаНедоступна";

КонецФункции

&НаКлиенте
Процедура ЗагружатьИсходящиеДокументыПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Загружать исходящие";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ЗагружатьИсходящиеДокументы);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьВходящиеДокументыПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Загружать входящие";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ЗагружатьВходящиеДокументы);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьДокументыПоСопоставленнымКонтрагентамПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Загружать только от сопоставленных КА";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ЗагружатьДокументыПоСопоставленнымКонтрагентам);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКоличествоДокументовВСпискеПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Показывать количество документов";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ПоказыватьКоличествоДокументовВСписке);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПриПереотправкеПредыдущийДокументПриИзменении(Элемент)
	
    КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Удалять при переотправке";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", УдалятьПриПереотправкеПредыдущийДокумент);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДублированияОтправкиПакетовПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Контроль дублирования пакетов на отправку";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", КонтрольДублированияОтправкиПакетов);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура АнализДляВходящихДокументовПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Анализ и обработка входящих документов";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", АнализДляВходящихДокументов);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПревьюНеформализованногоДокументаПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Превью неформализованного документа";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ПревьюНеформализованногоДокумента);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисКонтурМаркировкаПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Использовать сервис Контур.Маркировка";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ИспользоватьСервисКонтурМаркировка);

   	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиОбновлятьМодульПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Автообновление модуля";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Модуль_Ядро.Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", АвтоматическиОбновлятьМодуль);
	
   	Модуль_Ядро.Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьДлительныеОперацииВФонеПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Разрешить фоновые операции";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", РазрешитьДлительныеОперацииВФоне);

	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	УстановитьВидимостьЭлементовФормы();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики = "Редактировать точность цены";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ТочностьЦены_значение", ТочностьЦены);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьКоличестваПриИзменении(Элемент)
	
	КатегорияМетрики = Метрика_НазваниеКатегории();
	ДействиеМетрики = "Редактировать точность количества";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("ТочностьКоличества_значение", ТочностьКоличества);
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИнтеграционногоМодуляНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Метрики_ВыборИнтеграционногоМодуля();
	
	ВыборИнтеграционногоМодуляОповещение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИнтеграционногоМодуляОповещение() Экспорт
	
	ОсновнаяФорма =  ОсновнаяФорма();
	
	ДополнительныеПараметры = Новый Структура;
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения("ВыборИнтеграционногоМодуляЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ОсновнаяФорма.ПоказатьВыборЭлемента(СписокИнтеграционныхМодулей, Оповещение, "Диадок: Выбор интеграционного модуля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИнтеграционногоМодуляЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ИмяМодуля = Результат.Значение;
		
		Платформа = Модуль_Платформа();
		МодульМожноПодключить = Платформа.ПроверитьВозможностьПодключения(ИмяМодуля);
		
		Если МодульМожноПодключить Тогда 
			
			Метрики_СтатистикаПоИнтеграционномуМодулу(Результат.Значение);
			
			ИмяИнтеграционногоМодуля 			= Результат.Значение;
			ПредставлениеИнтеграционногоМодуля 	= Результат.Представление;
			ИзмененИнтеграционныйМодуль 		= Истина;
			
			Модифицированность = Истина;
			
		Иначе
			МодульНеУдалосьПодключитьПредупреждение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МодульНеУдалосьПодключитьПредупреждение() 
	
	ОсновнаяФорма = ОсновнаяФорма();
	
	ЗаголовокПредупреждения = "Не удалось подключить интеграционный модуль";
	ТекстПредупреждения = 
	"При подключении интеграционного модуля произошли ошибки. 
	|Возможная причина  -  модуль не подходит для данной конфигурации. 
	|Убедитесь, что выбрали нужный, и выполните действие ещё раз.";
	
	Оповещение = ОсновнаяФорма.НовыйОписаниеОповещения("ПослеПредупрежденияВыборИнтеграционногоМодуля", ЭтаФорма);
	
	ОсновнаяФорма.ПоказатьПредупреждениеПереопределенная(Оповещение, ТекстПредупреждения,, ЗаголовокПредупреждения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеПредупрежденияВыборИнтеграционногоМодуля(Результат) Экспорт
	
	ВыборИнтеграционногоМодуляОповещение();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлагиныПриИзменении(Элемент)
	
	ИзмененРежимИспользованияПлагинов = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСопоставлениеПодразделенийПриИзменении(Элемент)
	
	КатегорияМетрики	= Метрика_НазваниеКатегории();
	ДействиеМетрики		= "Использовать сопоставление подразделений";
	
	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьПоведение_НажатиеКнопки(Метрика_НазваниеФормы(), КатегорияМетрики, ДействиеМетрики);
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Значение", ИспользоватьСопоставлениеПодразделений);

   	Модуль_ЯдроНаКлиенте().Метрика_ДобавитьСтатистику_ПоКонтексту(КатегорияМетрики, ДействиеМетрики, , Переменные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьЗапускаФоновогоЗадания()
	
	Результат = "";
	
	Модуль_Ядро = Модуль_ЯдроНаКлиенте();
	
	Попытка
		
		Модуль_Ядро.ПроверитьВозможностьЗапускаФоновогоЗадания();
		
	Исключение
		
		ВидОперации		 = "Проверка работы фоновых операций";
		ТекстСообщения	 = "Не удалось проверить работу фоновых операций.";
		ТекстОшибки		 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Модуль_Ядро.Ошибка_Обработать(ВидОперации, ТекстОшибки, ТекстСообщения);
		Результат = ТекстСообщения;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


