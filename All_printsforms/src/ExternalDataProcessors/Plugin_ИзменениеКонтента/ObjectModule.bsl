Перем ОсновнойМодуль Экспорт;
Перем ИдентификаторИнтеграционногоМодуля;  // без этого не работает режим отладки, т.к. для его получения надо вызвать основной модуль в безопасном режиме, и при этом ядро обращается к файловой системе.
Перем НастройкиПлагина;
Перем TraceId;

Перем СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров;


Функция ПриглашениеОтладки()
	
	Попытка
		ВызватьИсключение "Отладка";
	Исключение
	КонецПопытки;
	
КонецФункции	

Функция ОбработатьСобытие(ИмяСобытия, Параметры, мНастройкиПлагина = Неопределено) Экспорт
	
	НастройкиПлагина = мНастройкиПлагина;
	
	Если ИмяСобытия = "ПодготовитьЭлектронныйДокумент" Тогда

		Возврат ПодготовитьЭлектронныйДокумент(Параметры);
		
	ИначеЕсли ИмяСобытия = "ВыполнитьСценарийВПесочнице" Тогда
		
		Если Параметры.Свойство("РезультатПлагина") Тогда
			// повторное срабатывание почему-то
			Возврат Параметры.РезультатПлагина;
		КонецЕсли;
		
		РезультатПлагина = ВыполнитьСценарийВПесочнице(Параметры);
		Параметры.Вставить("РезультатПлагина", РезультатПлагина);  // костыль
		Возврат РезультатПлагина;  // это заработает после исправления https://git.skbkontur.ru/Diadoc1C/DiadocModules/-/issues/1606
		
	ИначеЕсли ИмяСобытия = "ВалидацияДокумента" Тогда
		
		ВалидацияДокумента(Параметры);
		
	КонецЕсли;

КонецФункции

Функция ПодготовитьЭлектронныйДокумент(Параметры)
	
	Если Не ТипЗнч(НастройкиПлагина) = Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не НастройкиПлагина.Свойство("ЗапомнитьПоследнийДокументДляОтладки") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контент = Параметры.Результат.Content;
	ДокументСсылка = Параметры.Результат.Документ1С;
	TypeNamedId = Параметры.ВидДокументаРазвернутый.TypeNamedId;
	ТипКонтента = Параметры.ВидДокументаРазвернутый.ТипКонтента;
	
	Если Не ЭтоТипКонтентаУПД(ТипКонтента) И Не ЭтоТипКонтентаУКД(ТипКонтента) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НастройкиПлагина.ЗапомнитьПоследнийДокументДляОтладки Тогда
		
		СохранитьОтладочныеДанные(ДокументСсылка, Контент, TypeNamedId);
		Сообщить("Плагин: изменение контента документов. Документ сохранен для отладки: " + ДокументСсылка);
		// напоминать пользователю, чтобы не забыл отключить после настройки.
		
	КонецЕсли;	
	
	Если ЭтоТипКонтентаУПД(ТипКонтента) Тогда
		
		ОшибкиПлагинов = Новый Массив;
		Плагин_ИзменениеКонтентаУПД(Контент, ДокументСсылка, TypeNamedId, ОшибкиПлагинов);
		
		Параметры.Результат.РеквизитыДокумента.Вставить("ОшибкиПлагинов_ИзменениеКонтента", ОшибкиПлагинов);

	ИначеЕсли ЭтоТипКонтентаУКД(ТипКонтента) Тогда
		
		ОшибкиПлагинов = Новый Массив;
		Плагин_ИзменениеКонтентаУПД(Контент, ДокументСсылка, TypeNamedId, ОшибкиПлагинов);
		
		Параметры.Результат.РеквизитыДокумента.Вставить("ОшибкиПлагинов_ИзменениеКонтента", ОшибкиПлагинов);
	
	КонецЕсли;

	Возврат Истина;

КонецФункции

// связка между TypeNamedId и именами типов в макете.
Функция ТипДокументаТранслированный(ЗНАЧ TypeNamedId)

	TypeNamedId = нрег(TypeNamedId);
	
	Если TypeNamedId = нрег("XmlAcceptanceCertificate") Тогда
		Возврат "Акт";
		
	ИначеЕсли TypeNamedId = нрег("Invoice")
		Или TypeNamedId = нрег("InvoiceRevision") Тогда
		Возврат "СФ";
		
	ИначеЕсли TypeNamedId = нрег("UniversalTransferDocument")
		Или TypeNamedId = нрег("UniversalTransferDocumentRevision") Тогда
		Возврат "УПД";
		
	ИначеЕсли TypeNamedId = нрег("XmlTorg12") Тогда
		Возврат "ТОРГ-12";
		
	ИначеЕсли TypeNamedId = нрег("UniversalCorrectionDocument")
		Или TypeNamedId = нрег("UniversalCorrectionDocumentRevision") Тогда
		Возврат "УКД";
		
	ИначеЕсли TypeNamedId = нрег("InvoiceCorrection") Тогда
		Возврат "КСФ";
		
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

Функция ЭтоТипКонтентаУПД(ТипКонтента)
	
	Результат = ВРЕГ(ТипКонтента) = ВРЕГ("Utd820SellerContent");
	Возврат Результат;
	
КонецФункции	

Функция ЭтоТипКонтентаУКД(ТипКонтента)
	
	Результат = ВРЕГ(ТипКонтента) = ВРЕГ("UcdSellerContent");
	Возврат Результат;
	
КонецФункции	

Процедура Плагин_ИзменениеКонтентаУПД(Content, ДокументСсылка, TypeNamedId, ОшибкиПлагинов)
	
	Если ТипЗнч(НастройкиПлагина) <> Тип("Структура") 
		Или НЕ НастройкиПлагина.Свойство("Правила") Тогда
		ВызватьИсключение "Не указаны настройки плагина";
	КонецЕсли;
		
	ОшибкиПлагинов = Новый Массив;
	
	Для Каждого Правило Из НастройкиПлагина.Правила Цикл
		
		РезультатВыполнения = ВыполнитьСценарий(Правило, ДокументСсылка, Content, TypeNamedId);
		
		Метрика_ДобавитьСтатистику_ПодготовитьЭлектронныйДокумент(Правило);
		
		Если РезультатВыполнения.Свойство("ОписаниеОшибки") Тогда
			
			ПолныйТекстОшибки = 
			"Настройка: " + Правило.Описание + " 
			| Текст ошибки: " + РезультатВыполнения.ОписаниеОшибки;
			
			ОшибкиПлагинов.Добавить(ПолныйТекстОшибки);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ВалидацияДокумента(Параметры)
	
	Ошибки = Параметры.Ошибки;
	ТипКонтента = нрег(Параметры.Документ.Тип.ТипКонтента);
	
	ЕстьОшибкиПлагина = (ТипКонтента = "utd820" или ТипКонтента = "ucd736")
						И Параметры.Документ.Реквизиты.Свойство("ОшибкиПлагинов_ИзменениеКонтента")
						И Параметры.Документ.Реквизиты.ОшибкиПлагинов_ИзменениеКонтента.Количество() > 0;
	
	Если ЕстьОшибкиПлагина Тогда	
		
		ОсновнойМодуль.НачатьГруппуОшибокВалидации(Ошибки, "Ошибки плагина ""Изменение контента""");
		
		Для Каждого ОписаниеОшибки Из Параметры.Документ.Реквизиты.ОшибкиПлагинов_ИзменениеКонтента Цикл
			ОсновнойМодуль.ДобавитьОшибкуВалидации(Ошибки, ОписаниеОшибки);
		КонецЦикла;	
	
	КонецЕсли;
	
	Возврат Ошибки;  // не используется - зачем оно? Может, возвращать Истина?
	
КонецФункции

Функция ИдентификаторИМ() Экспорт
	
	Если ИдентификаторИнтеграционногоМодуля = Неопределено Тогда
		ЗаполнитьИдентификаторИнтеграционногоМодуля();
	КонецЕсли;
	
	Возврат ИдентификаторИнтеграционногоМодуля; 
	
КонецФункции

//{ Выполнение шагов

Функция ВыполнитьСценарийВПесочнице(Правило)
	
	// Пока только на УПД и 820-м формате. Про УКД будем думать дальше.

	Сообщить("Выполняем сценарий: " + Правило.ИмяСценария);
	
	ОтладочныеДанные = ПрочитатьОтладочныеДанные();
	
	КонтентСтруктурой = ОтладочныеДанные.Контент;
	ДокументСсылка = ОтладочныеДанные.ДокументСсылка;
	ТипДокумента = ОтладочныеДанные.ТипДокумента;
	
	Если нрег(ТипДокумента) = нрег("UniversalCorrectionDocument") Тогда
		ContentXDTO = НовыйКонтент("UcdSellerContent");
	Иначе
		ContentXDTO = НовыйКонтент("Utd820SellerContent");
	КонецЕсли;
	
	ОсновнойМодуль.ЗаполнитьКонтентXDTOПоСтруктуре(ContentXDTO, КонтентСтруктурой);
	
	Результат = ВыполнитьСценарий(Правило, ДокументСсылка, ContentXDTO, ТипДокумента);
	Результат = ЗначениеВСтрокуВнутр(Результат);  // обернуть для передачи на клиента. Можно и через ВременноеХранилище.
	Возврат Результат;

КонецФункции // ВыполнитьСценарийВПесочнице()

Функция СценарийПрименимКДокументу(Правило, ДокументСсылка, Content, TypeNamedId)
	
	ТипДокумента = ТипДокументаТранслированный(TypeNamedId);
	
	Если Правило.ТипыДокументов.Найти(ТипДокумента) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтрагентДокумента = КонтрагентДокумента(ДокументСсылка, Content);
	Если Не КонтрагентПопадаетВФильтр(КонтрагентДокумента, Правило.ТипФильтраКонтрагентов, Правило.Контрагенты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ВыполнитьСценарий(Правило, ДокументСсылка, Content, TypeNamedId)

	ПустойРезультат = Новый Структура;
	
	Если НЕ СценарийПрименимКДокументу(Правило, ДокументСсылка, Content, TypeNamedId) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;	
	
	ИмяСценария = Правило.ИмяСценария;
	ВыполняемыйКод = Правило.ВыполняемыйКод;
	ОписаниеСценария = ОписаниеСценария(ИмяСценария);
	
	Попытка
	
		Если ИмяСценария = "ОснованиеОтгрузки" Тогда
			
			Результат = Сценарий_ОснованиеОтгрузки(ДокументСсылка, Content, ВыполняемыйКод);
			
		ИначеЕсли ИмяСценария = "СведенияОТранспортировкеИГрузе" Тогда
			
			Результат = Сценарий_СведенияОТранспортировкеИГрузе(ДокументСсылка, Content, ВыполняемыйКод);
			
		ИначеЕсли ИмяСценария = "РаботникОрганизацииПродавца" Тогда
			
			Результат = Сценарий_РаботникОрганизацииПродавца(ДокументСсылка, Content, ВыполняемыйКод);
			
		ИначеЕсли ИмяСценария = "Строка5А" Тогда
			
			// Пока без настроек и кода. Дальше посмотрим.
			Результат = Сценарий_Строка5А(ДокументСсылка, Content);
			
		ИначеЕсли ИмяСценария = "КодТовара" Тогда    
			
			Если Правило.ВизуальнаяНастройка Тогда
				Результат = Сценарий_ИзменениеКодаТовара_Визуально(ДокументСсылка, Content, Правило.ПараметрыВизуальнойНастройки); 
			иначе
				Результат = Сценарий_ИзменениеКодаТовара(ДокументСсылка, Content, ВыполняемыйКод); 
			КонецЕсли;
			
		ИначеЕсли ИмяСценария = "ОчисткаКонтактныхДанных" Тогда
			
			Результат = Сценарий_ОчисткаКонтактныхДанных(ДокументСсылка, Content);
			
		ИначеЕсли ИмяСценария = "ОчисткаКолонок_2_4" Тогда
			
			Результат = Сценарий_ОчисткаКолонок_2_4(ДокументСсылка, Content);
			
		ИначеЕсли ИмяСценария = "ДополнительныеСведения" Тогда
			
			// решить, надо ли выделять визуальную настройку в отдельный сценарий
			Если Правило.ВизуальнаяНастройка Тогда
				Результат = Сценарий_ДополнительныеСведения_Визуально(ДокументСсылка, Content, Правило.ПараметрыВизуальнойНастройки);
			Иначе
				Результат = Сценарий_ДополнительныеСведения_Кодом(ДокументСсылка, Content, ВыполняемыйКод);
			КонецЕсли;             
			
		ИначеЕсли ИмяСценария = "УступочнаяНадпись" Тогда
			
			Результат = Сценарий_УступочнаяНадпись_Визуально(ДокументСсылка, Content, Правило.ПараметрыВизуальнойНастройки);
		
		ИначеЕсли ИмяСценария = "ЗаполнениеКодовОСУ" Тогда
			
			Если ЭтоТипКонтентаУКД(Content.Тип().Имя) Тогда
				Результат = Сценарий_КодОСУ_УКД(ДокументСсылка, Content, ВыполняемыйКод, Правило.ВизуальнаяНастройка, Правило.ПараметрыВизуальнойНастройки);
			Иначе
				Результат = Сценарий_КодОСУ_УПД(ДокументСсылка, Content, ВыполняемыйКод, Правило.ВизуальнаяНастройка, Правило.ПараметрыВизуальнойНастройки);
			КонецЕсли;	
			
		ИначеЕсли ИмяСценария = "ЗаполнениеСуммыАкциза" Тогда
			
			Если Правило.ВизуальнаяНастройка Тогда
				Если ЭтоТипКонтентаУКД(Content.Тип().Имя) Тогда
					Результат = Сценарий_ЗаполнениеСуммыАкцизаУКД_Визуально(ДокументСсылка, Content, Правило.ПараметрыВизуальнойНастройки);
				Иначе
					Результат = Сценарий_ЗаполнениеСуммыАкцизаУПД_Визуально(ДокументСсылка, Content, TypeNamedId, Правило.ПараметрыВизуальнойНастройки);
				КонецЕсли;
			Иначе
				Результат = Сценарий_ЗаполнениеСуммыАкциза_Кодом(ДокументСсылка, Content, ВыполняемыйКод);
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение "Неизвестный сценарий: " + ИмяСценария;
			
		КонецЕсли;
		
		Возврат Результат;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат РезультатВыполненияСценарияСОшибкой(ОписаниеОшибки);

	КонецПопытки;	
	
КонецФункции

// Вернет ОписаниеОшибки, если что-то было не успешно
Функция ВыполнитьШагСОтладкой(ЗНАЧ Текст, Параметры) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	// Добавить распаковку переменных из Параметры в начало выполняемого кода
	Для Каждого КлючИЗначение Из Параметры Цикл
		
		ИмяПеременной = КлючИЗначение.Ключ;
		ШаблонСтроки = "%1 = Параметры.%1;";
		Текст = ПодставитьВСтроку(ШаблонСтроки, ИмяПеременной) + Символы.ПС + Текст;
		
	КонецЦикла;
	
	Выполнить(Текст);
	// возможные ошибки перехватываются выше
	
КонецФункции

Функция РезультатВыполненияСценарияСОшибкой(ОписаниеОшибки)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	Возврат Результат;
	
КонецФункции	

//} Выполнение шагов



//{ конечные сценарии

Функция Сценарий_ОснованиеОтгрузки(ДокументСсылка, Content, ВыполняемыйКод)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	Результат.Вставить("Наименование");
	Результат.Вставить("Дата");
	Результат.Вставить("Номер");
	Результат.Вставить("ДопИнформация");

	Если Content.TransferInfo.TransferBases.Количество() = 1 Тогда

	  TransferBase = Content.TransferInfo.TransferBases[0];
	  Результат.Наименование = TransferBase.DocumentName;
	  Результат.Номер = TransferBase.DocumentNumber;
	  Результат.Дата = TransferBase.DocumentDate;
	  Результат.ДопИнформация = TransferBase.DocumentInfo;

	КонецЕсли;
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);

	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);	
	ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
	ИзолированныеПеременные.Вставить("Результат",		Результат);	
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Content.TransferInfo.TransferBases.Очистить();
	TransferBase = НовыйЭлементСпискаXDTO(Content.TransferInfo.TransferBases);

	Если ЗначениеЗаполнено(Результат.Наименование) Тогда
		TransferBase.DocumentName = Строка(Результат.Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.Номер) Тогда
		TransferBase.DocumentNumber = Результат.Номер;
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.Дата) Тогда
		
		// не будем заставлять пользователя конвертировать строку в дату, попробуем сделать это сами
		Если ТипЗнч(Результат.Дата) = Тип("Дата") Тогда
			TransferBase.DocumentDate = Результат.Дата;
		Иначе
			TransferBase.DocumentDate = Строки_ВДату(Результат.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.ДопИнформация) Тогда
		TransferBase.DocumentInfo = Результат.ДопИнформация;
	КонецЕсли;	
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("Результат",			Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_СведенияОТранспортировкеИГрузе(ДокументСсылка, Content, ВыполняемыйКод)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	Результат.Вставить("СведенияОТранспортировкеИГрузе", "" + Content.TransferInfo.TransferTextInfo);
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);

	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);	
	ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
	ИзолированныеПеременные.Вставить("Результат",		Результат);	
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Если ЗначениеЗаполнено(Результат.СведенияОТранспортировкеИГрузе) Тогда
		Content.TransferInfo.TransferTextInfo = Результат.СведенияОТранспортировкеИГрузе;
	КонецЕсли;	
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("Результат",			Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_РаботникОрганизацииПродавца(ДокументСсылка, Content, ВыполняемыйКод)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	// будут ли у нас тут доступны ДанныеСотрудника??? Это встречалось в примерах
	
	Если Content.TransferInfo.Установлено("Employee") Тогда
		
		Employee = Content.TransferInfo.Employee;
		
		Результат.Вставить("Фамилия",	"" + Employee.Surname);
		Результат.Вставить("Имя",		"" + Employee.FirstName);
		Результат.Вставить("Отчество",	"" + Employee.Patronymic);
		Результат.Вставить("Должность",	"" + Employee.EmployeePosition);
		
	Иначе
		
		Результат.Вставить("Фамилия",	"");
		Результат.Вставить("Имя",		"");
		Результат.Вставить("Отчество",	"");
		Результат.Вставить("Должность",	"");
		
	КонецЕсли;	
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);

	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);	
	ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
	ИзолированныеПеременные.Вставить("Результат",		Результат);	
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Employee.Surname				= Результат.Фамилия;
	Employee.FirstName				= Результат.Имя;
	Employee.Patronymic				= Результат.Отчество;
	Employee.EmployeePosition		= Результат.Должность;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("Результат",			Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_ИзменениеКодаТовара(ДокументСсылка, Content, ВыполняемыйКод)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	Если Content.Свойства().Получить("Table") = Неопределено Тогда
		Результат = ТаблицаТоваровИзТабличнойЧасти(Content.InvoiceCorrectionTable.Items);
		Items = Content.InvoiceCorrectionTable.Items;
	Иначе
		Результат = ТаблицаТоваровИзТабличнойЧасти(Content.Table.Items);
		Items = Content.Table.Items;
	КонецЕсли;

	Результат.Колонки.Добавить("НаимТов");  // Product
	Результат.Колонки.Добавить("КодТов");  // ItemVendorCode
	Результат.Колонки.Добавить("КодВидТов"); // ItemTypeCode
	Для Сч = 0 По Результат.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = Результат[Сч];
		item = Items[Сч];
		СтрокаТаблицыТоваров.НаимТов		= item.Product;
		СтрокаТаблицыТоваров.КодТов			= item.ItemVendorCode;
		СтрокаТаблицыТоваров.КодВидТов		= item.ItemTypeCode;
	КонецЦикла;

	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка",	ДокументСсылка);	
	ИзолированныеПеременные.Вставить("Результат",		Результат);	
	
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Для Сч = 0 По Результат.Количество() - 1 Цикл
		
		СтрокаТаблицыТоваров = Результат[Сч];
		item = Items[Сч];
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.НаимТов) Тогда
			item.Product		= СтрокаТаблицыТоваров.НаимТов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.КодТов) Тогда
			item.ItemVendorCode		= СтрокаТаблицыТоваров.КодТов;
		Иначе
			item.Сбросить("ItemVendorCode");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.КодВидТов) Тогда
			item.ItemTypeCode		= СтрокаТаблицыТоваров.КодВидТов;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);
	РезультатФункции.Вставить("Результат",		Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_ИзменениеКодаТовара_Визуально(ДокументСсылка, Content, ПараметрыВизуальнойНастройки)

	
	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	Если Content.Свойства().Получить("Table") = Неопределено Тогда
		Результат = ТаблицаТоваровИзТабличнойЧасти(Content.InvoiceCorrectionTable.Items);
		Items = Content.InvoiceCorrectionTable.Items;
	Иначе
		Результат = ТаблицаТоваровИзТабличнойЧасти(Content.Table.Items);
		Items = Content.Table.Items;
	КонецЕсли;
	
	Результат.Колонки.Добавить("НаимТов"); // Product
	Результат.Колонки.Добавить("КодТов");  // ItemVendorCode

	Для Сч = 0 По Результат.Количество() - 1 Цикл

		СтрокаТаблицыТоваров		= Результат[Сч];
		Item 						= Items[Сч];
		СтрокаТаблицыТоваров.КодТов	= item.ItemVendorCode;

	КонецЦикла;

	//----------------- Выполнение пользовательского кода
	
	ВыбранныйСценарийИмя 	= ПараметрыВизуальнойНастройки.ВыбранныйСценарийИмя; 
	ВыбранныйСценарийСсылка = ПараметрыВизуальнойНастройки.ВыбранныйСценарийСсылка;
	
	Если ВыбранныйСценарийИмя = "РеквизитНоменклатуры" Тогда 
		
		НаименованиеРеквизита	= ВыбранныйСценарийСсылка;
		НаименованиеСправочника	= "Номенклатура";
		НаименованиеКолонки		= "Номенклатура";
		
		ЗаполнитьКодТовара_ПоРеквизитуСправочника(Результат, НаименованиеСправочника, НаименованиеКолонки, НаименованиеРеквизита);
		
	ИначеЕсли ВыбранныйСценарийИмя = "РеквизитХарактеристики" Тогда    
		
		НаименованиеРеквизита	= ВыбранныйСценарийСсылка;
		НаименованиеСправочника	= "ХарактеристикиНоменклатуры";
		НаименованиеКолонки		= "Характеристика";
		
		ЗаполнитьКодТовара_ПоРеквизитуСправочника(Результат, НаименованиеСправочника, НаименованиеКолонки, НаименованиеРеквизита);
		
	ИначеЕсли ВыбранныйСценарийИмя = "ДополнительныеСведения" Тогда
		
		СвойствоСсылка		= ВыбранныйСценарийСсылка;
		МассивНоменклатур	= Результат.ВыгрузитьКолонку("Номенклатура");
		МассивСвойств		= Новый Массив;
		
		МассивСвойств.Добавить(СвойствоСсылка);
		
		МетаданныеНоменклатура		= Метаданные.Справочники.Номенклатура;
		ТЗ_ДопСведения_ДопРеквизиты	= ТЗ_ДопСведения_ДопРеквизиты(МассивНоменклатур, МассивСвойств, МетаданныеНоменклатура);
		
		Для Каждого СтрокаТаблицы из Результат Цикл
			ЗначениеИнфополя		= ПолучитьЗначениеИзТЗ_ДопСведения_ДопРеквизиты(ТЗ_ДопСведения_ДопРеквизиты, СтрокаТаблицы.Номенклатура, СвойствоСсылка);
			СтрокаТаблицы.КодТов	= Строка(ЗначениеИнфополя);
		КонецЦикла;
		
	ИначеЕсли ВыбранныйСценарийИмя = "РегистрСведений" Тогда 
		ЗаполнитьШтрихкодыВТаблицеТоваров(Результат, ДокументСсылка.Контрагент, ВыбранныйСценарийСсылка);
	КонецЕсли;

	//----------------- Выполнение пользовательского кода
	
	Для Сч = 0 По Результат.Количество() - 1 Цикл
		
		СтрокаТаблицыТоваров = Результат[Сч];
		Item = Items[Сч]; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.КодТов) Тогда
			Item.ItemVendorCode		= СтрокаТаблицыТоваров.КодТов;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);
	РезультатФункции.Вставить("Результат",		Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_ОчисткаКонтактныхДанных(ДокументСсылка, Content)

	УчастникиФХЖ = Новый Массив;

	Если НЕ Content.Свойства().Получить("Buyer") = Неопределено Тогда
		УчастникиФХЖ.Добавить(Content.Buyer);
	КонецЕсли;
    Если НЕ Content.Свойства().Получить("Seller") = Неопределено Тогда
		УчастникиФХЖ.Добавить(Content.Seller);
	КонецЕсли;
	
	Если НЕ Content.Свойства().Получить("Sellers") = Неопределено Тогда
		Для Каждого Элемент Из Content.Sellers Цикл
			УчастникиФХЖ.Добавить(Элемент);
		КонецЦикла;	
	КонецЕсли;
	
    Если НЕ Content.Свойства().Получить("Buyers") = Неопределено Тогда
		Для Каждого Элемент Из Content.Buyers Цикл
			УчастникиФХЖ.Добавить(Элемент);
		КонецЦикла;	
	КонецЕсли;
	
    Если НЕ Content.Свойства().Получить("Consignees") = Неопределено Тогда
		Для Каждого Элемент Из Content.Consignees Цикл
			УчастникиФХЖ.Добавить(Элемент);
		КонецЦикла;	
	КонецЕсли;
	
    Если НЕ Content.Свойства().Получить("Shippers") = Неопределено Тогда
		Для Каждого Элемент Из Content.Shippers Цикл
			Если Элемент.SameAsSeller = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Элемент.SameAsSeller Тогда
				УчастникиФХЖ.Добавить(Элемент.OrganizationInfo);  // Структура Shipper отличается
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого ExtendedOrganizationInfo из УчастникиФХЖ Цикл
		
		// 1. Очистить телефоны
		ExtendedOrganizationInfo.Phone = "";
		
		// 2. Очистить электронную почту
		ExtendedOrganizationInfo.Email = "";
		
		// 3. Очистить банковские реквизиты
		ExtendedOrganizationInfo.BankId		= "";
		ExtendedOrganizationInfo.BankName 	= "";
		ExtendedOrganizationInfo.CorrespondentAccount	= "";
		ExtendedOrganizationInfo.BankAccountNumber 		= "";
		
	КонецЦикла;

	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_ДополнительныеСведения_Кодом(ДокументСсылка, Content, ВыполняемыйКод)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);
	
	Если Content.Свойства().Получить("Table") = Неопределено Тогда
		ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти(Content.InvoiceCorrectionTable.Items);
		Items = Content.InvoiceCorrectionTable.Items;
	Иначе
		ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти(Content.Table.Items);
		Items = Content.Table.Items;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Инфополя");

	Для Сч = 0 По ТаблицаТоваров.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = ТаблицаТоваров[Сч];
		item = Items[Сч];
		СтрокаТаблицыТоваров.Инфополя = Новый Массив;  // стоит ли заполнять из контента?

	КонецЦикла;

	Результат.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	Результат.Вставить("ИнфополяШапки", Новый Массив);

	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);	
	ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
	ИзолированныеПеременные.Вставить("Результат",			Результат);	
	
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Для Каждого Эл Из Результат.ИнфополяШапки Цикл
		НовыйKeyValue = НовыйЭлементСпискаXDTO(Content.AdditionalInfoId.StructedAdditionalInfos);
		НовыйKeyValue.Key = Эл.Ключ;
		НовыйKeyValue.Value = Эл.Значение;
	КонецЦикла;

	Для Сч = 0 По Результат.ТаблицаТоваров.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = Результат.ТаблицаТоваров[Сч];
		item = Items[Сч];
		
		Для Каждого Эл Из СтрокаТаблицыТоваров.Инфополя Цикл
			НовыйKeyValue = НовыйЭлементСпискаXDTO(item.StructedAdditionalInfos);
			НовыйKeyValue.Key = Эл.Ключ;
			НовыйKeyValue.Value = Эл.Значение;
		КонецЦикла;

	КонецЦикла;

	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("Результат",			Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_ДополнительныеСведения_Визуально(ДокументСсылка, Content, ПараметрыВизуальнойНастройки)

	Результат = Новый Структура;  // результат выполнения пользовательского кода
	
	
	// TODO научиться брать доп.сведения шапки из разных источников: Реализация, СФ, Контрагент, Договор, Организация
	// надо будет в визуале тоже наполнить.
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);
	Если Content.Свойства().Получить("Table") = Неопределено Тогда
		ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти(Content.InvoiceCorrectionTable.Items);
		Items = Content.InvoiceCorrectionTable.Items;
	Иначе
		ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти(Content.Table.Items);
		Items = Content.Table.Items;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Инфополя");

	Для Сч = 0 По ТаблицаТоваров.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = ТаблицаТоваров[Сч];
		item = Items[Сч];
		СтрокаТаблицыТоваров.Инфополя = Новый Массив;

	КонецЦикла;

	Результат.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	Результат.Вставить("ИнфополяШапки", Новый Массив);

	
	//----------------- Выполнение пользовательского кода
	// TODO оптимизировать вложенные циклы 
	
	Для каждого Эл Из ПараметрыВизуальнойНастройки.ИнфополяШапки Цикл

		ЗначениеИнфополя = ЗначениеДопСвойстваПоСсылке(ДокументРеализации, Эл.Ссылка);
		ДобавитьИнфополе(Результат.ИнфополяШапки, Эл.Имя, ЗначениеИнфополя);

	КонецЦикла;

	МассивНоменклатур = Результат.ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивСвойств	  = Новый Массив;
	
	Для каждого Эл Из ПараметрыВизуальнойНастройки.ИнфополяТабличнойЧасти Цикл
		МассивСвойств.Добавить(Эл.Ссылка);
	КонецЦикла;

	МетаданныеНоменклатура		= Метаданные.Справочники.Номенклатура;
	ТЗ_ДопСведения_ДопРеквизиты	= ТЗ_ДопСведения_ДопРеквизиты(МассивНоменклатур, МассивСвойств, МетаданныеНоменклатура);
	
	Для Каждого СтрокаТаблицы из Результат.ТаблицаТоваров Цикл
		
		Для каждого Эл Из ПараметрыВизуальнойНастройки.ИнфополяТабличнойЧасти Цикл
		
			ЗначениеИнфополя = ПолучитьЗначениеИзТЗ_ДопСведения_ДопРеквизиты(ТЗ_ДопСведения_ДопРеквизиты, СтрокаТаблицы.Номенклатура, Эл.Ссылка);
			ДобавитьИнфополе(СтрокаТаблицы.Инфополя, Эл.Имя, ЗначениеИнфополя);
		
		КонецЦикла;
		
	КонецЦикла;
	
	//----------------- Выполнение пользовательского кода
	
	Для Каждого Эл Из Результат.ИнфополяШапки Цикл
		НовыйKeyValue = НовыйЭлементСпискаXDTO(Content.AdditionalInfoId.StructedAdditionalInfos);
		НовыйKeyValue.Key = Эл.Ключ;
		НовыйKeyValue.Value = Эл.Значение;
	КонецЦикла;

	Для Сч = 0 По Результат.ТаблицаТоваров.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = Результат.ТаблицаТоваров[Сч];
		item = Items[Сч];
		
		Для Каждого Эл Из СтрокаТаблицыТоваров.Инфополя Цикл
			НовыйKeyValue = НовыйЭлементСпискаXDTO(item.StructedAdditionalInfos);
			НовыйKeyValue.Key = Эл.Ключ;
			НовыйKeyValue.Value = Эл.Значение;
		КонецЦикла;

	КонецЦикла;

	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);
	РезультатФункции.Вставить("Результат",		Результат);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_УступочнаяНадпись_Визуально(ДокументСсылка, Content, ПараметрыВизуальнойНастройки)
	
	КлючИнфоПоля	 = "_";
	ЗначениеИнфополя = ПараметрыВизуальнойНастройки.УступочнаяНадпись_Текст;
	
	Если ЗначениеЗаполнено(ЗначениеИнфополя) Тогда
		
		НовыйKeyValue = НовыйЭлементСпискаXDTO(Content.AdditionalInfoId.StructedAdditionalInfos);
		НовыйKeyValue.Key	=	КлючИнфоПоля;
		НовыйKeyValue.Value =	ЗначениеИнфополя;
		
	Иначе
		ВызватьИсключение "Не заполнен ""Текст для Уступочной надписи"" в настроках плагина";
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция Сценарий_ОчисткаКолонок_2_4(ДокументСсылка, Content)
	
	Если Content.Свойства().Получить("Table") = Неопределено Тогда
		Items = Content.InvoiceCorrectionTable.Items;
		Для Каждого item из Items Цикл
			item.CorrectedValues.Сбросить("UnitCode");
			item.CorrectedValues.Сбросить("UnitName");
			item.CorrectedValues.Сбросить("Price");
			item.CorrectedValues.Сбросить("Quantity");
			
			item.OriginalValues.Сбросить("UnitCode");
			item.OriginalValues.Сбросить("UnitName");
			item.OriginalValues.Сбросить("Price");
			item.OriginalValues.Сбросить("Quantity");
		КонецЦикла;
	Иначе
		Items = Content.Table.Items;
		Для Каждого item из Items Цикл
			item.Сбросить("Unit");
			item.Сбросить("UnitName");
			item.Сбросить("Price");
			item.Сбросить("Quantity");
		КонецЦикла;
	КонецЕсли;
		
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);

	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_Строка5А(ДокументСсылка, Content)

	// Сценарий не рассчитан на сводные СФ. Для начала реализуем сценарий с одним документом реализации. Остальное будем дополнять по необходимости.
	// что будем делать с ошибками? Если попался сводный СФ?
	
	Если Content.DocumentShipments.Количество() > 1 Тогда
		ВызватьИсключение "Добавление номера п/п возможно только для счетов-фактур с одним основанием";
	КонецЕсли;	
	
	КоличествоСтрокТабличнойЧасти = Content.Table.Items.Количество();
	
	Если КоличествоСтрокТабличнойЧасти > 1 Тогда
	    ПредставлениеНПП = "п/п 1-" + Формат(КоличествоСтрокТабличнойЧасти, "ЧГ=0");
	Иначе
	    ПредставлениеНПП = "п/п 1";
	КонецЕсли;
	
	Для каждого DocumentShipment из Content.DocumentShipments цикл
	  DocumentShipment.Number = ПредставлениеНПП + " № " + DocumentShipment.Number;  
	КонецЦикла;	
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",	ДокументСсылка);

	Возврат РезультатФункции;

КонецФункции

Процедура Сценарий_КодОСУ_ПользовательскаяНастройка(Результат, ПараметрыВизуальнойНастройки, ДокументРеализации)

	Для Каждого СтрокаНастройки Из ПараметрыВизуальнойНастройки.ПараметрыЗаполненияКодовОСУ Цикл
		
		Если СтрокаНастройки.СпособЗаполнения = "РегистрШтрихкодов" Тогда
			
			ОСУ_ЗаполнитьКолонку_ИзРегистраШтрихкодов(Результат.ТаблицаТоваров, СтрокаНастройки.КолонкаТаблицыТоваров);

		ИначеЕсли СтрокаНастройки.СпособЗаполнения = "ДопСвойствоНоменклатуры" Тогда
			
			ОСУ_ЗаполнитьКолонку_ИзДопСвойстваНоменклатуры(Результат.ТаблицаТоваров, СтрокаНастройки.КолонкаТаблицыТоваров, СтрокаНастройки.Параметр);

		ИначеЕсли СтрокаНастройки.СпособЗаполнения = "РеквизитНоменклатуры" Тогда
			
			ОСУ_ЗаполнитьКолонку_ИзРеквизитаНоменклатуры(Результат.ТаблицаТоваров, СтрокаНастройки.КолонкаТаблицыТоваров, СтрокаНастройки.Параметр);

		ИначеЕсли СтрокаНастройки.СпособЗаполнения = "РеквизитУпаковки" Тогда
			
			ОСУ_ЗаполнитьКолонку_ИзРеквизитаУпаковки(Результат.ТаблицаТоваров, СтрокаНастройки.КолонкаТаблицыТоваров, СтрокаНастройки.Параметр);

		КонецЕсли;	
		
	КонецЦикла;
	
	Если ПараметрыВизуальнойНастройки.ПризнакВывода_СпособЗаполнения = "НеЗаполнять" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВизуальнойНастройки.ПризнакВывода_Источник = "Договор" Тогда
		ИсточникПризнакаВывода = ДокументРеализации.ДоговорКонтрагента;  // TODO проверить на разных конфигурациях
	ИначеЕсли ПараметрыВизуальнойНастройки.ПризнакВывода_Источник = "Контрагент" Тогда
		ИсточникПризнакаВывода = ДокументРеализации.Контрагент;
	КонецЕсли;

	Если ПараметрыВизуальнойНастройки.ПризнакВывода_СпособЗаполнения = "РеквизитСправочника" Тогда
		КодВывода = ИсточникПризнакаВывода[ПараметрыВизуальнойНастройки.ПризнакВывода_Параметр];
	ИначеЕсли ПараметрыВизуальнойНастройки.ПризнакВывода_СпособЗаполнения = "ДопСвойство" Тогда
		КодВывода = ЗначениеДопСвойстваПоСсылке(ИсточникПризнакаВывода, ПараметрыВизуальнойНастройки.ПризнакВывода_Параметр);
	КонецЕсли;

	Результат.КодВыводаИзОборота = СокрЛП(КодВывода);
	
КонецПроцедуры
 
Функция Сценарий_КодОСУ_УПД(ДокументСсылка, Content, ВыполняемыйКод, ВизуальнаяНастройка, ПараметрыВизуальнойНастройки)

	ИдентификаторИнтеграционногоМодуля = ОсновнойМодуль.ИдентификаторИнтеграционногоМодуля();

	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);
	
	ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти(Content.Table.Items);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
	Результат.Вставить("КодВыводаИзОборота",	Неопределено);
	
	ТаблицаТоваров.Колонки.Добавить("GTIN");
	ТаблицаТоваров.Колонки.Добавить("Числитель");
	ТаблицаТоваров.Колонки.Добавить("Знаменатель");
	ТаблицаТоваров.Колонки.Добавить("ПризнакОСУ");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Истина, "ПризнакОСУ");
	
	Если НЕ ВизуальнаяНастройка Тогда
		
		//----------------- Выполнение пользовательского кода
		
		// здесь будут устанавливаться параметры: из какого регистра какие данные брать
		ИзолированныеПеременные = Новый Структура;
		ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);
		ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
		ИзолированныеПеременные.Вставить("Результат",			Результат);
		
		ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
		
	Иначе
		
		Сценарий_КодОСУ_ПользовательскаяНастройка(Результат, ПараметрыВизуальнойНастройки, ДокументРеализации);
		
	КонецЕсли;
	
	// может, сюда как-то включить выполнение маппинга вместо создания нового метода?
	
	//----------------- Выполнение пользовательского кода
	
	ТаблицаТоваров.Колонки.Добавить("КодОСУ");

	Для Сч = 0 По ТаблицаТоваров.Количество() - 1 Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров[Сч];
		Item = Content.Table.Items[Сч]; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.GTIN)
			И СтрокаТаблицыТоваров.ПризнакОСУ = Истина
			И ЗначениеЗаполнено(СтрокаТаблицыТоваров.Количество) Тогда
			
			КодОСУ = ОСУ_КодОСУ(СтрокаТаблицыТоваров.GTIN, СтрокаТаблицыТоваров.Количество, СтрокаТаблицыТоваров.Числитель, СтрокаТаблицыТоваров.Знаменатель);
			СтрокаТаблицыТоваров.КодОСУ = КодОСУ;
			
			ItemIdentificationNumber = ОсновнойМодуль.НовыйЭлементСпискаXDTO(Item.ItemIdentificationNumbers);
			ItemIdentificationNumber.PackageIds.Добавить(КодОСУ);
			
			Если НастройкиПлагина.ЗапомнитьПоследнийДокументДляОтладки Тогда
				Item.ItemVendorCode = КодОСУ;  // визуализация для отладки
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат.КодВыводаИзОборота) Тогда
		ОсновнойМодуль.ДобавитьИнформационноеПоле(Content.AdditionalInfoId, "СвВыбытияМарк", Строка(Результат.КодВыводаИзОборота));
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
	РезультатФункции.Вставить("КодВыводаИзОборота",	Результат.КодВыводаИзОборота);
	
	Возврат РезультатФункции;

КонецФункции

Функция Сценарий_КодОСУ_УКД(ДокументСсылка, Content, ВыполняемыйКод, ВизуальнаяНастройка, ПараметрыВизуальнойНастройки)

	ИдентификаторИнтеграционногоМодуля = ОсновнойМодуль.ИдентификаторИнтеграционногоМодуля();

	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);
	
	ТаблицаТоваров = ТаблицаТоваровИзТабличнойЧасти_УКД(Content.InvoiceCorrectionTable.Items);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
	Результат.Вставить("КодВыводаИзОборота",	Неопределено);
	
	ТаблицаТоваров.Колонки.Добавить("GTIN");
	ТаблицаТоваров.Колонки.Добавить("Числитель");
	ТаблицаТоваров.Колонки.Добавить("Знаменатель");
	ТаблицаТоваров.Колонки.Добавить("ПризнакОСУ");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Истина, "ПризнакОСУ");
	
	Если НЕ ВизуальнаяНастройка Тогда
		
		//----------------- Выполнение пользовательского кода
		
		// здесь будут устанавливаться параметры: из какого регистра какие данные брать
		ИзолированныеПеременные = Новый Структура;
		ИзолированныеПеременные.Вставить("ДокументСсылка",		ДокументСсылка);
		ИзолированныеПеременные.Вставить("ДокументРеализации",	ДокументРеализации);
		ИзолированныеПеременные.Вставить("Результат",			Результат);
		
		ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
		
	Иначе
		
		Сценарий_КодОСУ_ПользовательскаяНастройка(Результат, ПараметрыВизуальнойНастройки, ДокументРеализации);
		
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("КодОСУ");
	
	Для Сч = 0 По ТаблицаТоваров.Количество() - 1 Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров[Сч];
		Item = Content.InvoiceCorrectionTable.Items[СтрокаТаблицыТоваров.ИндексСтрокиВКонтенте]; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.GTIN)
			И СтрокаТаблицыТоваров.ПризнакОСУ = Истина
			И ЗначениеЗаполнено(СтрокаТаблицыТоваров.Количество) Тогда
			
			КодОСУ = ОСУ_КодОСУ(СтрокаТаблицыТоваров.GTIN, СтрокаТаблицыТоваров.Количество, СтрокаТаблицыТоваров.Числитель, СтрокаТаблицыТоваров.Знаменатель);
			СтрокаТаблицыТоваров.КодОСУ = КодОСУ;
			
			Если СтрокаТаблицыТоваров.ВидИзменения = "До" Тогда
				ItemIdentificationNumber = ОсновнойМодуль.НовыйЭлементСпискаXDTO(Item.OriginalItemIdentificationNumbers);
			Иначе
				ItemIdentificationNumber = ОсновнойМодуль.НовыйЭлементСпискаXDTO(Item.CorrectedItemIdentificationNumbers);
			КонецЕсли;
			
			ItemIdentificationNumber.PackageIds.Добавить(КодОСУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиПлагина.ЗапомнитьПоследнийДокументДляОтладки Тогда
		// визуализация для отладки
		Для Каждого item Из Content.InvoiceCorrectionTable.Items Цикл
			
			ПредставлениеКодовОСУ = "";
			
			Попытка
				ПредставлениеКодовОСУ = ПредставлениеКодовОСУ + Item.OriginalItemIdentificationNumbers[0].PackageIds[0];
			Исключение
			КонецПопытки;	
			
			Попытка
				ПредставлениеКодовОСУ = ПредставлениеКодовОСУ + " / " + Item.CorrectedItemIdentificationNumbers[0].PackageIds[0];
			Исключение
			КонецПопытки;	
			
			Item.ItemVendorCode = ПредставлениеКодовОСУ;
			
		КонецЦикла;	
	КонецЕсли;	
	
	
	
	Если ЗначениеЗаполнено(Результат.КодВыводаИзОборота) Тогда
		ОсновнойМодуль.ДобавитьИнформационноеПоле(Content.AdditionalInfoId, "СвВыбытияМарк", Строка(Результат.КодВыводаИзОборота));
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументСсылка",		ДокументСсылка);
	РезультатФункции.Вставить("ДокументРеализации",	ДокументРеализации);
	РезультатФункции.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
	РезультатФункции.Вставить("КодВыводаИзОборота",	Результат.КодВыводаИзОборота);
	
	Возврат РезультатФункции;

КонецФункции

//{ Акцизы

Функция СценарийПоддерживается_ЗаполнениеСуммыАкциза()
	
	ПоддерживаемыеИМ = Новый Массив;
	
	ПоддерживаемыеИМ.Добавить("ПМ_УТ_11");
	ПоддерживаемыеИМ.Добавить("ПМ_БП_30");
	
	ЗаполнитьИдентификаторИнтеграционногоМодуля();
	
	Результат = (ПоддерживаемыеИМ.Найти(ИдентификаторИнтеграционногоМодуля) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция Сценарий_ЗаполнениеСуммыАкцизаУПД_Визуально(ДокументСсылка, Content, TypeNamedId, ПараметрыВизуальнойНастройки)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЭтоСводныйСФ = ЭтоСводныйСчетФактура(ДокументСсылка);
	Если ЭтоСводныйСФ Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаетсяСводныйСФ();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
			
	ПараметрыПоискаПодакцизногоТовара	= Акцизы_ПараметрыПоискаПодакцизногоТовара(ПараметрыВизуальнойНастройки);
	ПравилаПолученияДанных				= Акцизы_ПравилаПолученияДанныхУПД(ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза);
	
	ДокументРеализации		= ПолучитьДокументОснование(ДокументСсылка);
	ИмяДокументаОснования 	= ДокументРеализации.Метаданные().Имя;
	
	ПравилоПолученияДанных = Неопределено;
	ПравилаПолученияДанных.Свойство(ИмяДокументаОснования, ПравилоПолученияДанных);
	
	Если ПравилоПолученияДанных <> Неопределено Тогда
		
		ЗаданОтборПоНоменклатуре = ПараметрыПоискаПодакцизногоТовара.ИспользоватьОтбор; 
		
		ТаблицаТоваровПоДокументу1С = Акцизы_ТаблицаТоваровПоДокументу1С_УПД(ДокументРеализации, ПараметрыПоискаПодакцизногоТовара, ПравилоПолученияДанных, TypeNamedId, Content.Table.Items);
		
		ЦенаВключаетНДС = ЦенаВключаетНДС(ДокументРеализации);
		Если ЦенаВключаетНДС Тогда
			РассчитатьЦеныБезНДСВТаблицеТоваров(ТаблицаТоваровПоДокументу1С);
		КонецЕсли;
		
		ТаблицаТоваровПоКонтенту = КонтрактАкцизы_ТаблицаТоваровУПД(Content.Table.Items);
		
		Для Каждого СтрокаТЗПоДокументу1С Из ТаблицаТоваровПоДокументу1С Цикл
			
			СуммаАкциза			= СтрокаТЗПоДокументу1С.СуммаАкциза;
			ЭтоПодакцизныйТовар = (СтрокаТЗПоДокументу1С.ЭтоПодАкцизныйТовар <> Неопределено И СтрокаТЗПоДокументу1С.ЭтоПодАкцизныйТовар = Истина);
										
			НоменклатураСоответствуетОтбору = (ЗаданОтборПоНоменклатуре И ЭтоПодакцизныйТовар) Или Не ЗаданОтборПоНоменклатуре;
				
			ЗаполнятьСуммуВКонтенте = ЗначениеЗаполнено(СуммаАкциза) И НоменклатураСоответствуетОтбору;
			
			Если Не ЗаполнятьСуммуВКонтенте Тогда
				Продолжить;							
			КонецЕсли;								
			
			ПараметрыПоиска = ПараметрыПоискаСтрокиТабличнойЧастиДокумента1С_УПД(СтрокаТЗПоДокументу1С, TypeNamedId);
			РезультатПоиска = ТаблицаТоваровПоКонтенту.НайтиСтроки(ПараметрыПоиска);
			
			СделатьПоправкуНаПогрешностьОкругления = (ЦенаВключаетНДС 					// был пересчет цены
													И РезультатПоиска.Количество() = 0	// нет совпадений по стандартным параметрам поиска 
													И ПараметрыПоиска.Цена > 0);		// это не полная корректировка в сторону уменьшения 
			
			Если СделатьПоправкуНаПогрешностьОкругления Тогда
				// возможно требуется сделать поправку на копейку как погрешность при округлении
				ПараметрыПоиска.Цена = ПараметрыПоиска.Цена - 0.01;
				РезультатПоиска = ТаблицаТоваровПоКонтенту.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если РезультатПоиска.Количество() > 1 Тогда
				
				РаспределитьСуммуАкцизаПропорционально(СуммаАкциза, РезультатПоиска, "Количество", "СуммаАкциза");
				
			ИначеЕсли РезультатПоиска.Количество() = 1 Тогда
				
				РезультатПоиска[0].СуммаАкциза = СуммаАкциза;
								
			КонецЕсли;
												
		КонецЦикла;
		
		ЗаполнитьАкцизВКонтентеПоДаннымКонтракта_УПД(Content.Table.Items, ТаблицаТоваровПоКонтенту);
																	
	КонецЕсли;
					
	РезультатФункции = Новый Структура;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция Сценарий_ЗаполнениеСуммыАкцизаУКД_Визуально(ДокументСсылка, Content, ПараметрыВизуальнойНастройки)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
			
	ПараметрыПоискаПодакцизногоТовара	= Акцизы_ПараметрыПоискаПодакцизногоТовара(ПараметрыВизуальнойНастройки);
	ПравилаПолученияДанных				= Акцизы_ПравилаПолученияДанныхУКД(ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза_Корректировка);
		
	ДокументРеализации		= ПолучитьДокументОснование(ДокументСсылка);
	ИмяДокументаОснования 	= ДокументРеализации.Метаданные().Имя;
	
	ПравилоПолученияДанных = Неопределено;
	ПравилаПолученияДанных.Свойство(ИмяДокументаОснования, ПравилоПолученияДанных);
   	
	Если ПравилоПолученияДанных <> Неопределено Тогда
		
		ЗаданОтборПоНоменклатуре = ПараметрыПоискаПодакцизногоТовара.ИспользоватьОтбор;
		
		ТаблицаТоваровПоДокументу1С = Акцизы_ТаблицаТоваровПоДокументу1С_УКД(ДокументРеализации, ПравилоПолученияДанных, ПараметрыПоискаПодакцизногоТовара, Content.InvoiceCorrectionTable.Items);
		
		ЦенаВключаетНДС = ЦенаВключаетНДС(ДокументРеализации);
		Если ЦенаВключаетНДС Тогда
			РассчитатьЦеныБезНДСВТаблицеТоваров(ТаблицаТоваровПоДокументу1С);
		КонецЕсли;
		
		ТаблицаТоваровПоКонтенту = КонтрактАкцизы_ТаблицаТоваровУКД(Content.InvoiceCorrectionTable.Items);
		
		Для Каждого СтрокаТЗПоДокументу1С Из ТаблицаТоваровПоДокументу1С Цикл
			
			ЭтоПодакцизныйТовар = (СтрокаТЗПоДокументу1С.ЭтоПодАкцизныйТовар <> Неопределено
										И СтрокаТЗПоДокументу1С.ЭтоПодАкцизныйТовар = Истина);
										
			НоменклатураСоответствуетОтбору = (ЗаданОтборПоНоменклатуре И ЭтоПодакцизныйТовар)
												Или Не ЗаданОтборПоНоменклатуре;
												
			Если Не НоменклатураСоответствуетОтбору Тогда
				Продолжить;									
			КонецЕсли;										
			
			СуммаАкциза_До		= СтрокаТЗПоДокументу1С.СуммаАкцизаДоКорректировки;
			СуммаАкциза_После	= СтрокаТЗПоДокументу1С.СуммаАкциза;
			
			Если СтрокаТЗПоДокументу1С.ЭтоАлкогольнаяПродукция = Неопределено Тогда
				ЭтоАлкогольнаяПродукция = Ложь;
			Иначе
				ЭтоАлкогольнаяПродукция = СтрокаТЗПоДокументу1С.ЭтоАлкогольнаяПродукция;
			КонецЕсли;
						
			ПараметрыПоиска = ПараметрыПоискаСтрокиТабличнойЧастиДокумента1С_УКД(СтрокаТЗПоДокументу1С);
			РезультатПоиска = ТаблицаТоваровПоКонтенту.НайтиСтроки(ПараметрыПоиска);
			
			СделатьПоправкуНаПогрешностьОкругления = (ЦенаВключаетНДС 					// был пересчет цены
													И РезультатПоиска.Количество() = 0	// нет совпадений по стандартным параметрам поиска 
													И ПараметрыПоиска.Цена > 0);		// это не полная корректировка в сторону уменьшения 
			
			Если СделатьПоправкуНаПогрешностьОкругления Тогда
				// возможно требуется сделать поправку на копейку как погрешность при округлении
				
				ЭтоУменьшение = (СуммаАкциза_До - СуммаАкциза_После) >= 0;
				
				Если ЭтоУменьшение Тогда
					ПараметрыПоиска.Цена = ПараметрыПоиска.Цена + 0.01;
				Иначе
					ПараметрыПоиска.Цена = ПараметрыПоиска.Цена - 0.01;
				КонецЕсли;
				
				РезультатПоиска = ТаблицаТоваровПоКонтенту.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
						
			Если РезультатПоиска.Количество() > 1 Тогда
				
				ИмяЗаполняемойКолонки = "СуммаАкциза"; 
				Если СуммаАкциза_После <> 0 Тогда 
					РаспределитьСуммуАкцизаПропорционально(СуммаАкциза_После, РезультатПоиска, "Количество", ИмяЗаполняемойКолонки);
				Иначе
					Для Каждого ЭлементРезультатаПоиска Из РезультатПоиска Цикл
						ЭлементРезультатаПоиска[ИмяЗаполняемойКолонки] = СуммаАкциза_После;
					КонецЦикла;
				КонецЕсли;
				
				ИмяЗаполняемойКолонки = "СуммаАкциза_До";
				Если СуммаАкциза_До <> 0 Тогда 
					РаспределитьСуммуАкцизаПропорционально(СуммаАкциза_До, РезультатПоиска, "Количество_До", ИмяЗаполняемойКолонки);
				Иначе
					Для Каждого ЭлементРезультатаПоиска Из РезультатПоиска Цикл
						ЭлементРезультатаПоиска[ИмяЗаполняемойКолонки] = СуммаАкциза_До;
					КонецЦикла;
				КонецЕсли;
				
				Если ЭтоАлкогольнаяПродукция Тогда
				
					Для Каждого ПодходящаяСтрокаТЗ Из РезультатПоиска Цикл
						РезультатПоиска.ЭтоАлкогольнаяПродукция = ЭтоАлкогольнаяПродукция;
						ПроверитьКорректностьЗаполненияСуммыАкцизаПоАлкоголю_УКД(ПодходящаяСтрокаТЗ.СуммаАкциза_До, ПодходящаяСтрокаТЗ.СуммаАкциза);
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли РезультатПоиска.Количество() = 1 Тогда
				
				РабочаяСтрокаТЗ = РезультатПоиска[0];
				
				РабочаяСтрокаТЗ.ЭтоАлкогольнаяПродукция = ЭтоАлкогольнаяПродукция;
				
				Если ЭтоАлкогольнаяПродукция Тогда
					ЗаполнитьДанныеПоАкцизамУКД_Алкоголь(СуммаАкциза_До, СуммаАкциза_После, РабочаяСтрокаТЗ.СуммаАкциза_До, РабочаяСтрокаТЗ.СуммаАкциза);
				Иначе
					ЗаполнитьДанныеПоАкцизамУКД_БезАлкоголь(СуммаАкциза_До, СуммаАкциза_После, РабочаяСтрокаТЗ.СуммаАкциза_До, РабочаяСтрокаТЗ.СуммаАкциза);
				КонецЕсли;
												
			КонецЕсли;
									
		КонецЦикла;
		
		ЗаполнитьАкцизВКонтентеПоДаннымКонтракта_УКД(Content.InvoiceCorrectionTable.Items, ТаблицаТоваровПоКонтенту);
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция Сценарий_ЗаполнениеСуммыАкциза_Кодом(ДокументСсылка, Content, ВыполняемыйКод)
	
	ЭтоТипКонтентаУКД = ЭтоТипКонтентаУКД(Content.Тип().Имя);
	
	Если ЭтоТипКонтентаУКД Тогда 
		Результат = КонтрактАкцизы_ТаблицаТоваровУКД_Кодом(Content.InvoiceCorrectionTable.Items);	
	Иначе	
		Результат = КонтрактАкцизы_ТаблицаТоваровУПД(Content.Table.Items);
	КонецЕсли;
	
	ДокументРеализации = ПолучитьДокументОснование(ДокументСсылка);
	
	//----------------- Выполнение пользовательского кода
	ИзолированныеПеременные = Новый Структура;
	ИзолированныеПеременные.Вставить("ДокументСсылка"		, ДокументСсылка);
	ИзолированныеПеременные.Вставить("ДокументРеализации"	, ДокументРеализации);
	ИзолированныеПеременные.Вставить("Content"				, Content);
	ИзолированныеПеременные.Вставить("Результат"			, Результат);
		
	ВыполнитьШагСОтладкой(ВыполняемыйКод, ИзолированныеПеременные);
	//----------------- Выполнение пользовательского кода
	
	Если ЭтоТипКонтентаУКД Тогда
		
		ВозможныеВидИзмения = Перечисление_ВидИзменияВКонтентеУКД();
		Items = Content.InvoiceCorrectionTable.Items;
		
		Для Сч = 0 По Результат.Количество() - 1 Цикл
		
			СтрокаТаблицыТоваров = Результат[Сч];
			Item = Items[СтрокаТаблицыТоваров.ИндексСтрокиВКонтенте]; 
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыТоваров.СуммаАкциза) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыТоваров.ВидИзменения = ВозможныеВидИзмения.До Тогда
				Item.OriginalValues.Excise = СтрокаТаблицыТоваров.СуммаАкциза;
			Иначе
				Item.CorrectedValues.Excise = СтрокаТаблицыТоваров.СуммаАкциза;
			КонецЕсли;
									
		КонецЦикла;
		
		Для Сч = 0 По Items.Количество() - 1 Цикл
			
			Item = Items[Сч];
			  
			ТребуетсяЗаполнитьРазницу = (Item.OriginalValues.Excise <> Неопределено
											И Item.CorrectedValues.Excise <> Неопределено);
											
			Если ТребуетсяЗаполнитьРазницу Тогда
				
				СуммаАкциза_До		= Число(Item.OriginalValues.Excise);
				СуммаАкциза_После 	= Число(Item.CorrectedValues.Excise); 
				
				ЭтоУвеличениеСуммыАкциза = (СуммаАкциза_После > СуммаАкциза_До);
				
				Если ЭтоУвеличениеСуммыАкциза Тогда
					Item.AmountsInc.Excise = (СуммаАкциза_После - СуммаАкциза_До);
				Иначе
					Item.AmountsDec.Excise = (СуммаАкциза_До - СуммаАкциза_После);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	    			
		ЗаполнитьАкцизВКонтентеПоДаннымКонтракта_УПД(Content.Table.Items, Результат);
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	
	Возврат РезультатФункции;
	
КонецФункции

//} Акцизы

//} конечные сценарии


Функция ВариантыХраненияШтрихкода() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если Метаданные.РегистрыСведений.Найти("Штрихкоды" ) <> Неопределено Тогда
		Результат.Добавить("Регистр_Штрихкоды", "Регистр сведений Штрихкоды");
	КонецЕсли;	
	
	Если Метаданные.РегистрыСведений.Найти("ШтрихкодыНоменклатуры" ) <> Неопределено Тогда
		Результат.Добавить("Регистр_ШтрихкодыНоменклатуры", "Регистр сведений ШтрихкодыНоменклатуры");
	КонецЕсли;	
	
	Если Метаданные.РегистрыСведений.Найти("НоменклатураКонтрагентов" ) <> Неопределено Тогда
		Результат.Добавить("Регистр_НоменклатураКонтрагентов", "Регистр сведений НоменклатураКонтрагентов");
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти("НоменклатураПоставщиков" ) <> Неопределено Тогда
		Результат.Добавить("Справочник_НоменклатураПоставщиков", "Справочник НоменклатураПоставщиков");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьШтрихкодыВТаблицеТоваров(ТаблицаТоваров, Контрагент, РасположениеШтрихкодов)

	ИмяИМ = ОсновнойМодуль.ИдентификаторИнтеграционногоМодуля();

	ТекстЗапроса = "";
	
	Если ИмяИМ = "ПМ_УНФ_16" Тогда
		
		ТекстЗапроса = ТекстЗапросаПоШтрихкодам_УНФ_16(РасположениеШтрихкодов);
		
	ИначеЕсли ИмяИМ = "ПМ_УТ_11" Тогда
		
		ТекстЗапроса = ТекстЗапросаПоШтрихкодам_УТ_11(РасположениеШтрихкодов);
		
	ИначеЕсли ИмяИМ = "ПМ_БП_30" Тогда
		
		ТекстЗапроса = ТекстЗапросаПоШтрихкодам_БП_30(РасположениеШтрихкодов);
		
	ИначеЕсли ИмяИМ = "ПМ_УТ_103" Тогда
		
		ТекстЗапроса = ТекстЗапросаПоШтрихкодам_УТ_103(РасположениеШтрихкодов);
		
	ИначеЕсли ИмяИМ = "ПМ_БП_20" Тогда
		
		ТекстЗапроса = ТекстЗапросаПоШтрихкодам_БП_20(РасположениеШтрихкодов);
		
	Иначе
		Возврат;  // конфигурация не поддерживается
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивХарактеристик = ТаблицаТоваров.ВыгрузитьКолонку("Характеристика");
	МассивХарактеристик.Добавить(ПустаяХарактеристика());
	
	Запрос.УстановитьПараметр("Номенклатура",			МассивНоменклатуры);
	Запрос.УстановитьПараметр("Характеристика",			МассивХарактеристик);
	Запрос.УстановитьПараметр("Контрагент",				Контрагент);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",	ПустаяХарактеристика());
	
	ТаблицаШтрихкодов = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьШтрихкодыИзРезультатаЗапроса(ТаблицаТоваров, ТаблицаШтрихкодов);
	
КонецПроцедуры

Функция ТекстЗапросаПоШтрихкодам_УНФ_16(РасположениеШтрихкодов)
	
	ТекстЗапроса = "";
	
	Если РасположениеШтрихкодов = "Регистр_ШтрихкодыНоменклатуры" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В(&Номенклатура)
		|	И ШтрихкодыНоменклатуры.Характеристика В(&Характеристика)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаПоШтрихкодам_УТ_11(РасположениеШтрихкодов)
	
	ТекстЗапроса = "";
	
	Если РасположениеШтрихкодов = "Регистр_ШтрихкодыНоменклатуры" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В(&Номенклатура)
		|	И ШтрихкодыНоменклатуры.Характеристика В(&Характеристика)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаПоШтрихкодам_БП_30(РасположениеШтрихкодов)
	
	ТекстЗапроса = "";
	
	Если РасположениеШтрихкодов = "Регистр_ШтрихкодыНоменклатуры" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Неопределено КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В(&Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
	ИначеЕсли РасположениеШтрихкодов = "Справочник_НоменклатураПоставщиков" Тогда
		
		// в БП 3.0
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Артикул КАК ШтрихКод,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	&ПустаяХарактеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Контрагент
		|	И НоменклатураПоставщиков.Номенклатура В(&Номенклатура)";
		//-
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаПоШтрихкодам_УТ_103(РасположениеШтрихкодов)
	
	ТекстЗапроса = "";
	
	Если РасположениеШтрихкодов = "Регистр_Штрихкоды" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Владелец В(&Номенклатура)
		|	И ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры В(&Характеристика)
		|	И ШтрихкодыНоменклатуры.ТипШтрихкода.Предопределенный
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
	ИначеЕсли РасположениеШтрихкодов = "Регистр_НоменклатураКонтрагентов" Тогда
		
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихКод,
		|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры КАК Характеристика
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Контрагент = &Контрагент
		|	И НоменклатураКонтрагентов.Номенклатура В(&Номенклатура)
		|	И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры В(&Характеристика)";
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаПоШтрихкодам_БП_20(РасположениеШтрихкодов)
	
	ТекстЗапроса = "";
	// Некоторые варианты подходят для УПП 1.3, другие - только БП 2.0
	
	Если РасположениеШтрихкодов = "Регистр_Штрихкоды" Тогда
		
		// в УПП 1.3
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Владелец В(&Номенклатура)
		|	И ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры В(&Характеристика)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
	ИначеЕсли РасположениеШтрихкодов = "Регистр_НоменклатураКонтрагентов" Тогда
		
		// в УПП 1.3
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихКод
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Контрагент = &Контрагент
		|	И НоменклатураКонтрагентов.Номенклатура В (&Номенклатура)
		|	И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры В (&Характеристика)";
		
	ИначеЕсли РасположениеШтрихкодов = "Справочник_НоменклатураПоставщиков" Тогда
		
		// в БП 2.0
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Артикул КАК ШтрихКод,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	&ПустаяХарактеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Контрагент
		|	И НоменклатураПоставщиков.Номенклатура В(&Номенклатура)";
		//-
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПустаяХарактеристика()

	Результат = Неопределено;
	
	Если Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") <> Неопределено Тогда
		Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ПустаяХарактеристика()

Процедура ЗаполнитьШтрихкодыИзРезультатаЗапроса(ТаблицаТоваров, ТаблицаШтрихкодов)

	ПустаяХарактеристика = ПустаяХарактеристика();
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		Поиск = Новый Структура;
		Поиск.Вставить("Номенклатура",		СтрокаТоваров.Номенклатура);
		Поиск.Вставить("Характеристика",	СтрокаТоваров.Характеристика);
		
		СтрокиШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(Поиск);
		Если СтрокиШтрихкодов.Количество() > 0 Тогда
			СтрокаТоваров.КодТов = СтрокиШтрихкодов[0].Штрихкод;
		Иначе
			
			Поиск.Вставить("Характеристика", ПустаяХарактеристика);
			СтрокиШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(Поиск);
			
			Если СтрокиШтрихкодов.Количество() > 0 Тогда
				СтрокаТоваров.КодТов = СтрокиШтрихкодов[0].Штрихкод;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	

КонецПроцедуры

Процедура ОСУ_ЗаполнитьКолонку_ИзДопСвойстваНоменклатуры(ТаблицаТоваров, ИмяКолонки, ДопСвойство)
	
	Если ТипЗнч(ДопСвойство) = Тип("Строка") Тогда
		ДопСвойство = ЭлементПВХСвойстваОбъектовПоИмени(ДопСвойство);
	КонецЕсли;	
	
	МассивНоменклатур	= ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	
	МассивСвойств		= Новый Массив;
	МассивСвойств.Добавить(ДопСвойство);
	
	МетаданныеНоменклатура		= Метаданные.Справочники.Номенклатура;
	
	ТЗ_ДопСведения_ДопРеквизиты	= ТЗ_ДопСведения_ДопРеквизиты(МассивНоменклатур, МассивСвойств, МетаданныеНоменклатура);
	
	Для Каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		ЗначениеДопРеквизита		= ПолучитьЗначениеИзТЗ_ДопСведения_ДопРеквизиты(ТЗ_ДопСведения_ДопРеквизиты, СтрокаТаблицы.Номенклатура, ДопСвойство);
		СтрокаТаблицы[ИмяКолонки]	= ЗначениеДопРеквизита;  // не приводим к Строке!
	КонецЦикла;
	
КонецПроцедуры

Процедура ОСУ_ЗаполнитьКолонку_ИзРеквизитаНоменклатуры(ТаблицаТоваров, ИмяКолонки, ПутьКРеквизиту)
	
	МассивОбъектов			= ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МетаданныеСправочника	= Метаданные.Справочники.Номенклатура;
	
	ТЗ_ЗначениеРеквизитов	= ТЗ_ЗначениеРеквизитов_ПоМассивуОбъектов(МассивОбъектов, ПутьКРеквизиту, МетаданныеСправочника);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НужнаяСтрока = ТЗ_ЗначениеРеквизитов.Найти(СтрокаТаблицы.Номенклатура, "Объект");
		
		Если НужнаяСтрока <> Неопределено Тогда
			
			СтрокаТаблицы[ИмяКолонки] = НужнаяСтрока.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОСУ_ЗаполнитьКолонку_ИзРеквизитаУпаковки(ТаблицаТоваров, ИмяКолонки, ПутьКРеквизиту)
	
	МассивОбъектов			= ТаблицаТоваров.ВыгрузитьКолонку("Упаковка");
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УНФ_16" Тогда
		
		МетаданныеСправочника	= Метаданные.Справочники.ЕдиницыИзмерения;
	
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		
		МетаданныеСправочника	= Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_103" Тогда
		
		МетаданныеСправочника	= Метаданные.Справочники.ЕдиницыИзмерения;
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_20"
		И Найти(Метаданные.Имя, "БухгалтерияПредприятия") = 0 Тогда  // это УПП

		МетаданныеСправочника	= Метаданные.Справочники.ЕдиницыИзмерения;
		
	Иначе
		ВызватьИсключение "Работа с упаковками в данной конфигурации не поддерживается";
	КонецЕсли;
	
	
	ТЗ_ЗначениеРеквизитов	= ТЗ_ЗначениеРеквизитов_ПоМассивуОбъектов(МассивОбъектов, ПутьКРеквизиту, МетаданныеСправочника);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НужнаяСтрока = ТЗ_ЗначениеРеквизитов.Найти(СтрокаТаблицы.Упаковка, "Объект");
		
		Если НужнаяСтрока <> Неопределено Тогда
			
			СтрокаТаблицы[ИмяКолонки] = НужнаяСтрока.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОСУ_ЗаполнитьКолонку_ИзРегистраШтрихкодов(ТаблицаТоваров, ИмяКолонки)
	
	ТекстЗапроса = "";
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УНФ_16" Тогда
		
		ТаблицаШтрихкодов = ОСУ_ТаблицаШтрихкодов_УНФ16(ТаблицаТоваров);
	
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		
		ТаблицаШтрихкодов = ОСУ_ТаблицаШтрихкодов_УТ11(ТаблицаТоваров);
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		ТаблицаШтрихкодов = ОСУ_ТаблицаШтрихкодов_БП30(ТаблицаТоваров);

	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_103" Тогда
		
		ТаблицаШтрихкодов = ОСУ_ТаблицаШтрихкодов_УТ10(ТаблицаТоваров);
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_20"
		И Найти(Метаданные.Имя, "БухгалтерияПредприятия") = 0 Тогда  // это УПП
		
		ТаблицаШтрихкодов = ОСУ_ТаблицаШтрихкодов_УТ10(ТаблицаТоваров);
		
	Иначе
		ВызватьИсключение "Работа со штрихкодами в данной конфигурации не поддерживается";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыШтрихкодов Из ТаблицаШтрихкодов Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров[СтрокаТаблицыШтрихкодов.ИндексСтроки];
		СтрокаТаблицыТоваров.GTIN = СтрокаТаблицыШтрихкодов.GTIN;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОСУ_ТаблицаШтрихкодов_УНФ16(ТаблицаТоваров)
	
	Товары1С = Новый ТаблицаЗначений;
	
	Товары1С.Колонки.Добавить("ИндексСтроки"		, Новый ОписаниеТипов("Число"));
	Товары1С.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары1С.Колонки.Добавить("Характеристика"		, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары1С.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Товары1С.Колонки.Добавить("Упаковка"			, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	ТаблицаЗначений_Загрузить(ТаблицаТоваров, Товары1С);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары1С", Товары1С);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары1С.Номенклатура КАК Номенклатура,
	|	Товары1С.ИндексСтроки КАК ИндексСтроки,
	|	Товары1С.Упаковка КАК Упаковка,
	|	Товары1С.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары1С КАК Товары1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ИндексСтроки,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыПредварительно
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (ШтрихкодыНоменклатуры.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
	|			И (ШтрихкодыНоменклатуры.Штрихкод <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыПредварительно.ИндексСтроки КАК ИндексСтроки,
	|	МАКСИМУМ(ШтрихкодыПредварительно.Штрихкод) КАК GTIN
	|ИЗ
	|	ВТ_ШтрихкодыПредварительно КАК ШтрихкодыПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыПредварительно.ИндексСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции	

Функция ОСУ_ТаблицаШтрихкодов_УТ11(ТаблицаТоваров)
	
	Товары1С = Новый ТаблицаЗначений;
	
	Товары1С.Колонки.Добавить("ИндексСтроки"	, Новый ОписаниеТипов("Число"));
	Товары1С.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары1С.Колонки.Добавить("Характеристика"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары1С.Колонки.Добавить("Упаковка"		, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаЗначений_Загрузить(ТаблицаТоваров, Товары1С);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары1С", Товары1С);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары1С.Номенклатура КАК Номенклатура,
	|	Товары1С.Характеристика КАК Характеристика,
	|	Товары1С.Упаковка КАК Упаковка,
	|	Товары1С.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары1С КАК Товары1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ИндексСтроки КАК ИндексСтроки,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыПредварительно
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|			И (ШтрихкодыНоменклатуры.Штрихкод <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыПредварительно.ИндексСтроки,
	|	МАКСИМУМ(ШтрихкодыПредварительно.Штрихкод) КАК GTIN
	|ИЗ
	|	ВТ_ШтрихкодыПредварительно КАК ШтрихкодыПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыПредварительно.ИндексСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции	

Функция ОСУ_ТаблицаШтрихкодов_БП30(ТаблицаТоваров)
	
	Товары1С = Новый ТаблицаЗначений;
	
	Товары1С.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	Товары1С.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	ТаблицаЗначений_Загрузить(ТаблицаТоваров, Товары1С);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары1С", Товары1С);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары1С.Номенклатура КАК Номенклатура,
	|	Товары1С.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары1С КАК Товары1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ИндексСтроки КАК ИндексСтроки,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК GTIN
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И (ШтрихкодыНоменклатуры.Штрихкод <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.ИндексСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции	

Функция ОСУ_ТаблицаШтрихкодов_УТ10(ТаблицаТоваров)
	
	Товары1С = Новый ТаблицаЗначений;
	
	Товары1С.Колонки.Добавить("ИндексСтроки"		, Новый ОписаниеТипов("Число"));
	Товары1С.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары1С.Колонки.Добавить("Характеристика"		, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары1С.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Товары1С.Колонки.Добавить("Упаковка"			, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));

	ТаблицаЗначений_Загрузить(ТаблицаТоваров, Товары1С);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары1С", Товары1С);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары1С.Номенклатура КАК Номенклатура,
	|	Товары1С.ИндексСтроки КАК ИндексСтроки,
	|	Товары1С.Упаковка КАК Упаковка,
	|	Товары1С.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары1С КАК Товары1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ИндексСтроки,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыПредварительно
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ПО ШтрихкодыНоменклатуры.Владелец = спрНоменклатура.Ссылка
	|				И ШтрихкодыНоменклатуры.ЕдиницаИзмерения = спрНоменклатура.ЕдиницаХраненияОстатков
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Владелец
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры
	|			И (ШтрихкодыНоменклатуры.Штрихкод <> """")
	|ГДЕ
	|	ШтрихкодыНоменклатуры.ТипШтрихкода.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыПредварительно.ИндексСтроки КАК ИндексСтроки,
	|	МАКСИМУМ(ШтрихкодыПредварительно.Штрихкод) КАК GTIN
	|ИЗ
	|	ВТ_ШтрихкодыПредварительно КАК ШтрихкодыПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыПредварительно.ИндексСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции	


Функция ОСУ_ЗаполняемыеКолонкиТаблицыТоваров() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("GTIN");
	Результат.Добавить("Числитель");
	Результат.Добавить("Знаменатель");
	Результат.Добавить("ПризнакОСУ");
	
	Возврат Результат;
	
КонецФункции	

Функция ОСУ_ИсточникиЗаполненияТаблицыТоваров() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("РегистрШтрихкодов", "Регистр Штрихкоды");
	Результат.Добавить("ДопСвойствоНоменклатуры", "Доп.свойство / доп.реквизит Номенклатуры");
	Результат.Добавить("РеквизитНоменклатуры", "Реквизит справочника Номенклатура");
	Если ИмяСправочникаУпаковки() <> Неопределено Тогда
		Результат.Добавить("РеквизитУпаковки", "Реквизит справочника Упаковки/Единицы");  // будет не во всех конфигурациях
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ИмяСправочникаУпаковки()
	
	Результат = Неопределено;
	
	Если Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") <> Неопределено Тогда
		Результат = "УпаковкиЕдиницыИзмерения";
	ИначеЕсли Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено Тогда
		Результат = "ЕдиницыИзмерения";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	


// Возвращает схему компоновки данных, используемую для отбора номенклатуры
//
// Возвращаемое значение:
//	Схема компоновки данных
Функция СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров() Экспорт

	Если СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров = Неопределено Тогда
		СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров = ПолучитьМакет("СхемаКомпоновкиОтбораНоменклатуры"); 		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров;

КонецФункции

Функция Акцизы_ПараметрыПоискаПодакцизногоТовара(ПараметрыВизуальнойНастройки)
	
	ПодакцизныйТовар_ПараметрыСКД = ПараметрыВизуальнойНастройки.ПризнакПодакцизногоТовара_ПараметрыСКД; 
	
	КоллекцияОтборов = ПодакцизныйТовар_ПараметрыСКД.Отбор.Элементы;
	
	Если КоллекцияОтборов.Количество() = 0 Тогда
		ИспользоватьОтбор = Ложь;
	Иначе
		ИспользоватьОтбор = Истина;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьОтбор", ИспользоватьОтбор); 
	Результат.Вставить("КомпоновщикОтбораНоменклатуры_Настройки", ПодакцизныйТовар_ПараметрыСКД);
	
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ПравилаПолученияДанныхУПД(ПараметрыЗаполненияСуммыАкциза)
	
	Результат = Новый Структура;
	
	Для Каждого ЭлементВизуальнойНастройки Из ПараметрыЗаполненияСуммыАкциза Цикл
		
		КлючПравила = ЭлементВизуальнойНастройки.ДокументИнформационнойБазы;
		
		ЗначениеПравила = Новый Структура;
		
		ЗначениеПравила.Вставить("ПризнакПоДокументу_СпособЗаполнения"	, ЭлементВизуальнойНастройки.ПризнакПоДокументу_СпособЗаполнения);
		ЗначениеПравила.Вставить("ПризнакПоДокументу_Параметр"			, ЭлементВизуальнойНастройки.ПризнакПоДокументу_Параметр);
		ЗначениеПравила.Вставить("ИмяТабличнойЧасти"					, ЭлементВизуальнойНастройки.ИмяТабличнойЧасти);
		ЗначениеПравила.Вставить("ИмяРеквизитаТабличнойЧасти"			, ЭлементВизуальнойНастройки.ИмяРеквизитаТабличнойЧасти);
		
		Результат.Вставить(КлючПравила, ЗначениеПравила);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ПравилаПолученияДанныхУКД(ПараметрыЗаполненияСуммыАкциза)
	
	Результат = Новый Структура;
	
	Для Каждого ЭлементВизуальнойНастройки Из ПараметрыЗаполненияСуммыАкциза Цикл
		
		КлючПравила = ЭлементВизуальнойНастройки.ДокументИнформационнойБазы;
		
		ЗначениеПравила = Новый Структура;
		
		ЗначениеПравила.Вставить("ПризнакПоДокументу_СпособЗаполнения"	, ЭлементВизуальнойНастройки.ПризнакПоДокументу_СпособЗаполнения);
		ЗначениеПравила.Вставить("ПризнакПоДокументу_Параметр"			, ЭлементВизуальнойНастройки.ПризнакПоДокументу_Параметр);
		ЗначениеПравила.Вставить("ИмяТабличнойЧасти"					, ЭлементВизуальнойНастройки.ИмяТабличнойЧасти);
		ЗначениеПравила.Вставить("ИмяРеквизитаТабличнойЧасти"			, ЭлементВизуальнойНастройки.ИмяРеквизитаТабличнойЧасти);
		ЗначениеПравила.Вставить("ИмяТабличнойЧастиДоИзменения"			, ЭлементВизуальнойНастройки.ИмяТабличнойЧасти_ДоИзменения);
		ЗначениеПравила.Вставить("ИмяРеквизитаТабличнойЧастиДоИзменения", ЭлементВизуальнойНастройки.ИмяРеквизитаТабличнойЧасти_ДоИзменения);
		
		Результат.Вставить(КлючПравила, ЗначениеПравила);
		
	КонецЦикла;
			
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ТаблицаТоваровПоДокументу1С_УПД(ДокументРеализации, ПараметрыПоискаПодакцизногоТовара, ПравилоПолученияДанных, TypeNamedId, Items)
	
	ИмяДокументаОснования = ДокументРеализации.Метаданные().Имя;
	ЗаданОтборПоНоменклатуре = ПараметрыПоискаПодакцизногоТовара.ИспользоватьОтбор; 
		
	// общая часть запроса
	ТекстЗапроса_ВТ_ПодакцизныйТовар	= ТекстЗапроса_ВТ_ПодакцизныйТовар();
	ТекстЗапроса_ВТ_ДокументУчета		= ТекстЗапроса_ВТ_ДокументУчета(ИмяДокументаОснования, ПравилоПолученияДанных.ПризнакПоДокументу_СпособЗаполнения, ПравилоПолученияДанных.ПризнакПоДокументу_Параметр);
					
	// интеграционная часть запроса
	ИмяТаблицыДокумента = ТекстЗапроса_ИмяТаблицыДокумента(ИмяДокументаОснования, ПравилоПолученияДанных.ИмяТабличнойЧасти);
	
	КартаПолей = КартаПолейОбязательныхДокументаУчета_УПД(ИмяДокументаОснования);
	ТекстЗапроса_ДанныеПоТоварам = ТекстЗапроса_ДанныеПоТоварам_УПД(ИмяТаблицыДокумента, ПравилоПолученияДанных.ИмяРеквизитаТабличнойЧасти, КартаПолей, TypeNamedId);
	
	ТекстЗапроса_ДополнитьЗапросПризнакомПодакцизногоТовара(ТекстЗапроса_ДанныеПоТоварам, ЗаданОтборПоНоменклатуре);
	
	ЧастиЗапроса = Новый Массив;
					
	Если ЗаданОтборПоНоменклатуре Тогда
		ЧастиЗапроса.Добавить(ТекстЗапроса_ВТ_ПодакцизныйТовар);
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(ТекстЗапроса_ВТ_ДокументУчета);
	ЧастиЗапроса.Добавить(ТекстЗапроса_ДанныеПоТоварам);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Общее_СоединитьСтроку(ЧастиЗапроса, ТекстЗапроса_РазделительПакетов());
								
	Запрос.УстановитьПараметр("Ссылка"				, ДокументРеализации);
	Запрос.УстановитьПараметр("ПараметрДокумента"	, ПравилоПолученияДанных.ПризнакПоДокументу_Параметр);
							
	Если ЗаданОтборПоНоменклатуре Тогда 
		
		НоменклатураЭД = НоменклатураЭлектронногоДокумента(Items);
		
		ТаблицаПодАкцизныхТоваров = ИсточникиДанных_ТаблицаПодАкцизныхТоваров(ПараметрыПоискаПодакцизногоТовара.КомпоновщикОтбораНоменклатуры_Настройки, НоменклатураЭД);
		Запрос.УстановитьПараметр("ТаблицаПодакцизныйТовар", ТаблицаПодАкцизныхТоваров);
		
	КонецЕсли;
					
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ТаблицаТоваровПоДокументу1С_УКД(ДокументРеализации, ПравилоПолученияДанных, ПараметрыПоискаПодакцизногоТовара, Items)
	
	ИмяДокументаОснования = ДокументРеализации.Метаданные().Имя;
	ЗаданОтборПоНоменклатуре = ПараметрыПоискаПодакцизногоТовара.ИспользоватьОтбор;
	
	// общая часть запроса
	ТекстЗапроса_ВТ_ПодакцизныйТовар	= ТекстЗапроса_ВТ_ПодакцизныйТовар();
	ТекстЗапроса_ВТ_ДокументУчета 		= ТекстЗапроса_ВТ_ДокументУчета(ИмяДокументаОснования, ПравилоПолученияДанных.ПризнакПоДокументу_СпособЗаполнения, ПравилоПолученияДанных.ПризнакПоДокументу_Параметр);
	
	// интеграционная часть запроса
	ИмяТаблицыДокумента 			= ТекстЗапроса_ИмяТаблицыДокумента(ИмяДокументаОснования, ПравилоПолученияДанных.ИмяТабличнойЧасти);
	ИмяТаблицыДокументаДоИзменения 	= ТекстЗапроса_ИмяТаблицыДокумента(ИмяДокументаОснования, ПравилоПолученияДанных.ИмяТабличнойЧастиДоИзменения);
	
	КартаПолей = КартаПолейОбязательныхДокументаУчета_УКД(ИмяДокументаОснования);
	
	ТекстЗапроса_ДанныеПоТоварам = ТекстЗапроса_ДанныеПоТоварам_УКД(ИмяТаблицыДокумента, ИмяТаблицыДокументаДоИзменения, ПравилоПолученияДанных, КартаПолей);
	ТекстЗапроса_ДополнитьЗапросПризнакомПодакцизногоТовара(ТекстЗапроса_ДанныеПоТоварам, ПараметрыПоискаПодакцизногоТовара.ИспользоватьОтбор);
			
	ЧастиЗапроса = Новый Массив;
	
	Если ЗаданОтборПоНоменклатуре Тогда
		ЧастиЗапроса.Добавить(ТекстЗапроса_ВТ_ПодакцизныйТовар);
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(ТекстЗапроса_ВТ_ДокументУчета);
	ЧастиЗапроса.Добавить(ТекстЗапроса_ДанныеПоТоварам);
	
	Запрос = Новый Запрос;
					
	Запрос.Текст = Общее_СоединитьСтроку(ЧастиЗапроса, ТекстЗапроса_РазделительПакетов());
	
	Если ЗаданОтборПоНоменклатуре Тогда 
		
		НоменклатураЭД = НоменклатураЭлектронногоДокумента(Items);
		
		ТаблицаПодАкцизныхТоваров = ИсточникиДанных_ТаблицаПодАкцизныхТоваров(ПараметрыПоискаПодакцизногоТовара.КомпоновщикОтбораНоменклатуры_Настройки, НоменклатураЭД);
		Запрос.УстановитьПараметр("ТаблицаПодакцизныйТовар", ТаблицаПодАкцизныхТоваров);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка"				, ДокументРеализации);
	Запрос.УстановитьПараметр("ПараметрДокумента"	, ПравилоПолученияДанных.ПризнакПоДокументу_Параметр);
					
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ВТ_ПодакцизныйТовар()
	
	Результат = "
		|ВЫБРАТЬ
		|	ТаблицаПодакцизныйТовар.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ПодакцизныйТовар
		|ИЗ
		|	&ТаблицаПодакцизныйТовар КАК ТаблицаПодакцизныйТовар";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ВТ_ДокументУчета(ИмяТаблицыДокументаУчета, ПризнакПоДокументу_СпособЗаполнения, ПризнакПоДокументу_Параметр)
	
	Если ПризнакПоДокументу_СпособЗаполнения = "НеЗаполнять" Тогда
		
		Результат = "
			| ВЫБРАТЬ РАЗРЕШЕННЫЕ
           	|	ДокументУчета.Ссылка КАК ДокументУчетаСсылка
			|ПОМЕСТИТЬ ВТ_ДокументУчета
           	|ИЗ
           	|	&ТаблицаДокументаУчета КАК ДокументУчета
           	|ГДЕ
           	|	ДокументУчета.Ссылка = &Ссылка";
		
	ИначеЕсли ПризнакПоДокументу_СпособЗаполнения = "РеквизитДокумента" Тогда
		
		Результат = "
			| ВЫБРАТЬ РАЗРЕШЕННЫЕ
           	|	ДокументУчета.Ссылка КАК ДокументУчетаСсылка
			|ПОМЕСТИТЬ ВТ_ДокументУчета
           	|ИЗ
           	|	&ТаблицаДокументаУчета КАК ДокументУчета
           	|ГДЕ
           	|	ДокументУчета.Ссылка = &Ссылка
			|	И &УсловиеПоРеквизитуДокумента";
		
		ПодстрокаЗамены = "ДокументУчета." + ПризнакПоДокументу_Параметр;
		Результат = СтрЗаменить(Результат, "&УсловиеПоРеквизитуДокумента", ПодстрокаЗамены);
		
	ИначеЕсли ПризнакПоДокументу_СпособЗаполнения = "ДопСвойствоДокумента" Тогда
		
		Результат = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |	ДокументУчета.Ссылка КАК ДокументУчетаСсылка
			|ПОМЕСТИТЬ ВТ_ДокументУчета
            |ИЗ
            |	&ТаблицаДокументаУчета КАК ДокументУчета
            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
            |		ПО ДокументУчета.Ссылка = ДополнительныеСведения.Объект
            |			И (ДополнительныеСведения.Свойство = &ПараметрДокумента)
            |ГДЕ
            |	ДокументУчета.Ссылка = &Ссылка
			|	И ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ) = ИСТИНА";
		
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчета", "Документ." + ИмяТаблицыДокументаУчета);
	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "ДополнительныеСведения", "ЗначенияСвойствОбъектов");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ДанныеПоТоварам_УПД(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей, TypeNamedId)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
			
		ЭтоИУПД = (TypeNamedId = "UniversalTransferDocumentRevision");
		Если ЭтоИУПД Тогда
			Результат = ТекстЗапроса_ДанныеПоТоварам_ИУПД_УТ11(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей);
		Иначе
			Результат = ТекстЗапроса_ДанныеПоТоварам_УПД_УТ11(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей);
		КонецЕсли;
								
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		Результат = ТекстЗапроса_ДанныеПоТоварам_УПД_БП30(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей); 
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ДанныеПоТоварам_УПД_УТ11(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей)
	
	ПоляИзКарты = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей);
	
	// Для семейства 11.5 в ИМ светка ТЧ УПД управляется через настройку	
	КонстантаВыводитьСерииВПечатныхФормах = ВыводитьСерииВПечатныхФормах_УТ11();
			
	Если КонстантаВыводитьСерииВПечатныхФормах Тогда
						
		Результат = "
			|ВЫБРАТЬ
		    |	&ПараметрПоляИзКарты,
		   	|	&ИмяРеквизитаСуммаАкциза КАК СуммаАкциза,
			|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
		    |ИЗ
		    |	&ТаблицаДокументаУчетаТаблицаТоваров КАК ДокументУчетаТаблицаТоваров
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
		    |		ПО ДокументУчетаТаблицаТоваров.Ссылка = ВТДокументУчета.ДокументУчетаСсылка";

	Иначе
					
		Результат = "
            |ВЫБРАТЬ
    		|	&ПараметрПоляИзКарты,
			|	&ИмяРеквизитаСуммаАкциза КАК СуммаАкциза
			|ПОМЕСТИТЬ ВТ_ПромежуточныеДанныеПоТоварам1С
	        |ИЗ
	        |	&ТаблицаДокументаУчетаТаблицаТоваров КАК ДокументУчетаТаблицаТоваров
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
	        |		ПО ДокументУчетаТаблицаТоваров.Ссылка = ВТДокументУчета.ДокументУчетаСсылка
			|;
        	|
        	|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
	        |	ПромежуточныеДанныеПоТоварам1С.Номенклатура КАК Номенклатура,
	        |	ПромежуточныеДанныеПоТоварам1С.Характеристика КАК Характеристика,
	        |	ПромежуточныеДанныеПоТоварам1С.Серия КАК Серия,
			|	ПромежуточныеДанныеПоТоварам1С.Цена КАК Цена,
			|	ПромежуточныеДанныеПоТоварам1С.СтавкаНДС КАК СтавкаНДС,
			|	СУММА(ПромежуточныеДанныеПоТоварам1С.Количество) КАК Количество,
			|	СУММА(ПромежуточныеДанныеПоТоварам1С.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ПромежуточныеДанныеПоТоварам1С.Сумма) КАК Сумма,
	        |	СУММА(ПромежуточныеДанныеПоТоварам1С.СуммаАкциза) КАК СуммаАкциза
			|ПОМЕСТИТЬ ВТ_ПромежуточныеДанныеПоТоварам1СГруппировка
	        |ИЗ
	        |	ВТ_ПромежуточныеДанныеПоТоварам1С КАК ПромежуточныеДанныеПоТоварам1С
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПромежуточныеДанныеПоТоварам1С.Номенклатура,
	        |	ПромежуточныеДанныеПоТоварам1С.Характеристика,
	        |	ПромежуточныеДанныеПоТоварам1С.Серия,
			|	ПромежуточныеДанныеПоТоварам1С.Цена,
			|	ПромежуточныеДанныеПоТоварам1С.СтавкаНДС
			|;
        	|
        	|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
	        |	ДокументУчетаТаблицаТоваров.Номенклатура КАК Номенклатура,
	        |	ДокументУчетаТаблицаТоваров.Характеристика КАК Характеристика,
	        |	ДокументУчетаТаблицаТоваров.Серия КАК Серия,
			|	ДокументУчетаТаблицаТоваров.Цена КАК Цена,
			|	ДокументУчетаТаблицаТоваров.Количество КАК Количество,
			|	ДокументУчетаТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
			|	ДокументУчетаТаблицаТоваров.СуммаНДС КАК СуммаНДС,
			|	ДокументУчетаТаблицаТоваров.Сумма КАК Сумма,
	        |	ДокументУчетаТаблицаТоваров.СуммаАкциза КАК СуммаАкциза,
			|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
			|
	        |ИЗ
	        |	ВТ_ПромежуточныеДанныеПоТоварам1СГруппировка КАК ДокументУчетаТаблицаТоваров";	
		
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "&ПараметрПоляИзКарты,", ПоляИзКарты);
	Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкциза", "ДокументУчетаТаблицаТоваров." + ИмяРеквизитаТабличнойЧасти);
	Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваров", ИмяТаблицыДокумента);
						
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ДанныеПоТоварам_ИУПД_УТ11(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей)
	
	ПоляИзКарты = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей);
		
	Результат = "
		|ВЫБРАТЬ
        |	&ПараметрПоляИзКарты,
        |	&ИмяРеквизитаСуммаАкциза КАК СуммаАкциза,
		|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
        |
        |ИЗ
        |	&ТаблицаДокументаУчетаТаблицаТоваров КАК ДокументУчетаТаблицаТоваров
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
        |		ПО ДокументУчетаТаблицаТоваров.Ссылка = ВТДокументУчета.ДокументУчетаСсылка";
	
	Результат = СтрЗаменить(Результат, "&ПараметрПоляИзКарты,", ПоляИзКарты);  
	Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкциза", "ДокументУчетаТаблицаТоваров." + ИмяРеквизитаТабличнойЧасти);
	Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваров", ИмяТаблицыДокумента);
		
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ДанныеПоТоварам_УПД_БП30(ИмяТаблицыДокумента, ИмяРеквизитаТабличнойЧасти, КартаПолей)
	
	ПоляИзКарты = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей);
	
	Результат =  "
		|ВЫБРАТЬ
        |	&ПараметрПоляИзКарты,
        |	&ИмяРеквизитаСуммаАкциза КАК СуммаАкциза,
		|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
        |
        |ИЗ
        |	&ТаблицаДокументаУчетаТаблицаТоваров КАК ДокументУчетаТаблицаТоваров
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
        |		ПО ДокументУчетаТаблицаТоваров.Ссылка = ВТДокументУчета.ДокументУчетаСсылка";
	
	Результат = СтрЗаменить(Результат, "&ПараметрПоляИзКарты,", ПоляИзКарты);
	Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкциза", "ДокументУчетаТаблицаТоваров." + ИмяРеквизитаТабличнойЧасти);
	Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваров", ИмяТаблицыДокумента);
		
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ДанныеПоТоварам_УКД(ИмяТаблицыДокумента, ИмяТаблицыДокумента_ДоИзменения, ПравилоПолученияДанных, КартаПолей)
	
	ИмяРеквизитаТабличнойЧасти 				= ПравилоПолученияДанных.ИмяРеквизитаТабличнойЧасти;
	ИмяРеквизитаТабличнойЧасти_ДоИзменения 	= ПравилоПолученияДанных.ИмяРеквизитаТабличнойЧастиДоИзменения;
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		
		// СуммуАкцизаДо необходимо рассчитывать через рассхождения
		
		Результат = "
			|ВЫБРАТЬ
         	|	&ПараметрПоляКорректировкиВыборка,
         	|	СУММА(&ИмяРеквизитаСуммаАкцизаПослеКорректировки) КАК СуммаАкциза
         	|ПОМЕСТИТЬ ВТ_ПослеКорректировки
         	|ИЗ
         	|	&ТаблицаДокументаУчетаТаблицаТоваровПослеКорректировки КАК ДанныеКорректировки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
			|		ПО ДанныеКорректировки.Ссылка = ВТДокументУчета.ДокументУчетаСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	&ПараметрПоляКорректировкиГруппировка
	        |;
         	|
         	|////////////////////////////////////////////////////////////////////////////////
         	|ВЫБРАТЬ
         	|	&ПараметрПоляРасхожденийИзКарты,
         	|	СУММА(&ИмяРеквизитаСуммаАкцизаРасхождения) КАК СуммаАкциза
         	|ПОМЕСТИТЬ ВТ_Расхождения
         	|ИЗ
			|	&ТаблицаДокументаУчетаТаблицаТоваровРасхождения КАК ДанныеРасхождений
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
			|		ПО ДанныеРасхождений.Ссылка = ВТДокументУчета.ДокументУчетаСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	&ПараметрПоляРасхожденийГруппировка
			|;
         	|
         	|////////////////////////////////////////////////////////////////////////////////
         	|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА ВТ_Расхождения.Номенклатура
			|		ИНАЧЕ ВТ_ПослеКорректировки.Номенклатура
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА ВТ_Расхождения.Характеристика
			|		ИНАЧЕ ВТ_ПослеКорректировки.Характеристика
			|	КОНЕЦ КАК Характеристика,
			//|	ВЫБОР
			//|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			//|			ТОГДА ВТ_Расхождения.Серия
			//|		ИНАЧЕ ВТ_ПослеКорректировки.Серия
			//|	КОНЕЦ КАК Серия,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ВТ_ПослеКорректировки.Цена
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ВТ_ПослеКорректировки.Количество
			|	КОНЕЦ КАК Количество,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА ВТ_Расхождения.СтавкаНДС
			|		ИНАЧЕ ВТ_ПослеКорректировки.СтавкаНДС
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ВТ_ПослеКорректировки.СуммаНДС
			|	КОНЕЦ КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ВТ_ПослеКорректировки.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ВТ_ПослеКорректировки.СуммаАкциза
			|	КОНЕЦ КАК СуммаАкциза,
			|	ВЫБОР
			|		КОГДА ВТ_ПослеКорректировки.Номенклатура ЕСТЬ NULL
			|			ТОГДА -1 * ВТ_Расхождения.СуммаАкциза 
			|		ИНАЧЕ ВТ_ПослеКорректировки.СуммаАкциза - ВТ_Расхождения.СуммаАкциза
			|	КОНЕЦ КАК СуммаАкцизаДоКорректировки
			|ПОМЕСТИТЬ ВТ_ДанныеКорректировки
         	|ИЗ
         	|	ВТ_Расхождения КАК ВТ_Расхождения
         	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПослеКорректировки КАК ВТ_ПослеКорректировки
        	|		ПО ВТ_Расхождения.Номенклатура = ВТ_ПослеКорректировки.Номенклатура
         	|			И ВТ_Расхождения.Характеристика = ВТ_ПослеКорректировки.Характеристика
         	//|			И ВТ_Расхождения.Серия = ВТ_ПослеКорректировки.Серия
			|			И ВТ_Расхождения.СтавкаНДС = ВТ_ПослеКорректировки.СтавкаНДС
			|;
           	|	
           	|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ДанныеКорректировки.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|			И ВидыНоменклатуры.АлкогольнаяПродукция
			|		ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоАлкогольнаяПродукция
			|ПОМЕСТИТЬ ВТ_АлкогольнаПродукция
			|ИЗ
			|	ВТ_ДанныеКорректировки КАК ВТ_ДанныеКорректировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|			ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
			|		ПО ВТ_ДанныеКорректировки.Номенклатура = СпрНоменклатура.Ссылка
			|;
           	|	
           	|////////////////////////////////////////////////////////////////////////////////
           	|ВЫБРАТЬ
           	|	ДокументУчетаТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ДокументУчетаТаблицаТоваров.Характеристика КАК Характеристика,
			//|	ДокументУчетаТаблицаТоваров.Серия КАК Серия,
			|	ДокументУчетаТаблицаТоваров.Цена КАК Цена,
			|	ДокументУчетаТаблицаТоваров.Количество КАК Количество,
			|	ДокументУчетаТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
			|	ДокументУчетаТаблицаТоваров.СуммаНДС КАК СуммаНДС,
			|	ДокументУчетаТаблицаТоваров.Сумма КАК Сумма,
           	|	ДокументУчетаТаблицаТоваров.СуммаАкциза КАК СуммаАкциза,
           	|	ДокументУчетаТаблицаТоваров.СуммаАкцизаДоКорректировки КАК СуммаАкцизаДоКорректировки,
			|	ВТ_АлкогольнаПродукция.ЭтоАлкогольнаяПродукция КАК ЭтоАлкогольнаяПродукция,
			|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
           	|ИЗ
           	|	ВТ_ДанныеКорректировки КАК ДокументУчетаТаблицаТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АлкогольнаПродукция КАК ВТ_АлкогольнаПродукция
			|			ПО ДокументУчетаТаблицаТоваров.Номенклатура = ВТ_АлкогольнаПродукция.Номенклатура";
			
		ПоляВыборки = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей.ТаблицаКорректировки);	
		Результат = СтрЗаменить(Результат, "&ПараметрПоляКорректировкиВыборка,", ПоляВыборки);
		
		ПоляГруппировки = ТекстЗапроса_КартаПолейВПоляГруппировки(КартаПолей.ТаблицаКорректировки);
		Результат = СтрЗаменить(Результат, "&ПараметрПоляКорректировкиГруппировка", ПоляГруппировки);
		
		ПоляРасхождений = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей.ТаблицаРасхождений);	
		Результат = СтрЗаменить(Результат, "&ПараметрПоляРасхожденийИзКарты,", ПоляРасхождений);
		
		ПоляГруппировки = ТекстЗапроса_КартаПолейВПоляГруппировки(КартаПолей.ТаблицаРасхождений);
		Результат = СтрЗаменить(Результат, "&ПараметрПоляРасхожденийГруппировка", ПоляГруппировки);
		
		Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваровПослеКорректировки", ИмяТаблицыДокумента);
		Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкцизаПослеКорректировки", "ДанныеКорректировки." + ИмяРеквизитаТабличнойЧасти);
		
		Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваровРасхождения", ИмяТаблицыДокумента_ДоИзменения);
		Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкцизаРасхождения", "ДанныеРасхождений." + ИмяРеквизитаТабличнойЧасти_ДоИзменения);
		
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда 
	
		Результат = "
			|ВЫБРАТЬ
           	|	&ПараметрПоляКорректировкиИзКарты,
			|	&ИмяРеквизитаСуммаАкцизаДоКорректировки КАК СуммаАкцизаДоКорректировки,
			|	&ИмяРеквизитаСуммаАкциза КАК СуммаАкциза,
			|	НЕОПРЕДЕЛЕНО КАК ЭтоАлкогольнаяПродукция,
			|	&ЭтоАкцизныйТовар КАК ЭтоПодАкцизныйТовар
			|
			|ИЗ
           	|	&ТаблицаДокументаУчетаТаблицаТоваров КАК ДокументУчетаТаблицаТоваров
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументУчета КАК ВТДокументУчета
			|		ПО ДокументУчетаТаблицаТоваров.Ссылка = ВТДокументУчета.ДокументУчетаСсылка";
		
		ПоляКорректировки = ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей.ТаблицаКорректировки);
		Результат = СтрЗаменить(Результат, "&ПараметрПоляКорректировкиИзКарты,", ПоляКорректировки);
		
		Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкцизаДоКорректировки", "ДокументУчетаТаблицаТоваров." + ИмяРеквизитаТабличнойЧасти_ДоИзменения);
		Результат = СтрЗаменить(Результат, "&ИмяРеквизитаСуммаАкциза", "ДокументУчетаТаблицаТоваров." + ИмяРеквизитаТабличнойЧасти);
		
		Результат = СтрЗаменить(Результат, "&ТаблицаДокументаУчетаТаблицаТоваров", ИмяТаблицыДокумента);
				
	КонецЕсли;
			
	Возврат Результат;
				
КонецФункции

Функция ТекстЗапроса_КартаПолейВПоляВыборки(КартаПолей)
	
	Результат = "";
	ТекстОкончанияСтроки = ",";
	
	Для Каждого КлючЗначение Из КартаПолей Цикл
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = Результат + Символы.ПС;
		КонецЕсли;
		
		Результат = Результат + "	" + КлючЗначение.Значение + " КАК " + КлючЗначение.Ключ + ТекстОкончанияСтроки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_КартаПолейВПоляГруппировки(КартаПолей)
	
	Результат = "";
	ТекстОкончанияСтроки = ",";
	
	Для Каждого КлючЗначение Из КартаПолей Цикл
		
		ЭтоПолеГруппировки = (Найти(ВРег(КлючЗначение.Значение), "СУММА(") = 0);
		
		Если Не ЭтоПолеГруппировки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = Результат + ТекстОкончанияСтроки + Символы.ПС;
		КонецЕсли;
		
		Результат = Результат + "	" + КлючЗначение.Значение;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ТекстЗапроса_ДополнитьЗапросПризнакомПодакцизногоТовара(ТекстЗапроса, ИспользоватьОтборПоНоменклатуре)
	
	Если ИспользоватьОтборПоНоменклатуре Тогда
						
		ТекстЗапроса_ЭтоАкцизныйТовар = 
			"ВЫБОР
			|	КОГДА ВТ_ПодакцизныйТовар.Номенклатура ЕСТЬ NULL
			|		ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоАкцизныйТовар", ТекстЗапроса_ЭтоАкцизныйТовар); 
		
		ТекстЗапроса =  ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодакцизныйТовар КАК ВТ_ПодакцизныйТовар
	        |	ПО ДокументУчетаТаблицаТоваров.Номенклатура = ВТ_ПодакцизныйТовар.Номенклатура";
				
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоАкцизныйТовар", "НЕОПРЕДЕЛЕНО"); 
		
	КонецЕсли;
			
КонецПроцедуры

Функция ИсточникиДанных_ТаблицаПодАкцизныхТоваров(Настройки, НоменклатураЭД)
				
	СхемаКомпоновки = СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров();
	
	ДобавитьОтборПоНоменклатуреДокумента(Настройки.Отбор.Элементы, НоменклатураЭД);
	
	МассивДобавленныхПолей 			= ПеренестиИспользуемыеВОтбореПоляВНастройкиСКДРекурсивно(Настройки, Настройки.Отбор.Элементы);
	МассивУстановленныхПараметров 	= УстановитьПараметрыВыводаНастроекСКД(Настройки);
	
	РезультатСКД = ПолучитьРезультатСКД_ТаблицаЗначений(СхемаКомпоновки, Настройки);
		
	ОчиститьВыбранныеПоляИзОтбора(Настройки, МассивДобавленныхПолей);
	ОчиститьПараметрыВыводаОтчета(Настройки, МассивУстановленныхПараметров);
	
	Результат = РезультатСКД.Скопировать( , "Номенклатура");
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументСПодакционнымиТоварами(Настройки) Экспорт
	
	СхемаКомпоновки = СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров();
	
	МассивДобавленныхПолей = ПеренестиИспользуемыеВОтбореПоляВНастройкиСКДРекурсивно(Настройки, Настройки.Отбор.Элементы);
	МассивУстановленныхПараметров = УстановитьПараметрыВыводаНастроекСКД(Настройки);
	
	ТабличныйДокумент = ПолучитьРезультатСКД_ТабличныйДокумент(СхемаКомпоновки, Настройки);
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	ОчиститьВыбранныеПоляИзОтбора(Настройки, МассивДобавленныхПолей);
	ОчиститьПараметрыВыводаОтчета(Настройки, МассивУстановленныхПараметров);
	
	Возврат ТабличныйДокумент;
    
КонецФункции

Функция ЭтоЧастичнаяКорректировкаВСторонуУменьшения(Значение_До, Значение_После)
	
	УказаныОбаЗначения = (ЗначениеЗаполнено(Значение_До) И ЗначениеЗаполнено(Значение_После));
				
	Результат = (УказаныОбаЗначения И (Значение_До - Значение_После) > 0);
			
	Возврат Результат;
	
КонецФункции 

Функция ЭтоЧастичнаяКорректировкаВСторонуУвеличения(Значение_До, Значение_После)
	
	УказаныОбаЗначения = (ЗначениеЗаполнено(Значение_До) И ЗначениеЗаполнено(Значение_После));
				
	Результат = (УказаныОбаЗначения И (Значение_До - Значение_После) < 0);
			
	Возврат Результат;
	
КонецФункции

Функция ЭтоПолнаяКорректировкаВСторонуУменьшения(Значение_До, Значение_После)
	
	Результат = (ЗначениеЗаполнено(Значение_До) И Не ЗначениеЗаполнено(Значение_После));
			
	Возврат Результат;
	
КонецФункции

Функция ЭтоПолнаяКорректировкаВСторонуУвеличения(Значение_До, Значение_После)
	
	Результат = (Не ЗначениеЗаполнено(Значение_До) И ЗначениеЗаполнено(Значение_После));
	
	Возврат Результат;
	
КонецФункции

Функция КорректировкаНеПроведена(Значение_До, Значение_После)
	
	Результат = ЗначениеЗаполнено(Значение_До)
				И ЗначениеЗаполнено(Значение_После)
				И (Значение_До = Значение_После);
				
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьКорректностьЗаполненияСуммыАкцизаПоАлкоголю_УКД(СуммаАкцизаДо, СуммаАкцизаПосле)
	
	// Для алкогольной продукции существует особенность - сумма акциза уменьшаться не может. Т.е. указывается наибольшее значение между
	// суммами до и после корректировки
	
	ЭтоЧастичнаяКорректировкаВСторонуУменьшения = ЭтоЧастичнаяКорректировкаВСторонуУменьшения(СуммаАкцизаДо, СуммаАкцизаПосле);
	ЭтоПолнаяКорректировкаВСторонуУменьшения	= ЭтоПолнаяКорректировкаВСторонуУменьшения(СуммаАкцизаДо, СуммаАкцизаПосле);
	ЭтоПолнаяКорректировкаВСторонуУвеличения	= ЭтоПолнаяКорректировкаВСторонуУвеличения(СуммаАкцизаДо, СуммаАкцизаПосле);
	
	Если ЭтоЧастичнаяКорректировкаВСторонуУменьшения
		Или ЭтоПолнаяКорректировкаВСторонуУменьшения Тогда
		
		СуммаАкцизаПосле = СуммаАкцизаДо;
							
	ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУвеличения Тогда
		
		СуммаАкцизаДо = 0;
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоАкцизамУКД_Алкоголь(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник, СуммаАкциза_До_Приемник, СуммаАкциза_После_Приемник)
	
	// Для алкогольной продукции существует особенность - сумма акциза уменьшаться не может. Т.е. указывается наибольшее значение между
	// суммами до и после корректировки
	
	ЭтоЧастичнаяКорректировкаВСторонуУменьшения = ЭтоЧастичнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	ЭтоЧастичнаяКорректировкаВСторонуУвеличения = ЭтоЧастичнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	ЭтоПолнаяКорректировкаВСторонуУменьшения = ЭтоПолнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	ЭтоПолнаяКорректировкаВСторонуУвеличения = ЭтоПолнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	КорректировкиСуммНеБыло = КорректировкаНеПроведена(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	Если ЭтоЧастичнаяКорректировкаВСторонуУменьшения Тогда
						
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_До_Источник;
														
	ИначеЕсли ЭтоЧастичнаяКорректировкаВСторонуУвеличения Тогда
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;
													
	ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУменьшения Тогда
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_До_Источник;
													
	ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУвеличения Тогда
		
		СуммаАкциза_До_Приемник		= 0;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;
		
	ИначеЕсли КорректировкиСуммНеБыло Тогда
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;	
		
	Иначе
		
		СуммаАкциза_До_Приемник		= 0;
        СуммаАкциза_После_Приемник	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоАкцизамУКД_БезАлкоголь(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник, СуммаАкциза_До_Приемник, СуммаАкциза_После_Приемник)
	
	ЭтоЧастичнаяКорректировкаВСторонуУменьшения = ЭтоЧастичнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	ЭтоЧастичнаяКорректировкаВСторонуУвеличения = ЭтоЧастичнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	ЭтоПолнаяКорректировкаВСторонуУменьшения = ЭтоПолнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	ЭтоПолнаяКорректировкаВСторонуУвеличения = ЭтоПолнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	КорректировкиСуммНеБыло = КорректировкаНеПроведена(СуммаАкциза_До_Источник, СуммаАкциза_После_Источник);
	
	Если ЭтоЧастичнаяКорректировкаВСторонуУменьшения 
		Или ЭтоЧастичнаяКорректировкаВСторонуУвеличения Тогда
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;
																							
	ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУменьшения Тогда
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= 0;
													
	ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУвеличения Тогда
		
		СуммаАкциза_До_Приемник		= 0;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;
		
	ИначеЕсли КорректировкиСуммНеБыло Тогда
		
		// скорее всего пользователь сам указал нужное значение после корректировки
		
		СуммаАкциза_До_Приемник		= СуммаАкциза_До_Источник;
        СуммаАкциза_После_Приемник	= СуммаАкциза_После_Источник;	
		
	Иначе
		
		СуммаАкциза_До_Приемник		= 0;
        СуммаАкциза_После_Приемник	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КартаПолейОбязательныхДокументаУчета_УПД(ИмяТаблицыДокумента)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
						
		Если ИмяТаблицыДокумента = "РеализацияТоваровУслуг" Тогда
			
			КонстантаВыводитьСерииВПечатныхФормах = ВыводитьСерииВПечатныхФормах_УТ11();
			
			Результат.Вставить("Номенклатура"	, "ДокументУчетаТаблицаТоваров.Номенклатура");
			Результат.Вставить("Характеристика"	, "ДокументУчетаТаблицаТоваров.Характеристика");
			
			Если КонстантаВыводитьСерииВПечатныхФормах Тогда 
				Результат.Вставить("Серия"		, "ДокументУчетаТаблицаТоваров.Серия");
			Иначе
				Результат.Вставить("Серия"		, "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
			КонецЕсли;
			
			Результат.Вставить("Цена"			, "ДокументУчетаТаблицаТоваров.Цена");
			Результат.Вставить("Количество"		, "ДокументУчетаТаблицаТоваров.Количество");
			Результат.Вставить("СтавкаНДС"		, "ДокументУчетаТаблицаТоваров.СтавкаНДС");
			Результат.Вставить("СуммаНДС"		, "ДокументУчетаТаблицаТоваров.СуммаНДС");
			Результат.Вставить("Сумма"			, "ДокументУчетаТаблицаТоваров.Сумма");
						
		ИначеЕсли ИмяТаблицыДокумента = "КорректировкаРеализации" Тогда 	
			
			Результат.Вставить("Номенклатура"	, "ДокументУчетаТаблицаТоваров.Номенклатура");
			Результат.Вставить("Характеристика"	, "ДокументУчетаТаблицаТоваров.Характеристика");
			Результат.Вставить("Серия"			, "ДокументУчетаТаблицаТоваров.Серия");
			Результат.Вставить("Цена"			, "ДокументУчетаТаблицаТоваров.Цена");
			Результат.Вставить("Количество"		, "ДокументУчетаТаблицаТоваров.Количество");
			Результат.Вставить("СтавкаНДС"		, "ДокументУчетаТаблицаТоваров.СтавкаНДС");
			Результат.Вставить("СуммаНДС"		, "ДокументУчетаТаблицаТоваров.СуммаНДС");
			Результат.Вставить("Сумма"			, "ДокументУчетаТаблицаТоваров.Сумма");
						
		КонецЕсли;
		
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		Если 	ИмяТаблицыДокумента = "РеализацияТоваровУслуг"
			Или ИмяТаблицыДокумента = "КорректировкаРеализации" Тогда
			
			Результат.Вставить("Номенклатура"	, "ДокументУчетаТаблицаТоваров.Номенклатура");
			Результат.Вставить("Цена"			, "ДокументУчетаТаблицаТоваров.Цена");
			Результат.Вставить("Количество"		, "ДокументУчетаТаблицаТоваров.Количество");
			Результат.Вставить("СтавкаНДС"		, "ДокументУчетаТаблицаТоваров.СтавкаНДС");
			Результат.Вставить("СуммаНДС"		, "ДокументУчетаТаблицаТоваров.СуммаНДС");
			Результат.Вставить("Сумма"			, "ДокументУчетаТаблицаТоваров.Сумма");
			Результат.Вставить("НомерГТД"		, "ДокументУчетаТаблицаТоваров.НомерГТД");
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КартаПолейОбязательныхДокументаУчета_УКД(ИмяТаблицыДокумента)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		
		Если ИмяТаблицыДокумента = "КорректировкаРеализации" Тогда 
			
			Корректировка = Новый Структура;
			
			Корректировка.Вставить("Номенклатура"	, "ДанныеКорректировки.Номенклатура");
			Корректировка.Вставить("Характеристика"	, "ДанныеКорректировки.Характеристика");
			Корректировка.Вставить("Цена"			, "ДанныеКорректировки.Цена");
			Корректировка.Вставить("СтавкаНДС"		, "ДанныеКорректировки.СтавкаНДС");
			Корректировка.Вставить("Количество"		, "СУММА(ДанныеКорректировки.Количество)");
			Корректировка.Вставить("СуммаНДС"		, "СУММА(ДанныеКорректировки.СуммаНДС)");
			Корректировка.Вставить("Сумма"			, "СУММА(ДанныеКорректировки.Сумма)");
			
			Расхождения = Новый Структура;
			
			Расхождения.Вставить("Номенклатура"		, "ДанныеРасхождений.Номенклатура");
			Расхождения.Вставить("Характеристика"	, "ДанныеРасхождений.Характеристика");
			Расхождения.Вставить("СтавкаНДС"		, "ДанныеРасхождений.СтавкаНДС");
			Расхождения.Вставить("Количество"		, "СУММА(ДанныеРасхождений.Количество)");
			Расхождения.Вставить("СуммаНДС"			, "СУММА(ДанныеРасхождений.СуммаНДС)");
			Расхождения.Вставить("Сумма"			, "СУММА(ДанныеРасхождений.Сумма)");
			
			Результат.Вставить("ТаблицаКорректировки"	, Корректировка);
			Результат.Вставить("ТаблицаРасхождений"		, Расхождения);
						
		КонецЕсли;
				
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		Если ИмяТаблицыДокумента = "КорректировкаРеализации" Тогда 
			
			Корректировка = Новый Структура;
			
			Корректировка.Вставить("Номенклатура"	, "ДокументУчетаТаблицаТоваров.Номенклатура");
			Корректировка.Вставить("Количество"		, "ДокументУчетаТаблицаТоваров.Количество");
			Корректировка.Вставить("Цена"			, "ДокументУчетаТаблицаТоваров.Цена");
			Корректировка.Вставить("СтавкаНДС"		, "ДокументУчетаТаблицаТоваров.СтавкаНДС");
			Корректировка.Вставить("НомерГТД"		, "ДокументУчетаТаблицаТоваров.НомерГТД");
			Корректировка.Вставить("СуммаНДС"		, "ДокументУчетаТаблицаТоваров.СуммаНДС");
			Корректировка.Вставить("Сумма"			, "ДокументУчетаТаблицаТоваров.Сумма");
			
			Результат.Вставить("ТаблицаКорректировки", Корректировка);
			
		КонецЕсли;	
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПоискаСтрокиТабличнойЧастиДокумента1С_УПД(ЭлементДанныхТЧДокумента1С, TypeNamedId)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = Новый Структура;
			
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		
		ЭтоИУПД = (TypeNamedId = "UniversalTransferDocumentRevision");
						
		Результат.Вставить("Номенклатура"	, ЭлементДанныхТЧДокумента1С.Номенклатура);
		Результат.Вставить("Характеристика"	, ЭлементДанныхТЧДокумента1С.Характеристика);
		
		Если ВыводитьСерииВПечатныхФормах_УТ11() Или ЭтоИУПД Тогда
			Результат.Вставить("Серия"		, ЭлементДанныхТЧДокумента1С.Серия);	
		КонецЕсли;
				
		Если ЭтоИУПД Тогда
			Результат.Вставить("Количество"	, ЭлементДанныхТЧДокумента1С.Количество);
		КонецЕсли;
		
		Результат.Вставить("Цена"			, ЭлементДанныхТЧДокумента1С.Цена);
		Результат.Вставить("СтавкаНДС"		, ЭлементДанныхТЧДокумента1С.СтавкаНДС);
				
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		Результат.Вставить("Номенклатура"	, ЭлементДанныхТЧДокумента1С.Номенклатура);
		Результат.Вставить("Количество"		, ЭлементДанныхТЧДокумента1С.Количество);
		Результат.Вставить("Цена"			, ЭлементДанныхТЧДокумента1С.Цена);
		Результат.Вставить("СтавкаНДС"		, ЭлементДанныхТЧДокумента1С.СтавкаНДС);
		Результат.Вставить("НомерГТД"		, ЭлементДанныхТЧДокумента1С.НомерГТД);
					
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПоискаСтрокиТабличнойЧастиДокумента1С_УКД(ЭлементДанныхТЧДокумента1С)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
			
	Результат = Новый Структура;
			
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
						
		Результат.Вставить("Номенклатура"	, ЭлементДанныхТЧДокумента1С.Номенклатура);
		Результат.Вставить("Характеристика"	, ЭлементДанныхТЧДокумента1С.Характеристика);
		Результат.Вставить("Количество"		, ЭлементДанныхТЧДокумента1С.Количество);
		Результат.Вставить("Цена"			, ЭлементДанныхТЧДокумента1С.Цена);
		Результат.Вставить("СтавкаНДС"		, ЭлементДанныхТЧДокумента1С.СтавкаНДС);
						
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		
		ЭтоПолнаяКорректировкаВСторонуУменьшения = (ЭлементДанныхТЧДокумента1С.Количество = 0);
		
		Результат.Вставить("Номенклатура"	, ЭлементДанныхТЧДокумента1С.Номенклатура);
		Результат.Вставить("Количество"		, ЭлементДанныхТЧДокумента1С.Количество);
		Если ЭтоПолнаяКорректировкаВСторонуУменьшения Тогда
			Результат.Вставить("Цена"		, 0);
		Иначе
			Результат.Вставить("Цена"		, ЭлементДанныхТЧДокумента1С.Цена);	
		КонецЕсли;
		Результат.Вставить("СтавкаНДС"		, ЭлементДанныхТЧДокумента1С.СтавкаНДС);
		Результат.Вставить("НомерГТД"		, ЭлементДанныхТЧДокумента1С.НомерГТД);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьЦеныБезНДСВТаблицеТоваров(ТаблицаТоваровПоДокументу1С)
	
	// в электронном документе цены указаны без НДС
	
	ЗначениеНастройки_ТочностьЦены = ЗначениеНастройки_ТочностьЦены();
		
	Для Каждого ЭлементТЗ Из ТаблицаТоваровПоДокументу1С Цикл 
		
		Если Не ЗначениеЗаполнено(ЭлементТЗ.СуммаНДС) Тогда
			Продолжить;
		КонецЕсли;
						
		ЭлементТЗ.Цена = ЗначениеЦеныБезНДС(ЭлементТЗ.Количество, ЭлементТЗ.СуммаНДС, ЭлементТЗ.Сумма, ЗначениеНастройки_ТочностьЦены);
		
	КонецЦикла;
				
КонецПроцедуры

Функция ЗначениеНастройки_ТочностьЦены()
	
	Результат = Неопределено;
	ЗначениеПоУмолчанию = 2;
	
	ОбщиеНастройки = ОбщиеНастройкиМодуляДиадок();
		
	ОбщиеНастройки.Свойство("ТочностьЦены", Результат);
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает значение цены без НДС
//
// Параметры:
//	Количество 	- Число - количество в строке табличной части
//	СуммаНДС	- Число - сумма НДС в строке табличной части
//	СуммаСНДС	- Число	- сумма по строке табличной части, включающая НДС
//	Точность	- Число - точность округления
//
// Возвращаемое значение:
//	Число - значение цены без НДС
//	Неопределено - если рассчитать цену нет возможности
Функция ЗначениеЦеныБезНДС(Количество, СуммаНДС, СуммаСНДС, ТочностьЦены)
	
	Если ЗначениеЗаполнено(Количество) Тогда
		
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		Результат = Окр(СуммаБезНДС / Количество, ТочностьЦены);
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция ЦенаВключаетНДС(ДокументРеализации)
	
	ИдентификаторИМ = ИдентификаторИМ();
	
	Если ИдентификаторИМ = "ПМ_УТ_11" Тогда
		Результат = ДокументРеализации.ЦенаВключаетНДС;
	ИначеЕсли ИдентификаторИМ = "ПМ_БП_30" Тогда
		Результат = ДокументРеализации.СуммаВключаетНДС;
	Иначе
		Результат = Ложь;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОтборПоНоменклатуреДокумента(ЭлементыОтбора, НоменклатураЭД)
	
	НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	НовыйЭлементОтбора.Использование	= Истина;
	НовыйЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Номенклатура");
	НовыйЭлементОтбора.ПравоеЗначение	= НоменклатураЭД;
	НовыйЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	
КонецПроцедуры

Функция КонтрактАкцизы_ТаблицаТоваровУПД(Items)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИндексСтроки");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Серия");
	Результат.Колонки.Добавить("Упаковка");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	Результат.Колонки.Добавить("Цена");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("СтавкаНДС");
	Результат.Колонки.Добавить("НомерГТД");
	Результат.Колонки.Добавить("СуммаАкциза");
	
	Для Сч = 0 По Items.Количество() - 1 Цикл
		
		Item = Items[Сч];
		
		НовСтрока = Результат.Добавить();
		
		НовСтрока.ИндексСтроки		= Сч;
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
		
		НовСтрока.Номенклатура		= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика	= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия				= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка			= СлужебнаяИнформация.Упаковка;
		НовСтрока.ЕдиницаИзмерения	= СлужебнаяИнформация.ЕдиницаИзмерения;
		
		Если Item.Свойства().Получить("quantity") = Неопределено Тогда
			НовСтрока.Количество = Item.OriginalValues.Quantity
		Иначе
			НовСтрока.Количество = Item.quantity;
		КонецЕсли;
		
		НовСтрока.Цена 		= Item.Price; 
		НовСтрока.СтавкаНДС = СлужебнаяИнформация.СтавкаНДС;
				
		Если Item.CustomDeclarations.Количество() > 0 Тогда
			DeclarationNumber = Item.CustomDeclarations[0].DeclarationNumber;
		Иначе
			DeclarationNumber = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(DeclarationNumber) И НРег(DeclarationNumber) <> "прослеж" Тогда
			НовСтрока.НомерГТД = НомерГТД_СсылкаНоПомеру(DeclarationNumber);
		Иначе
			НовСтрока.НомерГТД = НомерГТД_НеЗаполненноеЗначение();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КонтрактАкцизы_ТаблицаТоваровУКД(Items)
	
	Результат = Новый ТаблицаЗначений;
			
	Результат.Колонки.Добавить("ИндексСтроки");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Серия");
	Результат.Колонки.Добавить("Упаковка");
		
	Результат.Колонки.Добавить("ИндексСтрокиВКонтенте");
	
	Результат.Колонки.Добавить("Цена");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("Количество_До");
	Результат.Колонки.Добавить("СтавкаНДС");
	Результат.Колонки.Добавить("НомерГТД");
	Результат.Колонки.Добавить("СтранаПроисхождения");
	Результат.Колонки.Добавить("СуммаАкциза_До");
	Результат.Колонки.Добавить("СуммаАкциза");
	Результат.Колонки.Добавить("ЭтоАлкогольнаяПродукция");
	
	НеЗаполненноеЗначение_Цена = 0;
	НеЗаполненноеЗначение_Количество = 0;
	
	Для Сч = 0 По items.Количество() - 1 Цикл
		
	    item = items[Сч];
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
					
		НовСтрока = Результат.Добавить();
		НовСтрока.ИндексСтрокиВКонтенте	= Сч;
				
		НовСтрока.Номенклатура			= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика		= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия					= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка				= СлужебнаяИнформация.Упаковка;
		
		Если ЗначениеЗаполнено(Item.CorrectedValues.Price) Тогда
			НовСтрока.Цена				= Item.CorrectedValues.Price;
		Иначе
			НовСтрока.Цена				= НеЗаполненноеЗначение_Цена;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Item.OriginalValues.quantity) Тогда
			НовСтрока.Количество_До		= Item.OriginalValues.quantity;
		Иначе
			НовСтрока.Количество_До		= НеЗаполненноеЗначение_Количество;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Item.CorrectedValues.quantity) Тогда
			НовСтрока.Количество		= Item.CorrectedValues.quantity;
		Иначе
			НовСтрока.Количество		= НеЗаполненноеЗначение_Количество;
		КонецЕсли;
			
		НовСтрока.СтавкаНДС				= СлужебнаяИнформация.СтавкаНДС;
		
		НовСтрока.НомерГТД				= НомерГТД_СсылкаПоСтрокеКонтентаУКД(Item);; 
		НовСтрока.СтранаПроисхождения	= СлужебнаяИнформация.СтранаПроисхождения;
		
		НовСтрока.ЭтоАлкогольнаяПродукция = Ложь;
		
	КонецЦикла;  
			
	// по этому индексу будут выполняться запросы на получение данных
	Для Сч = 0 По Результат.Количество() - 1 Цикл
		Результат[Сч].ИндексСтроки = Сч;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КонтрактАкцизы_ТаблицаТоваровУКД_Кодом(Items)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидИзменения");  // До/После
	
	Результат.Колонки.Добавить("ИндексСтроки");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Серия");
	Результат.Колонки.Добавить("Упаковка");
		
	Результат.Колонки.Добавить("ИндексСтрокиВКонтенте");
	
	Результат.Колонки.Добавить("Цена");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("СтавкаНДС");
	Результат.Колонки.Добавить("НомерГТД");
	Результат.Колонки.Добавить("СтранаПроисхождения");
	Результат.Колонки.Добавить("СуммаАкциза");
	
	ВозможныеВидИзмения = Перечисление_ВидИзменияВКонтентеУКД();
	
	Для Сч = 0 По items.Количество() - 1 Цикл
		
	    item = items[Сч];
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
		
		НовСтрока = Результат.Добавить();
		НовСтрока.ИндексСтрокиВКонтенте	= Сч;
		НовСтрока.ВидИзменения			= ВозможныеВидИзмения.До;
		
		НовСтрока.Номенклатура			= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика		= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия					= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка				= СлужебнаяИнформация.УпаковкаДоИзменения;
		НовСтрока.Цена					= Item.OriginalValues.Price;
		НовСтрока.Количество			= Item.OriginalValues.quantity;
		НовСтрока.СтавкаНДС				= СлужебнаяИнформация.СтавкаНДСДоИзменения;
		
		НомерГТД = НомерГТД_СсылкаПоСтрокеКонтентаУКД(Item);
		
		НовСтрока.НомерГТД				= НомерГТД; 
		НовСтрока.СтранаПроисхождения	= СлужебнаяИнформация.СтранаПроисхождения; 
		
		
		НовСтрока = Результат.Добавить();
		НовСтрока.ИндексСтрокиВКонтенте	= Сч;
		НовСтрока.ВидИзменения			= ВозможныеВидИзмения.После;
		
		НовСтрока.Номенклатура			= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика		= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия					= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка				= СлужебнаяИнформация.Упаковка;
		НовСтрока.Цена					= Item.CorrectedValues.Price;
		НовСтрока.Количество			= Item.CorrectedValues.quantity;
		НовСтрока.СтавкаНДС				= СлужебнаяИнформация.СтавкаНДС;
		
		НовСтрока.НомерГТД				= НомерГТД; 
		НовСтрока.СтранаПроисхождения	= СлужебнаяИнформация.СтранаПроисхождения;
		
	КонецЦикла;  
			
	// по этому индексу будут выполняться запросы на получение данных
	Для Сч = 0 По Результат.Количество() - 1 Цикл
		Результат[Сч].ИндексСтроки = Сч;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НомерГТД_СсылкаПоСтрокеКонтентаУКД(Item)
	
	Для Каждого КлючЗначение Из Item.StructedAdditionalInfos Цикл
		
		Если НРег(КлючЗначение.Key) = "регистрационный номер декларации на товары" Тогда
			Результат = НомерГТД_СсылкаНоПомеру(КлючЗначение.Value);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = НомерГТД_НеЗаполненноеЗначение(); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НомерГТД_СсылкаНоПомеру(РегистрационныйНомер)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НомераГТД.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НомераГТД КАК НомераГТД
	               |ГДЕ
	               |	НомераГТД.РегистрационныйНомер = &РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		ВызватьИсключение "Не удалось найти запись в справочнике ""НомераГТД"" с регистрационным номером: " + РегистрационныйНомер;	
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция НомерГТД_НеЗаполненноеЗначение()
	
	Результат = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
	
	Возврат Результат;
	
КонецФункции

Функция ПеренестиИспользуемыеВОтбореПоляВНастройкиСКДРекурсивно(Настройки, ЭлементыОтбора, МассивДобавленныхПолей = Неопределено)
	
	Если МассивДобавленныхПолей = Неопределено Тогда
		МассивДобавленныхПолей = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = ЭлементОтбора.ЛевоеЗначение;
			ВыбранноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		
			МассивДобавленныхПолей.Добавить(ВыбранноеПоле);
		Иначе
			ПеренестиИспользуемыеВОтбореПоляВНастройкиСКДРекурсивно(Настройки, ЭлементОтбора.Элементы, МассивДобавленныхПолей);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДобавленныхПолей;
	
КонецФункции

Функция УстановитьПараметрыВыводаНастроекСКД(Настройки)
	
	МассивУстановленныхПараметров = Новый Массив;
	
	УстановитьЗначениеПараметраВыводаНастроекСКД(Настройки, "РасположениеРеквизитов", РасположениеРеквизитовКомпоновкиДанных.Отдельно, МассивУстановленныхПараметров);
	
	Возврат МассивУстановленныхПараметров;
	
КонецФункции

Процедура УстановитьЗначениеПараметраВыводаНастроекСКД(Настройки, ИмяПараметра, ЗначениеПараметра, МассивУстановленныхПараметров)
	
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	МассивУстановленныхПараметров.Добавить(ИмяПараметра);
	
КонецПроцедуры

Процедура ОчиститьВыбранныеПоляИзОтбора(Настройки, МассивДобавленныхПолей)
	
	Для каждого ДобавленноеПоле Из МассивДобавленныхПолей Цикл
		Настройки.Выбор.Элементы.Удалить(ДобавленноеПоле);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПараметрыВыводаОтчета(Настройки, МассивУстановленныхПараметров)
	
	Для каждого ИмяПараметра Из МассивУстановленныхПараметров Цикл
		
		ПараметрВывода = Настройки.ПараметрыВывода.Элементы.Найти(ИмяПараметра);
		Если Не ПараметрВывода = Неопределено Тогда
			ПараметрВывода.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура РаспределитьСуммуАкцизаПропорционально(РаспределяемаяСумма, КоллекцияПриемник, ИмяКолонки_КоэффициентРаспределения, ИмяКолонки_СуммаАкциза)
	
	Коэффициенты = Новый Массив;
				
	Для Каждого ЭлементКоллекции Из КоллекцияПриемник Цикл
		Коэффициенты.Добавить(ЭлементКоллекции[ИмяКолонки_КоэффициентРаспределения]);
	КонецЦикла;
	
	МассивНовыхСумм = Общее_РаспределитьПропорционально(РаспределяемаяСумма, Коэффициенты);
					
	Сч = 0;
	Пока Сч <= МассивНовыхСумм.Количество() - 1 Цикл
		
		СуммаАкциза		= МассивНовыхСумм.Получить(Сч);
		ЭлементПриемник = КоллекцияПриемник.Получить(Сч);
		
		ЭлементПриемник[ИмяКолонки_СуммаАкциза] = СуммаАкциза;
		
		Сч = Сч + 1;	
		
	КонецЦикла;
			
КонецПроцедуры

Функция Общее_РаспределитьПропорционально(РаспределяемаяСумма, Коэффициенты)
	
	КонфигурацияПоддержана = СценарийПоддерживается_ЗаполнениеСуммыАкциза();
	
	Если Не КонфигурацияПоддержана Тогда
		ТекстОшибки = ТекстОшибки_НеПоддерживаемаяКонфигурация();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
			
	Если ИдентификаторИнтеграционногоМодуля = "ПМ_УТ_11" Тогда
		ВызывающийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
		Результат = ВызывающийМодуль.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, Коэффициенты);
	ИначеЕсли ИдентификаторИнтеграционногоМодуля = "ПМ_БП_30" Тогда
		ВызывающийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБПКлиентСервер");
		Результат = ВызывающийМодуль.РаспределитьПропорционально(РаспределяемаяСумма, Коэффициенты);
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьАкцизВКонтентеПоДаннымКонтракта_УПД(Items, Источник)
	
	Для Сч = 0 По Источник.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = Источник[Сч];
		Item = Items[Сч];
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.СуммаАкциза) Тогда
			Item.Excise = СтрокаТаблицыТоваров.СуммаАкциза;
		КонецЕсли;
											
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАкцизВКонтентеПоДаннымКонтракта_УКД(Items, Источник)
	
	Для Сч = 0 По Источник.Количество() - 1 Цикл

		СтрокаТаблицыТоваров = Источник[Сч];
		Item = Items[Сч];
		
		СуммаАкциза_До		= СтрокаТаблицыТоваров.СуммаАкциза_До;
		СуммаАкциза_После	= СтрокаТаблицыТоваров.СуммаАкциза;
		
		ЭтоАлкогольнаяПродукция = СтрокаТаблицыТоваров.ЭтоАлкогольнаяПродукция;
		
		Если Не ЗначениеЗаполнено(СуммаАкциза_До) И Не ЗначениеЗаполнено(СуммаАкциза_После) Тогда
			// возможен вариант, когда обе суммы равны 0,
			// в таком случае данные в контент не передаем
	        Продолжить;
		КонецЕсли;
		
		ЭтоЧастичнаяКорректировкаВСторонуУменьшения = ЭтоЧастичнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До, СуммаАкциза_После);
		ЭтоЧастичнаяКорректировкаВСторонуУвеличения = ЭтоЧастичнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До, СуммаАкциза_После);
		
		ЭтоПолнаяКорректировкаВСторонуУменьшения = ЭтоПолнаяКорректировкаВСторонуУменьшения(СуммаАкциза_До, СуммаАкциза_После);
		ЭтоПолнаяКорректировкаВСторонуУвеличения = ЭтоПолнаяКорректировкаВСторонуУвеличения(СуммаАкциза_До, СуммаАкциза_После);
		
		КорректировкиСуммНеБыло = КорректировкаНеПроведена(СуммаАкциза_До, СуммаАкциза_После);
		
		Если ЭтоАлкогольнаяПродукция Тогда
		
			Item.OriginalValues.Excise	= СуммаАкциза_До;
			Item.CorrectedValues.Excise = СуммаАкциза_После;
							        				
			Если ЭтоЧастичнаяКорректировкаВСторонуУвеличения Тогда
				Item.AmountsInc.Excise = (СуммаАкциза_После - СуммаАкциза_До);
			ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУвеличения Тогда
				Item.AmountsInc.Excise = СуммаАкциза_После;
			КонецЕсли;
								
		Иначе
			
			Если ЭтоЧастичнаяКорректировкаВСторонуУменьшения Тогда
				
				Item.OriginalValues.Excise 	= СуммаАкциза_До;
				Item.CorrectedValues.Excise = СуммаАкциза_После;
				
				Item.AmountsDec.Excise = (СуммаАкциза_До - СуммаАкциза_После); //* сверить с аналитикой 
			
			ИначеЕсли ЭтоЧастичнаяКорректировкаВСторонуУвеличения Тогда
				
				Item.OriginalValues.Excise 	= СуммаАкциза_До;
				Item.CorrectedValues.Excise = СуммаАкциза_После;
				
				Item.AmountsInc.Excise = (СуммаАкциза_После - СуммаАкциза_До);
				
			ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУменьшения Тогда
				
				Item.OriginalValues.Excise 	= СуммаАкциза_До;
				Item.CorrectedValues.Excise = 0;
				
				Item.AmountsDec.Excise = СуммаАкциза_До;
				
			ИначеЕсли ЭтоПолнаяКорректировкаВСторонуУвеличения Тогда
				
				Item.OriginalValues.Excise 	= 0;
				Item.CorrectedValues.Excise = СуммаАкциза_После;
				
				Item.AmountsInc.Excise = СуммаАкциза_После;
				
			ИначеЕсли КорректировкиСуммНеБыло Тогда	
				
				Item.OriginalValues.Excise 	= СуммаАкциза_До;
				Item.CorrectedValues.Excise = СуммаАкциза_После;	
				
			КонецЕсли;
			
		КонецЕсли;
															
	КонецЦикла;
		
КонецПроцедуры

Функция Акцизы_ПоддерживаемыеДокументыРеализации() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Акцизы_ДобавитьДокументВСписокДоступных(Результат, "РеализацияТоваровУслуг");
	Акцизы_ДобавитьДокументВСписокДоступных(Результат, "КорректировкаРеализации");
			
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ПоддерживаемыеДокументыКорректировки() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Акцизы_ДобавитьДокументВСписокДоступных(Результат, "КорректировкаРеализации");
	
	Возврат Результат;
	
КонецФункции

Процедура Акцизы_ДобавитьДокументВСписокДоступных(СписокДоступныхДокументов, ИмяДокумента)
	
	МетаданныеДокумента = Метаданные.Документы.Найти(ИмяДокумента);
		
	Если МетаданныеДокумента <> Неопределено Тогда
		СписокДоступныхДокументов.Добавить(МетаданныеДокумента.Имя, МетаданныеДокумента.Синоним);
	КонецЕсли;
	
КонецПроцедуры

Функция Акцизы_ТекстОшибки_НеПоддерживаемаяКонфигурация()
	
	Результат = "Сценарий ""Заполнение суммы акциза"" не поддерживает текущую конфигурацию";
	
	Возврат Результат;
	
КонецФункции

Функция Акцизы_ТекстОшибки_НеПоддерживаетсяСводныйСФ()
	
	Результат = "Сценарий ""Заполнение суммы акциза"" не поддерживает работу со сводныйм счетом-фактурой";;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОшибки_НеПоддерживаемаяКонфигурация()
	
	Результат = "Плагин ""Изменение контента"" не поддерживает текущую конфигурацию";
	
	Возврат Результат;
	
КонецФункции

//{ Работа с описанием сценариев в макете

Функция ДоступныеСценарии() Экспорт

	Результат = Новый СписокЗначений;
	
	Макет = ПолучитьМакет("ДоступныеСценарии");
	
	Для Каждого Область Из Макет.Области Цикл
		Результат.Добавить(Область.Имя, Область.Имя);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ТаблицаДоступныхСценариев()


Функция ОписаниеСценария(ИмяСценария) Экспорт

	Макет = ПолучитьМакет("ДоступныеСценарии");  // может, стоит кэшировать?
	Область = Макет.ПолучитьОбласть(ИмяСценария);
	
	Результат = Новый Структура;
	Результат.Вставить("ПримерКода",				ТекстЯчейкиОбласти(Область, 1, 1));
	
	Результат.Вставить("ОписаниеПеременных",		ТекстЯчейкиОбласти(Область, 1, 2));
	Результат.Вставить("ОписаниеРезультата",		ТекстЯчейкиОбласти(Область, 1, 3));
	
	ДоступныеТипыДокументов = ТекстЯчейкиОбласти(Область, 1, 4);
	МассивТипов = РазбитьСтроку(ДоступныеТипыДокументов, Символы.ПС);
	Результат.Вставить("ДоступныеТипыДокументов", МассивТипов);
	
	Результат.Вставить("ИмяЗакладки_ВизуальнаяНастройка",		ТекстЯчейкиОбласти(Область, 1, 5));  // если заполнено, то в форме включится видимость соответствующей закладки   
	
	ДоступныеВариантыСценариев = ТекстЯчейкиОбласти(Область, 1,6);  // если заполнено, то в форме включится видимость соответствующей закладки 
	ВариантыСценариев = РазбитьСтроку(ДоступныеВариантыСценариев, Символы.ПС);
	Результат.Вставить("ВариантыСценариев", ВариантыСценариев);

	Возврат Результат;

КонецФункции // ТаблицаДоступныхСценариев()

Функция ТекстЯчейкиОбласти(Область, НомерСтроки, НомерКолонки)

	Возврат Область.ПолучитьОбласть(НомерСтроки, НомерКолонки).ТекущаяОбласть.Текст;

КонецФункции // ТекстЯчейкиОбласти()

Функция ВариантыФильтраКонтрагентов() Экспорт

	Результат = Новый Структура;
	
	ДобавитьЗначениеПсевдоПеречисления(Результат, "БезФильтра",			"Без фильтра");
	ДобавитьЗначениеПсевдоПеречисления(Результат, "ТолькоВыбранные",	"Только выбранные");
	ДобавитьЗначениеПсевдоПеречисления(Результат, "КромеВыбранных",		"Все, кроме выбранных");
	
	Возврат Результат;

КонецФункции // ВариантыФильтраКонтрагентов()

Процедура ДобавитьЗначениеПсевдоПеречисления(ПеречислениеСтруктура, Значение, Представление)

	ПеречислениеСтруктура.Вставить(Значение, Новый Структура("Значение,Представление", Значение, Представление));

КонецПроцедуры
	
//} Работа с описанием сценариев в макете

//{ "Библиотечные" функции
// Описание каждой функции надо заносить в макет "СправочникФункций".

Функция ПодставитьВСтроку(ЗНАЧ Стр, п1 = "", п2 = "", п3 = "", п4 = "", п5 = "")
	
	Стр = СтрЗаменить(Стр, "%1", п1);
	Стр = СтрЗаменить(Стр, "%2", п2);
	Стр = СтрЗаменить(Стр, "%3", п3);
	Стр = СтрЗаменить(Стр, "%4", п4);
	Стр = СтрЗаменить(Стр, "%5", п5);
	
	Возврат Стр;
	
КонецФункции	

Функция РазбитьСтроку(Стр, Символ)
	
	// скопировано из ПМов, требует переосмысления
	Результат = Новый Массив;
	
	Текст = СтрЗаменить(Стр, Символ, Символы.ПС);
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Текст);
	Для Сч = 1 По ТД.КоличествоСтрок() Цикл
		Результат.Добавить(ТД.ПолучитьСтроку(Сч));
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьДокументОснование(Документ1С)
	
	// В большинстве конфигураций это сработает, но надо добавить больше частных случаев. Для УНФ хотя бы.
	
	Результат = Документ1С;
	Если Метаданные.Документы.Найти("СчетФактураВыданный") <> Неопределено Тогда
		ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный");	
	ИначеЕсли Метаданные.Документы.Найти("СчетФактура") <> Неопределено Тогда
		ТипДокумента = Тип("ДокументСсылка.СчетФактура");
	КонецЕсли;
	
	Если ТипЗнч(Документ1С) = ТипДокумента Тогда
		Если Документ1С.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда	
			Результат = Документ1С.ДокументОснование;
		ИначеЕсли Документ1С.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено Тогда
			Если Документ1С.ДокументыОснования.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				Возврат Документ1С.ДокументыОснования[0].ДокументОснование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоСчетФактураВыданный(Документ1С)
	
	Если Метаданные.Документы.Найти("СчетФактураВыданный") <> Неопределено Тогда
		ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный");	
	ИначеЕсли Метаданные.Документы.Найти("СчетФактура") <> Неопределено Тогда
		ТипДокумента = Тип("ДокументСсылка.СчетФактура");
	Иначе
		ТекстИсключения = "Не удалось определить тип документа СчетФактура";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ТипЗнч(Документ1С) = ТипДокумента Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСводныйСчетФактура(Документ1С)
	
	ЭтоСчетФактураВыданный = ЭтоСчетФактураВыданный(Документ1С);
	
	Если ЭтоСчетФактураВыданный 
		И Документ1С.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено Тогда
		
		Результат = (Документ1С.ДокументыОснования.Количество() > 1);
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение дополнительного свойства объекта по части имени свойства.
//
// Параметры
// 	Объект			- <СправочникСсылка, ДокументСсылка>	- Ссылка на объект в 1С, для которого задано дополнительное свойство.
// 	ИмяДопСвойства	- <Строка>	- Имя свойства, для которого надо вернуть значение
Функция ЗначениеДопСвойстваПоИмени(Объект, ИмяДопСвойства)
	
	Результат = Неопределено;
	
	ДопСвойство = ЭлементПВХСвойстваОбъектовПоИмени(ИмяДопСвойства);
	
	Если ЗначениеЗаполнено(ДопСвойство) Тогда
		Результат = ЗначениеДопСвойстваПоСсылке(Объект, ДопСвойство);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьИнфополе(Инфополя, Ключ, ЗНАЧ Значение)
	
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
		//ВызватьИсключение "Не заполнен ключ для инфополя со значением: " + Значение;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
		//ВызватьИсключение "Не заполнено значение для инфополя с ключом: " + Ключ;
	КонецЕсли;	
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Если НачалоДня(Значение) = Значение Тогда
			Значение = Формат(Значение, "ДФ=yyyy-MM-dd");  // только дата
		ИначеЕсли НачалоДня(Значение) = '00010101' Тогда
			Значение = Формат(Значение, "ДФ='HH:mm:ss'");  // только время
		Иначе
			Значение = Формат(Значение, "ДФ='yyyy-MM-dd HH:mm:ss'");  // дата и время
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Значение) <> Тип("Строка") Тогда
		
		Значение = Строка(Значение);
		
	КонецЕсли;	
	
	
	НоваяСтрока = Новый Структура;
	
	НоваяСтрока.Вставить("Ключ",		Ключ);
	НоваяСтрока.Вставить("Значение",	Значение);
	
	// можно бросать исключение сразу тут, чтобы было понятнее
	
	Инфополя.Добавить(НоваяСтрока);
	
КонецПроцедуры

// Функция возвращает значение дополнительного свойства объекта по ссылке на свойство.
//
// Параметры
// 	Объект			- <СправочникСсылка, ДокументСсылка>	- Ссылка на объект в 1С, для которого задано дополнительное свойство.
// 	ДопСвойство		- <ПланВидовХарактеристикСсылка.СвойстваОбъектов, ПланВидовХарактеристикСсылка.ДополнительныеРеквизиты>	- Ссылка на свойство, для которого надо вернуть значение
Функция ЗначениеДопСвойстваПоСсылке(Объект, ДопСвойство)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Значение КАК Значение,
	|	NULL КАК ТекстоваяСтрока
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Объект = &Объект
	|	И ТаблицаРегистра.Свойство = &Свойство";
	
	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДополнительныеСведения", "ЗначенияСвойствОбъектов");
	КонецЕсли;	
	
	Если ЕстьТабличнаяЧастьДополнительныеРеквизиты(Объект) Тогда
		
		Запрос.Текст = Запрос.Текст + " Объединить все
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение,
		|	ДополнительныеРеквизитыОбъекта.ТекстоваяСтрока КАК ТекстоваяСтрока
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
		|ГДЕ
		|	ДополнительныеРеквизитыОбъекта.Ссылка = &Объект
		|	И ДополнительныеРеквизитыОбъекта.Свойство = &Свойство";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", Объект.Метаданные().ПолноеИмя());
		
	КонецЕсли;	
	
	
	Запрос.УстановитьПараметр("Свойство",	ДопСвойство);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	РезультатЗапроса    = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстоваяСтрока) Тогда
			Результат = РезультатЗапроса.ТекстоваяСтрока;
		Иначе
			Результат = РезультатЗапроса.Значение;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТЗ_ДопСведения_ДопРеквизиты(МассивОбъектов, МассивСвойств,МетаданныеОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистра.Значение КАК Значение,
	|	NULL КАК ТекстоваяСтрока,
	|	ТаблицаРегистра.Объект КАК Объект,
	|	ТаблицаРегистра.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Объект В(&МассивОбъектов)
	|	И ТаблицаРегистра.Свойство В(&МассивСвойств)";
	
	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДополнительныеСведения", "ЗначенияСвойствОбъектов");
	Иначе
		
	КонецЕсли;	
	
	Если МетаданныеОбъекта.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " Объединить все
		|ВЫБРАТЬ
		|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение,
		|	ДополнительныеРеквизитыОбъекта.ТекстоваяСтрока КАК ТекстоваяСтрока,
		|	ДополнительныеРеквизитыОбъекта.Ссылка КАК Объект,
		|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
		|ГДЕ
		|	ДополнительныеРеквизитыОбъекта.Ссылка В (&МассивОбъектов)
		|	И ДополнительныеРеквизитыОбъекта.Свойство В (&МассивСвойств)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", МетаданныеОбъекта.ПолноеИмя());
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("МассивСвойств",	МассивСвойств);
	Запрос.УстановитьПараметр("МассивОбъектов",	МассивОбъектов);
	
	Результат    = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Объект,Свойство");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеИзТЗ_ДопСведения_ДопРеквизиты(ТЗ, Объект, Свойство)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Объект",   Объект);
	ПараметрыОтбора.Вставить("Свойство", Свойство);
	
	НайденныеСтроки = ТЗ.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПерваяСтрока = НайденныеСтроки[0];
		
		Если ЗначениеЗаполнено(ПерваяСтрока.ТекстоваяСтрока) Тогда
			ЗначениеДопСведений = ПерваяСтрока.ТекстоваяСтрока;
		Иначе
			ЗначениеДопСведений = ПерваяСтрока.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеДопСведений;
	
КонецФункции

Процедура ЗаполнитьКодТовара_ПоРеквизитуСправочника(ТаблицаТоваров, НаименованиеСправочника, НаименованиеКолонки, НаименованиеРеквизита)
	
	МассивОбъектов			= ТаблицаТоваров.ВыгрузитьКолонку(НаименованиеКолонки);
	МетаданныеСправочника	= Метаданные.Справочники[НаименованиеСправочника];
	
	ТЗ_ЗначениеРеквизитов	= ТЗ_ЗначениеРеквизитов_ПоМассивуОбъектов(МассивОбъектов, НаименованиеРеквизита, МетаданныеСправочника);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НужнаяСтрока = ТЗ_ЗначениеРеквизитов.Найти(СтрокаТаблицы[НаименованиеКолонки], "Объект");
		
		Если НужнаяСтрока <> Неопределено Тогда
			СтрокаТаблицы.КодТов = Строка(НужнаяСтрока.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТЗ_ЗначениеРеквизитов_ПоМассивуОбъектов(МассивОбъектов, НаименованиеРеквизита, МетаданныеСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НужныйСправочник.Ссылка КАК Объект,
		|	НужныйСправочник.Код КАК Значение
		|ИЗ
		|	Справочник.Номенклатура КАК НужныйСправочник
		|ГДЕ
		|	НужныйСправочник.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", МетаданныеСправочника.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Код",						НаименованиеРеквизита);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Объект");
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементПВХСвойстваОбъектовПоИмени(ИмяСвойства)
	
	Результат = Неопределено;
	
	ТекстЗапросаПоискаПВХ = "";
	Если Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		
		ТекстЗапросаПоискаПВХ =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО &Наименование
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
		
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		
		ТекстЗапросаПоискаПВХ =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО &Наименование
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
		
	Иначе
		ВызватьИсключение "Функция ЗначениеДопСвойстваПоИмени() не поддерживается в текущей конфигурации";
	КонецЕсли;	
	
	ЗапросПоискаПВХ = Новый Запрос;
	ЗапросПоискаПВХ.Текст = ТекстЗапросаПоискаПВХ;
	ЗапросПоискаПВХ.УстановитьПараметр("Наименование", "" + ИмяСвойства + "%");
	Выборка = ЗапросПоискаПВХ.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		ВызватьИсключение "Не найдено свойство по имени: " + ИмяСвойства;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Функция Строки_ЧастьДо(Строка, Подстрока) Экспорт

	Индекс = Найти(нрег(Строка), нрег(Подстрока));
	Возврат Лев(Строка, Индекс - 1);

КонецФункции

Функция Строки_ЧастьПосле(Строка, Подстрока) Экспорт

	Индекс = Найти(нрег(Строка), нрег(Подстрока));
	Возврат Сред(Строка, Индекс + СтрДлина(Подстрока));

КонецФункции

Функция Строки_ЧастьМежду(Строка, ПодстрокаНачало, ПодстрокаКонец) Экспорт

	Результат = Строки_ЧастьПосле(Строка, ПодстрокаНачало);
	Результат = Строки_ЧастьДо(Результат, ПодстрокаКонец);
	Возврат Результат;
	
КонецФункции

Функция Строки_ВДату(Строка) Экспорт

	Год		= Сред(Строка, 7, 4);
	Месяц	= Сред(Строка, 4, 2);
	День	= Сред(Строка, 0, 2);
	
	Если НЕ СтрокаСодержитТолькоЦифры(Год)
		или СтрДлина(Год) < 4 Тогда
		Год = "20" + Лев(Год, 2);  // возможно, был короткий формат года
	КонецЕсли;	
	
	Дата	= Дата(Год, Месяц, День);
	
	Возврат Дата;

КонецФункции

// Соединяет массив переданных строк в одну строку с указанным разделителем.
// По аналогии с глобальным методом СтрСоединить, добавленным в платформу версии 8.3.6.
// ВАЖНО: В результирующую строку добавляются только непустые значения!
// Платформенный метод СтрСоединить объединяет строки безусловно.
// Нужно это учитывать, если в качестве разделителя задана непустая строка.
// 
// Параметры:
//  Строки - Массив, ФиксированныйМассив - коллекция объединяемых строк.
//  Разделитель - Строка - Строка, которая будет вставлена между объединяемыми строками.
//                         Если параметр не задан, строки будут объединены слитно друг с другом.
//
// Возвращаемое значение:
//   Строка - строка, содержащая соединенные исходные строки с разделителем между ними.
//
// Пример:
//   
//   Строки = Новый Массив;
//   Строки.Добавить("Элемент0");
//   Строки.Добавить("");
//   Строки.Добавить("Элемент2");
//   
//   СоединитьСтроку(Строки, "#") = "Элемент0#Элемент2"
//   СтрСоединить(Строки, "#") = "Элемент0##Элемент2"
//   СоединитьСтроку(Строки, "") = СтрСоединить(Строки, "") = "Элемент0Элемент2"
//
Функция Общее_СоединитьСтроку(Строки, Знач Разделитель = "")
	
	Результат = "";
	ТекРазделитель = "";
	
	Для Каждого Строка Из Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Строка;
		ТекРазделитель = Разделитель;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_РазделительПакетов()
	
	Результат = "
		|;
        |
        |////////////////////////////////////////////////////////////////////////////////";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ИмяТаблицыДокумента(ИмяДокумента, ИмяТабличнойЧасти = "")
	
	Результат = "Документ." + ИмяДокумента;
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Результат = Результат + "." + ИмяТабличнойЧасти;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает результат формирвоания скд в таблицу значений
//
// Параметры:
//  СхемаКомпоновки 
//  Настройки 
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПолучитьРезультатСКД_ТаблицаЗначений(СхемаКомпоновки, Настройки)
			
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетСКД);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультат;

КонецФункции

// Получает результат формирования скд в табличный документ
//
// Параметры:
//  СхемаКомпоновки 
//  Настройки 
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПолучитьРезультатСКД_ТабличныйДокумент(СхемаКомпоновки, Настройки)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанных"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетСКД);
	
	Результат = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции

//} "Библиотечные" функции



//{ отладка, запись отладочного документа с контентом

Процедура СохранитьОтладочныеДанные(ДокументСсылка, Контент, ТипДокумента)

	// Кстати, можно и вообще в файл &НаСервере записывать
	СохраняемыйКонтекст = Новый Структура;
	СохраняемыйКонтекст.Вставить("Контент", ОсновнойМодуль.ОбъектXDTOВСтруктуру(Контент));
	СохраняемыйКонтекст.Вставить("ДокументСсылка", ДокументСсылка);
	СохраняемыйКонтекст.Вставить("ТипДокумента", ТипДокумента);   // рискованное место. Тут мы должны обеспечивать, что список типов документов не будет внезапно меняться.
	
	ХранилищеОбщихНастроек_Поместить(ХранилищеОбщихНастроек_КлючНастроек(), СохраняемыйКонтекст);

КонецПроцедуры

Функция ПрочитатьОтладочныеДанные() Экспорт
	
	КлючНастроек = ХранилищеОбщихНастроек_КлючНастроек();
	ОтладочныеДанные = ХранилищеОбщихНастроек_Прочитать(КлючНастроек);
	Возврат ОтладочныеДанные;
	
КонецФункции	

Функция ХранилищеОбщихНастроек_Прочитать(КлючНастроек, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = ХранилищеОбщихНастроек.Загрузить("НастройкиКонтурЛогистика", КлючНастроек);
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройку в хранилище общих настроек текущего пользователя,
// по ключу объекта "НастройкиКонтурЛогистика".
// 
// Параметры:
//   КлючНастроек - Строка       - ключ сохраняемых настроек.
//   Значение     - Произвольный - содержит настройки, которые нужно сохранить в хранилище.
// 
Процедура ХранилищеОбщихНастроек_Поместить(КлючНастроек, Значение) Экспорт
  
  ХранилищеОбщихНастроек.Сохранить("НастройкиКонтурЛогистика", КлючНастроек, Значение);
                                                                                              
КонецПроцедуры

Функция ХранилищеОбщихНастроек_КлючНастроек() Экспорт
  
  Возврат "Плагин_ИзменениеКонтента_УПД";
  
КонецФункции

//} отладка, запись отладочного документа с контентом



//{ Служебные методы

Функция НовыйКонтент(ИмяКонтента)
	
	Возврат ОсновнойМодуль.ДД_Компонента_ПолучитьПустойКонтент(ИмяКонтента,Истина);
	
КонецФункции

Функция НовыйЭлементСпискаXDTO(СписокXDTO) Экспорт
	
	Возврат СписокXDTO.Добавить(НовыйКонтент(СписокXDTO.ВладеющееСвойство.Тип.Имя));
	
КонецФункции

Функция ЕстьТабличнаяЧастьДополнительныеРеквизиты(Ссылка)
	
	Результат = Ссылка.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено;
	Возврат Результат;
	
КонецФункции

Функция ТаблицаТоваровИзТабличнойЧасти(items)
	
	// В этой таблице будут поля для редактирования контента.
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Серия");
	Результат.Колонки.Добавить("Упаковка");
	Результат.Колонки.Добавить("ИндексСтроки");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	
	Результат.Колонки.Добавить("Количество");
	
	Для Сч = 0 По items.Количество() - 1 Цикл
		
	    item = items[Сч];
		
		НовСтрока = Результат.Добавить();
		
		НовСтрока.ИндексСтроки		= Сч;
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
		
		НовСтрока.Номенклатура		= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика	= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия				= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка			= СлужебнаяИнформация.Упаковка;
		НовСтрока.ЕдиницаИзмерения	= СлужебнаяИнформация.ЕдиницаИзмерения;
		Если Item.Свойства().Получить("quantity") = Неопределено Тогда
			НовСтрока.Количество = Item.OriginalValues.Quantity
		Иначе
			НовСтрока.Количество = Item.quantity;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ТаблицаТоваровИзТабличнойЧасти_УКД(items)
	
	// В этой таблице будут поля для редактирования контента.
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидИзменения");  // До/После

	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Серия");
	Результат.Колонки.Добавить("Упаковка");
	Результат.Колонки.Добавить("ИндексСтроки");
	
	Результат.Колонки.Добавить("ИндексСтрокиВКонтенте");
	
	Результат.Колонки.Добавить("Количество");
	
	Для Сч = 0 По items.Количество() - 1 Цикл
		
	    item = items[Сч];
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
		
		НовСтрока = Результат.Добавить();
		НовСтрока.ИндексСтрокиВКонтенте	= Сч;
		НовСтрока.ВидИзменения			= "До";
		
		НовСтрока.Номенклатура			= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика		= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия					= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка				= СлужебнаяИнформация.УпаковкаДоИзменения;
		НовСтрока.Количество			= Item.OriginalValues.quantity;
		
		
		НовСтрока = Результат.Добавить();
		НовСтрока.ИндексСтрокиВКонтенте	= Сч;
		НовСтрока.ВидИзменения			= "После";
		
		НовСтрока.Номенклатура			= СлужебнаяИнформация.Номенклатура;
		НовСтрока.Характеристика		= СлужебнаяИнформация.Характеристика;
		НовСтрока.Серия					= СлужебнаяИнформация.Серия;
		НовСтрока.Упаковка				= СлужебнаяИнформация.Упаковка;
		НовСтрока.Количество			= Item.CorrectedValues.quantity;
		
	КонецЦикла;
	
	// по этому индексу будут выполняться запросы на получение данных
	Для Сч = 0 По Результат.Количество() - 1 Цикл
		Результат[Сч].ИндексСтроки = Сч;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция КонтрагентДокумента(Документ, Content)
	
	// на всякий случай Content, если окажется, что из него достать будет проще и надежнее
	Результат = Документ.Контрагент;
	Возврат Результат;
	
КонецФункции	

Функция КонтрагентПопадаетВФильтр(Контрагент, ТипФильтра, СписокКонтрагентов)
	
	ВариантыФильтра = ВариантыФильтраКонтрагентов();
	
	Если ТипФильтра = ВариантыФильтра.БезФильтра.Значение Тогда
		Результат = Истина;
		
	ИначеЕсли ТипФильтра = ВариантыФильтра.ТолькоВыбранные.Значение Тогда
		Результат = (СписокКонтрагентов.Найти(Контрагент) <> Неопределено);
		
	ИначеЕсли ТипФильтра = ВариантыФильтра.КромеВыбранных.Значение Тогда
		Результат = (СписокКонтрагентов.Найти(Контрагент) = Неопределено);
		
	Иначе
		ВызватьИсключение "Неизвестный тип фильтра контрагентов: " + ТипФильтра;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Функция СтрокаСодержитТолькоЦифры(СтрокаПроверки)
	
	Для й = 1 По СтрДлина(СтрокаПроверки) Цикл
		
		ПроверяемыйСимвол = Сред(СтрокаПроверки, й, 1);
		
		Если ПроверяемыйСимвол < "0" ИЛИ ПроверяемыйСимвол > "9" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ТаблицаЗначений_Загрузить(Источник, Приемник)
	
	Для Каждого Стр Из Источник Цикл
		
		НовСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Стр);
		
	КонецЦикла;
	
КонецФункции	

Функция ОСУ_КодОСУ(ЗНАЧ GTIN, ЗНАЧ Количество, Числитель = 1, Знаменатель = 1)
	
	Если Не ЗначениеЗаполнено(Числитель) Тогда
		Числитель = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Знаменатель) Тогда
		Знаменатель = 1;
	КонецЕсли;
	
	GTIN = Прав("00000000000000" + СокрЛП(GTIN), 14);
	Количество = Окр(Количество * Числитель / Знаменатель);
	Результат = "02" + GTIN + "37" + XMLСтрока(Количество);
	
	Возврат Результат;
	
КонецФункции	

Процедура ЗаполнитьИдентификаторИнтеграционногоМодуля()
	
	ИдентификаторИнтеграционногоМодуля = ОсновнойМодуль.ИдентификаторИнтеграционногоМодуля();
	
КонецПроцедуры

Функция Перечисление_ВидИзменияВКонтентеУКД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("До"		, "До");
	Результат.Вставить("После"	, "После");
	
	Возврат Результат;
	
КонецФункции

Функция ВыводитьСерииВПечатныхФормах_УТ11()
	
	Если Метаданные.Константы.Найти("ВыводитьСерииВПечатныхФормах") <> Неопределено Тогда
		Результат = Константы.ВыводитьСерииВПечатныхФормах.Получить();
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоменклатураЭлектронногоДокумента(Items)
	
	Результат = Новый Массив;
	
	Для Сч = 0 По Items.Количество() - 1 Цикл
			
		Item = Items[Сч];
		
		СлужебнаяИнформация = ОсновнойМодуль.ОбъектXDTOВСтруктуру(Item.СлужебнаяИнформация);
					
		Номенклатура = СлужебнаяИнформация.Номенклатура;
		
		Если Результат.Найти(Номенклатура) = Неопределено Тогда
			Результат.Добавить(Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;	
	
КонецФункции

Функция ОбщиеНастройкиМодуляДиадок()
	
	Результат = ОсновнойМодуль.ЭДО_Модуль_ОбщиеНастройки();

	Возврат Результат;
	
КонецФункции

//} Служебные методы


//{ Сохранение настроек в файл


Функция ВыгрузитьНастройкиВJSON(Настройки) Экспорт
	
	ВыгружаемыеНастройки = Новый Структура;
	
	ВыгружаемыеНастройки.Вставить("Настройки", Настройки);
	
	ВыгружаемыеНастройки.Вставить("СлужебнаяИнформация", Новый Структура);
	ВыгружаемыеНастройки.СлужебнаяИнформация.Вставить("ДатаВыгрузки"		, ТекущаяДата());
	ВыгружаемыеНастройки.СлужебнаяИнформация.Вставить("ВерсияПлагина"		, ВерсияОбработки());
	ВыгружаемыеНастройки.СлужебнаяИнформация.Вставить("ИсточникНастроек"	, "Диадок_Плагин_ИзменениеКонтента");
	ВыгружаемыеНастройки.СлужебнаяИнформация.Вставить("Конфигурация1С"		, Метаданные.Синоним);
	ВыгружаемыеНастройки.СлужебнаяИнформация.Вставить("ВерсияКонфигурации1С", Метаданные.Версия);
	
	ПараметрыЗаписи = Вычислить("Новый ПараметрыЗаписиJSON(, Символы.Таб)");
	НастройкиСериализации = Вычислить("Новый НастройкиСериализацииJSON");
	НастройкиСериализации.ВариантЗаписиДаты = Вычислить("ВариантЗаписиДатыJSON.ЛокальнаяДата");
	НастройкиСериализации.ФорматСериализацииДаты = Вычислить("ФорматДатыJSON.ISO");
	
	ЗаписьJSON = Вычислить("Новый ЗаписьJSON");
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	Выполнить("ЗаписатьJSON(ЗаписьJSON, ВыгружаемыеНастройки, НастройкиСериализации, ""ПреобразованиеЗаписиJSON"", ЭтотОбъект)");
	
	Результат = ЗаписьJSON.Закрыть();
		
	Возврат Результат;

КонецФункции

Функция ЗагрузитьНастройкиИзJSON(ТекстФайла) Экспорт
	
	Чтение = Вычислить("Новый ЧтениеJSON");
	Чтение.УстановитьСтроку(ТекстФайла);
	Результат = Вычислить("ПрочитатьJSON(Чтение, Ложь)");
	
	СохраненнаяСтруктура = ПреобразоватьСсылочныеТипыИзJSON(Результат);
	
	Если Не СохраненнаяСтруктура.Свойство("Настройки") Тогда
		ВызватьИсключение "Некорректный формат настроек. Возможно, они были выгружены версией плагина старше, чем 0.7.0.";
	КонецЕсли;
	
	Результат = СохраненнаяСтруктура.Настройки;
	
	Возврат Результат;

КонецФункции

Функция ПреобразоватьСсылочныеТипыИзJSON(ЗНАЧ Элемент)

	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		
		Если Элемент.Свойство("ЭтоСсылка")
			И Элемент.Свойство("Значение") Тогда
			Элемент = ЗначениеИзСтрокиВнутр(Элемент.Значение);
		Иначе
			
			Для Каждого КлючИЗначение Из Элемент Цикл
				Элемент.Вставить(КлючИЗначение.Ключ, ПреобразоватьСсылочныеТипыИзJSON(КлючИЗначение.Значение));
			КонецЦикла;	
			
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
		
		Для Сч = 0 По Элемент.ВГраница() Цикл
			Элемент[Сч] = ПреобразоватьСсылочныеТипыИзJSON(Элемент[Сч]);
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПреобразованиеЗаписиJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ЭтоСсылка",		Истина);
		Результат.Вставить("Представление",	Строка(Значение));
		Результат.Вставить("Значение",		ЗначениеВСтрокуВнутр(Значение));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//} Сохранение настроек в файл


// Программный интерфейс

// Возвращает версию плагина
//
// Возвращаемое значение:
//  Строка - версия плагина
//
Функция ВерсияОбработки() Экспорт
	
	Возврат "1.3.2";
	
КонецФункции

// Описание плагина
//
// Возвращаемое значение:
//  Структура - содержит поля:
//
//   * ИмяПлагина - Строка - имя обработки;
//   * Наименование - Строка - синоним обработки;
//
//   * Описание - Строка - краткое описание из макета;
//   * АдресСправки - Строка - полное описанием плагина в Контур.Справке;
//
//   * Расположение - Структура - см. Новый_РасположениеПлагина();
//
//   * Версия - Строка - версия плагина;
//   * ДатаПубликации - Дата - дата публикации в сервисе;
//
//   * Ошибки - Массив - содержит структуры, см. Новый_ОшибкаПлагина();
//   * События - Массив - содержит имена событий, которые плагин может обработать;
//
//   * Загружен - Булево - Истина, если файл плагина загружен в базу;
//   * Включен - Булево - Истина, если плагин используется;
//   * Рекомендован - Булево - Истина, если плагин рекомендован к использованию;
//   * Экспериментальный - Булево - Истина, если это бета-версия плагина;
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		Метаданные().Синоним);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			ВерсияОбработки());
	ПараметрыРегистрации.Вставить("Информация", 		"Диадок: плагин для изменения контента исходящих документов");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

// Возвращает минимальную версию основного модуля, с которым умеет работать данный плагин
//
// Возвращаемое значение:
//  Строка - версия основного модуля
//
Функция ВерсияОсновногоМодуля() Экспорт
	
	Возврат "4.8.30";
	
КонецФункции

Функция МанифестПлагина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", 	Метаданные().Имя);
	Результат.Вставить("Представление", 	Метаданные().Синоним);
	Результат.Вставить("Проект",			"Diadoc");
	Результат.Вставить("Версия",			ВерсияОбработки());
	Результат.Вставить("Описание",			ПолучитьМакет("ОписаниеПлагина").ПолучитьТекст());
	Результат.Вставить("СсылкаНаСправку",	Метаданные().Комментарий);
	Результат.Вставить("События",			СобытияПлагина());
	Результат.Вставить("ЕстьНастройки",		Истина);
	Результат.Вставить("ПараметрыПроекта",	Неопределено); // для кастомных полей проектов?

	Возврат Результат;
	
КонецФункции

// Возвращает события, которые умеет обрабатывать плагин
//
// Возвращаемое значение:
//  Массив из Строка - элементы названия событий плагина
//
Функция СобытияПлагина() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ПодготовитьЭлектронныйДокумент");
	Результат.Добавить("ВыполнитьСценарийВПесочнице");
	Результат.Добавить("ВалидацияДокумента");
	
	Возврат Результат;
	
КонецФункции

Функция ПротестироватьПлагин() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Успешно",				Истина);
	Результат.Вставить("ТребуетсяНастройка",	Ложь);
	Результат.Вставить("ОписаниеОшибки",		"");
	
	Возврат Результат;	
	
КонецФункции

Функция ЭДО_ВерсияAPIПодключаемогоМодуля() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ОткрытьФормуНастроек(ВызывающийМодуль) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФормаНастроек = ПолучитьФорму("Настройки_Обычная");
		ФормаНастроек.Инициализировать(ВызывающийМодуль);
		ФормаНастроек.ОткрытьМодально();
	
	#КонецЕсли

КонецФункции

// Программный интерфейс


//{ Служебные методы

Процедура ЖурналРегистрации_ЗаписатьПредупреждение(ВидОперации, ТекстОшибки)
	
	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ОбъектМетаданных = Неопределено;
	Данные = Неопределено;
	
	ЗаписьЖурналаРегистрации(
		ВидОперации,
		Уровень,
		ОбъектМетаданных,
		Данные,
		ТекстОшибки
	);
	
КонецПроцедуры

//} Служебные методы


//{ Метрики

Процедура Метрика_ДобавитьСтатистику_ПодготовитьЭлектронныйДокумент(ПравилоПлагина)
	
	ДействияМетрики = Метрика_НазванияДействий();
	МанифестПлагина = МанифестПлагина();
	
	ПеременныеМетрики = Метрика_ПеременныеСтатистики_ПодготовитьЭлектронныйДокумент(ПравилоПлагина);
	
	Метрика = НовыйПараметрыМетрики_Статистика();
	Метрика.ИдентификаторПлагина = МанифестПлагина.Идентификатор;
	Метрика.Действие = ДействияМетрики.Заполнение_ИзменениеКонтента;
	Метрика.ИдентификаторТрассировки = Метрика_ИдентификаторТрассировки();
	Метрика.Переменные = ПеременныеМетрики;
	
	Метрика_ЗаписатьСтатистику(Метрика);
	
КонецПроцедуры

Функция Метрика_ПеременныеСтатистики_ПодготовитьЭлектронныйДокумент(ПравилоПлагина)
	
	Результат = Новый Соответствие;
	
	ИмяСценария = ПравилоПлагина.ИмяСценария;
	ТипыДокументов = ПравилоПлагина.ТипыДокументов;
	ТипФильтраКонтрагентов = ПравилоПлагина.ТипФильтраКонтрагентов;
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("ИмяСценария", ИмяСценария);
	ДанныеСценария.Вставить("ТипыДокументов", ТипыДокументов);
	ДанныеСценария.Вставить("ТипФильтраКА", ТипФильтраКонтрагентов);
	
	Результат.Вставить("Настройка", ДанныеСценария);
	
	Возврат Результат;
	
КонецФункции

Процедура Метрика_ЗаписатьСтатистику(Метрика)
	
	ИмяКоманды_ДобавитьСтатистику = "Метрики_ЗаписатьСтатистику";
	
	ОбработатьСлужебнуюКоманду(
		ИмяКоманды_ДобавитьСтатистику,
		Метрика
	);
	
КонецПроцедуры

Процедура Метрика_ЗаписатьПоведение(Метрика)
	
	ИмяКоманды_ДобавитьСтатистику = "Метрики_ЗаписатьПоведение";
	
	ОбработатьСлужебнуюКоманду(
		ИмяКоманды_ДобавитьСтатистику,
		Метрика
	);
	
КонецПроцедуры

Процедура ОбработатьСлужебнуюКоманду(ИмяКоманды, ПараметрыКоманды)
	
	Попытка
		
		ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду(
			ИмяКоманды,
			ПараметрыКоманды
		);
		
	Исключение
		
		МанифестПлагина = МанифестПлагина();
		
		ВидОперации = МанифестПлагина.Идентификатор;
		ТекстОшибки = ОписаниеОшибки();
		
		ЖурналРегистрации_ЗаписатьПредупреждение(
			ВидОперации,
			ТекстОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйПараметрыМетрики_Статистика()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПлагина", Неопределено);
	Результат.Вставить("Действие", Неопределено);
	Результат.Вставить("ИдентификаторТрассировки", Неопределено);
	Результат.Вставить("Переменные", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыМетрики_Поведение()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПлагина", Неопределено);
	Результат.Вставить("Действие", Неопределено);
	Результат.Вставить("ИдентификаторТрассировки", Неопределено);
	Результат.Вставить("Переменные", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция Метрика_НазванияДействий()
	
	Результат = Новый Структура;
	Результат.Вставить("Создание_ИзменениеКонтента", "Создание_ИзменениеКонтента");
	Результат.Вставить("Заполнение_ИзменениеКонтента", "Заполнение_ИзменениеКонтента");
	
	Возврат Результат;
	
КонецФункции

Функция Метрика_ИдентификаторТрассировки()
	
	Результат = TraceId;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		TraceId = "БиблиотекаПлагинов_" + Новый УникальныйИдентификатор;
		
		Результат = TraceId;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//} Метрики
