&НаСервере
Перем КэшМодуляОбъекта;

&НаКлиенте
Перем КэшОсновногоМодуля;


//{ Программный интерфейс

&НаКлиенте
Функция ОсновнойМодуль() Экспорт
	
	Если КэшОсновногоМодуля = Неопределено Тогда 
		КэшОсновногоМодуля = ВладелецФормы;
	КонецЕсли;
	
	Возврат КэшОсновногоМодуля;
	
КонецФункции

&НаСервере
Функция МодульОбъекта()
	
	Если КэшМодуляОбъекта = Неопределено Тогда
		КэшМодуляОбъекта = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат КэшМодуляОбъекта;
	
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)

	СтруктураНастроек = НастройкиПлагинаВСтруктуру();
	ЗаписатьНастройкиПлагина(СтруктураНастроек);
	ЭтаФорма.Модифицированность = Ложь;
	
	Метрика_ДобавитьПоведение_СоранениеНастроек();
	Метрика_ДобавитьСтатистику_СохранениеНастроек(СтруктураНастроек.Правила);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПлагина(Настройки)

	Идентификатор = ПолучитьИдентификаторПлагина();
	
	ПараметрыСобытия = Новый Структура("Идентификатор, Настройки, Результат", Идентификатор, Настройки);
	ОсновнойМодуль().КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагин_СохранитьНастройки", ПараметрыСобытия);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИдентификаторПлагина = ОбработкаОбъект.Метаданные().Имя;
	ПоказатьОтладочныйДокумент();
	
	ЭтаФорма.Заголовок = МодульОбъекта().Метаданные().Синоним + " \ " + МодульОбъекта().ВерсияОбработки();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторПлагина()
	
	Манифест = МодульОбъекта().МанифестПлагина();
	Возврат Манифест.Идентификатор;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Настройки = ПрочитатьНастройкиПлагина();
	ПрименитьНастройкиПлагинаНаФормеНаСервере(Настройки);
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьНастройкиПлагина()

	Результат = Неопределено;
	
	Идентификатор = ПолучитьИдентификаторПлагина();
	
	ПараметрыСобытия = Новый Структура("Идентификатор, Результат", Идентификатор);
	ОсновнойМодуль().КонтурПлагины_ОбработатьСлужебнуюКоманду("Плагин_ПолучитьНастройки", ПараметрыСобытия);
	
	Если ПараметрыСобытия.Результат.Успешно Тогда
		Результат = ПараметрыСобытия.Результат.Данные;
	КонецЕсли;
	
    Возврат Результат;
	
КонецФункции // ПрочитатьНастройкиПлагина()

//} Программный интерфейс


//{ Бизнес-логика

&НаКлиенте
Функция НастройкиПлагинаВСтруктуру()

	Результат = Новый Структура();
	
	Результат.Вставить("ЗапомнитьПоследнийДокументДляОтладки", ЗапомнитьПоследнийДокументДляОтладки);
	Результат.Вставить("Правила", ТаблицаАлгоритмовВМассивСтруктур(ЭтаФорма.Правила));
	
	Возврат Результат;

КонецФункции // НастройкиПлагинаВСтруктуру()

&НаКлиенте
Функция ТаблицаАлгоритмовВМассивСтруктур(ТаблицаФормы)

	Результат = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
	
		Правило = КонтрактСценария();
		
		ЗаполнитьЗначенияСвойств(Правило, СтрокаТаблицы, , "Контрагенты, ТипыДокументов");
		Правило.ТипыДокументов	= СтрокаТаблицы.ТипыДокументов.ВыгрузитьЗначения();
		Правило.Контрагенты		= СтрокаТаблицы.Контрагенты.ВыгрузитьЗначения();
		
		Результат.Добавить(Правило);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ТаблицаВМассивСтруктур()

&НаСервере
Процедура ПрименитьНастройкиПлагинаНаФормеНаСервере(Настройки)

	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Правила.Очистить();
	
	Настройки.Свойство("ЗапомнитьПоследнийДокументДляОтладки", ЗапомнитьПоследнийДокументДляОтладки);
	
	Если Настройки.Свойство("Правила") Тогда
	
		Для Каждого Правило Из Настройки.Правила Цикл
			
			НовСтрока = ЭтаФорма.Правила.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Правило, , "Контрагенты, ТипыДокументов");
			
			НовСтрока.ТипыДокументов = МассивВСписокЗначенийНаСервере(Правило.ТипыДокументов);
			НовСтрока.Контрагенты = МассивВСписокЗначенийНаСервере(Правило.Контрагенты);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = КонтрактСценария();
	ТекДанные = Элементы.Правила.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекДанные);
	
	ОткрытьФормуРедактированияСценария(ПараметрыФормы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция КонтрактСценария() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("ИмяСценария",					"");
	Результат.Вставить("Описание",						"");
	Результат.Вставить("ВыполняемыйКод",				"");
	Результат.Вставить("ТипыДокументов",				Новый Массив);
	Результат.Вставить("ТипФильтраКонтрагентов",		"");
	Результат.Вставить("Контрагенты",					Новый Массив);
	Результат.Вставить("ВизуальнаяНастройка",			Ложь);
	Результат.Вставить("ПараметрыВизуальнойНастройки",	Неопределено);
	Результат.Вставить("ВариантыСценариев",				Новый Массив);
	Возврат Результат;

КонецФункции // КонтрактСценария()

&НаКлиенте
Процедура ПравилаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСценарийПослеВыбора", ЭтаФорма);
	СЗ = ДоступныеСценарии();
	СЗ.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите сценарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСценарийПослеВыбора(Результат, ДопПараметры = Неопределено) Экспорт

	Если Результат <> Неопределено Тогда
		
		ПустойСценарий = КонтрактСценария();
		ПустойСценарий.ИмяСценария = Результат.Значение;
		ОткрытьФормуРедактированияСценария(ПустойСценарий, Истина);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПравилаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекстВопроса = "Удаление правила невозможно отменить. Продолжить?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПравилаПередУдалениемЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Правила.Удалить(Элементы.Правила.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСценария(Сценарий, РежимДобавления)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Сценарий", Сценарий);
	ПараметрыФормы.Вставить("РежимДобавления", РежимДобавления);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияСценария", ЭтаФорма, РежимДобавления);
	
	ИмяОткрываемойФормы = "ВнешняяОбработка." + ИдентификаторПлагина + ".Форма.НастройкаАлгоритма";
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияСценария(РезультатЗакрытия, РежимДобавления) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ЭтаФорма.Модифицированность = Истина;
	
	Если РежимДобавления Тогда
		ТекДанные = Правила.Добавить();
	Иначе
		ТекДанные = Элементы.Правила.ТекущиеДанные;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекДанные, РезультатЗакрытия, , "Контрагенты, ТипыДокументов");
	
	ТекДанные.Контрагенты = МассивВСписокЗначений(РезультатЗакрытия.Контрагенты);
	ТекДанные.ТипыДокументов = МассивВСписокЗначений(РезультатЗакрытия.ТипыДокументов);
	
	ИмяСценария = РезультатЗакрытия.ИмяСценария;
	ТипыДокументов = РезультатЗакрытия.ТипыДокументов;
	ТипФильтраКонтрагентов = РезультатЗакрытия.ТипФильтраКонтрагентов;
	
	Метрика_ДобавитьСтатистику_ДобавлениеПравила(
		ИмяСценария,
		ТипыДокументов,
		ТипФильтраКонтрагентов
	);
	
	Метрика_ДобавитьПоведение_ДобавлениеПравила();
	
КонецПроцедуры

&НаСервере
Функция ДоступныеСценарии()

	Возврат МодульОбъекта().ДоступныеСценарии();
	
КонецФункции // ДоступныеСценарии()

//} Бизнес-логика


//{ События и команды формы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЭтаФорма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), "Измененные настройки не сохранены. Все равно закрыть?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказатьОтладочныйДокумент()
	
	ОтладочныеДанные = МодульОбъекта().ПрочитатьОтладочныеДанные();
	
	Если ТипЗнч(ОтладочныеДанные) = Тип("Структура") Тогда
		ОтладочныеДанные.Свойство("ДокументСсылка", ЭтаФорма.ОтладочныйДокумент);
		ОтладочныеДанные.Свойство("ТипДокумента", ЭтаФорма.ОтладочныйТипДокумента);
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтладочныеДанные(Команда)
	ПоказатьОтладочныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "JSON|*.json";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")
		И ВыбранныеФайлы.Количество() = 1 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
		ТекстФайла = ТД.ПолучитьТекст();
		
		ЗагрузитьНастройкиИзФайлаНаСервере(ТекстФайла);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзФайлаНаСервере(ТекстФайла)
	
	Настройки = МодульОбъекта().ЗагрузитьНастройкиИзJSON(ТекстФайла);
	
	Для Каждого Правило Из Настройки.Правила Цикл
						
		Если Правило.Свойство("ТипыДокументов") Тогда	
			Правило.ТипыДокументов	= МассивВСписокЗначенийНаСервере(Правило.ТипыДокументов);
		Иначе
			ТипыДокументов = Новый Массив;
			ТипыДокументов.Добавить("СФ");
			ТипыДокументов.Добавить("УПД");
			ТипыДокументов.Добавить("ИУПД");
			ТипыДокументов.Добавить("ТОРГ-12");
			ТипыДокументов.Добавить("УКД");
			Правило.Вставить("ТипыДокументов", ТипыДокументов);
		КонецЕсли;
		
		Если Правило.Свойство("Контрагенты") Тогда
			Правило.Контрагенты	= МассивВСписокЗначенийНаСервере(Правило.Контрагенты);
		Иначе
			Правило.Вставить("ТипФильтраКонтрагентов", "БезФильтра");
			Правило.Вставить("Контрагенты", Новый Массив);
		КонецЕсли;
		
	КонецЦикла;	
	
	ПрименитьНастройкиПлагинаНаФормеНаСервере(Настройки);
	
КонецФункции

&НаСервере
Функция ВыгрузитьНастройкиВФайлНаСервере(Настройки)
	
	Результат = МодульОбъекта().ВыгрузитьНастройкиВJSON(Настройки);
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = "plugin_content_settings";
	Диалог.Фильтр = "JSON|*.json";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьНастройкиВФайлЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")
		И ВыбранныеФайлы.Количество() = 1 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		СтруктураДляJSON = НастройкиПлагинаВСтруктуру();
		Текст = ВыгрузитьНастройкиВФайлНаСервере(СтруктураДляJSON);
		
		Запись = Новый ЗаписьXML;
		Запись.ОткрытьФайл(ИмяФайла, "UTF-8");
		Запись.ЗаписатьБезОбработки(Текст);
		Запись.Закрыть();
		
		ПоказатьПредупреждение(, "Настройки сохранены в файл: " + ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

//} События и команды формы


//{ Служебные методы

&НаСервере
Функция МассивВСписокЗначенийНаСервере(МассивИлиСписок)

	Если ТипЗнч(МассивИлиСписок) = Тип("Массив") Тогда
		
		Результат = Новый СписокЗначений;
		Результат.ЗагрузитьЗначения(МассивИлиСписок);
		
	ИначеЕсли ТипЗнч(МассивИлиСписок) = Тип("СписокЗначений") Тогда
		
		// Для совместимости со старым форматом хранения настроек
		Результат = МассивИлиСписок;
		
	Иначе
		
		ВызватьИсключение "Неверный тип параметра";
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции // МассивВСписокЗначенийНаСервере()

&НаКлиенте
Функция МассивВСписокЗначений(МассивИлиСписок)

	Если ТипЗнч(МассивИлиСписок) = Тип("Массив") Тогда
		
		Результат = Новый СписокЗначений;
		Результат.ЗагрузитьЗначения(МассивИлиСписок);
		
	ИначеЕсли ТипЗнч(МассивИлиСписок) = Тип("СписокЗначений") Тогда
		
		// Для совместимости со старым форматом хранения настроек
		Результат = МассивИлиСписок;
		
	Иначе
		
		ВызватьИсключение "Неверный тип параметра";
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции // МассивВСписокЗначений()

&НаСервере
Процедура ЖурналРегистрации_ЗаписатьПредупреждение(ВидОперации, ТекстОшибки)
	
	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ОбъектМетаданных = Неопределено;
	Данные = Неопределено;
	
	ЗаписьЖурналаРегистрации(
		ВидОперации,
		Уровень,
		ОбъектМетаданных,
		Данные,
		ТекстОшибки
	);
	
КонецПроцедуры

//} Служебные методы


//{ Метрики

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_СоранениеНастроек()

	ДействияМетрики = Метрика_НазванияДействий();
	
	Метрика = НовыйПараметрыМетрики_Поведение();
	Метрика.ИдентификаторПлагина = ИдентификаторПлагина;
	Метрика.Действие = ДействияМетрики.СохранениеНастроек_ИзменениеКонтента;
	Метрика.ИдентификаторТрассировки = Метрика_ИдентификаторТрассировки();
	
	Метрика_ЗаписатьПоведение(Метрика);	
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_СохранениеНастроек(ВсеПравила)
	
	ДействияМетрики = Метрика_НазванияДействий();
	
	Для Каждого ТекущееПравило Из ВсеПравила Цикл
		
		Если ТекущееПравило.ИмяСценария <> "ЗаполнениеСуммыАкциза" Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыДокументов 		= ТекущееПравило.ТипыДокументов;
		ВизуальнаяНастройка = ТекущееПравило.ВизуальнаяНастройка;
		
		ПараметрыВизуальнойНастройки = ТекущееПравило.ПараметрыВизуальнойНастройки;
		
		ПеременныеМетрики = Метрика_ПеременныеСтатистики_СохранениеНастроек_ЗаполнениеСуммыАкциза(ТипыДокументов, ВизуальнаяНастройка, ПараметрыВизуальнойНастройки);
		
		Метрика = НовыйПараметрыМетрики_Статистика();
		
		Метрика.ИдентификаторПлагина 		= ИдентификаторПлагина;
		Метрика.Действие 					= ДействияМетрики.СохранениеНастроек_ИзменениеКонтента;
		Метрика.ИдентификаторТрассировки 	= Метрика_ИдентификаторТрассировки();
		Метрика.Переменные 					= ПеременныеМетрики;
		
		Метрика_ЗаписатьСтатистику(Метрика);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ПеременныеСтатистики_СохранениеНастроек_ЗаполнениеСуммыАкциза(ТипыДокументов, ВизуальнаяНастройка, ПараметрыВизуальнойНастройки)
	
	ОтборПодакцизногоТовара	= ПараметрыВизуальнойНастройки.ПризнакПодакцизногоТовара_ПараметрыСКД.Отбор.Элементы;
	ПравилаЗаполнения_УПД 	= ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза;
	ПравилаЗаполнения_УКД 	= ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза_Корректировка;
	
	ТекущийУровеньРекурсии 			= 0;
	ЕстьОтборПоПодакцизномуТовару 	= ЕстьИспользуемыеЭлементыОтбораСКД_Рекурсивно(ОтборПодакцизногоТовара, ТекущийУровеньРекурсии);
			
	ЕстьПризнакПоДокументу = Ложь;
	
	Для Каждого ЭлементКоллекции Из ПравилаЗаполнения_УПД Цикл
		
		Если ЕстьПризнакПоДокументу Тогда
			Прервать;
		КонецЕсли;
		
		ЕстьПризнакПоДокументу = ЗначениеЗаполнено(ЭлементКоллекции.ПризнакПоДокументу_СпособЗаполнения)
								И ЗначениеЗаполнено(ЭлементКоллекции.ПризнакПоДокументу_Параметр);	
		
	КонецЦикла;
						
	Для Каждого ЭлементКоллекции Из ПравилаЗаполнения_УКД Цикл
		
		Если ЕстьПризнакПоДокументу Тогда
			Прервать;
		КонецЕсли;
		
		ЕстьПризнакПоДокументу = ЗначениеЗаполнено(ЭлементКоллекции.ПризнакПоДокументу_СпособЗаполнения)
								И ЗначениеЗаполнено(ЭлементКоллекции.ПризнакПоДокументу_Параметр);	
		
	КонецЦикла;					
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("ИмяСценария"					, XMLСтрока("ЗаполнениеСуммыАкциза"));
	Результат.Вставить("ТипыДокументов"					, ТипыДокументов);
	Результат.Вставить("ВизуальнаяНастройка"			, ВизуальнаяНастройка);
	Результат.Вставить("ЕстьПризнакПоДокументу"			, ЕстьПризнакПоДокументу);
	Результат.Вставить("ЕстьОтборПоПодакцизномуТовару"	, ЕстьОтборПоПодакцизномуТовару);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЕстьИспользуемыеЭлементыОтбораСКД_Рекурсивно(КоллекцияЭлементов, ТекущийУровеньРекурсии)
	
	Результат = Ложь;
	
	ТекущийУровеньРекурсии 		= ТекущийУровеньРекурсии + 1;
	МаксимальныйУровеньРекурсии = 10;
	
	Если ТекущийУровеньРекурсии >= МаксимальныйУровеньРекурсии Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ЕстьИспользуемыеЭлементыОтбораСКД_Рекурсивно(ЭлементКоллекции.Элементы, ТекущийУровеньРекурсии);
		Иначе
			Результат = ЭлементКоллекции.Использование;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьСтатистику_ДобавлениеПравила(ИмяСценария, ТипыДокументов, ТипФильтраКонтрагентов)
	
	ДействияМетрики = Метрика_НазванияДействий();
	
	ПеременныеМетрики = Метрика_ПеременныеСтатистики_ДобавлениеПравила(ИмяСценария, ТипыДокументов, ТипФильтраКонтрагентов);
	
	Метрика = НовыйПараметрыМетрики_Статистика();
	Метрика.ИдентификаторПлагина = ИдентификаторПлагина;
	Метрика.Действие = ДействияМетрики.Создание_ИзменениеКонтента;
	Метрика.ИдентификаторТрассировки = Метрика_ИдентификаторТрассировки();
	Метрика.Переменные = ПеременныеМетрики;
	
	Метрика_ЗаписатьСтатистику(Метрика);
	
КонецПроцедуры

&НаКлиенте
Функция Метрика_ПеременныеСтатистики_ДобавлениеПравила(ИмяСценария, ТипыДокументов, ТипФильтраКонтрагентов)
	
	Результат = Новый Соответствие;
	Результат.Вставить("ИмяСценария", XMLСтрока(ИмяСценария));
	Результат.Вставить("ТипыДокументов", ТипыДокументов);
	Результат.Вставить("ТипФильтраКА", XMLСтрока(ТипФильтраКонтрагентов));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Метрика_ДобавитьПоведение_ДобавлениеПравила()
	
	ДействияМетрики = Метрика_НазванияДействий();
	
	Метрика = НовыйПараметрыМетрики_Поведение();
	Метрика.ИдентификаторПлагина = ИдентификаторПлагина;
	Метрика.Действие = ДействияМетрики.Создание_ИзменениеКонтента;
	Метрика.ИдентификаторТрассировки = Метрика_ИдентификаторТрассировки();
	
	Метрика_ЗаписатьПоведение(Метрика);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьСтатистику(Метрика)
	
	ИмяКоманды_ДобавитьСтатистику = "Метрики_ЗаписатьСтатистику";
	
	ОбработатьСлужебнуюКоманду(
		ИмяКоманды_ДобавитьСтатистику,
		Метрика
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрика_ЗаписатьПоведение(Метрика)
	
	ИмяКоманды_ДобавитьСтатистику = "Метрики_ЗаписатьПоведение";
	
	ОбработатьСлужебнуюКоманду(
		ИмяКоманды_ДобавитьСтатистику,
		Метрика
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСлужебнуюКоманду(ИмяКоманды, ПараметрыКоманды)
	
	ОсновнойМодуль = ОсновнойМодуль();
	
	Попытка
		
		ОсновнойМодуль.КонтурПлагины_ОбработатьСлужебнуюКоманду(
			ИмяКоманды,
			ПараметрыКоманды
		);
		
	Исключение
		
		ВидОперации = ИдентификаторПлагина;
		ТекстОшибки = ОписаниеОшибки();
		
		ЖурналРегистрации_ЗаписатьПредупреждение(
			ВидОперации,
			ТекстОшибки
		);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПараметрыМетрики_Статистика()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПлагина", Неопределено);
	Результат.Вставить("Действие", Неопределено);
	Результат.Вставить("ИдентификаторТрассировки", Неопределено);
	Результат.Вставить("Переменные", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыйПараметрыМетрики_Поведение()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПлагина", Неопределено);
	Результат.Вставить("Действие", Неопределено);
	Результат.Вставить("ИдентификаторТрассировки", Неопределено);
	Результат.Вставить("Переменные", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_НазванияДействий()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Создание_ИзменениеКонтента"				, "Создание_ИзменениеКонтента");
	Результат.Вставить("Заполнение_ИзменениеКонтента"			, "Заполнение_ИзменениеКонтента");
	Результат.Вставить("СохранениеНастроек_ИзменениеКонтента"	, "СохранениеНастроек_ИзменениеКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Метрика_ИдентификаторТрассировки()
	
	Результат = TraceId;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		TraceId = "БиблиотекаПлагинов_" + Новый УникальныйИдентификатор;
		
		Результат = TraceId;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//} Метрики
