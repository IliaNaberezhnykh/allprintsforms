&НаСервере
перем ОбработкаОбъект;

&НаСервере
Функция ОбработкаОбъект()

	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;

КонецФункции // ОбработкаОбъект()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВариантыФильтраКонтрагентов = ОбработкаОбъект().ВариантыФильтраКонтрагентов();  // кэшируем на клиенте и сервере
	
	ИнициализироватьСхемуКомпоновкиДанныхОтбораНоменклатуры();
		
	ЗаполнитьФормуДаннымиСценарияПриСоздании(Параметры);
	НастроитьЭлементыУправленияНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуКомпоновкиДанныхОтбораНоменклатуры()
	
	СхемаКомпоновки = ОбработкаОбъект().СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров();
	
	КоллекцияПолейКомпоновкиДанных = СхемаКомпоновки.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
					
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	КомпоновщикНастроекОтборНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	
	КомпоновщикНастроекОтборНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидимостьФильтраКонтрагентов();
	НастроитьВидимостьСтраниц();

	ПараметрыСценарияОСУ_НастроитьПолеПараметрПризнакВывода();
					
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыУправленияНаСервере()

	ОписаниеСценария = ОбработкаОбъект().ОписаниеСценария(ИмяСценария);
	
	Если Не ЗначениеЗаполнено(ВыполняемыйКод) Тогда    
		Элементы.СтраницаПроизвольныйКод.Видимость = Ложь;
	КонецЕсли;	
	
	ОписаниеПеременных = ОписаниеСценария.ОписаниеПеременных;
	ОписаниеРезультата = ОписаниеСценария.ОписаниеРезультата;
	
	СправочникФункций = ОбработкаОбъект().ПолучитьМакет("СправочникФункций");
	
	Элементы.ТипыДокументовЗначение.СписокВыбора.ЗагрузитьЗначения(ОписаниеСценария.ДоступныеТипыДокументов);
	
	// настроить список выбора для переключателя фильтра контрагентов
	Элементы.ТипФильтраКонтрагентов.СписокВыбора.Очистить();
	Для каждого КлючИЗначение Из ВариантыФильтраКонтрагентов Цикл
		Элементы.ТипФильтраКонтрагентов.СписокВыбора.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеСценария.ИмяЗакладки_ВизуальнаяНастройка) Тогда
		Элементы.ВизуальнаяНастройка.Видимость = Истина;
		ИмяЗакладки_ВизуальнаяНастройка = ОписаниеСценария.ИмяЗакладки_ВизуальнаяНастройка;
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ОписаниеСценария.ВариантыСценариев) Тогда   
		
		Для Каждого ИмяВариантаСценариев Из ОписаниеСценария.ВариантыСценариев Цикл  
			НаименованиеСценария	= СтрЗаменить(ИмяВариантаСценариев, "_","");
			ПредставлениеСценария	= СтрЗаменить(ИмяВариантаСценариев, "_"," "); 
			Элементы.ПараметрСценария_КодТовара_Имя.СписокВыбора.Добавить(НаименованиеСценария, ПредставлениеСценария);
		КонецЦикла;      
		
		Если Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") = Неопределено Тогда 
			
			НайденныйЭлемент = Элементы.ПараметрСценария_КодТовара_Имя.СписокВыбора.НайтиПоЗначению("РеквизитХарактеристики");
			Если НайденныйЭлемент <> Неопределено Тогда
				Элементы.ПараметрСценария_КодТовара_Имя.СписокВыбора.Удалить(НайденныйЭлемент);
			КонецЕсли;     
			
		КонецЕсли;  
		
	КонецЕсли;
	
	//+ ОСУ
	СписокВыбора = Элементы.ЗаполнениеКодовОСУ_КолонкаТаблицыТоваров.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ОбработкаОбъект().ОСУ_ЗаполняемыеКолонкиТаблицыТоваров());
	
	СписокВыбора = Элементы.ЗаполнениеКодовОСУ_СпособЗаполнения.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ОбработкаОбъект().ОСУ_ИсточникиЗаполненияТаблицыТоваров() Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	//- ОСУ
	
	НастроитьЭлементыУправления_ЗаполнениеСуммыАкциза();
	
	ТипизироватьПоля();
	
	// В конфигураторе видимость всех элементов включена по умолчанию для удобства разработки.
	// Видимость неиспользуемых элементов отключается здесь.
	Для Каждого Элемент Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "СтраницаВизуальнаяНастройка_") = 1 Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыУправления_ЗаполнениеСуммыАкциза()
	
	Если ИмяСценария <> "ЗаполнениеСуммыАкциза" Тогда
		Возврат;
	КонецЕсли;
	
	ПоддерживаемыеДокументыРеализации = ОбработкаОбъект().Акцизы_ПоддерживаемыеДокументыРеализации();
	ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеДокументИБ(ПоддерживаемыеДокументыРеализации);
	
	ПоддерживаемыеДокументыКорректировки = ОбработкаОбъект().Акцизы_ПоддерживаемыеДокументыКорректировки();
	ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеДокументИБ(ПоддерживаемыеДокументыКорректировки);
	
	ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеСпособЗаполнения();
	ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеСпособЗаполнения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСправочникаУпаковки()
	
	Результат = Неопределено;
	
	Если Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") <> Неопределено Тогда
		Результат = "УпаковкиЕдиницыИзмерения";
	ИначеЕсли Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено Тогда
		Результат = "ЕдиницыИзмерения";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяСправочникаДоговоры()
	
	Результат = Неопределено;
	
	Если Метаданные.Справочники.Найти("Договоры") <> Неопределено Тогда
		Результат = "Договоры";
	ИначеЕсли Метаданные.Справочники.Найти("ДоговорыКонтрагентов") <> Неопределено Тогда
		Результат = "ДоговорыКонтрагентов";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура ТипизироватьПоля()

	НастроитьПолеВыбораНаСервере(Элементы.КонтрагентыЗначение, "СправочникСсылка.Контрагенты");
	
	НастроитьПолеВыбораНаСервере(Элементы.ПараметрыСценария_ИнфополяШапкиСсылка,				"ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	НастроитьПолеВыбораНаСервере(Элементы.ПараметрыСценария_ИнфополяТабличнойЧастиСсылка,		"ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");

	ИнициализоватьСценарийКодТовара();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьФормуДаннымиСценарияПриСоздании(Параметры)

	Параметры.Сценарий.Свойство("ИмяСценария",				ИмяСценария);
	Параметры.Сценарий.Свойство("Описание",					Описание);
	Параметры.Сценарий.Свойство("ВыполняемыйКод",			ВыполняемыйКод);
	Параметры.Сценарий.Свойство("ТипФильтраКонтрагентов",	ТипФильтраКонтрагентов);
	Параметры.Сценарий.Свойство("ВизуальнаяНастройка",		ВизуальнаяНастройка);
	
	ЗагрузитьВизуальнуюНастройкуСценария(Параметры.Сценарий.ПараметрыВизуальнойНастройки);
	
	ТипыДокументов = Параметры.Сценарий.ТипыДокументов;
	Контрагенты = Параметры.Сценарий.Контрагенты;  
	
	ВариантыСценариев = Параметры.Сценарий.ВариантыСценариев; 
	
	Если Параметры.РежимДобавления Тогда
		
		// заполним основные поля по умолчанию
		ОписаниеСценария = ОбработкаОбъект().ОписаниеСценария(ИмяСценария);
		ВыполняемыйКод = ОписаниеСценария.ПримерКода;
		
		Для Каждого ИмяТипаДокумента Из ОписаниеСценария.ДоступныеТипыДокументов Цикл
			ТипыДокументов.Добавить(ИмяТипаДокумента);
		КонецЦикла;  
		Для Каждого ИмяВариантаСценария Из ОписаниеСценария.ВариантыСценариев Цикл
			ВариантыСценариев.Добавить(ИмяВариантаСценария);
		КонецЦикла;
		
		ТипФильтраКонтрагентов = ВариантыФильтраКонтрагентов.БезФильтра.Значение;
		
		Если ЗначениеЗаполнено(ОписаниеСценария.ПримерКода) 
			И ЗначениеЗаполнено(ОписаниеСценария.ИмяЗакладки_ВизуальнаяНастройка) Тогда
			
			ВизуальнаяНастройка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВизуальнуюНастройкуСценария(ПараметрыВизуальнойНастройки)

	Если ТипЗнч(ПараметрыВизуальнойНастройки) <> Тип("Структура") Тогда
		Возврат;  // не были сохранены
	КонецЕсли;	
	
	Если ИмяСценария = "ДополнительныеСведения" Тогда
		
		Если ПараметрыВизуальнойНастройки.Свойство("ИнфополяШапки") Тогда
			МассивСтруктурВТаблицуФормы(ПараметрыВизуальнойНастройки.ИнфополяШапки, "ПараметрыСценария_ИнфополяШапки");
		КонецЕсли;
		
		Если ПараметрыВизуальнойНастройки.Свойство("ИнфополяТабличнойЧасти") Тогда
			МассивСтруктурВТаблицуФормы(ПараметрыВизуальнойНастройки.ИнфополяТабличнойЧасти, "ПараметрыСценария_ИнфополяТабличнойЧасти");
		КонецЕсли; 
		
	ИначеЕсли ИмяСценария = "КодТовара" Тогда
		
		 ПараметрыВизуальнойНастройки.Свойство("ВыбранныйСценарийИмя",		ПараметрСценария_КодТовара_Имя);
		 ПараметрыВизуальнойНастройки.Свойство("ВыбранныйСценарийСсылка", 	ПараметрСценария_КодТовара_Ссылка);
		 
	ИначеЕсли ИмяСценария = "УступочнаяНадпись" Тогда
		
		ПараметрСценария_УступочнаяНадпись_Текст = ПараметрыВизуальнойНастройки.УступочнаяНадпись_Текст;
		
	ИначеЕсли ИмяСценария = "ЗаполнениеКодовОСУ" Тогда
		
		Если ПараметрыВизуальнойНастройки.Свойство("ПараметрыЗаполненияКодовОСУ") Тогда
			МассивСтруктурВТаблицуФормы(ПараметрыВизуальнойНастройки.ПараметрыЗаполненияКодовОСУ, "ПараметрыСценария_ЗаполнениеКодовОСУ");
		КонецЕсли;	
		
		ПараметрыВизуальнойНастройки.Свойство("ПризнакВывода_Источник", 			ПараметрСценария_ОСУ_ПризнакВывода_Источник);
		ПараметрыВизуальнойНастройки.Свойство("ПризнакВывода_Параметр", 			ПараметрСценария_ОСУ_ПризнакВывода_Параметр);
		ПараметрыВизуальнойНастройки.Свойство("ПризнакВывода_СпособЗаполнения", 	ПараметрСценария_ОСУ_ПризнакВывода_СпособЗаполнения);
		
	ИначеЕсли ИмяСценария = "ЗаполнениеСуммыАкциза" Тогда
		
		ЗагрузитьВизуальнуюНастройкуСценария_ЗаполнениеСуммыАкциза(ПараметрыВизуальнойНастройки);
						
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВизуальнуюНастройкуСценария_ЗаполнениеСуммыАкциза(ПараметрыВизуальнойНастройки)
	
	Если ПараметрыВизуальнойНастройки.Свойство("ПараметрыЗаполненияСуммыАкциза") Тогда
		МассивСтруктурВТаблицуФормы(ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза, "ПараметрыСценария_СуммаАкциза");
	КонецЕсли;
	Если ПараметрыВизуальнойНастройки.Свойство("ПараметрыЗаполненияСуммыАкциза_Корректировка") Тогда
		МассивСтруктурВТаблицуФормы(ПараметрыВизуальнойНастройки.ПараметрыЗаполненияСуммыАкциза_Корректировка, "ПараметрыСценария_СуммаАкциза_Корректировка");
	КонецЕсли;
	
	СхемаКомпоновки = ОбработкаОбъект().СхемаКомпоновкиНастроекОтбораПодакцизныхТоваров();
    	
	НастройкаОтбораНоменклатуры = Неопределено;
	
	ПараметрыВизуальнойНастройки.Свойство("ПризнакПодакцизногоТовара_ПараметрыСКД", НастройкаОтбораНоменклатуры);
	Если НастройкаОтбораНоменклатуры = Неопределено Тогда
		НастройкаОтбораНоменклатуры = СхемаКомпоновки.НастройкиПоУмолчанию;
	КонецЕсли;
	КомпоновщикНастроекОтборНоменклатуры.ЗагрузитьНастройки(НастройкаОтбораНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьОписаниеСценария()

	Результат = ЭтаФорма.ВладелецФормы.КонтрактСценария();
	
	Результат.ИмяСценария					= ИмяСценария;
	Результат.Описание						= Описание;
	Результат.ВыполняемыйКод				= ВыполняемыйКод;
	Результат.ТипыДокументов				= ТипыДокументов.ВыгрузитьЗначения();
	Результат.ТипФильтраКонтрагентов		= ТипФильтраКонтрагентов;
	Результат.Контрагенты					= Контрагенты.ВыгрузитьЗначения();
	Результат.ВизуальнаяНастройка			= ВизуальнаяНастройка;
	Результат.ПараметрыВизуальнойНастройки	= ПараметрыВизуальнойНастройки();
	Результат.ВариантыСценариев				= ВидыСценариевИзмененияКодТовара.ВыгрузитьЗначения();
	Возврат Результат;

КонецФункции // СобратьОписаниеСценария()

&НаКлиенте
Функция ПараметрыВизуальнойНастройки()

	Результат = Новый Структура;
	
	Если ИмяСценария = "ДополнительныеСведения" Тогда
		
		Результат.Вставить("ИнфополяШапки", 			ТаблицаФормыВМассивСтруктур(ПараметрыСценария_ИнфополяШапки));
		Результат.Вставить("ИнфополяТабличнойЧасти", 	ТаблицаФормыВМассивСтруктур(ПараметрыСценария_ИнфополяТабличнойЧасти));
	
	ИначеЕсли ИмяСценария = "КодТовара" Тогда
		
		Результат.Вставить("ВыбранныйСценарийИмя", 		ПараметрСценария_КодТовара_Имя);
		Результат.Вставить("ВыбранныйСценарийСсылка", 	ПараметрСценария_КодТовара_Ссылка);
		
	ИначеЕсли ИмяСценария = "УступочнаяНадпись" Тогда
		
		Результат.Вставить("УступочнаяНадпись_Текст", 		ПараметрСценария_УступочнаяНадпись_Текст);
		
	ИначеЕсли ИмяСценария = "ЗаполнениеКодовОСУ" Тогда
		
		Результат.Вставить("ПараметрыЗаполненияКодовОСУ", 		ТаблицаФормыВМассивСтруктур(ПараметрыСценария_ЗаполнениеКодовОСУ));
		
		Результат.Вставить("ПризнакВывода_Источник", 			ПараметрСценария_ОСУ_ПризнакВывода_Источник);
		Результат.Вставить("ПризнакВывода_Параметр", 			ПараметрСценария_ОСУ_ПризнакВывода_Параметр);
		Результат.Вставить("ПризнакВывода_СпособЗаполнения", 	ПараметрСценария_ОСУ_ПризнакВывода_СпособЗаполнения);
		
	ИначеЕсли ИмяСценария = "ЗаполнениеСуммыАкциза" Тогда
		
		ЗаполнитьПараметрыВизуальнойНастройки_ЗаполнениеСуммыАкциза(Результат);
								
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции // ПараметрыВизуальнойНастройки()

&НаКлиенте
Процедура ЗаполнитьПараметрыВизуальнойНастройки_ЗаполнениеСуммыАкциза(Результат)
	
	Результат.Вставить("ПараметрыЗаполненияСуммыАкциза"					, ТаблицаФормыВМассивСтруктур(ПараметрыСценария_СуммаАкциза));
	Результат.Вставить("ПараметрыЗаполненияСуммыАкциза_Корректировка"	, ТаблицаФормыВМассивСтруктур(ПараметрыСценария_СуммаАкциза_Корректировка));
						
	Результат.Вставить("ПризнакПодакцизногоТовара_ПараметрыСКД", КомпоновщикНастроекОтборНоменклатуры.Настройки);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаФормыВМассивСтруктур(ЗНАЧ Таблица)
	
	Результат = Новый Массив;
	
	ТЗ = Таблица.Выгрузить();
	
	Для Каждого Строка Из ТЗ Цикл
		
		НоваяСтруктура = Новый Структура;
		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			НоваяСтруктура.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(НоваяСтруктура);
		
	КонецЦикла;	

	Возврат Результат;

КонецФункции // ТаблицаФормыВМассивСтруктур()

&НаСервере
Процедура МассивСтруктурВТаблицуФормы(МассивСтруктур, ИмяТаблицы)
	
	Таблица = ЭтаФорма[ИмяТаблицы];
	Таблица.Очистить();
	Для Каждого Элемент Из МассивСтруктур Цикл
		НовСтр = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Элемент);
	КонецЦикла;	
	
КонецПроцедуры


//{ Сохранение настроек в файл

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = "plugin_" + ИмяСценария + "_settings";
	Диалог.Фильтр = "JSON|*.json";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьНастройкиВФайлЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")
		И ВыбранныеФайлы.Количество() = 1 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		СтруктураДляJSON = НастройкиПлагинаВСтруктуру();
		Текст = ВыгрузитьНастройкиВФайлНаСервере(СтруктураДляJSON);
		
		Запись = Новый ЗаписьXML;
		Запись.ОткрытьФайл(ИмяФайла, "UTF-8");
		Запись.ЗаписатьБезОбработки(Текст);
		Запись.Закрыть();
		
		ПоказатьПредупреждение(, "Настройки сохранены в файл: " + ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиПлагинаВСтруктуру()

	Результат = Новый Структура();
	ОписаниеСценария = СобратьОписаниеСценария();
	Правило = Новый Массив;
	Правило.Добавить(ОписаниеСценария);
	Результат.Вставить("Правила", Правило);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция КонтрактСценария() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("ИмяСценария",					"");
	Результат.Вставить("Описание",						"");
	Результат.Вставить("ВыполняемыйКод",				"");
	Результат.Вставить("ТипыДокументов",				Новый Массив);
	Результат.Вставить("ТипФильтраКонтрагентов",		"");
	Результат.Вставить("Контрагенты",					Новый Массив);
	Результат.Вставить("ВизуальнаяНастройка",			Ложь);
	Результат.Вставить("ПараметрыВизуальнойНастройки",	Неопределено);
	Результат.Вставить("ВариантыСценариев",				Новый Массив);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ВыгрузитьНастройкиВФайлНаСервере(Настройки)
	
	Результат = ОбработкаОбъект().ВыгрузитьНастройкиВJSON(Настройки);
	Возврат Результат;

КонецФункции

//} Сохранение настроек в файл

//{ Загрузка настроек из файла

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "JSON|*.json";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")
		И ВыбранныеФайлы.Количество() = 1 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
		ТекстФайла = ТД.ПолучитьТекст();
		
		Если НЕ ЗагрузитьНастройкиИзФайлаНаСервере(ТекстФайла) Тогда
			ПоказатьПредупреждение( , "В файле настроек не найден сценарий " + ИмяСценария);
		Иначе
			НастроитьВидимостьСтраниц();
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзФайлаНаСервере(ТекстФайла)
	
	Настройки = ОбработкаОбъект().ЗагрузитьНастройкиИзJSON(ТекстФайла);
	Результат = Ложь;
	
	Для Каждого Правило Из Настройки.Правила Цикл
		Если НЕ Правило.ИмяСценария = ИмяСценария Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
		ПараметрыСценария = Новый Структура("РежимДобавления, Сценарий", Ложь, Правило);
		Если Правило.Свойство("ТипыДокументов") Тогда
			Если Правило.ТипыДокументов.Количество() > 0 Тогда
				Правило.ТипыДокументов	= МассивВСписокЗначенийНаСервере(Правило.ТипыДокументов);
			Иначе
				ОписаниеСценария = ОбработкаОбъект().ОписаниеСценария(ИмяСценария);
				Для Каждого ИмяТипаДокумента Из ОписаниеСценария.ДоступныеТипыДокументов Цикл
					ТипыДокументов.Добавить(ИмяТипаДокумента);
				КонецЦикла;  
			КонецЕсли;
        КонецЕсли;
		Если Правило.Свойство("Контрагенты") Тогда
			Правило.Контрагенты	= МассивВСписокЗначенийНаСервере(Правило.Контрагенты);
		КонецЕсли;
		ЗаполнитьФормуДаннымиСценарияПриСоздании(ПараметрыСценария);
		НастроитьЭлементыУправленияНаСервере();
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//} Загрузка настроек из файла


&НаКлиенте
Процедура Сохранить(Команда)
	
	ОшибкиНастроек = ПроверитьКорректностьНастроек();
	Если ЗначениеЗаполнено(ОшибкиНастроек) Тогда
		ПоказатьПредупреждение(, ОшибкиНастроек);
		Возврат;
	КонецЕсли;	
	
	РезультатЗакрытия = СобратьОписаниеСценария(); 
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьНастроек()

    Результат = "";
	
	Если ИмяСценария = "ЗаполнениеКодовОСУ" Тогда
		
		УникальныеКолонки = Новый Соответствие;
		Для Каждого Стр Из ПараметрыСценария_ЗаполнениеКодовОСУ Цикл
			УникальныеКолонки.Вставить(Стр.КолонкаТаблицыТоваров, Неопределено);
		КонецЦикла;
		
		Если УникальныеКолонки.Количество() < ПараметрыСценария_ЗаполнениеКодовОСУ.Количество() Тогда
			Результат = "Повторяются имена колонок в настройках заполнения кодов ОСУ";
		КонецЕсли;	
		
	ИначеЕсли ИмяСценария = "ЗаполнениеСуммыАкциза" Тогда	
		
		Результат = ВалидацияНастроек_СуммаАкциза();
					
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПроверитьКорректностьНастроек()

&НаКлиенте
Функция ВалидацияНастроек_СуммаАкциза()
	
	Результат = ВалидацияНастроек_СуммаАкциза_ТаблицаРеализации();
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ВалидацияНастроек_СуммаАкциза_ТаблицаКорректировки();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ВалидацияНастроек_СуммаАкциза_ПодакцизныйТовар();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВалидацияНастроек_СуммаАкциза_ТаблицаРеализации()
	
	Для Каждого ПравилоЗаполненияУПД Из ПараметрыСценария_СуммаАкциза Цикл
			
		Если Не ЗначениеЗаполнено(ПравилоЗаполненияУПД.ДокументИнформационнойБазы) Тогда
			Результат = "В таблице ""Правила заполнения в УПД/ИУПД"" не заполнено поле ""Документ информационной базы""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУПД.ИмяТабличнойЧасти) Тогда
			Результат = "В таблице ""Правила заполнения в УПД/ИУПД"" не заполнено поле ""Табличная часть""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУПД.ИмяРеквизитаТабличнойЧасти) Тогда
			Результат = "В таблице ""Правила заполнения в УПД/ИУПД"" не заполнено поле ""Реквизит""";
		ИначеЕсли (ПравилоЗаполненияУПД.ПризнакПоДокументу_СпособЗаполнения <> "НеЗаполнять") 
					И Не ЗначениеЗаполнено(ПравилоЗаполненияУПД.ПризнакПоДокументу_Параметр) Тогда
			Результат = "В таблице ""Правила заполнения в УПД/ИУПД"" не заполнено поле ""Параметр""";
		Иначе
			Результат = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВалидацияНастроек_СуммаАкциза_ТаблицаКорректировки()
	
	Для Каждого ПравилоЗаполненияУКД Из ПараметрыСценария_СуммаАкциза_Корректировка Цикл
		
		Если Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ДокументИнформационнойБазы) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Документ информационной базы""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ИмяТабличнойЧасти) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Табличная часть""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ИмяРеквизитаТабличнойЧасти) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Реквизит""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ИмяТабличнойЧасти_ДоИзменения) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Табличная часть""";
		ИначеЕсли Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ИмяРеквизитаТабличнойЧасти_ДоИзменения) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Реквизит""";
		ИначеЕсли (ПравилоЗаполненияУКД.ПризнакПоДокументу_СпособЗаполнения <> "НеЗаполнять") 
					И Не ЗначениеЗаполнено(ПравилоЗаполненияУКД.ПризнакПоДокументу_Параметр) Тогда
			Результат = "В таблице ""Правила заполнения в УКД"" не заполнено поле ""Параметр""";
		Иначе
			Результат = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВалидацияНастроек_СуммаАкциза_ПодакцизныйТовар()
	
	ЭлементыОтбораНоменклатуры = КомпоновщикНастроекОтборНоменклатуры.Настройки.Отбор.Элементы;
	
	Результат = ВалидацияНастроек_СуммаАкциза_ПодакцизныйТовар_Рекурсивно(ЭлементыОтбораНоменклатуры);
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВалидацияНастроек_СуммаАкциза_ПодакцизныйТовар_Рекурсивно(КоллекцияЭлементовОтбора)
	
	Результат = "";
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ВалидацияНастроек_СуммаАкциза_ПодакцизныйТовар_Рекурсивно(ЭлементОтбора.Элементы);		
		Иначе
			
			Если Не ЗначениеЗаполнено(ЭлементОтбора.ЛевоеЗначение) Тогда
				Результат = "В настройках отбора по подакцизному товару есть строка с незаполненным полем отбора";
			Иначе
				Результат = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Процедура ВыполнитьСценарий(Команда)
	
	ПараметрыСобытия = СобратьОписаниеСценария();
	РезультатВыполнения = ВладелецФормы.ВладелецФормы.ПодключаемыйМодуль_ОбработатьСобытие("ВыполнитьСценарийВПесочнице", ПараметрыСобытия);
	РезультатыВыполнения = ПараметрыСобытия.РезультатПлагина;  // сохраним результат, чтобы просмотреть его
	ОбновитьМониторПеременных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМониторПеременных()

	СтруктураРезультата = ЗначениеИзСтрокиВнутр(РезультатыВыполнения);
	
	МониторПеременных.Очистить();
	
	Для Каждого КлючИЗначение Из СтруктураРезультата Цикл
		
		НовСтр = МониторПеременных.Добавить();
		
		НовСтр.Имя		= КлючИЗначение.Ключ;
		НовСтр.Значение	= Строка(КлючИЗначение.Значение);
		НовСтр.Тип		= ТипЗнч(КлючИЗначение.Значение);
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура МониторПеременныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Попытка
		ВызватьИсключение "отладка";
	Исключение
	КонецПопытки;	
	
	СтандартнаяОбработка = Ложь;
	
	ПодключитьБраузерОбъектовНаСервере();
	
	ТекСтрока = Элементы.МониторПеременных.ТекущиеДанные;
	
	// если текущая переменная имеет сложный тип (Структура, XDTO, ДокументОбъект/СправочникСсылка, то надо открыть отдельную форму, которая позволит переходить по полям объекта
	ИмяПеременной = ТекСтрока.Имя;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИсходныйОбъектИмя", ИмяПеременной);
	ПараметрыФормы.Вставить("ИсходныйОбъект", СериализоватьЭлементРезультатаВыполнения(ИмяПеременной));

	ОткрытьФорму("ВнешняяОбработка.Plugin_ObjectBrowser.Форма.БраузерОбъектаУправляемая", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СериализоватьЭлементРезультатаВыполнения(ИмяПеременной)

	СтруктураРезультата = ЗначениеИзСтрокиВнутр(РезультатыВыполнения);
	СериализованнаяПеременная = ЗначениеВСтрокуВнутр(СтруктураРезультата[ИмяПеременной]);
	Возврат СериализованнаяПеременная;

КонецФункции // СериализоватьЭлементРезультатаВыполнения()

&НаСервере
Функция ПодключитьБраузерОбъектовНаСервере()

	// TODO проверять, подключена ли уже обработка
	ПутьКФайлу = ПолучитьИмяВременногоФайла("epf");
	ОбработкаОбъект().ПолучитьМакет("БраузерОбъектов_epf").Записать(ПутьКФайлу);
	
	РежимРазработчика = Ложь;  //
	Если РежимРазработчика Тогда
		ПутьКФайлу = "c:\Git\plugins-storage-diadoc\build\Plugin_ObjectBrowser.epf"; // отладка
	КонецЕсли;
	
	ОбработкаБраузер = ВнешниеОбработки.Создать(ПутьКФайлу, Ложь);

КонецФункции // ПодключитьБраузерОбъектовНаСервере()

&НаКлиенте
Процедура ТипФильтраКонтрагентовПриИзменении(Элемент)
	
	НастроитьВидимостьФильтраКонтрагентов();
	
КонецПроцедуры
								
&НаКлиенте
Процедура НастроитьВидимостьФильтраКонтрагентов()

	Элементы.Контрагенты.Видимость = (ТипФильтраКонтрагентов = ВариантыФильтраКонтрагентов.ТолькоВыбранные.Значение
									Или ТипФильтраКонтрагентов = ВариантыФильтраКонтрагентов.КромеВыбранных.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ВизуальнаяНастройкаПриИзменении(Элемент)
	
	НастроитьВидимостьСтраниц();	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьСтраниц()
	
	ПримерКода = ПолучитьПримерКодаПоСценарию(ИмяСценария);	
	
	НужнаСтраницаКода				= ЗначениеЗаполнено(ПримерКода);
	НужнаСтраницаВизульнойНастройки = ЗначениеЗаполнено(ИмяЗакладки_ВизуальнаяНастройка);
	
	Если НужнаСтраницаКода И НужнаСтраницаВизульнойНастройки Тогда
		
		Элементы.СтраницаПроизвольныйКод.Видимость = НЕ ВизуальнаяНастройка;
		Элементы[ИмяЗакладки_ВизуальнаяНастройка].Видимость = ВизуальнаяНастройка;
		
	ИначеЕсли НужнаСтраницаКода И НЕ НужнаСтраницаВизульнойНастройки Тогда
		
		ВизуальнаяНастройка = Ложь;
		Элементы.ВизуальнаяНастройка.Видимость 				= Ложь;
		Элементы.СтраницаПроизвольныйКод.Видимость 			= Истина;
				
	ИначеЕсли НужнаСтраницаВизульнойНастройки И НЕ НужнаСтраницаКода Тогда
		
		ВизуальнаяНастройка = Истина;
		Элементы.ВизуальнаяНастройка.Видимость 				= Ложь;
		Элементы.СтраницаПроизвольныйКод.Видимость 			= Ложь;
		Элементы[ИмяЗакладки_ВизуальнаяНастройка].Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЭтаФорма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), "Измененные настройки не сохранены. Все равно закрыть?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьПримерКодаПоСценарию(ИмяСценария)
	
	ОписаниеСценария = ОбработкаОбъект().ОписаниеСценария(ИмяСценария);
	ПримерКода = ОписаниеСценария.ПримерКода;
	
	Возврат ПримерКода;
	
КонецФункции

&НаКлиенте
Процедура РазрешитьРедактированиеКода(Команда)
	
	Элементы.ВыполняемыйКод.ТолькоПросмотр = Ложь;
	Элементы.РазрешитьРедактированиеКода.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
// Отображает сохраненные настройки плагина на форме
Функция ПолучитьВариантыХраненияШтрихкода()

	ВариантыХраненияШтрихкода =  ОбработкаОбъект().ВариантыХраненияШтрихкода();
	Возврат ВариантыХраненияШтрихкода;

КонецФункции 

&НаСервере
Функция МассивРеквизитовСправочника(ИмяСправочника)
	
	Массив  = Новый Массив;
   	Справочник = Метаданные.Справочники[ИмяСправочника];
	
	Для каждого Реквизит Из Справочник.Реквизиты Цикл
		Массив.Добавить(Реквизит.Имя);
	КонецЦикла;	
	
	Если Справочник.ДлинаНаименования > 0 Тогда
		Массив.Добавить("Наименование");
	КонецЕсли;
	
	Массив.Добавить("Код");
	
	Возврат Массив;

КонецФункции 

&НаСервере
Функция ОчиститьПоле_КодТовара_Ссылка() 
	
	Если ПараметрСценария_КодТовара_Имя = "ДополнительныеСведения" Тогда
		ПараметрСценария_КодТовара_Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();  
	иначе
		ПараметрСценария_КодТовара_Ссылка = "";
	КонецЕсли;
	
КонецФункции    


&НаКлиенте
Процедура ПараметрСценария_КодТовара_ИмяПриИзменении(Элемент) 
	
	ИнициализоватьСценарийКодТовара(); 
	ОчиститьПоле_КодТовара_Ссылка();	
	
КонецПроцедуры
  
&НаСервере
Процедура ИнициализоватьСценарийКодТовара() 
	
	Элемент = Элементы.ПараметрСценария_КодТовара_Ссылка;
	Элемент.СписокВыбора.Очистить();
	Элемент.Видимость = ЗначениеЗаполнено(ПараметрСценария_КодТовара_Имя);
	
	Если ПараметрСценария_КодТовара_Имя = "РегистрСведений"  Тогда  
			
		Элемент.Заголовок = "Имя регистра сведений";
		НастроитьПолеВыбораНаСервере(Элемент, "Строка");
		ВариантыХраненияШК = ПолучитьВариантыХраненияШтрихкода().ВыгрузитьЗначения();
		Элемент.СписокВыбора.ЗагрузитьЗначения(ВариантыХраненияШК);
		
	ИначеЕсли ПараметрСценария_КодТовара_Имя = "РеквизитНоменклатуры"  Тогда 
		
		Элемент.Заголовок = "Имя реквизита";
		НастроитьПолеВыбораНаСервере(Элемент, "Строка");
		
		Реквизиты = МассивРеквизитовСправочника("Номенклатура");
		Элемент.СписокВыбора.ЗагрузитьЗначения(Реквизиты);
		Элемент.СписокВыбора.СортироватьПоЗначению();
		
	ИначеЕсли ПараметрСценария_КодТовара_Имя = "ХарактеристикаНомеклатуры"  Тогда 
		
		Элемент.Заголовок = "Имя реквизита";
		НастроитьПолеВыбораНаСервере(Элемент, "Строка");
		
		Реквизиты = МассивРеквизитовСправочника("ХарактеристикаНомеклатуры"); 
		Элемент.СписокВыбора.ЗагрузитьЗначения(Реквизиты);
		Элемент.СписокВыбора.СортироватьПоЗначению();
	
	ИначеЕсли ПараметрСценария_КодТовара_Имя = "ДополнительныеСведения"  Тогда  
		
		Элемент.Заголовок = "Дополнительное сведение";
		НастроитьПолеВыбораНаСервере(Элемент, "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолеВыбора(Элемент, ТипСтрокой, ПоказыватьКнопкуВыбора = Ложь)

	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтрокой);
	Элемент.ВыбиратьТип = Ложь; 
	Элемент.КнопкаВыбора = ПоказыватьКнопкуВыбора;
	//Элемент.КнопкаСпискаВыбора = ПоказыватьКнопкуСпискаВыбора;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеВыбораНаСервере(Элемент, ТипСтрокой, ПоказыватьКнопкуВыбора = Ложь)

	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтрокой);
	Элемент.ВыбиратьТип = Ложь; 
	Элемент.КнопкаВыбора = ПоказыватьКнопкуВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_ЗаполнениеКодовОСУСпособЗаполненияПриИзменении(Элемент)
	
	ПараметрыСценарияОСУ_НастроитьПолеПараметрТаблицыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_ЗаполнениеКодовОСУПриАктивизацииСтроки(Элемент)
	
	ПараметрыСценарияОСУ_НастроитьПолеПараметрТаблицыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияОСУ_НастроитьПолеПараметрТаблицыТоваров()

	ТекСтрока = Элементы.Параметры_ЗаполнениеКодовОСУ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ЗаполнениеКодовОСУ_Параметр;

	СпособЗаполнения = ТекСтрока.СпособЗаполнения;
	
	Если СпособЗаполнения = "РегистрШтрихкодов" Тогда
		
		// нет параметров
		НастроитьПолеВыбора(Элемент, "Неопределено");
		ТекСтрока.Параметр = Неопределено;
		
	ИначеЕсли СпособЗаполнения = "ДопСвойствоНоменклатуры" Тогда
		
		НастроитьПолеВыбора(Элемент, "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения", Истина);
		
	ИначеЕсли СпособЗаполнения = "РеквизитНоменклатуры" Тогда
		
		НастроитьПолеВыбора(Элемент, "Строка");
		
		Реквизиты = МассивРеквизитовСправочника("Номенклатура");
		Элемент.СписокВыбора.ЗагрузитьЗначения(Реквизиты);
		Элемент.СписокВыбора.СортироватьПоЗначению();
		
	ИначеЕсли СпособЗаполнения = "РеквизитУпаковки" Тогда
		
		НастроитьПолеВыбора(Элемент, "Строка");
		
		Реквизиты = МассивРеквизитовСправочника(ИмяСправочникаУпаковки());  // TODO неоптимально
		Элемент.СписокВыбора.ЗагрузитьЗначения(Реквизиты);
		Элемент.СписокВыбора.СортироватьПоЗначению();
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПараметрСценария_ОСУ_ПризнакВывода_СпособЗаполненияПриИзменении(Элемент)

	ПараметрСценария_ОСУ_ПризнакВывода_Параметр = Неопределено;
	ПараметрыСценарияОСУ_НастроитьПолеПараметрПризнакВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияОСУ_НастроитьПолеПараметрПризнакВывода()
	
	Элемент = Элементы.ПараметрСценария_ОСУ_ПризнакВывода_Параметр;

	СпособЗаполнения = ПараметрСценария_ОСУ_ПризнакВывода_СпособЗаполнения;
	
	Если СпособЗаполнения = "НеЗаполнять" Тогда
		
		ПараметрСценария_ОСУ_ПризнакВывода_Параметр = Неопределено;
		НастроитьПолеВыбора(Элемент, "Неопределено");
		
	ИначеЕсли СпособЗаполнения = "ДопСвойство" Тогда
		
		Элемент.СписокВыбора.Очистить();
		НастроитьПолеВыбора(Элемент, "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения", Истина);
		
	ИначеЕсли СпособЗаполнения = "РеквизитСправочника" Тогда
		
		НастроитьПолеВыбора(Элемент, "Строка");
		
		Если ПараметрСценария_ОСУ_ПризнакВывода_Источник = "Контрагент" Тогда
			Реквизиты = МассивРеквизитовСправочника("Контрагенты");
		ИначеЕсли ПараметрСценария_ОСУ_ПризнакВывода_Источник = "Договор" Тогда
			Реквизиты = МассивРеквизитовСправочника(ИмяСправочникаДоговоры());
		КонецЕсли;	
		
		Элемент.СписокВыбора.ЗагрузитьЗначения(Реквизиты);
		Элемент.СписокВыбора.СортироватьПоЗначению();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаДокументИнформационнойБазыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
	
		ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаРеализации_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаДокументИнформационнойБазыОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Элементы.ПараметрыСценария_СуммаАкцизаИмяТабличнойЧасти.СписокВыбора.Очистить();
	ТекущиеДанные.ИмяТабличнойЧасти 					= "";
		
	Элементы.ПараметрыСценария_СуммаАкцизаИмяРеквизитаТабличнойЧасти.СписокВыбора.Очистить(); 
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти 			= "";
	
	ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения 	= "";
	ТекущиеДанные.ПризнакПоДокументу_Параметр 			= Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаРеализации_ЗаполнитьСписокВыбора(ДокументИнформационнойБазы)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаИмяТабличнойЧасти.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИменаТабличныхЧастей = ИменаТабличныхЧастейДокументаИнформационнойБазы(ДокументИнформационнойБазы);
	СписокВыбора.ЗагрузитьЗначения(ИменаТабличныхЧастей);
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеДокументИБ(ПоддерживаемыеДокументы)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаДокументИнформационнойБазы.СписокВыбора;
	
	СписокВыбора.Очистить();
		
	Для Каждого ЭлементСписка Из ПоддерживаемыеДокументы Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеСпособЗаполнения()
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаПризнакПоДокументу_СпособЗаполнения.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("НеЗаполнять", "<не заполнять>");
	СписокВыбора.Добавить("РеквизитДокумента", "Реквизит документа");
	СписокВыбора.Добавить("ДопСвойствоДокумента", "Доп. сведение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаПризнакПоДокументу_СпособЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
			
	ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеПараметр();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаРеализации_НастроитьПолеПараметр()
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ПараметрыСценария_СуммаАкцизаПризнакПоДокументу_Параметр;
    Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные.ПризнакПоДокументу_Параметр = Неопределено;
		
	Если ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "НеЗаполнять" Тогда
		
		НастроитьПолеВыбора(Элемент, "Неопределено");
		
	ИначеЕсли ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "РеквизитДокумента" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
			
			НастроитьПолеВыбора(Элемент, "Строка");
		
			ИменаРеквизитов = ИменаРеквизитовШапкиДокументаИнформационнойБазы(ТекущиеДанные.ДокументИнформационнойБазы);
		
			Элемент.СписокВыбора.ЗагрузитьЗначения(ИменаРеквизитов);
			Элемент.СписокВыбора.СортироватьПоЗначению();	
			
		Иначе	
			
			ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "НеЗаполнять";
			НастроитьПолеВыбора(Элемент, "Неопределено");
			
			ТекстПредупреждения = НСтр("ru = 'Заполните поле ""Документ информационной базы""';");
			ПоказатьПредупреждение( , ТекстПредупреждения);
			
		КонецЕсли;
			
	ИначеЕсли ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "ДопСвойствоДокумента" Тогда
		
		НастроитьПолеВыбора(Элемент, "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения", Истина);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРеквизитовШапкиДокументаИнформационнойБазы(ИмяОбъектаМетаданных)
	
	Результат = Новый Массив;
	
	МетаданныеДокумента = Метаданные.Документы[ИмяОбъектаМетаданных];
	
	Для Каждого ЭлементРеквизиты Из МетаданныеДокумента.Реквизиты Цикл
		Результат.Добавить(ЭлементРеквизиты.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаТабличныхЧастейДокументаИнформационнойБазы(ИмяОбъектаМетаданных)
	
	Результат = Новый Массив;
	
	МетаданныеДокумента = Метаданные.Документы[ИмяОбъектаМетаданных];
	
	Для Каждого ЭлементТабличныеЧасти Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Результат.Добавить(ЭлементТабличныеЧасти.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ИмяОбъектаМетаданных, ИмяТЧ)
	
	Результат = Новый Массив;
	
	МетаданныеДокумента = Метаданные.Документы[ИмяОбъектаМетаданных];
	ТЧ = МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ];
	
	Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
		Результат.Добавить(РеквизитТЧ.Имя);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МетаданныеСправочникаИнформационнойБазы(ИмяОбъектаМетаданных)
	
	МетаданныеДокумента = Метаданные.Справочники[ИмяОбъектаМетаданных];
	
	Результат = Новый Структура;
	
	РеквизитыДокумента = Новый Массив;
	
	Для Каждого ЭлементРеквизиты Из МетаданныеДокумента.Реквизиты Цикл
		РеквизитыДокумента.Добавить(ЭлементРеквизиты.Имя);
	КонецЦикла;
	
	ТабличныеЧасти = Новый Массив;
	РеквизитыТабличныхЧастей = Новый Структура;
	
	Для Каждого ЭлементТабличныеЧасти Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ТабличныеЧасти.Добавить(ЭлементТабличныеЧасти.Имя);
		
		КоллекцияРеквизитовТЧ = Новый Массив;
		Для Каждого РеквизитТЧ Из ЭлементТабличныеЧасти.Реквизиты Цикл
			КоллекцияРеквизитовТЧ.Добавить(РеквизитТЧ.Имя);
		КонецЦикла;
		
		РеквизитыТабличныхЧастей.Вставить(ЭлементТабличныеЧасти.Имя, КоллекцияРеквизитовТЧ);
		
	КонецЦикла;
			
	Результат.Вставить("Реквизиты"					, РеквизитыДокумента);
	Результат.Вставить("ТабличныеЧасти"				, ТабличныеЧасти);
	Результат.Вставить("РеквизитыТабличныхЧастей"	, РеквизитыТабличныхЧастей);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаИмяТабличнойЧастиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти) Тогда
	
		ТаблицаРеализации_ИмяРеквизитаТабличнойЧасти_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаИмяТабличнойЧастиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти = "";
	Элементы.ПараметрыСценария_СуммаАкцизаИмяРеквизитаТабличнойЧасти.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализации_ИмяРеквизитаТабличнойЧасти_ЗаполнитьСписокВыбора(ДокументИнформационнойБазы, ИмяТабличнойЧасти)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаИмяРеквизитаТабличнойЧасти.СписокВыбора;
	СписокВыбора.Очистить();
			
	КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ДокументИнформационнойБазы, ИмяТабличнойЧасти);
	СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаДокументИнформационннойБазыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
	
		ИменаТабличныхЧастей = ИменаТабличныхЧастейДокументаИнформационнойБазы(ТекущиеДанные.ДокументИнформационнойБазы);
		
		ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеПараметр();
				
		СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзменения.СписокВыбора;
		СписокВыбора.Очистить();
				
		СписокВыбора.ЗагрузитьЗначения(ИменаТабличныхЧастей);
		
		СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти.СписокВыбора;
		СписокВыбора.Очистить();
				
		СписокВыбора.ЗагрузитьЗначения(ИменаТабличныхЧастей);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаДокументИнформационнойБазыОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзменения.СписокВыбора.Очистить();;
	ТекущиеДанные.ИмяТабличнойЧасти_ДоИзменения = "";
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти_ДоИзменения.СписокВыбора.Очистить();	
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти_ДоИзменения = "";
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти.СписокВыбора.Очистить();
	ТекущиеДанные.ИмяТабличнойЧасти = "";
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти.СписокВыбора.Очистить();
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти = "";
	
	ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения 	= "";
	ТекущиеДанные.ПризнакПоДокументу_Параметр 			= Неопределено; 

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзмененияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти_ДоИзменения) Тогда
	
		СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти_ДоИзменения.СписокВыбора;
		СписокВыбора.Очистить();
				
		КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти_ДоИзменения);
		СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзмененияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти_ДоИзменения.СписокВыбора.Очистить();
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти_ДоИзменения = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора_РеквизитыТабличнойЧасти(СписокВыбора, ИмяДокументаИБ, ИмяТабличнойЧасти)
	
	СписокВыбора.Очистить();
			
	КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ИмяДокументаИБ, ИмяТабличнойЧасти);
	СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧастиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти) Тогда
	
		СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти.СписокВыбора;
		СписокВыбора.Очистить();
				
		КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти);
		СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧастиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти.СписокВыбора.Очистить();
	ТекущиеДанные.ИмяРеквизитаТабличнойЧасти = "";
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеДокументИБ(ПоддерживаемыеДокументы)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаДокументИнформационнойБазы.СписокВыбора;
	
	СписокВыбора.Очистить();
			
	Для Каждого ЭлементСписка Из ПоддерживаемыеДокументы Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеСпособЗаполнения()
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаПризнакПоДокументу_СпособЗаполнения.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("НеЗаполнять", "<не заполнять>");
	СписокВыбора.Добавить("РеквизитДокумента", "Реквизит документа");
	СписокВыбора.Добавить("ДопСвойствоДокумента", "Доп. сведение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаПризнакПоДокументу_СпособЗаполненияПриИзменении(Элемент)
	
	ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеПараметр();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияСуммаАкциза_ТаблицаКорректировок_НастроитьПолеПараметр()
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаПризнакПоДокументу_Параметр;
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные.ПризнакПоДокументу_Параметр = Неопределено;
		
	Если ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "НеЗаполнять" Тогда
		
		НастроитьПолеВыбора(Элемент, "Неопределено");
		
	ИначеЕсли ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "РеквизитДокумента" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
        	
			НастроитьПолеВыбора(Элемент, "Строка");
			
			ИменаРеквизитов = ИменаРеквизитовШапкиДокументаИнформационнойБазы(ТекущиеДанные.ДокументИнформационнойБазы);
			
			Элемент.СписокВыбора.ЗагрузитьЗначения(ИменаРеквизитов);
			Элемент.СписокВыбора.СортироватьПоЗначению();
			
		Иначе
			
			ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "НеЗаполнять";
			НастроитьПолеВыбора(Элемент, "Неопределено");
			
			ТекстПредупреждения = НСтр("ru = 'Заполните поле ""Документ информационной базы""';");
			ПоказатьПредупреждение( , ТекстПредупреждения);
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = "ДопСвойствоДокумента" Тогда
		
		НастроитьПолеВыбора(Элемент, "ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения", Истина);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаИмяТабличнойЧасти.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
		ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаРеализации_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы);
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкцизаИмяРеквизитаТабличнойЧасти.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти) Тогда
		ТаблицаРеализации_ИмяРеквизитаТабличнойЧасти_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария_СуммаАкциза_Корректировка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзменения.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
		ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаКорректировки_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы);
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти_ДоИзменения.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти_ДоИзменения) Тогда
		ТаблицаКорректировки_ИмяРеквизитаТабличнойЧастиДоИзменения_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти_ДоИзменения);
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) Тогда
		ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаКорректировки_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы);
	КонецЕсли;
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти.СписокВыбора;
	Если СписокВыбора.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ДокументИнформационнойБазы) И ЗначениеЗаполнено(ТекущиеДанные.ИмяТабличнойЧасти) Тогда
		ТаблицаКорректировки_ИмяРеквизитаТабличнойЧасти_ЗаполнитьСписокВыбора(ТекущиеДанные.ДокументИнформационнойБазы, ТекущиеДанные.ИмяТабличнойЧасти);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_ИмяТабличнойЧасти_ТаблицаКорректировки_ЗаполнитьСписокВыбора(ДокументИнформационнойБазы)
	
	ИменаТабличныхЧастей = ИменаТабличныхЧастейДокументаИнформационнойБазы(ДокументИнформационнойБазы);
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти_ДоИзменения.СписокВыбора;
	СписокВыбора.Очистить();
			
	СписокВыбора.ЗагрузитьЗначения(ИменаТабличныхЧастей);
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяТабличнойЧасти.СписокВыбора;
	СписокВыбора.Очистить();
			
	СписокВыбора.ЗагрузитьЗначения(ИменаТабличныхЧастей);
	
КонецПроцедуры

Процедура ТаблицаКорректировки_ИмяРеквизитаТабличнойЧастиДоИзменения_ЗаполнитьСписокВыбора(ДокументИнформационнойБазы, ИмяТабличнойЧасти)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти_ДоИзменения.СписокВыбора;
	СписокВыбора.Очистить();
			
	КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ДокументИнформационнойБазы, ИмяТабличнойЧасти);
	СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировки_ИмяРеквизитаТабличнойЧасти_ЗаполнитьСписокВыбора(ДокументИнформационнойБазы, ИмяТабличнойЧасти)
	
	СписокВыбора = Элементы.ПараметрыСценария_СуммаАкциза_КорректировкаИмяРеквизитаТабличнойЧасти.СписокВыбора;
	СписокВыбора.Очистить();
			
	КоллекцияРеквизитов = ИменаРеквизитовТабличнойЧастиДокументаИнформационнойБазы(ДокументИнформационнойБазы, ИмяТабличнойЧасти);
	СписокВыбора.ЗагрузитьЗначения(КоллекцияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтборПодакцизныхТоваров(Команда)
	
	ТабличныйДокумент = ПолучитьПодакционныеТоварыНаСервере();
	ТабличныйДокумент.Показать("Товары попадающие под выбранные условия");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодакционныеТоварыНаСервере()
	
	Результат = ОбработкаОбъект().ТабличныйДокументСПодакционнымиТоварами(КомпоновщикНастроекОтборНоменклатуры.Настройки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
				
		ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = ПризнакПоДокументу_СпособЗаполнения_ЗначениеПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные.ПризнакПоДокументу_СпособЗаполнения = ПризнакПоДокументу_СпособЗаполнения_ЗначениеПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПризнакПоДокументу_СпособЗаполнения_ЗначениеПоУмолчанию()
	
	Возврат "НеЗаполнять";
	
КонецФункции

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкциза_КорректировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущееКоличествоСтрок = ПараметрыСценария_СуммаАкциза_Корректировка.Количество();
	
	Если ТекущееКоличествоСтрок = 1 Тогда
		
		Отказ = Истина;
		
		ПоказатьПредупреждение( , НСтр("ru = 'В таблице корректировок может быть только одна строка!';"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыДокументовЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если ТипыДокументов.НайтиПоЗначению(ВыбранноеЗначение) <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Тип документа """ + ВыбранноеЗначение + """ уже присутствует в списке отбора");
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценария_СуммаАкцизаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущееКоличествоСтрок = ПараметрыСценария_СуммаАкциза.Количество();
	
	Если ТекущееКоличествоСтрок = 2 Тогда
		
		Отказ = Истина;
		
		ПоказатьПредупреждение( , НСтр("ru = 'В таблице реализаций может быть только две строки!';"));
		
	КонецЕсли;
	
КонецПроцедуры


//{ Служебные методы

&НаСервере
Функция МассивВСписокЗначенийНаСервере(МассивИлиСписок)

	Если ТипЗнч(МассивИлиСписок) = Тип("Массив") Тогда
		
		Результат = Новый СписокЗначений;
		Результат.ЗагрузитьЗначения(МассивИлиСписок);
		
	ИначеЕсли ТипЗнч(МассивИлиСписок) = Тип("СписокЗначений") Тогда
		
		// Для совместимости со старым форматом хранения настроек
		Результат = МассивИлиСписок;
		
	Иначе
		
		ВызватьИсключение "Неверный тип параметра";
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

//{ Служебные методы
