&НаСервере
Перем КэшМодуляОбъекта;

&НаКлиенте
Перем КэшОсновногоМодуля;

&НаКлиенте
Перем ВыбранныеСценарии;

//{ События формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		// обработка запускается не в режиме плагина, а отдельно.
		Настройки = ПрочитатьНастройкиПлагина();
	КонецЕсли;	
	
	ПрименитьНастройкиПлагинаНаФормеНаСервере(Настройки);
	
	ВыбранныеСценарии = Новый Массив();
	
КонецПроцедуры

//} События формы

//{ Команды

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	СохраняемыеНастройки = НастройкиПлагинаВСтруктуру();
	ЗаписатьНастройкиПлагина(СохраняемыеНастройки);
		
	Закрыть();
	
КонецПроцедуры

//} Команды

//{ Служебные

&НаСервере
Функция МодульОбъекта()
	
	Если КэшМодуляОбъекта = Неопределено Тогда
		КэшМодуляОбъекта = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат КэшМодуляОбъекта;
	
КонецФункции

&НаКлиенте
Функция ОсновнойМодуль()
	
	Если КэшОсновногоМодуля = Неопределено Тогда 
		КэшОсновногоМодуля = ВладелецФормы;
	КонецЕсли;
	
	Возврат КэшОсновногоМодуля;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторПлагина()
	
	Манифест = МодульОбъекта().МанифестПлагина();
	
	Возврат Манифест.Идентификатор;
	
КонецФункции

//} Служебные

//{ Работа с настройками

&НаКлиенте
Функция НастройкиПлагинаВСтруктуру()

	Результат = Новый Структура;
	
	//Результат.Вставить("ФормироватьСчетНаОсновании", ФормироватьСчетНаОсновании);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПрочитатьНастройкиПлагина()

	Результат = Неопределено;
	
	Идентификатор = ПолучитьИдентификаторПлагина();
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Идентификатор"	, Идентификатор);
	ПараметрыКоманды.Вставить("Результат"		, Результат);
	
	ОбработатьСлужебнуюКоманду("Плагин_ПолучитьНастройки", ПараметрыКоманды);
	
	Если ПараметрыКоманды.Результат.Успешно Тогда
		Результат = ПараметрыКоманды.Результат.Данные;
	КонецЕсли;
	
    Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройкиПлагина(Настройки)

	Идентификатор = ПолучитьИдентификаторПлагина();
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Идентификатор"	, Идентификатор);
	ПараметрыКоманды.Вставить("Настройки"		, Настройки);
	ПараметрыКоманды.Вставить("Результат"		, Неопределено);
	
	ОбработатьСлужебнуюКоманду("Плагин_СохранитьНастройки", ПараметрыКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиПлагинаНаФормеНаСервере(Настройки)
	
	//ВариантыФормированияСчета = МодульОбъекта().ДоступныеВариантыНастроек();
	//
	//Для Каждого ЭлементСписка Из ВариантыФормированияСчета Цикл
	//	Элементы.ФормироватьСчетНаОсновании.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);	
	//КонецЦикла;
	//		
	//Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	//	Настройки.Свойство("ФормироватьСчетНаОсновании", ФормироватьСчетНаОсновании);
	//КонецЕсли;	
	//
	//Если Не ЗначениеЗаполнено(ФормироватьСчетНаОсновании) Тогда
	//	ФормироватьСчетНаОсновании = МодульОбъекта().ФормироватьСчетНаОсновании_ЗначениеПоУмолчанию();
	//КонецЕсли;
	
	
	
	
	ЭтаФорма.Заголовок = МодульОбъекта().Метаданные().Синоним + " \ " + МодульОбъекта().ВерсияОбработки();
	
	ТаблицаСценариев = МодульОбъекта().РаспаковатьСценарии();
	
	ЗаполнитьДеревоСценариев(ТаблицаСценариев);
	
	
	
КонецПроцедуры

//} Работа с настройками

//{ Обертки

&НаКлиенте
Процедура ОбработатьСлужебнуюКоманду(ИмяКоманды, ПараметрыКоманды)
	
	ОсновнойМодуль().КонтурПлагины_ОбработатьСлужебнуюКоманду(ИмяКоманды, ПараметрыКоманды);
	
КонецПроцедуры

//} Обертки


&НаСервере
Процедура ЗаполнитьДеревоСценариев(ТаблицаСценариев)

	ДеревоСценариев = РеквизитФормыВЗначение("Сценарии", Тип("ДеревоЗначений"));
	ДеревоСценариев.Строки.Очистить();
	МодульОбъекта().ДобавитьСценарииВДеревоИзТаблицы(ДеревоСценариев, ТаблицаСценариев);
	ЗначениеВРеквизитФормы(ДеревоСценариев, "Сценарии");
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарииФлажокПриИзменении(Элемент)
	
	ТекДанные = Элементы.Сценарии.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.ПутьКФайлу) Тогда
		ТекДанные.Флажок = Ложь;
	Иначе
		ДобавитьУдалитьСценарий();
		ОбновитьРезультат(ВыбранныеСценарии);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СценарииПриАктивизацииСтрокиНаСервере()
	
	ИдентификаторСтроки = Элементы.Сценарии.ТекущаяСтрока;
	ТекСтрока = Сценарии.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппаСценариевнаСервере(ТекСтрока) Тогда
		ОписаниеСценария = "";
		Возврат;
	КонецЕсли;
	
	СтруктураФайла = МодульОбъекта().СтруктураФайлаШаблона(ТекСтрока.ПутьКФайлу);
	ОписаниеСценария = СтруктураФайла.Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииПриАктивизацииСтроки(Элемент)
	
	СценарииПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ЭтоГруппаСценариевнаСервере(ТекСтрока)
	
	Возврат Не ЗначениеЗаполнено(ТекСтрока.ПутьКФайлу);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьУдалитьСценарий()
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	ФлажокВключен = ТекущиеДанные.Флажок;
	
	ПутьКФайлу = ТекущиеДанные.ПутьКФайлу;
	
	Если ФлажокВключен Тогда
		ВыбранныеСценарии.Добавить(ПутьКФайлу);
	Иначе
		
		Инд = ВыбранныеСценарии.Найти(ПутьКФайлу);
		
		Если Инд <> Неопределено Тогда
			ВыбранныеСценарии.Удалить(Инд);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультат(ВыбранныеСценарии)

	ТекстПМ = "";
	
	ДеревоСценариев = РеквизитФормыВЗначение("Сценарии", Тип("ДеревоЗначений"));
	
	Если ВыбранныеСценарии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстШаблона = МодульОбъекта().ГенерироватьТекстПодключаемогоМодуля(ВыбранныеСценарии);
	ТекстПМ = ТекстШаблона.ПолучитьТекст();

КонецПроцедуры

&НаКлиенте
Процедура ПересоздатьКаталог(ЗНАЧ Каталог) Экспорт
	
	Ф = Новый Файл(Каталог);
	
	Если Ф.Существует() Тогда
		УдалитьФайлы(Каталог);
	КонецЕсли;
	
	СоздатьКаталог(Каталог);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИмяФайлаПодключаемогоМодуляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "EPF|*.epf";
	
	Диалог.Показать(Новый ОписаниеОповещения("ИмяФайлаПодключаемогоМодуляНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодключаемогоМодуляНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайлаПодключаемогоМодуля = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КомпилироватьПМ(Команда)

	Если ПустаяСтрока(Объект.ИмяФайлаПодключаемогоМодуля) Тогда
		Предупреждение("Не указано имя файла подключаемого модуля!");
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеШаблонаОбработки = ДвоичныеДанныеМакетаНаСервере("template_epf_unpack_zip");
	ДвоичныеДанныеUnpackExe = ДвоичныеДанныеМакетаНаСервере("Unpackv8_exe");
	
	// 1. Из макета распаковать архив разобранной обработки
	ИмяВременногоПодкаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	
	ПересоздатьКаталог(ИмяВременногоПодкаталога);
	
	ИмяВремФайлаАрхива = ИмяВременногоПодкаталога + "template_epf_unpack.zip";
	ДвоичныеДанныеШаблонаОбработки.Записать(ИмяВремФайлаАрхива);
	ЧтениеЗип = Новый ЧтениеZipФайла(ИмяВремФайлаАрхива);
	ЧтениеЗип.ИзвлечьВсе(ИмяВременногоПодкаталога);
	
	// 2. Записать текст модуля
	ИмяВременногоКаталогаОбработки = ИмяВременногоПодкаталога + "template.epf.unpack";
	ИмяКаталогаСМодулем = "e3f2105f-e2dc-453b-9a89-d2a18f1b59a0.0";
	ИмяФайлаМодуляОбъекта = ИмяВременногоКаталогаОбработки + "\" + ИмяКаталогаСМодулем + "\text";
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстПМ);
	ТД.УстановитьТипФайла();
	
	ТД.Записать(ИмяФайлаМодуляОбъекта, КодировкаТекста.UTF8);
	
	// 3. Извлечь v8unpack
	ИмяВремФайла_Анпак = ИмяВременногоПодкаталога + "Unpackv8.exe";
	ДвоичныеДанныеUnpackExe.Записать(ИмяВремФайла_Анпак);
	
	// 4. Скомпилировать рядом с текущей обработкой
	Команда = """" + ИмяВремФайла_Анпак + """ -build """ + ИмяВременногоКаталогаОбработки + """ """ + Объект.ИмяФайлаПодключаемогоМодуля + """";
	//КомандаСистемы(Команда);
	ЗапуститьПриложение(Команда, , Истина);
	
	//5. Почистить за собой
	УдалитьФайлы(ИмяВременногоПодкаталога);

	ПоказатьПредупреждение(, "ПМ скомпилирован");
	
КонецПроцедуры

&НаСервере
Функция ДвоичныеДанныеМакетаНаСервере(ИмяМакета)
	Возврат МодульОбъекта().ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура СброситьВыбранные(Команда)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("СброситьВыбранныеПослеОтветаНаВопрос", ЭтаФорма);
	
	ТекстВопроса = "Все выбранные сценарии будут сброшены. Продолжить?";
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыбранныеПослеОтветаНаВопрос(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СброситьВыбранныеСценарииНаСервере();
	
	ВыбранныеСценарии.Очистить();
	
	ОбновитьРезультат(ВыбранныеСценарии);
	
КонецПроцедуры

&НаСервере
Процедура СброситьВыбранныеСценарииНаСервере()

	ДеревоСценариев = РеквизитФормыВЗначение("Сценарии", Тип("ДеревоЗначений"));
	
	СброситьВыбранныеСценарииРекурсивноНаСервере(ДеревоСценариев.Строки);
	
	ЗначениеВРеквизитФормы(ДеревоСценариев, "Сценарии");
	
КонецПроцедуры

&НаСервере
Процедура СброситьВыбранныеСценарииРекурсивноНаСервере(СтрокиДерева)
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		
		ТекСтрока.Флажок = Ложь;
		
		СброситьВыбранныеСценарииРекурсивноНаСервере(ТекСтрока.Строки);
		
	КонецЦикла;
	
КонецПроцедуры
